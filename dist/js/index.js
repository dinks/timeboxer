(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/index.js":[function(require,module,exports){
timeboxer_routes = require('./routers/timeboxer_routes.js');

timeboxer_routes.start();
},{"./routers/timeboxer_routes.js":"/Users/surian/Sites/Private/timeboxer/src/js/routers/timeboxer_routes.js"}],"/Users/surian/Sites/Private/timeboxer/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js":[function(require,module,exports){
;(function() {

var riot = require('riot/riot')
var flux_riot = { version: '0.2.0' }

'use strict'

flux_riot.BaseStore = (function() {

  var CHANGE_EVENT = 'STORE_CHANGE_EVENT'

  function BaseStore() {
    riot.observable(this)
  }

  BaseStore.prototype = {
    addChangeListener: function(callback) {
      this.on(CHANGE_EVENT, callback)
    },

    removeChangeListener: function(callback) {
      this.off(CHANGE_EVENT, callback)
    },

    emitChange: function() {
      this.trigger(CHANGE_EVENT)
    }
  }

  return BaseStore

})()

flux_riot.storeMixin = function(tag, store, callback) {

  tag.store = store

  tag.on('mount', function() {
    return store.addChangeListener(callback)
  })

  tag.on('unmount', function() {
    return store.removeChangeListener(callback)
  })

}

flux_riot.BaseRouter = (function() {

  var regexFuncs = []

  function regexTransfer(path) {
    var parts = path.split('/')
    var regexParts = []
    for (var i = 0; i < parts.length; i++) {
      var part = parts[i]
      if (!(part && part.length > 0)) continue

      if (part[0] === ':') {
        regexParts.push('((?:(?!\\/).)+?)')
      } else {
        regexParts.push(part)
      }
    }
    return RegExp("^" + (regexParts.join('\\/')) + "\\/?$", "i")
  }

  function route(path) {
    if (regexFuncs.length === 0) return

    if (path === '') return regexFuncs[0][1].apply(null, [])

    for (var i = 1; i < regexFuncs.length; i++) {
      var regexFunc = regexFuncs[i]
      var m = path.match(regexFunc[0])
      if (m != null) return regexFunc[1].apply(null, m.slice(1))
    }
  }

  function routes() {
    if (!(arguments.length > 0)) return

    regexFuncs.push([ '', arguments[0] ])
    for (var i = 1; i < arguments.length; i += 2) {
      regex = regexTransfer(arguments[i])
      regexFuncs.push([ regex, arguments[i + 1] ])
    }
  }

  function start(r) {
    return riot.route.exec(r || route)
  }

  riot.route.parser(function(path) { return [path] })
  riot.route(route)

  return {
    routes: routes,
    start: start
  }

})()

flux_riot.Constants = {
  ActionSources: {
    SERVER_ACTION: 'SERVER_ACTION',
    VIEW_ACTION: 'VIEW_ACTION'
  }
}

var Dispatcher = require('flux').Dispatcher
var assign = require('object-assign')

flux_riot.Dispatcher = assign(new Dispatcher(), {
  handleServerAction: function(action) {
    return this.handleAction(action, flux_riot.Constants.ActionSources.SERVER_ACTION)
  },

  handleViewAction: function(action) {
    return this.handleAction(action, flux_riot.Constants.ActionSources.VIEW_ACTION)
  },

  handleAction: function(action, source) {
    return this.dispatch({
      source: source,
      action: action
    })
  }
})


module.exports = flux_riot

})();

},{"flux":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/node_modules/flux/index.js","object-assign":"/Users/surian/Sites/Private/timeboxer/node_modules/object-assign/index.js","riot/riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/node_modules/flux/index.js":[function(require,module,exports){
/**
 * Copyright (c) 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

module.exports.Dispatcher = require('./lib/Dispatcher')

},{"./lib/Dispatcher":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/node_modules/flux/lib/Dispatcher.js"}],"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/node_modules/flux/lib/Dispatcher.js":[function(require,module,exports){
/*
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Dispatcher
 * @typechecks
 */

"use strict";

var invariant = require('./invariant');

var _lastID = 1;
var _prefix = 'ID_';

/**
 * Dispatcher is used to broadcast payloads to registered callbacks. This is
 * different from generic pub-sub systems in two ways:
 *
 *   1) Callbacks are not subscribed to particular events. Every payload is
 *      dispatched to every registered callback.
 *   2) Callbacks can be deferred in whole or part until other callbacks have
 *      been executed.
 *
 * For example, consider this hypothetical flight destination form, which
 * selects a default city when a country is selected:
 *
 *   var flightDispatcher = new Dispatcher();
 *
 *   // Keeps track of which country is selected
 *   var CountryStore = {country: null};
 *
 *   // Keeps track of which city is selected
 *   var CityStore = {city: null};
 *
 *   // Keeps track of the base flight price of the selected city
 *   var FlightPriceStore = {price: null}
 *
 * When a user changes the selected city, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'city-update',
 *     selectedCity: 'paris'
 *   });
 *
 * This payload is digested by `CityStore`:
 *
 *   flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'city-update') {
 *       CityStore.city = payload.selectedCity;
 *     }
 *   });
 *
 * When the user selects a country, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'country-update',
 *     selectedCountry: 'australia'
 *   });
 *
 * This payload is digested by both stores:
 *
 *    CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       CountryStore.country = payload.selectedCountry;
 *     }
 *   });
 *
 * When the callback to update `CountryStore` is registered, we save a reference
 * to the returned token. Using this token with `waitFor()`, we can guarantee
 * that `CountryStore` is updated before the callback that updates `CityStore`
 * needs to query its data.
 *
 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       // `CountryStore.country` may not be updated.
 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
 *       // `CountryStore.country` is now guaranteed to be updated.
 *
 *       // Select the default city for the new country
 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
 *     }
 *   });
 *
 * The usage of `waitFor()` can be chained, for example:
 *
 *   FlightPriceStore.dispatchToken =
 *     flightDispatcher.register(function(payload) {
 *       switch (payload.actionType) {
 *         case 'country-update':
 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
 *           FlightPriceStore.price =
 *             getFlightPriceStore(CountryStore.country, CityStore.city);
 *           break;
 *
 *         case 'city-update':
 *           FlightPriceStore.price =
 *             FlightPriceStore(CountryStore.country, CityStore.city);
 *           break;
 *     }
 *   });
 *
 * The `country-update` payload will be guaranteed to invoke the stores'
 * registered callbacks in order: `CountryStore`, `CityStore`, then
 * `FlightPriceStore`.
 */

  function Dispatcher() {
    this.$Dispatcher_callbacks = {};
    this.$Dispatcher_isPending = {};
    this.$Dispatcher_isHandled = {};
    this.$Dispatcher_isDispatching = false;
    this.$Dispatcher_pendingPayload = null;
  }

  /**
   * Registers a callback to be invoked with every dispatched payload. Returns
   * a token that can be used with `waitFor()`.
   *
   * @param {function} callback
   * @return {string}
   */
  Dispatcher.prototype.register=function(callback) {
    var id = _prefix + _lastID++;
    this.$Dispatcher_callbacks[id] = callback;
    return id;
  };

  /**
   * Removes a callback based on its token.
   *
   * @param {string} id
   */
  Dispatcher.prototype.unregister=function(id) {
    invariant(
      this.$Dispatcher_callbacks[id],
      'Dispatcher.unregister(...): `%s` does not map to a registered callback.',
      id
    );
    delete this.$Dispatcher_callbacks[id];
  };

  /**
   * Waits for the callbacks specified to be invoked before continuing execution
   * of the current callback. This method should only be used by a callback in
   * response to a dispatched payload.
   *
   * @param {array<string>} ids
   */
  Dispatcher.prototype.waitFor=function(ids) {
    invariant(
      this.$Dispatcher_isDispatching,
      'Dispatcher.waitFor(...): Must be invoked while dispatching.'
    );
    for (var ii = 0; ii < ids.length; ii++) {
      var id = ids[ii];
      if (this.$Dispatcher_isPending[id]) {
        invariant(
          this.$Dispatcher_isHandled[id],
          'Dispatcher.waitFor(...): Circular dependency detected while ' +
          'waiting for `%s`.',
          id
        );
        continue;
      }
      invariant(
        this.$Dispatcher_callbacks[id],
        'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',
        id
      );
      this.$Dispatcher_invokeCallback(id);
    }
  };

  /**
   * Dispatches a payload to all registered callbacks.
   *
   * @param {object} payload
   */
  Dispatcher.prototype.dispatch=function(payload) {
    invariant(
      !this.$Dispatcher_isDispatching,
      'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'
    );
    this.$Dispatcher_startDispatching(payload);
    try {
      for (var id in this.$Dispatcher_callbacks) {
        if (this.$Dispatcher_isPending[id]) {
          continue;
        }
        this.$Dispatcher_invokeCallback(id);
      }
    } finally {
      this.$Dispatcher_stopDispatching();
    }
  };

  /**
   * Is this Dispatcher currently dispatching.
   *
   * @return {boolean}
   */
  Dispatcher.prototype.isDispatching=function() {
    return this.$Dispatcher_isDispatching;
  };

  /**
   * Call the callback stored with the given id. Also do some internal
   * bookkeeping.
   *
   * @param {string} id
   * @internal
   */
  Dispatcher.prototype.$Dispatcher_invokeCallback=function(id) {
    this.$Dispatcher_isPending[id] = true;
    this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload);
    this.$Dispatcher_isHandled[id] = true;
  };

  /**
   * Set up bookkeeping needed when dispatching.
   *
   * @param {object} payload
   * @internal
   */
  Dispatcher.prototype.$Dispatcher_startDispatching=function(payload) {
    for (var id in this.$Dispatcher_callbacks) {
      this.$Dispatcher_isPending[id] = false;
      this.$Dispatcher_isHandled[id] = false;
    }
    this.$Dispatcher_pendingPayload = payload;
    this.$Dispatcher_isDispatching = true;
  };

  /**
   * Clear bookkeeping used for dispatching.
   *
   * @internal
   */
  Dispatcher.prototype.$Dispatcher_stopDispatching=function() {
    this.$Dispatcher_pendingPayload = null;
    this.$Dispatcher_isDispatching = false;
  };


module.exports = Dispatcher;

},{"./invariant":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/node_modules/flux/lib/invariant.js"}],"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/node_modules/flux/lib/invariant.js":[function(require,module,exports){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (false) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],"/Users/surian/Sites/Private/timeboxer/node_modules/keymirror/index.js":[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

"use strict";

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  if (!(obj instanceof Object && !Array.isArray(obj))) {
    throw new Error('keyMirror(...): Argument must be an object.');
  }
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{}],"/Users/surian/Sites/Private/timeboxer/node_modules/object-assign/index.js":[function(require,module,exports){
'use strict';

function ToObject(val) {
	if (val == null) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

module.exports = Object.assign || function (target, source) {
	var from;
	var keys;
	var to = ToObject(target);

	for (var s = 1; s < arguments.length; s++) {
		from = arguments[s];
		keys = Object.keys(Object(from));

		for (var i = 0; i < keys.length; i++) {
			to[keys[i]] = from[keys[i]];
		}
	}

	return to;
};

},{}],"/Users/surian/Sites/Private/timeboxer/node_modules/parse/build/parse-latest.js":[function(require,module,exports){
(function (process){
/*!
 * Parse JavaScript SDK
 * Version: 1.5.0
 * Built: Fri Jul 10 2015 17:05:46
 * http://parse.com
 *
 * Copyright 2015 Parse, LLC
 *
 * Includes: Underscore.js
 * Copyright 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
 * Released under the MIT license.
 */
(function(root) {
  root.Parse = root.Parse || {};
  root.Parse.VERSION = "js1.5.0";
}(this));
//     Underscore.js 1.4.4
//     http://underscorejs.org
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.4.4';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs, first) {
    if (_.isEmpty(attrs)) return first ? null : [];
    return _[first ? 'find' : 'filter'](obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.where(obj, attrs, true);
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value || _.identity);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    var args = slice.call(arguments, 2);
    return function() {
      return func.apply(context, args.concat(slice.call(arguments)));
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context.
  _.partial = function(func) {
    var args = slice.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, result;
    var previous = 0;
    var later = function() {
      previous = new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] == null) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent, but `Object`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(n);
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);

/*global _: false, $: false, localStorage: false, process: true,
  XMLHttpRequest: false, XDomainRequest: false, exports: false,
  require: false, setTimeout: true */
(function(root) {
  root.Parse = root.Parse || {};
  /**
   * Contains all Parse API classes and functions.
   * @name Parse
   * @namespace
   *
   * Contains all Parse API classes and functions.
   */
  var Parse = root.Parse;

  var req = typeof(require) === 'function' ? require : null;
  // Load references to other dependencies
  if (typeof(XMLHttpRequest) !== 'undefined') {
    Parse.XMLHttpRequest = XMLHttpRequest;
  } else if (typeof(require) === 'function' &&
      typeof(require.ensure) === 'undefined') {
    Parse.XMLHttpRequest = req('xmlhttprequest').XMLHttpRequest;
  }
  // Import Parse's local copy of underscore.
  if (typeof(exports) !== 'undefined' && exports._) {
    // We're running in a CommonJS environment
    Parse._ = exports._.noConflict();
    exports.Parse = Parse;
  } else {
    Parse._ = _.noConflict();
  }

  // If jQuery or Zepto has been included, grab a reference to it.
  if (typeof($) !== "undefined") {
    Parse.$ = $;
  }

  // Helpers
  // -------

  // Shared empty constructor function to aid in prototype-chain creation.
  var EmptyConstructor = function() {};

  // TODO: fix this so that ParseObjects aren't all called "child" in debugger.
  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var inherits = function(parent, protoProps, staticProps) {
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && protoProps.hasOwnProperty('constructor')) {
      child = protoProps.constructor;
    } else {
      /** @ignore */
      child = function(){ parent.apply(this, arguments); };
    }

    // Inherit class (static) properties from parent.
    Parse._.extend(child, parent);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    EmptyConstructor.prototype = parent.prototype;
    child.prototype = new EmptyConstructor();

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) {
      Parse._.extend(child.prototype, protoProps);
    }

    // Add static properties to the constructor function, if supplied.
    if (staticProps) {
      Parse._.extend(child, staticProps);
    }

    // Correctly set child's `prototype.constructor`.
    child.prototype.constructor = child;

    // Set a convenience property in case the parent's prototype is
    // needed later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set the server for Parse to talk to.
  Parse.serverURL = "https://api.parse.com";

  // Check whether we are running in Node.js.
  if (typeof(process) !== "undefined" &&
      process.versions &&
      process.versions.node) {
    Parse._isNode = true;
  }

  /**
   * Call this method first to set up your authentication tokens for Parse.
   * You can get your keys from the Data Browser on parse.com.
   * @param {String} applicationId Your Parse Application ID.
   * @param {String} javaScriptKey Your Parse JavaScript Key.
   * @param {String} masterKey (optional) Your Parse Master Key. (Node.js only!)
   */
  Parse.initialize = function(applicationId, javaScriptKey, masterKey) {
    if (masterKey) {
      throw "Parse.initialize() was passed a Master Key, which is only " +
        "allowed from within Node.js.";
    }
    Parse._initialize(applicationId, javaScriptKey);
  };

  /**
   * Call this method first to set up master authentication tokens for Parse.
   * This method is for Parse's own private use.
   * @param {String} applicationId Your Parse Application ID.
   * @param {String} javaScriptKey Your Parse JavaScript Key.
   * @param {String} masterKey Your Parse Master Key.
   */
  Parse._initialize = function(applicationId, javaScriptKey, masterKey) {
    Parse.applicationId = applicationId;
    Parse.javaScriptKey = javaScriptKey;
    Parse.masterKey = masterKey;
    Parse._useMasterKey = false;
  };

  // If we're running in node.js, allow using the master key.
  if (Parse._isNode) {
    Parse.initialize = Parse._initialize;

    Parse.Cloud = Parse.Cloud || {};
    /**
     * Switches the Parse SDK to using the Master key.  The Master key grants
     * priveleged access to the data in Parse and can be used to bypass ACLs and
     * other restrictions that are applied to the client SDKs.
     * <p><strong><em>Available in Cloud Code and Node.js only.</em></strong>
     * </p>
     */
    Parse.Cloud.useMasterKey = function() {
      Parse._useMasterKey = true;
    };
  }

  /**
   * Returns prefix for Storage keys used by this instance of Parse.
   * @param {String} path The relative suffix to append to it.
   *     null or undefined is treated as the empty string.
   * @return {String} The full key name.
   */
  Parse._getParsePath = function(path) {
    if (!Parse.applicationId) {
      throw "You need to call Parse.initialize before using Parse.";
    }
    if (!path) {
      path = "";
    }
    if (!Parse._.isString(path)) {
      throw "Tried to get a Storage path that wasn't a String.";
    }
    if (path[0] === "/") {
      path = path.substring(1);
    }
    return "Parse/" + Parse.applicationId + "/" + path;
  };

  /**
   * Returns a Promise that is resolved with the unique string for this app on
   * this machine.
   * Gets reset when Storage is cleared.
   */
  Parse._installationId = null;
  Parse._getInstallationId = function() {
    // See if it's cached in RAM.
    if (Parse._installationId) {
      return Parse.Promise.as(Parse._installationId);
    }

    // Try to get it from Storage.
    var path = Parse._getParsePath("installationId");
    return (Parse.Storage.getItemAsync(path)
      .then(function(value) {
        Parse._installationId = value;

        if (!Parse._installationId || Parse._installationId === "") {
          // It wasn't in Storage, so create a new one.
          var hexOctet = function() {
            return (
              Math.floor((1+Math.random())*0x10000).toString(16).substring(1)
            );
          };
          Parse._installationId = (
            hexOctet() + hexOctet() + "-" +
            hexOctet() + "-" +
            hexOctet() + "-" +
            hexOctet() + "-" +
            hexOctet() + hexOctet() + hexOctet());
          return Parse.Storage.setItemAsync(path, Parse._installationId);
        }

        return Parse.Promise.as(Parse._installationId);
      })
    );
  };

  Parse._parseDate = function(iso8601) {
    var regexp = new RegExp(
      "^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})" + "T" +
      "([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})" +
      "(.([0-9]+))?" + "Z$");
    var match = regexp.exec(iso8601);
    if (!match) {
      return null;
    }

    var year = match[1] || 0;
    var month = (match[2] || 1) - 1;
    var day = match[3] || 0;
    var hour = match[4] || 0;
    var minute = match[5] || 0;
    var second = match[6] || 0;
    var milli = match[8] || 0;

    return new Date(Date.UTC(year, month, day, hour, minute, second, milli));
  };

  Parse._ajaxIE8 = function(method, url, data) {
    var promise = new Parse.Promise();
    var xdr = new XDomainRequest();
    xdr.onload = function() {
      var response;
      try {
        response = JSON.parse(xdr.responseText);
      } catch (e) {
        promise.reject(e);
      }
      if (response) {
        promise.resolve(response);
      }
    };
    xdr.onerror = xdr.ontimeout = function() {
      // Let's fake a real error message.
      var fakeResponse = {
        responseText: JSON.stringify({
          code: Parse.Error.X_DOMAIN_REQUEST,
          error: "IE's XDomainRequest does not supply error info."
        })
      };
      promise.reject(fakeResponse);
    };
    xdr.onprogress = function() {};
    xdr.open(method, url);
    xdr.send(data);
    return promise;
  };

  Parse._useXDomainRequest = function() {
    if (typeof(XDomainRequest) !== "undefined") {
      // We're in IE 8+.
      if ('withCredentials' in new XMLHttpRequest()) {
        // We're in IE 10+.
        return false;
      }
      return true;
    }
    return false;
  };

  // TODO(klimt): Get rid of success/error usage in website.
  Parse._ajax = function(method, url, data, success, error) {
    var options = {
      success: success,
      error: error
    };

    if (Parse._useXDomainRequest()) {
      return Parse._ajaxIE8(method, url, data)._thenRunCallbacks(options);
    }

    var promise = new Parse.Promise();
    var attempts = 0;

    var dispatch = function() {
      var handled = false;
      var xhr = new Parse.XMLHttpRequest();

      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          if (handled) {
            return;
          }
          handled = true;

          if (xhr.status >= 200 && xhr.status < 300) {
            var response;
            try {
              response = JSON.parse(xhr.responseText);
            } catch (e) {
              promise.reject(e);
            }
            if (response) {
              promise.resolve(response, xhr.status, xhr);
            }
          } else if (xhr.status >= 500) { // Retry on 5XX
            if (++attempts < 5) {
              // Exponentially-growing delay
              var delay = Math.round(
                Math.random() * 125 * Math.pow(2, attempts)
              );
              setTimeout(dispatch, delay);
            } else {
              // After 5 retries, fail
              promise.reject(xhr);
            }
          } else {
            promise.reject(xhr);
          }
        }
      };

      xhr.open(method, url, true);
      xhr.setRequestHeader('Content-Type', 'text/plain');  // avoid pre-flight.
      if (Parse._isNode) {
        // Add a special user agent just for request from node.js.
        xhr.setRequestHeader("User-Agent",
                             "Parse/" + Parse.VERSION +
                             " (NodeJS " + process.versions.node + ")");
      }
      xhr.send(data);
    };

    dispatch();
    return promise._thenRunCallbacks(options); 
  };

  // A self-propagating extend function.
  Parse._extend = function(protoProps, classProps) {
    var child = inherits(this, protoProps, classProps);
    child.extend = this.extend;
    return child;
  };

  /**
   * Options:
   *   route: is classes, users, login, etc.
   *   objectId: null if there is no associated objectId.
   *   method: the http method for the REST API.
   *   dataObject: the payload as an object, or null if there is none.
   *   useMasterKey: overrides whether to use the master key if set.
   * @ignore
   */
  Parse._request = function(options) {
    var route = options.route;
    var className = options.className;
    var objectId = options.objectId;
    var method = options.method;
    var useMasterKey = options.useMasterKey;
    var sessionToken = options.sessionToken;
    var dataObject = options.data;

    if (!Parse.applicationId) {
      throw "You must specify your applicationId using Parse.initialize.";
    }

    if (!Parse.javaScriptKey && !Parse.masterKey) {
      throw "You must specify a key using Parse.initialize.";
    }

    // TODO: We can remove this check later, but it's useful for development.
    if (route !== "batch" &&
        route !== "classes" &&
        route !== "events" &&
        route !== "files" &&
        route !== "functions" &&
        route !== "login" &&
        route !== "logout" &&
        route !== "push" &&
        route !== "requestPasswordReset" &&
        route !== "rest_verify_analytics" &&
        route !== "users" &&
        route !== "jobs" &&
        route !== "config" &&
        route !== "sessions" &&
        route !== "upgradeToRevocableSession") {
      throw "Bad route: '" + route + "'.";
    }

    var url = Parse.serverURL;
    if (url.charAt(url.length - 1) !== "/") {
      url += "/";
    }
    url += "1/" + route;
    if (className) {
      url += "/" + className;
    }
    if (objectId) {
      url += "/" + objectId;
    }

    dataObject = Parse._.clone(dataObject || {});
    if (method !== "POST") {
      dataObject._method = method;
      method = "POST";
    }

    if (Parse._.isUndefined(useMasterKey)) {
      useMasterKey = Parse._useMasterKey;
    }

    dataObject._ApplicationId = Parse.applicationId;
    if (!useMasterKey) {
      dataObject._JavaScriptKey = Parse.javaScriptKey;
    } else if (!Parse.masterKey) {
      throw new Error('Cannot use the Master Key, it has not been provided.');
    } else {
      dataObject._MasterKey = Parse.masterKey;
    }

    dataObject._ClientVersion = Parse.VERSION;

    return Parse._getInstallationId().then(function(iid) {
      dataObject._InstallationId = iid;

      if (sessionToken) {
        return Parse.Promise.as({ _sessionToken: sessionToken });
      }
      if (!Parse.User._canUseCurrentUser()) {
        return Parse.Promise.as(null);
      }

      return Parse.User._currentAsync();
    }).then(function(currentUser) {
      if (currentUser && currentUser._sessionToken) {
        dataObject._SessionToken = currentUser._sessionToken;
      }

      if (Parse.User._isRevocableSessionEnabled) {
        dataObject._RevocableSession = '1';
      }

      var data = JSON.stringify(dataObject);

      return Parse._ajax(method, url, data);
    }).then(null, function(response) {
      // Transform the error into an instance of Parse.Error by trying to parse
      // the error string as JSON.
      var error;
      if (response && response.responseText) {
        try {
          var errorJSON = JSON.parse(response.responseText);
          error = new Parse.Error(errorJSON.code, errorJSON.error);
        } catch (e) {
          // If we fail to parse the error text, that's okay.
          error = new Parse.Error(
              Parse.Error.INVALID_JSON,
              "Received an error with invalid JSON from Parse: " +
                  response.responseText);
        }
      } else {
        error = new Parse.Error(
            Parse.Error.CONNECTION_FAILED,
            "XMLHttpRequest failed: " + JSON.stringify(response));
      }
      // By explicitly returning a rejected Promise, this will work with
      // either jQuery or Promises/A semantics.
      return Parse.Promise.error(error);
    });
  };

  // Helper function to get a value from a Backbone object as a property
  // or as a function.
  Parse._getValue = function(object, prop) {
    if (!(object && object[prop])) {
      return null;
    }
    return Parse._.isFunction(object[prop]) ? object[prop]() : object[prop];
  };

  /**
   * Converts a value in a Parse Object into the appropriate representation.
   * This is the JS equivalent of Java's Parse.maybeReferenceAndEncode(Object)
   * if seenObjects is falsey. Otherwise any Parse.Objects not in
   * seenObjects will be fully embedded rather than encoded
   * as a pointer.  This array will be used to prevent going into an infinite
   * loop because we have circular references.  If seenObjects
   * is set, then none of the Parse Objects that are serialized can be dirty.
   */
  Parse._encode = function(value, seenObjects, disallowObjects) {
    var _ = Parse._;
    if (value instanceof Parse.Object) {
      if (disallowObjects) {
        throw "Parse.Objects not allowed here";
      }
      if (!seenObjects || _.include(seenObjects, value) || !value._hasData) {
        return value._toPointer();
      }
      if (!value.dirty()) {
        seenObjects = seenObjects.concat(value);
        return Parse._encode(value._toFullJSON(seenObjects),
                             seenObjects,
                             disallowObjects);
      }
      throw "Tried to save an object with a pointer to a new, unsaved object.";
    }
    if (value instanceof Parse.ACL) {
      return value.toJSON();
    }
    if (_.isDate(value)) {
      if (isNaN(value)) {
        throw new Error('Cannot encode invalid Date');
      }
      return { "__type": "Date", "iso": value.toJSON() };
    }
    if (value instanceof Parse.GeoPoint) {
      return value.toJSON();
    }
    if (_.isArray(value)) {
      return _.map(value, function(x) {
        return Parse._encode(x, seenObjects, disallowObjects);
      });
    }
    if (_.isRegExp(value)) {
      return value.source;
    }
    if (value instanceof Parse.Relation) {
      return value.toJSON();
    }
    if (value instanceof Parse.Op) {
      return value.toJSON();
    }
    if (value instanceof Parse.File) {
      if (!value.url()) {
        throw "Tried to save an object containing an unsaved file.";
      }
      return {
        __type: "File",
        name: value.name(),
        url: value.url()
      };
    }
    if (_.isObject(value)) {
      var output = {};
      Parse._objectEach(value, function(v, k) {
        output[k] = Parse._encode(v, seenObjects, disallowObjects);
      });
      return output;
    }
    return value;
  };

  /**
   * The inverse function of Parse._encode.
   * TODO: make decode not mutate value.
   */
  Parse._decode = function(key, value) {
    var _ = Parse._;
    if (!_.isObject(value)) {
      return value;
    }
    if (_.isArray(value)) {
      Parse._arrayEach(value, function(v, k) {
        value[k] = Parse._decode(k, v);
      });
      return value;
    }
    if (value instanceof Parse.Object) {
      return value;
    }
    if (value instanceof Parse.File) {
      return value;
    }
    if (value instanceof Parse.Op) {
      return value;
    }
    if (value.__op) {
      return Parse.Op._decode(value);
    }
    if (value.__type === "Pointer" && value.className) {
      var pointer = Parse.Object._create(value.className);
      pointer._finishFetch({ objectId: value.objectId }, false);
      return pointer;
    }
    if (value.__type === "Object" && value.className) {
      // It's an Object included in a query result.
      var className = value.className;
      delete value.__type;
      delete value.className;
      var object = Parse.Object._create(className);
      object._finishFetch(value, true);
      return object;
    }
    if (value.__type === "Date") {
      return Parse._parseDate(value.iso);
    }
    if (value.__type === "GeoPoint") {
      return new Parse.GeoPoint({
        latitude: value.latitude,
        longitude: value.longitude
      });
    }
    if (key === "ACL") {
      if (value instanceof Parse.ACL) {
        return value;
      }
      return new Parse.ACL(value);
    }
    if (value.__type === "Relation") {
      var relation = new Parse.Relation(null, key);
      relation.targetClassName = value.className;
      return relation;
    }
    if (value.__type === "File") {
      var file = new Parse.File(value.name);
      file._url = value.url;
      return file;
    }
    Parse._objectEach(value, function(v, k) {
      value[k] = Parse._decode(k, v);
    });
    return value;
  };

  Parse._arrayEach = Parse._.each;

  /**
   * Does a deep traversal of every item in object, calling func on every one.
   * @param {Object} object The object or array to traverse deeply.
   * @param {Function} func The function to call for every item. It will
   *     be passed the item as an argument. If it returns a truthy value, that
   *     value will replace the item in its parent container.
   * @returns {} the result of calling func on the top-level object itself.
   */
  Parse._traverse = function(object, func, seen) {
    if (object instanceof Parse.Object) {
      seen = seen || [];
      if (Parse._.indexOf(seen, object) >= 0) {
        // We've already visited this object in this call.
        return;
      }
      seen.push(object);
      Parse._traverse(object.attributes, func, seen);
      return func(object);
    }
    if (object instanceof Parse.Relation || object instanceof Parse.File) {
      // Nothing needs to be done, but we don't want to recurse into the
      // object's parent infinitely, so we catch this case.
      return func(object);
    }
    if (Parse._.isArray(object)) {
      Parse._.each(object, function(child, index) {
        var newChild = Parse._traverse(child, func, seen);
        if (newChild) {
          object[index] = newChild;
        }
      });
      return func(object);
    }
    if (Parse._.isObject(object)) {
      Parse._each(object, function(child, key) {
        var newChild = Parse._traverse(child, func, seen);
        if (newChild) {
          object[key] = newChild;
        }
      });
      return func(object);
    }
    return func(object);
  };

  /**
   * This is like _.each, except:
   * * it doesn't work for so-called array-like objects,
   * * it does work for dictionaries with a "length" attribute.
   */
  Parse._objectEach = Parse._each = function(obj, callback) {
    var _ = Parse._;
    if (_.isObject(obj)) {
      _.each(_.keys(obj), function(key) {
        callback(obj[key], key);
      });
    } else {
      _.each(obj, callback);
    }
  };

  // Helper function to check null or undefined.
  Parse._isNullOrUndefined = function(x) {
    return Parse._.isNull(x) || Parse._.isUndefined(x);
  };
}(this));

/* global require: false, localStorage: false */
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  
  var Storage = {
    async: false,
  };

  var hasLocalStorage = (typeof localStorage !== 'undefined');
  if (hasLocalStorage) {
    try {
      localStorage.setItem('supported', true);
      localStorage.removeItem('supported');
    } catch(e) {
      hasLocalStorage = false;
    }
  }
  if (hasLocalStorage) {
    Storage.getItem = function(path) {
      return localStorage.getItem(path);
    };

    Storage.setItem = function(path, value) {
      return localStorage.setItem(path, value);
    };

    Storage.removeItem = function(path) {
      return localStorage.removeItem(path);
    };

    Storage.clear = function() {
      return localStorage.clear();
    };
  } else if (typeof require === 'function') {
    var AsyncStorage;
    try {
      AsyncStorage = eval("require('AsyncStorage')"); // jshint ignore:line

      Storage.async = true;

      Storage.getItemAsync = function(path) {
        var p = new Parse.Promise();
        AsyncStorage.getItem(path, function(err, value) {
          if (err) {
            p.reject(err);
          } else {
            p.resolve(value);
          }
        });
        return p;
      };

      Storage.setItemAsync = function(path, value) {
        var p = new Parse.Promise();
        AsyncStorage.setItem(path, value, function(err) {
          if (err) {
            p.reject(err);
          } else {
            p.resolve(value);
          }
        });
        return p;
      };

      Storage.removeItemAsync = function(path) {
        var p = new Parse.Promise();
        AsyncStorage.removeItem(path, function(err) {
          if (err) {
            p.reject(err);
          } else {
            p.resolve();
          }
        });
        return p;
      };

      Storage.clear = function() {
        AsyncStorage.clear();
      };
    } catch (e) { }
  }
  if (!Storage.async && !Storage.getItem) {
    var memMap = Storage.inMemoryMap = {};
    Storage.getItem = function(path) {
      if (memMap.hasOwnProperty(path)) {
        return memMap[path];
      }
      return null;
    };

    Storage.setItem = function(path, value) {
      memMap[path] = String(value);
    };

    Storage.removeItem = function(path) {
      delete memMap[path];
    };

    Storage.clear = function() {
      for (var key in memMap) {
        if (memMap.hasOwnProperty(key)) {
          delete memMap[key];
        }
      }
    };
  }

  // We can use synchronous methods from async scenarios, but not vice-versa
  if (!Storage.async) {
    Storage.getItemAsync = function(path) {
      return Parse.Promise.as(
        Storage.getItem(path)
      );
    };

    Storage.setItemAsync = function(path, value) {
      Storage.setItem(path, value);
      return Parse.Promise.as(value);
    };

    Storage.removeItemAsync = function(path) {
      return Parse.Promise.as(
        Storage.removeItem(path)
      );
    };
  }

  Parse.Storage = Storage;

})(this);

(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * @namespace Provides an interface to Parse's logging and analytics backend.
   */
  Parse.Analytics = Parse.Analytics || {};

  _.extend(Parse.Analytics, /** @lends Parse.Analytics */ {
    /**
     * Tracks the occurrence of a custom event with additional dimensions.
     * Parse will store a data point at the time of invocation with the given
     * event name.
     *
     * Dimensions will allow segmentation of the occurrences of this custom
     * event. Keys and values should be {@code String}s, and will throw
     * otherwise.
     *
     * To track a user signup along with additional metadata, consider the
     * following:
     * <pre>
     * var dimensions = {
     *  gender: 'm',
     *  source: 'web',
     *  dayType: 'weekend'
     * };
     * Parse.Analytics.track('signup', dimensions);
     * </pre>
     *
     * There is a default limit of 8 dimensions per event tracked.
     *
     * @param {String} name The name of the custom event to report to Parse as
     * having happened.
     * @param {Object} dimensions The dictionary of information by which to
     * segment this event.
     * @param {Object} options A Backbone-style callback object.
     * @return {Parse.Promise} A promise that is resolved when the round-trip
     * to the server completes.
     */
    track: function(name, dimensions, options) {
      name = name || '';
      name = name.replace(/^\s*/, '');
      name = name.replace(/\s*$/, '');
      if (name.length === 0) {
        throw 'A name for the custom event must be provided';
      }

      _.each(dimensions, function(val, key) {
        if (!_.isString(key) || !_.isString(val)) {
          throw 'track() dimensions expects keys and values of type "string".';
        }
      });

      options = options || {};
      return Parse._request({
        route: 'events',
        className: name,
        method: 'POST',
        data: { dimensions: dimensions }
      })._thenRunCallbacks(options);
    }
  });
}(this));

(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * @class Parse.Config is a local representation of configuration data that
   * can be set from the Parse dashboard.
   */
  Parse.Config = function() {
    this.attributes = {};
    this._escapedAttributes = {};
  };

  /**
   * Retrieves the most recently-fetched configuration object, either from
   * memory or from local storage if necessary.
   *
   * @return {Parse.Config} The most recently-fetched Parse.Config if it
   *     exists, else an empty Parse.Config.
   */
  Parse.Config.current = function() {
    if (Parse.Config._currentConfig) {
      return Parse.Config._currentConfig;
    }

    var config = new Parse.Config();

    if (Parse.Storage.async) {
      return config;
    }

    var configData = Parse.Storage.getItem(Parse._getParsePath(
          Parse.Config._CURRENT_CONFIG_KEY));

    if (configData) {  
      config._finishFetch(JSON.parse(configData));
      Parse.Config._currentConfig = config;
    }
    return config;
  };

  /**
   * Gets a new configuration object from the server.
   * @param {Object} options A Backbone-style options object.
   * Valid options are:<ul>
   *   <li>success: Function to call when the get completes successfully.
   *   <li>error: Function to call when the get fails.
   * </ul>
   * @return {Parse.Promise} A promise that is resolved with a newly-created
   *     configuration object when the get completes.
   */
  Parse.Config.get = function(options) {
    options = options || {};

    var request = Parse._request({
      route: "config",
      method: "GET",
    });

    return request.then(function(response) {
      if (!response || !response.params) {
        var errorObject = new Parse.Error(
          Parse.Error.INVALID_JSON,
          "Config JSON response invalid.");
        return Parse.Promise.error(errorObject);
      }

      var config = new Parse.Config();
      config._finishFetch(response);
      Parse.Config._currentConfig = config;
      return config;
    })._thenRunCallbacks(options);
  };

  Parse.Config.prototype = {

    /**
     * Gets the HTML-escaped value of an attribute.
     */
    escape: function(attr) {
      var html = this._escapedAttributes[attr];
      if (html) {
        return html;
      }
      var val = this.attributes[attr];
      var escaped;
      if (Parse._isNullOrUndefined(val)) {
        escaped = '';
      } else {
        escaped = _.escape(val.toString());
      }
      this._escapedAttributes[attr] = escaped;
      return escaped;
    },

    /**
     * Gets the value of an attribute.
     * @param {String} attr The name of an attribute.
     */
    get: function(attr) {
      return this.attributes[attr];
    },

    _finishFetch: function(serverData) {
      this.attributes = Parse._decode(null, _.clone(serverData.params));
      if (!Parse.Storage.async) {
        // We only provide local caching of config with synchronous Storage
        Parse.Storage.setItem(
            Parse._getParsePath(Parse.Config._CURRENT_CONFIG_KEY),
            JSON.stringify(serverData));
      }
    }
  };

  Parse.Config._currentConfig = null;

  Parse.Config._CURRENT_CONFIG_KEY = "currentConfig";

}(this));


(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * Constructs a new Parse.Error object with the given code and message.
   * @param {Number} code An error code constant from <code>Parse.Error</code>.
   * @param {String} message A detailed description of the error.
   * @class
   *
   * <p>Class used for all objects passed to error callbacks.</p>
   */
  Parse.Error = function(code, message) {
    this.code = code;
    this.message = message;
  };

  _.extend(Parse.Error, /** @lends Parse.Error */ {
    /**
     * Error code indicating some error other than those enumerated here.
     * @constant
     */
    OTHER_CAUSE: -1,

    /**
     * Error code indicating that something has gone wrong with the server.
     * If you get this error code, it is Parse's fault. Contact us at 
     * https://parse.com/help
     * @constant
     */
    INTERNAL_SERVER_ERROR: 1,

    /**
     * Error code indicating the connection to the Parse servers failed.
     * @constant
     */
    CONNECTION_FAILED: 100,

    /**
     * Error code indicating the specified object doesn't exist.
     * @constant
     */
    OBJECT_NOT_FOUND: 101,

    /**
     * Error code indicating you tried to query with a datatype that doesn't
     * support it, like exact matching an array or object.
     * @constant
     */
    INVALID_QUERY: 102,

    /**
     * Error code indicating a missing or invalid classname. Classnames are
     * case-sensitive. They must start with a letter, and a-zA-Z0-9_ are the
     * only valid characters.
     * @constant
     */
    INVALID_CLASS_NAME: 103,

    /**
     * Error code indicating an unspecified object id.
     * @constant
     */
    MISSING_OBJECT_ID: 104,

    /**
     * Error code indicating an invalid key name. Keys are case-sensitive. They
     * must start with a letter, and a-zA-Z0-9_ are the only valid characters.
     * @constant
     */
    INVALID_KEY_NAME: 105,

    /**
     * Error code indicating a malformed pointer. You should not see this unless
     * you have been mucking about changing internal Parse code.
     * @constant
     */
    INVALID_POINTER: 106,

    /**
     * Error code indicating that badly formed JSON was received upstream. This
     * either indicates you have done something unusual with modifying how
     * things encode to JSON, or the network is failing badly.
     * @constant
     */
    INVALID_JSON: 107,

    /**
     * Error code indicating that the feature you tried to access is only
     * available internally for testing purposes.
     * @constant
     */
    COMMAND_UNAVAILABLE: 108,

    /**
     * You must call Parse.initialize before using the Parse library.
     * @constant
     */
    NOT_INITIALIZED: 109,

    /**
     * Error code indicating that a field was set to an inconsistent type.
     * @constant
     */
    INCORRECT_TYPE: 111,

    /**
     * Error code indicating an invalid channel name. A channel name is either
     * an empty string (the broadcast channel) or contains only a-zA-Z0-9_
     * characters and starts with a letter.
     * @constant
     */
    INVALID_CHANNEL_NAME: 112,

    /**
     * Error code indicating that push is misconfigured.
     * @constant
     */
    PUSH_MISCONFIGURED: 115,

    /**
     * Error code indicating that the object is too large.
     * @constant
     */
    OBJECT_TOO_LARGE: 116,

    /**
     * Error code indicating that the operation isn't allowed for clients.
     * @constant
     */
    OPERATION_FORBIDDEN: 119,

    /**
     * Error code indicating the result was not found in the cache.
     * @constant
     */
    CACHE_MISS: 120,

    /**
     * Error code indicating that an invalid key was used in a nested
     * JSONObject.
     * @constant
     */
    INVALID_NESTED_KEY: 121,

    /**
     * Error code indicating that an invalid filename was used for ParseFile.
     * A valid file name contains only a-zA-Z0-9_. characters and is between 1
     * and 128 characters.
     * @constant
     */
    INVALID_FILE_NAME: 122,

    /**
     * Error code indicating an invalid ACL was provided.
     * @constant
     */
    INVALID_ACL: 123,

    /**
     * Error code indicating that the request timed out on the server. Typically
     * this indicates that the request is too expensive to run.
     * @constant
     */
    TIMEOUT: 124,

    /**
     * Error code indicating that the email address was invalid.
     * @constant
     */
    INVALID_EMAIL_ADDRESS: 125,

    /**
     * Error code indicating a missing content type.
     * @constant
     */
    MISSING_CONTENT_TYPE: 126,

    /**
     * Error code indicating a missing content length.
     * @constant
     */
    MISSING_CONTENT_LENGTH: 127,

    /**
     * Error code indicating an invalid content length.
     * @constant
     */
    INVALID_CONTENT_LENGTH: 128,

    /**
     * Error code indicating a file that was too large.
     * @constant
     */
    FILE_TOO_LARGE: 129,

    /**
     * Error code indicating an error saving a file.
     * @constant
     */
    FILE_SAVE_ERROR: 130,

    /**
     * Error code indicating that a unique field was given a value that is
     * already taken.
     * @constant
     */
    DUPLICATE_VALUE: 137,

    /**
     * Error code indicating that a role's name is invalid.
     * @constant
     */
    INVALID_ROLE_NAME: 139,

    /**
     * Error code indicating that an application quota was exceeded.  Upgrade to
     * resolve.
     * @constant
     */
    EXCEEDED_QUOTA: 140,

    /**
     * Error code indicating that a Cloud Code script failed.
     * @constant
     */
    SCRIPT_FAILED: 141,

    /**
     * Error code indicating that a Cloud Code validation failed.
     * @constant
     */
    VALIDATION_ERROR: 142,

    /**
     * Error code indicating that invalid image data was provided.
     * @constant
     */
    INVALID_IMAGE_DATA: 150,

    /**
     * Error code indicating an unsaved file.
     * @constant
     */
    UNSAVED_FILE_ERROR: 151,

    /**
     * Error code indicating an invalid push time.
     */
    INVALID_PUSH_TIME_ERROR: 152,

    /**
     * Error code indicating an error deleting a file.
     * @constant
     */
    FILE_DELETE_ERROR: 153,

    /**
     * Error code indicating that the application has exceeded its request
     * limit.
     * @constant
     */
    REQUEST_LIMIT_EXCEEDED: 155,

    /**
     * Error code indicating an invalid event name.
     */
    INVALID_EVENT_NAME: 160,

    /**
     * Error code indicating that the username is missing or empty.
     * @constant
     */
    USERNAME_MISSING: 200,

    /**
     * Error code indicating that the password is missing or empty.
     * @constant
     */
    PASSWORD_MISSING: 201,

    /**
     * Error code indicating that the username has already been taken.
     * @constant
     */
    USERNAME_TAKEN: 202,

    /**
     * Error code indicating that the email has already been taken.
     * @constant
     */
    EMAIL_TAKEN: 203,

    /**
     * Error code indicating that the email is missing, but must be specified.
     * @constant
     */
    EMAIL_MISSING: 204,

    /**
     * Error code indicating that a user with the specified email was not found.
     * @constant
     */
    EMAIL_NOT_FOUND: 205,

    /**
     * Error code indicating that a user object without a valid session could
     * not be altered.
     * @constant
     */
    SESSION_MISSING: 206,

    /**
     * Error code indicating that a user can only be created through signup.
     * @constant
     */
    MUST_CREATE_USER_THROUGH_SIGNUP: 207,

    /**
     * Error code indicating that an an account being linked is already linked
     * to another user.
     * @constant
     */
    ACCOUNT_ALREADY_LINKED: 208,

    /**
     * Error code indicating that the current session token is invalid.
     * @constant
     */
    INVALID_SESSION_TOKEN: 209,

    /**
     * Error code indicating that a user cannot be linked to an account because
     * that account's id could not be found.
     * @constant
     */
    LINKED_ID_MISSING: 250,

    /**
     * Error code indicating that a user with a linked (e.g. Facebook) account
     * has an invalid session.
     * @constant
     */
    INVALID_LINKED_SESSION: 251,

    /**
     * Error code indicating that a service being linked (e.g. Facebook or
     * Twitter) is unsupported.
     * @constant
     */
    UNSUPPORTED_SERVICE: 252,

    /**
     * Error code indicating that there were multiple errors. Aggregate errors
     * have an "errors" property, which is an array of error objects with more
     * detail about each error that occurred.
     * @constant
     */
    AGGREGATE_ERROR: 600,

    /**
     * Error code indicating the client was unable to read an input file.
     * @constant
     */
    FILE_READ_ERROR: 601,

    /**
     * Error code indicating a real error code is unavailable because
     * we had to use an XDomainRequest object to allow CORS requests in
     * Internet Explorer, which strips the body from HTTP responses that have
     * a non-2XX status code.
     * @constant
     */
    X_DOMAIN_REQUEST: 602
  });

}(this));

/*global _: false */
(function() {
  var root = this;
  var Parse = (root.Parse || (root.Parse = {}));
  var eventSplitter = /\s+/;
  var slice = Array.prototype.slice;

  /**
   * @class
   *
   * <p>Parse.Events is a fork of Backbone's Events module, provided for your
   * convenience.</p>
   *
   * <p>A module that can be mixed in to any object in order to provide
   * it with custom events. You may bind callback functions to an event
   * with `on`, or remove these functions with `off`.
   * Triggering an event fires all callbacks in the order that `on` was
   * called.
   *
   * <pre>
   *     var object = {};
   *     _.extend(object, Parse.Events);
   *     object.on('expand', function(){ alert('expanded'); });
   *     object.trigger('expand');</pre></p>
   *
   * <p>For more information, see the
   * <a href="http://documentcloud.github.com/backbone/#Events">Backbone
   * documentation</a>.</p>
   */
  Parse.Events = {
    /**
     * Bind one or more space separated events, `events`, to a `callback`
     * function. Passing `"all"` will bind the callback to all events fired.
     */
    on: function(events, callback, context) {

      var calls, event, node, tail, list;
      if (!callback) {
        return this;
      }
      events = events.split(eventSplitter);
      calls = this._callbacks || (this._callbacks = {});

      // Create an immutable callback list, allowing traversal during
      // modification.  The tail is an empty object that will always be used
      // as the next node.
      event = events.shift();
      while (event) {
        list = calls[event];
        node = list ? list.tail : {};
        node.next = tail = {};
        node.context = context;
        node.callback = callback;
        calls[event] = {tail: tail, next: list ? list.next : node};
        event = events.shift();
      }

      return this;
    },

    /**
     * Remove one or many callbacks. If `context` is null, removes all callbacks
     * with that function. If `callback` is null, removes all callbacks for the
     * event. If `events` is null, removes all bound callbacks for all events.
     */
    off: function(events, callback, context) {
      var event, calls, node, tail, cb, ctx;

      // No events, or removing *all* events.
      if (!(calls = this._callbacks)) {
        return;
      }
      if (!(events || callback || context)) {
        delete this._callbacks;
        return this;
      }

      // Loop through the listed events and contexts, splicing them out of the
      // linked list of callbacks if appropriate.
      events = events ? events.split(eventSplitter) : Object.keys(calls);
      event = events.shift();
      while (event) {
        node = calls[event];
        delete calls[event];
        if (!node || !(callback || context)) {
          event = events.shift();
          continue;
        }
        // Create a new list, omitting the indicated callbacks.
        tail = node.tail;
        node = node.next;
        while (node !== tail) {
          cb = node.callback;
          ctx = node.context;
          if ((callback && cb !== callback) || (context && ctx !== context)) {
            this.on(event, cb, ctx);
          }
          node = node.next;
        }
        event = events.shift();
      }

      return this;
    },

    /**
     * Trigger one or many events, firing all bound callbacks. Callbacks are
     * passed the same arguments as `trigger` is, apart from the event name
     * (unless you're listening on `"all"`, which will cause your callback to
     * receive the true name of the event as the first argument).
     */
    trigger: function(events) {
      var event, node, calls, tail, args, all, rest;
      if (!(calls = this._callbacks)) {
        return this;
      }
      all = calls.all;
      events = events.split(eventSplitter);
      rest = slice.call(arguments, 1);

      // For each event, walk through the linked list of callbacks twice,
      // first to trigger the event, then to trigger any `"all"` callbacks.
      event = events.shift();
      while (event) {
        node = calls[event];
        if (node) {
          tail = node.tail;
          while ((node = node.next) !== tail) {
            node.callback.apply(node.context || this, rest);
          }
        }
        node = all;
        if (node) {
          tail = node.tail;
          args = [event].concat(rest);
          while ((node = node.next) !== tail) {
            node.callback.apply(node.context || this, args);
          }
        }
        event = events.shift();
      }

      return this;
    }
  };  

  /**
   * @function
   */
  Parse.Events.bind = Parse.Events.on;

  /**
   * @function
   */
  Parse.Events.unbind = Parse.Events.off;
}.call(this));


/*global navigator: false */
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * Creates a new GeoPoint with any of the following forms:<br>
   *   <pre>
   *   new GeoPoint(otherGeoPoint)
   *   new GeoPoint(30, 30)
   *   new GeoPoint([30, 30])
   *   new GeoPoint({latitude: 30, longitude: 30})
   *   new GeoPoint()  // defaults to (0, 0)
   *   </pre>
   * @class
   *
   * <p>Represents a latitude / longitude point that may be associated
   * with a key in a ParseObject or used as a reference point for geo queries.
   * This allows proximity-based queries on the key.</p>
   *
   * <p>Only one key in a class may contain a GeoPoint.</p>
   *
   * <p>Example:<pre>
   *   var point = new Parse.GeoPoint(30.0, -20.0);
   *   var object = new Parse.Object("PlaceObject");
   *   object.set("location", point);
   *   object.save();</pre></p>
   */
  Parse.GeoPoint = function(arg1, arg2) {
    if (_.isArray(arg1)) {
      Parse.GeoPoint._validate(arg1[0], arg1[1]);
      this.latitude = arg1[0];
      this.longitude = arg1[1];
    } else if (_.isObject(arg1)) {
      Parse.GeoPoint._validate(arg1.latitude, arg1.longitude);
      this.latitude = arg1.latitude;
      this.longitude = arg1.longitude;
    } else if (_.isNumber(arg1) && _.isNumber(arg2)) {
      Parse.GeoPoint._validate(arg1, arg2);
      this.latitude = arg1;
      this.longitude = arg2;
    } else {
      this.latitude = 0;
      this.longitude = 0;
    }

    // Add properties so that anyone using Webkit or Mozilla will get an error
    // if they try to set values that are out of bounds.
    var self = this;
    if (this.__defineGetter__ && this.__defineSetter__) {
      // Use _latitude and _longitude to actually store the values, and add
      // getters and setters for latitude and longitude.
      this._latitude = this.latitude;
      this._longitude = this.longitude;
      this.__defineGetter__("latitude", function() {
        return self._latitude;
      });
      this.__defineGetter__("longitude", function() {
        return self._longitude;
      });
      this.__defineSetter__("latitude", function(val) {
        Parse.GeoPoint._validate(val, self.longitude);
        self._latitude = val;
      });
      this.__defineSetter__("longitude", function(val) {
        Parse.GeoPoint._validate(self.latitude, val);
        self._longitude = val;
      });
    }
  };

  /**
   * @lends Parse.GeoPoint.prototype
   * @property {float} latitude North-south portion of the coordinate, in range
   *   [-90, 90].  Throws an exception if set out of range in a modern browser.
   * @property {float} longitude East-west portion of the coordinate, in range
   *   [-180, 180].  Throws if set out of range in a modern browser.
   */

  /**
   * Throws an exception if the given lat-long is out of bounds.
   */
  Parse.GeoPoint._validate = function(latitude, longitude) {
    if (latitude < -90.0) {
      throw "Parse.GeoPoint latitude " + latitude + " < -90.0.";
    }
    if (latitude > 90.0) {
      throw "Parse.GeoPoint latitude " + latitude + " > 90.0.";
    }
    if (longitude < -180.0) {
      throw "Parse.GeoPoint longitude " + longitude + " < -180.0.";
    }
    if (longitude > 180.0) {
      throw "Parse.GeoPoint longitude " + longitude + " > 180.0.";
    }
  };

  /**
   * Creates a GeoPoint with the user's current location, if available.
   * Calls options.success with a new GeoPoint instance or calls options.error.
   * @param {Object} options An object with success and error callbacks.
   */
  Parse.GeoPoint.current = function(options) {
    var promise = new Parse.Promise();
    navigator.geolocation.getCurrentPosition(function(location) {
      promise.resolve(new Parse.GeoPoint({
        latitude: location.coords.latitude,
        longitude: location.coords.longitude
      }));

    }, function(error) {
      promise.reject(error);
    });

    return promise._thenRunCallbacks(options);
  };

  Parse.GeoPoint.prototype = {
    /**
     * Returns a JSON representation of the GeoPoint, suitable for Parse.
     * @return {Object}
     */
    toJSON: function() {
      Parse.GeoPoint._validate(this.latitude, this.longitude);
      return {
        "__type": "GeoPoint",
        latitude: this.latitude,
        longitude: this.longitude
      };
    },

    /**
     * Returns the distance from this GeoPoint to another in radians.
     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.
     * @return {Number}
     */
    radiansTo: function(point) {
      var d2r = Math.PI / 180.0;
      var lat1rad = this.latitude * d2r;
      var long1rad = this.longitude * d2r;
      var lat2rad = point.latitude * d2r;
      var long2rad = point.longitude * d2r;
      var deltaLat = lat1rad - lat2rad;
      var deltaLong = long1rad - long2rad;
      var sinDeltaLatDiv2 = Math.sin(deltaLat / 2);
      var sinDeltaLongDiv2 = Math.sin(deltaLong / 2);
      // Square of half the straight line chord distance between both points.
      var a = ((sinDeltaLatDiv2 * sinDeltaLatDiv2) +
               (Math.cos(lat1rad) * Math.cos(lat2rad) *
                sinDeltaLongDiv2 * sinDeltaLongDiv2));
      a = Math.min(1.0, a);
      return 2 * Math.asin(Math.sqrt(a));
    },

    /**
     * Returns the distance from this GeoPoint to another in kilometers.
     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.
     * @return {Number}
     */
    kilometersTo: function(point) {
      return this.radiansTo(point) * 6371.0;
    },

    /**
     * Returns the distance from this GeoPoint to another in miles.
     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.
     * @return {Number}
     */
    milesTo: function(point) {
      return this.radiansTo(point) * 3958.8;
    }
  };
}(this));

/*global navigator: false */
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  var PUBLIC_KEY = "*";

  /**
   * Creates a new ACL.
   * If no argument is given, the ACL has no permissions for anyone.
   * If the argument is a Parse.User, the ACL will have read and write
   *   permission for only that user.
   * If the argument is any other JSON object, that object will be interpretted
   *   as a serialized ACL created with toJSON().
   * @see Parse.Object#setACL
   * @class
   *
   * <p>An ACL, or Access Control List can be added to any
   * <code>Parse.Object</code> to restrict access to only a subset of users
   * of your application.</p>
   */
  Parse.ACL = function(arg1) {
    var self = this;
    self.permissionsById = {};
    if (_.isObject(arg1)) {
      if (arg1 instanceof Parse.User) {
        self.setReadAccess(arg1, true);
        self.setWriteAccess(arg1, true);
      } else {
        if (_.isFunction(arg1)) {
          throw "Parse.ACL() called with a function.  Did you forget ()?";
        }
        Parse._objectEach(arg1, function(accessList, userId) {
          if (!_.isString(userId)) {
            throw "Tried to create an ACL with an invalid userId.";
          }
          self.permissionsById[userId] = {};
          Parse._objectEach(accessList, function(allowed, permission) {
            if (permission !== "read" && permission !== "write") {
              throw "Tried to create an ACL with an invalid permission type.";
            }
            if (!_.isBoolean(allowed)) {
              throw "Tried to create an ACL with an invalid permission value.";
            }
            self.permissionsById[userId][permission] = allowed;
          });
        });
      }
    }
  };

  /**
   * Returns a JSON-encoded version of the ACL.
   * @return {Object}
   */
  Parse.ACL.prototype.toJSON = function() {
    return _.clone(this.permissionsById);
  };

  Parse.ACL.prototype._setAccess = function(accessType, userId, allowed) {
    if (userId instanceof Parse.User) {
      userId = userId.id;
    } else if (userId instanceof Parse.Role) {
      userId = "role:" + userId.getName();
    }
    if (!_.isString(userId)) {
      throw "userId must be a string.";
    }
    if (!_.isBoolean(allowed)) {
      throw "allowed must be either true or false.";
    }
    var permissions = this.permissionsById[userId];
    if (!permissions) {
      if (!allowed) {
        // The user already doesn't have this permission, so no action needed.
        return;
      } else {
        permissions = {};
        this.permissionsById[userId] = permissions;
      }
    }

    if (allowed) {
      this.permissionsById[userId][accessType] = true;
    } else {
      delete permissions[accessType];
      if (_.isEmpty(permissions)) {
        delete permissions[userId];
      }
    }
  };

  Parse.ACL.prototype._getAccess = function(accessType, userId) {
    if (userId instanceof Parse.User) {
      userId = userId.id;
    } else if (userId instanceof Parse.Role) {
      userId = "role:" + userId.getName();
    }
    var permissions = this.permissionsById[userId];
    if (!permissions) {
      return false;
    }
    return permissions[accessType] ? true : false;
  };

  /**
   * Set whether the given user is allowed to read this object.
   * @param userId An instance of Parse.User or its objectId.
   * @param {Boolean} allowed Whether that user should have read access.
   */
  Parse.ACL.prototype.setReadAccess = function(userId, allowed) {
    this._setAccess("read", userId, allowed);
  };

  /**
   * Get whether the given user id is *explicitly* allowed to read this object.
   * Even if this returns false, the user may still be able to access it if
   * getPublicReadAccess returns true or a role that the user belongs to has
   * write access.
   * @param userId An instance of Parse.User or its objectId, or a Parse.Role.
   * @return {Boolean}
   */
  Parse.ACL.prototype.getReadAccess = function(userId) {
    return this._getAccess("read", userId);
  };

  /**
   * Set whether the given user id is allowed to write this object.
   * @param userId An instance of Parse.User or its objectId, or a Parse.Role..
   * @param {Boolean} allowed Whether that user should have write access.
   */
  Parse.ACL.prototype.setWriteAccess = function(userId, allowed) {
    this._setAccess("write", userId, allowed);
  };

  /**
   * Get whether the given user id is *explicitly* allowed to write this object.
   * Even if this returns false, the user may still be able to write it if
   * getPublicWriteAccess returns true or a role that the user belongs to has
   * write access.
   * @param userId An instance of Parse.User or its objectId, or a Parse.Role.
   * @return {Boolean}
   */
  Parse.ACL.prototype.getWriteAccess = function(userId) {
    return this._getAccess("write", userId);
  };

  /**
   * Set whether the public is allowed to read this object.
   * @param {Boolean} allowed
   */
  Parse.ACL.prototype.setPublicReadAccess = function(allowed) {
    this.setReadAccess(PUBLIC_KEY, allowed);
  };

  /**
   * Get whether the public is allowed to read this object.
   * @return {Boolean}
   */
  Parse.ACL.prototype.getPublicReadAccess = function() {
    return this.getReadAccess(PUBLIC_KEY);
  };

  /**
   * Set whether the public is allowed to write this object.
   * @param {Boolean} allowed
   */
  Parse.ACL.prototype.setPublicWriteAccess = function(allowed) {
    this.setWriteAccess(PUBLIC_KEY, allowed);
  };

  /**
   * Get whether the public is allowed to write this object.
   * @return {Boolean}
   */
  Parse.ACL.prototype.getPublicWriteAccess = function() {
    return this.getWriteAccess(PUBLIC_KEY);
  };
  
  /**
   * Get whether users belonging to the given role are allowed
   * to read this object. Even if this returns false, the role may
   * still be able to write it if a parent role has read access.
   * 
   * @param role The name of the role, or a Parse.Role object.
   * @return {Boolean} true if the role has read access. false otherwise.
   * @throws {String} If role is neither a Parse.Role nor a String.
   */
  Parse.ACL.prototype.getRoleReadAccess = function(role) {
    if (role instanceof Parse.Role) {
      // Normalize to the String name
      role = role.getName();
    }
    if (_.isString(role)) {
      return this.getReadAccess("role:" + role);
    }
    throw "role must be a Parse.Role or a String";
  };
  
  /**
   * Get whether users belonging to the given role are allowed
   * to write this object. Even if this returns false, the role may
   * still be able to write it if a parent role has write access.
   * 
   * @param role The name of the role, or a Parse.Role object.
   * @return {Boolean} true if the role has write access. false otherwise.
   * @throws {String} If role is neither a Parse.Role nor a String.
   */
  Parse.ACL.prototype.getRoleWriteAccess = function(role) {
    if (role instanceof Parse.Role) {
      // Normalize to the String name
      role = role.getName();
    }
    if (_.isString(role)) {
      return this.getWriteAccess("role:" + role);
    }
    throw "role must be a Parse.Role or a String";
  };
  
  /**
   * Set whether users belonging to the given role are allowed
   * to read this object.
   * 
   * @param role The name of the role, or a Parse.Role object.
   * @param {Boolean} allowed Whether the given role can read this object.
   * @throws {String} If role is neither a Parse.Role nor a String.
   */
  Parse.ACL.prototype.setRoleReadAccess = function(role, allowed) {
    if (role instanceof Parse.Role) {
      // Normalize to the String name
      role = role.getName();
    }
    if (_.isString(role)) {
      this.setReadAccess("role:" + role, allowed);
      return;
    }
    throw "role must be a Parse.Role or a String";
  };
  
  /**
   * Set whether users belonging to the given role are allowed
   * to write this object.
   * 
   * @param role The name of the role, or a Parse.Role object.
   * @param {Boolean} allowed Whether the given role can write this object.
   * @throws {String} If role is neither a Parse.Role nor a String.
   */
  Parse.ACL.prototype.setRoleWriteAccess = function(role, allowed) {
    if (role instanceof Parse.Role) {
      // Normalize to the String name
      role = role.getName();
    }
    if (_.isString(role)) {
      this.setWriteAccess("role:" + role, allowed);
      return;
    }
    throw "role must be a Parse.Role or a String";
  };

}(this));

(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * @class
   * A Parse.Op is an atomic operation that can be applied to a field in a
   * Parse.Object. For example, calling <code>object.set("foo", "bar")</code>
   * is an example of a Parse.Op.Set. Calling <code>object.unset("foo")</code>
   * is a Parse.Op.Unset. These operations are stored in a Parse.Object and
   * sent to the server as part of <code>object.save()</code> operations.
   * Instances of Parse.Op should be immutable.
   *
   * You should not create subclasses of Parse.Op or instantiate Parse.Op
   * directly.
   */
  Parse.Op = function() {
    this._initialize.apply(this, arguments);
  };

  Parse.Op.prototype = {
    _initialize: function() {}
  };

  _.extend(Parse.Op, {
    /**
     * To create a new Op, call Parse.Op._extend();
     */
    _extend: Parse._extend,

    // A map of __op string to decoder function.
    _opDecoderMap: {},

    /**
     * Registers a function to convert a json object with an __op field into an
     * instance of a subclass of Parse.Op.
     */
    _registerDecoder: function(opName, decoder) {
      Parse.Op._opDecoderMap[opName] = decoder;
    },

    /**
     * Converts a json object into an instance of a subclass of Parse.Op.
     */
    _decode: function(json) {
      var decoder = Parse.Op._opDecoderMap[json.__op];
      if (decoder) {
        return decoder(json);
      } else {
        return undefined;
      }
    }
  });

  /*
   * Add a handler for Batch ops.
   */
  Parse.Op._registerDecoder("Batch", function(json) {
    var op = null;
    Parse._arrayEach(json.ops, function(nextOp) {
      nextOp = Parse.Op._decode(nextOp);
      op = nextOp._mergeWithPrevious(op);
    });
    return op;
  });

  /**
   * @class
   * A Set operation indicates that either the field was changed using
   * Parse.Object.set, or it is a mutable container that was detected as being
   * changed.
   */
  Parse.Op.Set = Parse.Op._extend(/** @lends Parse.Op.Set.prototype */ {
    _initialize: function(value) {
      this._value = value;
    },

    /**
     * Returns the new value of this field after the set.
     */
    value: function() {
      return this._value;
    },

    /**
     * Returns a JSON version of the operation suitable for sending to Parse.
     * @return {Object}
     */
    toJSON: function() {
      return Parse._encode(this.value());
    },

    _mergeWithPrevious: function(previous) {
      return this;
    },

    _estimate: function(oldValue) {
      return this.value();
    }
  });

  /**
   * A sentinel value that is returned by Parse.Op.Unset._estimate to
   * indicate the field should be deleted. Basically, if you find _UNSET as a
   * value in your object, you should remove that key.
   */
  Parse.Op._UNSET = {};

  /**
   * @class
   * An Unset operation indicates that this field has been deleted from the
   * object.
   */
  Parse.Op.Unset = Parse.Op._extend(/** @lends Parse.Op.Unset.prototype */ {
    /**
     * Returns a JSON version of the operation suitable for sending to Parse.
     * @return {Object}
     */
    toJSON: function() {
      return { __op: "Delete" };
    },

    _mergeWithPrevious: function(previous) {
      return this;
    },

    _estimate: function(oldValue) {
      return Parse.Op._UNSET;
    }
  });

  Parse.Op._registerDecoder("Delete", function(json) {
    return new Parse.Op.Unset();
  });

  /**
   * @class
   * An Increment is an atomic operation where the numeric value for the field
   * will be increased by a given amount.
   */
  Parse.Op.Increment = Parse.Op._extend(
      /** @lends Parse.Op.Increment.prototype */ {

    _initialize: function(amount) {
      this._amount = amount;
    },

    /**
     * Returns the amount to increment by.
     * @return {Number} the amount to increment by.
     */
    amount: function() {
      return this._amount;
    },

    /**
     * Returns a JSON version of the operation suitable for sending to Parse.
     * @return {Object}
     */
    toJSON: function() {
      return { __op: "Increment", amount: this._amount };
    },

    _mergeWithPrevious: function(previous) {
      if (!previous) {
        return this;
      } else if (previous instanceof Parse.Op.Unset) {
        return new Parse.Op.Set(this.amount());
      } else if (previous instanceof Parse.Op.Set) {
        return new Parse.Op.Set(previous.value() + this.amount());
      } else if (previous instanceof Parse.Op.Increment) {
        return new Parse.Op.Increment(this.amount() + previous.amount());
      } else {
        throw "Op is invalid after previous op.";
      }
    },

    _estimate: function(oldValue) {
      if (!oldValue) {
        return this.amount();
      }
      return oldValue + this.amount();
    }
  });

  Parse.Op._registerDecoder("Increment", function(json) {
    return new Parse.Op.Increment(json.amount);
  });

  /**
   * @class
   * Add is an atomic operation where the given objects will be appended to the
   * array that is stored in this field.
   */
  Parse.Op.Add = Parse.Op._extend(/** @lends Parse.Op.Add.prototype */ {
    _initialize: function(objects) {
      this._objects = objects;
    },

    /**
     * Returns the objects to be added to the array.
     * @return {Array} The objects to be added to the array.
     */
    objects: function() {
      return this._objects;
    },

    /**
     * Returns a JSON version of the operation suitable for sending to Parse.
     * @return {Object}
     */
    toJSON: function() {
      return { __op: "Add", objects: Parse._encode(this.objects()) };
    },

    _mergeWithPrevious: function(previous) {
      if (!previous) {
        return this;
      } else if (previous instanceof Parse.Op.Unset) {
        return new Parse.Op.Set(this.objects());
      } else if (previous instanceof Parse.Op.Set) {
        return new Parse.Op.Set(this._estimate(previous.value()));
      } else if (previous instanceof Parse.Op.Add) {
        return new Parse.Op.Add(previous.objects().concat(this.objects()));
      } else {
        throw "Op is invalid after previous op.";
      }
    },

    _estimate: function(oldValue) {
      if (!oldValue) {
        return _.clone(this.objects());
      } else {
        return oldValue.concat(this.objects());
      }
    }
  });

  Parse.Op._registerDecoder("Add", function(json) {
    return new Parse.Op.Add(Parse._decode(undefined, json.objects));
  });

  /**
   * @class
   * AddUnique is an atomic operation where the given items will be appended to
   * the array that is stored in this field only if they were not already
   * present in the array.
   */
  Parse.Op.AddUnique = Parse.Op._extend(
      /** @lends Parse.Op.AddUnique.prototype */ {

    _initialize: function(objects) {
      this._objects = _.uniq(objects);
    },

    /**
     * Returns the objects to be added to the array.
     * @return {Array} The objects to be added to the array.
     */
    objects: function() {
      return this._objects;
    },

    /**
     * Returns a JSON version of the operation suitable for sending to Parse.
     * @return {Object}
     */
    toJSON: function() {
      return { __op: "AddUnique", objects: Parse._encode(this.objects()) };
    },

    _mergeWithPrevious: function(previous) {
      if (!previous) {
        return this;
      } else if (previous instanceof Parse.Op.Unset) {
        return new Parse.Op.Set(this.objects());
      } else if (previous instanceof Parse.Op.Set) {
        return new Parse.Op.Set(this._estimate(previous.value()));
      } else if (previous instanceof Parse.Op.AddUnique) {
        return new Parse.Op.AddUnique(this._estimate(previous.objects()));
      } else {
        throw "Op is invalid after previous op.";
      }
    },

    _estimate: function(oldValue) {
      if (!oldValue) {
        return _.clone(this.objects());
      } else {
        // We can't just take the _.uniq(_.union(...)) of oldValue and
        // this.objects, because the uniqueness may not apply to oldValue
        // (especially if the oldValue was set via .set())
        var newValue = _.clone(oldValue);
        Parse._arrayEach(this.objects(), function(obj) {
          if (obj instanceof Parse.Object && obj.id) {
            var matchingObj = _.find(newValue, function(anObj) {
              return (anObj instanceof Parse.Object) && (anObj.id === obj.id);
            });
            if (!matchingObj) {
              newValue.push(obj);
            } else {
              var index = _.indexOf(newValue, matchingObj);
              newValue[index] = obj;
            }
          } else if (!_.contains(newValue, obj)) {
            newValue.push(obj);
          }
        });
        return newValue;
      }
    }
  });

  Parse.Op._registerDecoder("AddUnique", function(json) {
    return new Parse.Op.AddUnique(Parse._decode(undefined, json.objects));
  });

  /**
   * @class
   * Remove is an atomic operation where the given objects will be removed from
   * the array that is stored in this field.
   */
  Parse.Op.Remove = Parse.Op._extend(/** @lends Parse.Op.Remove.prototype */ {
    _initialize: function(objects) {
      this._objects = _.uniq(objects);
    },

    /**
     * Returns the objects to be removed from the array.
     * @return {Array} The objects to be removed from the array.
     */
    objects: function() {
      return this._objects;
    },

    /**
     * Returns a JSON version of the operation suitable for sending to Parse.
     * @return {Object}
     */
    toJSON: function() {
      return { __op: "Remove", objects: Parse._encode(this.objects()) };
    },

    _mergeWithPrevious: function(previous) {
      if (!previous) {
        return this;
      } else if (previous instanceof Parse.Op.Unset) {
        return previous;
      } else if (previous instanceof Parse.Op.Set) {
        return new Parse.Op.Set(this._estimate(previous.value()));
      } else if (previous instanceof Parse.Op.Remove) {
        return new Parse.Op.Remove(_.union(previous.objects(), this.objects()));
      } else {
        throw "Op is invalid after previous op.";
      }
    },

    _estimate: function(oldValue) {
      if (!oldValue) {
        return [];
      } else {
        var newValue = _.difference(oldValue, this.objects());
        // If there are saved Parse Objects being removed, also remove them.
        Parse._arrayEach(this.objects(), function(obj) {
          if (obj instanceof Parse.Object && obj.id) {
            newValue = _.reject(newValue, function(other) {
              return (other instanceof Parse.Object) && (other.id === obj.id);
            });
          }
        });
        return newValue;
      }
    }
  });

  Parse.Op._registerDecoder("Remove", function(json) {
    return new Parse.Op.Remove(Parse._decode(undefined, json.objects));
  });

  /**
   * @class
   * A Relation operation indicates that the field is an instance of
   * Parse.Relation, and objects are being added to, or removed from, that
   * relation.
   */
  Parse.Op.Relation = Parse.Op._extend(
      /** @lends Parse.Op.Relation.prototype */ {

    _initialize: function(adds, removes) {
      this._targetClassName = null;

      var self = this;

      var pointerToId = function(object) {
        if (object instanceof Parse.Object) {
          if (!object.id) {
            throw "You can't add an unsaved Parse.Object to a relation.";
          }
          if (!self._targetClassName) {
            self._targetClassName = object.className;
          }
          if (self._targetClassName !== object.className) {
            throw "Tried to create a Parse.Relation with 2 different types: " +
                  self._targetClassName + " and " + object.className + ".";
          }
          return object.id;
        }
        return object;
      };

      this.relationsToAdd = _.uniq(_.map(adds, pointerToId));
      this.relationsToRemove = _.uniq(_.map(removes, pointerToId));
    },

    /**
     * Returns an array of unfetched Parse.Object that are being added to the
     * relation.
     * @return {Array}
     */
    added: function() {
      var self = this;
      return _.map(this.relationsToAdd, function(objectId) {
        var object = Parse.Object._create(self._targetClassName);
        object.id = objectId;
        return object;
      });
    },

    /**
     * Returns an array of unfetched Parse.Object that are being removed from
     * the relation.
     * @return {Array}
     */
    removed: function() {
      var self = this;
      return _.map(this.relationsToRemove, function(objectId) {
        var object = Parse.Object._create(self._targetClassName);
        object.id = objectId;
        return object;
      });
    },

    /**
     * Returns a JSON version of the operation suitable for sending to Parse.
     * @return {Object}
     */
    toJSON: function() {
      var adds = null;
      var removes = null;
      var self = this;
      var idToPointer = function(id) {
        return { __type: 'Pointer',
                 className: self._targetClassName,
                 objectId: id };
      };
      var pointers = null;
      if (this.relationsToAdd.length > 0) {
        pointers = _.map(this.relationsToAdd, idToPointer);
        adds = { "__op": "AddRelation", "objects": pointers };
      }

      if (this.relationsToRemove.length > 0) {
        pointers = _.map(this.relationsToRemove, idToPointer);
        removes = { "__op": "RemoveRelation", "objects": pointers };
      }

      if (adds && removes) {
        return { "__op": "Batch", "ops": [adds, removes]};
      }

      return adds || removes || {};
    },

    _mergeWithPrevious: function(previous) {
      if (!previous) {
        return this;
      } else if (previous instanceof Parse.Op.Unset) {
        throw "You can't modify a relation after deleting it.";
      } else if (previous instanceof Parse.Op.Relation) {
        if (previous._targetClassName &&
            previous._targetClassName !== this._targetClassName) {
          throw "Related object must be of class " + previous._targetClassName +
              ", but " + this._targetClassName + " was passed in.";
        }
        var newAdd = _.union(_.difference(previous.relationsToAdd,
                                          this.relationsToRemove),
                             this.relationsToAdd);
        var newRemove = _.union(_.difference(previous.relationsToRemove,
                                             this.relationsToAdd),
                                this.relationsToRemove);

        var newRelation = new Parse.Op.Relation(newAdd, newRemove);
        newRelation._targetClassName = this._targetClassName;
        return newRelation;
      } else {
        throw "Op is invalid after previous op.";
      }
    },

    _estimate: function(oldValue, object, key) {
      if (!oldValue) {
        var relation = new Parse.Relation(object, key);
        relation.targetClassName = this._targetClassName;
      } else if (oldValue instanceof Parse.Relation) {
        if (this._targetClassName) {
          if (oldValue.targetClassName) {
            if (oldValue.targetClassName !== this._targetClassName) {
              throw "Related object must be a " + oldValue.targetClassName +
                  ", but a " + this._targetClassName + " was passed in.";
            }
          } else {
            oldValue.targetClassName = this._targetClassName;
          }
        }
        return oldValue;
      } else {
        throw "Op is invalid after previous op.";
      }
    }
  });

  Parse.Op._registerDecoder("AddRelation", function(json) {
    return new Parse.Op.Relation(Parse._decode(undefined, json.objects), []);
  });
  Parse.Op._registerDecoder("RemoveRelation", function(json) {
    return new Parse.Op.Relation([], Parse._decode(undefined, json.objects));
  });

}(this));

(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * Creates a new Relation for the given parent object and key. This
   * constructor should rarely be used directly, but rather created by
   * Parse.Object.relation.
   * @param {Parse.Object} parent The parent of this relation.
   * @param {String} key The key for this relation on the parent.
   * @see Parse.Object#relation
   * @class
   *
   * <p>
   * A class that is used to access all of the children of a many-to-many
   * relationship.  Each instance of Parse.Relation is associated with a
   * particular parent object and key.
   * </p>
   */
  Parse.Relation = function(parent, key) {
    this.parent = parent;
    this.key = key;
    this.targetClassName = null;
  };

  Parse.Relation.prototype = {
    /**
     * Makes sure that this relation has the right parent and key.
     */
    _ensureParentAndKey: function(parent, key) {
      this.parent = this.parent || parent;
      this.key = this.key || key;
      if (this.parent !== parent) {
        throw "Internal Error. Relation retrieved from two different Objects.";
      }
      if (this.key !== key) {
        throw "Internal Error. Relation retrieved from two different keys.";
      }
    },

    /**
     * Adds a Parse.Object or an array of Parse.Objects to the relation.
     * @param {} objects The item or items to add.
     */
    add: function(objects) {
      if (!_.isArray(objects)) {
        objects = [objects];
      }

      var change = new Parse.Op.Relation(objects, []);
      this.parent.set(this.key, change);
      this.targetClassName = change._targetClassName;
    },

    /**
     * Removes a Parse.Object or an array of Parse.Objects from this relation.
     * @param {} objects The item or items to remove.
     */
    remove: function(objects) {
      if (!_.isArray(objects)) {
        objects = [objects];
      }

      var change = new Parse.Op.Relation([], objects);
      this.parent.set(this.key, change);
      this.targetClassName = change._targetClassName;
    },

    /**
     * Returns a JSON version of the object suitable for saving to disk.
     * @return {Object}
     */
    toJSON: function() {
      return { "__type": "Relation", "className": this.targetClassName };
    },

    /**
     * Returns a Parse.Query that is limited to objects in this
     * relation.
     * @return {Parse.Query}
     */
    query: function() {
      var targetClass;
      var query;
      if (!this.targetClassName) {
        targetClass = Parse.Object._getSubclass(this.parent.className);
        query = new Parse.Query(targetClass);
        query._extraOptions.redirectClassNameForKey = this.key;
      } else {
        targetClass = Parse.Object._getSubclass(this.targetClassName);
        query = new Parse.Query(targetClass);
      }
      query._addCondition("$relatedTo", "object", this.parent._toPointer());
      query._addCondition("$relatedTo", "key", this.key);

      return query;
    }
  };
}(this));

/*global window: false, process: false */
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * A Promise is returned by async methods as a hook to provide callbacks to be
   * called when the async task is fulfilled.
   *
   * <p>Typical usage would be like:<pre>
   *    query.find().then(function(results) {
   *      results[0].set("foo", "bar");
   *      return results[0].saveAsync();
   *    }).then(function(result) {
   *      console.log("Updated " + result.id);
   *    });
   * </pre></p>
   *
   * @see Parse.Promise.prototype.then
   * @class
   */
  Parse.Promise = function() {
    this._resolved = false;
    this._rejected = false;
    this._resolvedCallbacks = [];
    this._rejectedCallbacks = [];
  };

  _.extend(Parse.Promise, /** @lends Parse.Promise */ {

    _isPromisesAPlusCompliant: false,

    /**
     * Returns true iff the given object fulfils the Promise interface.
     * @return {Boolean}
     */
    is: function(promise) {
      return promise && promise.then && _.isFunction(promise.then);
    },

    /**
     * Returns a new promise that is resolved with a given value.
     * @return {Parse.Promise} the new promise.
     */
    as: function() {
      var promise = new Parse.Promise();
      promise.resolve.apply(promise, arguments);
      return promise;
    },

    /**
     * Returns a new promise that is rejected with a given error.
     * @return {Parse.Promise} the new promise.
     */
    error: function() {
      var promise = new Parse.Promise();
      promise.reject.apply(promise, arguments);
      return promise;
    },

    /**
     * Returns a new promise that is fulfilled when all of the input promises
     * are resolved. If any promise in the list fails, then the returned promise
     * will fail with the last error. If they all succeed, then the returned
     * promise will succeed, with the results being the results of all the input
     * promises. For example: <pre>
     *   var p1 = Parse.Promise.as(1);
     *   var p2 = Parse.Promise.as(2);
     *   var p3 = Parse.Promise.as(3);
     *
     *   Parse.Promise.when(p1, p2, p3).then(function(r1, r2, r3) {
     *     console.log(r1);  // prints 1
     *     console.log(r2);  // prints 2
     *     console.log(r3);  // prints 3
     *   });</pre>
     *
     * The input promises can also be specified as an array: <pre>
     *   var promises = [p1, p2, p3];
     *   Parse.Promise.when(promises).then(function(r1, r2, r3) {
     *     console.log(r1);  // prints 1
     *     console.log(r2);  // prints 2
     *     console.log(r3);  // prints 3
     *   });
     * </pre>
     * @param {Array} promises a list of promises to wait for.
     * @return {Parse.Promise} the new promise.
     */
    when: function(promises) {
      // Allow passing in Promises as separate arguments instead of an Array.
      var objects;
      if (promises && Parse._isNullOrUndefined(promises.length)) {
        objects = arguments;
      } else {
        objects = promises;
      }

      var total = objects.length;
      var hadError = false;
      var results = [];
      var errors = [];
      results.length = objects.length;
      errors.length = objects.length;

      if (total === 0) {
        return Parse.Promise.as.apply(this, results);
      }

      var promise = new Parse.Promise();

      var resolveOne = function() {
        total = total - 1;
        if (total === 0) {
          if (hadError) {
            promise.reject(errors);
          } else {
            promise.resolve.apply(promise, results);
          }
        }
      };

      Parse._arrayEach(objects, function(object, i) {
        if (Parse.Promise.is(object)) {
          object.then(function(result) {
            results[i] = result;
            resolveOne();
          }, function(error) {
            errors[i] = error;
            hadError = true;
            resolveOne();
          });
        } else {
          results[i] = object;
          resolveOne();
        }
      });

      return promise;
    },

    /**
     * Runs the given asyncFunction repeatedly, as long as the predicate
     * function returns a truthy value. Stops repeating if asyncFunction returns
     * a rejected promise.
     * @param {Function} predicate should return false when ready to stop.
     * @param {Function} asyncFunction should return a Promise.
     */
    _continueWhile: function(predicate, asyncFunction) {
      if (predicate()) {
        return asyncFunction().then(function() {
          return Parse.Promise._continueWhile(predicate, asyncFunction);
        });
      }
      return Parse.Promise.as();
    }
  });

  _.extend(Parse.Promise.prototype, /** @lends Parse.Promise.prototype */ {

    /**
     * Marks this promise as fulfilled, firing any callbacks waiting on it.
     * @param {Object} result the result to pass to the callbacks.
     */
    resolve: function(result) {
      if (this._resolved || this._rejected) {
        throw "A promise was resolved even though it had already been " +
          (this._resolved ? "resolved" : "rejected") + ".";
      }
      this._resolved = true;
      this._result = arguments;
      var results = arguments;
      Parse._arrayEach(this._resolvedCallbacks, function(resolvedCallback) {
        resolvedCallback.apply(this, results);
      });
      this._resolvedCallbacks = [];
      this._rejectedCallbacks = [];
    },

    /**
     * Marks this promise as fulfilled, firing any callbacks waiting on it.
     * @param {Object} error the error to pass to the callbacks.
     */
    reject: function(error) {
      if (this._resolved || this._rejected) {
        throw "A promise was rejected even though it had already been " +
          (this._resolved ? "resolved" : "rejected") + ".";
      }
      this._rejected = true;
      this._error = error;
      Parse._arrayEach(this._rejectedCallbacks, function(rejectedCallback) {
        rejectedCallback(error);
      });
      this._resolvedCallbacks = [];
      this._rejectedCallbacks = [];
    },

    /**
     * Adds callbacks to be called when this promise is fulfilled. Returns a new
     * Promise that will be fulfilled when the callback is complete. It allows
     * chaining. If the callback itself returns a Promise, then the one returned
     * by "then" will not be fulfilled until that one returned by the callback
     * is fulfilled.
     * @param {Function} resolvedCallback Function that is called when this
     * Promise is resolved. Once the callback is complete, then the Promise
     * returned by "then" will also be fulfilled.
     * @param {Function} rejectedCallback Function that is called when this
     * Promise is rejected with an error. Once the callback is complete, then
     * the promise returned by "then" with be resolved successfully. If
     * rejectedCallback is null, or it returns a rejected Promise, then the
     * Promise returned by "then" will be rejected with that error.
     * @return {Parse.Promise} A new Promise that will be fulfilled after this
     * Promise is fulfilled and either callback has completed. If the callback
     * returned a Promise, then this Promise will not be fulfilled until that
     * one is.
     */
    then: function(resolvedCallback, rejectedCallback) {
      var promise = new Parse.Promise();

      var wrappedResolvedCallback = function() {
        var result = arguments;
        if (resolvedCallback) {
          if (Parse.Promise._isPromisesAPlusCompliant) {
            try {
              result = [resolvedCallback.apply(this, result)];
            } catch (e) {
              result = [Parse.Promise.error(e)];
            }
          } else {
            result = [resolvedCallback.apply(this, result)];
          }
        }
        if (result.length === 1 && Parse.Promise.is(result[0])) {
          result[0].then(function() {
            promise.resolve.apply(promise, arguments);
          }, function(error) {
            promise.reject(error);
          });
        } else {
          promise.resolve.apply(promise, result);
        }
      };

      var wrappedRejectedCallback = function(error) {
        var result = [];
        if (rejectedCallback) {
          if (Parse.Promise._isPromisesAPlusCompliant) {
            try {
              result = [rejectedCallback(error)];
            } catch (e) {
              result = [Parse.Promise.error(e)];
            }
          } else {
            result = [rejectedCallback(error)];
          }
          if (result.length === 1 && Parse.Promise.is(result[0])) {
            result[0].then(function() {
              promise.resolve.apply(promise, arguments);
            }, function(error) {
              promise.reject(error);
            });
          } else {
            if (Parse.Promise._isPromisesAPlusCompliant) {
              promise.resolve.apply(promise, result);
            } else {
              promise.reject(result[0]);
            }
          }
        } else {
          promise.reject(error);
        }
      };

      var runLater = function(func) {
        func.call();
      };
      if (Parse.Promise._isPromisesAPlusCompliant) {
        if (typeof(window) !== 'undefined' && window.setTimeout) {
          runLater = function(func) {
            window.setTimeout(func, 0);
          };
        } else if (typeof(process) !== 'undefined' && process.nextTick) {
          runLater = function(func) {
            process.nextTick(func);
          };
        }
      }

      var self = this;
      if (this._resolved) {
        runLater(function() {
          wrappedResolvedCallback.apply(self, self._result);
        });
      } else if (this._rejected) {
        runLater(function() {
          wrappedRejectedCallback(self._error);
        });
      } else {
        this._resolvedCallbacks.push(wrappedResolvedCallback);
        this._rejectedCallbacks.push(wrappedRejectedCallback);
      }

      return promise;
    },

    /**
     * Add handlers to be called when the promise 
     * is either resolved or rejected
     */
    always: function(callback) {
      return this.then(callback, callback);
    },

    /**
     * Add handlers to be called when the Promise object is resolved
     */
    done: function(callback) {
      return this.then(callback);
    },

    /**
     * Add handlers to be called when the Promise object is rejected
     */
    fail: function(callback) {
      return this.then(null, callback);
    },

    /**
     * Run the given callbacks after this promise is fulfilled.
     * @param optionsOrCallback {} A Backbone-style options callback, or a
     * callback function. If this is an options object and contains a "model"
     * attributes, that will be passed to error callbacks as the first argument.
     * @param model {} If truthy, this will be passed as the first result of
     * error callbacks. This is for Backbone-compatability.
     * @return {Parse.Promise} A promise that will be resolved after the
     * callbacks are run, with the same result as this.
     */
    _thenRunCallbacks: function(optionsOrCallback, model) {
      var options;
      if (_.isFunction(optionsOrCallback)) {
        var callback = optionsOrCallback;
        options = {
          success: function(result) {
            callback(result, null);
          },
          error: function(error) {
            callback(null, error);
          }
        };
      } else {
        options = _.clone(optionsOrCallback);
      }
      options = options || {};

      return this.then(function(result) {
        if (options.success) {
          options.success.apply(this, arguments);
        } else if (model) {
          // When there's no callback, a sync event should be triggered.
          model.trigger('sync', model, result, options);
        }
        return Parse.Promise.as.apply(Parse.Promise, arguments);
      }, function(error) {
        if (options.error) {
          if (!_.isUndefined(model)) {
            options.error(model, error);
          } else {
            options.error(error);
          }
        } else if (model) {
          // When there's no error callback, an error event should be triggered.
          model.trigger('error', model, error, options);
        }
        // By explicitly returning a rejected Promise, this will work with
        // either jQuery or Promises/A semantics.
        return Parse.Promise.error(error);
      });
    },

    /**
     * Adds a callback function that should be called regardless of whether
     * this promise failed or succeeded. The callback will be given either the
     * array of results for its first argument, or the error as its second,
     * depending on whether this Promise was rejected or resolved. Returns a
     * new Promise, like "then" would.
     * @param {Function} continuation the callback.
     */
    _continueWith: function(continuation) {
      return this.then(function() {
        return continuation(arguments, null);
      }, function(error) {
        return continuation(null, error);
      });
    }

  });

}(this));

/*jshint bitwise:false *//*global FileReader: true, File: true */
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  var b64Digit = function(number) {
    if (number < 26) {
      return String.fromCharCode(65 + number);
    }
    if (number < 52) {
      return String.fromCharCode(97 + (number - 26));
    }
    if (number < 62) {
      return String.fromCharCode(48 + (number - 52));
    }
    if (number === 62) {
      return "+";
    }
    if (number === 63) {
      return "/";
    }
    throw "Tried to encode large digit " + number + " in base64.";
  };

  var encodeBase64 = function(array) {
    var chunks = [];
    chunks.length = Math.ceil(array.length / 3);
    _.times(chunks.length, function(i) {
      var b1 = array[i * 3];
      var b2 = array[i * 3 + 1] || 0;
      var b3 = array[i * 3 + 2] || 0;

      var has2 = (i * 3 + 1) < array.length;
      var has3 = (i * 3 + 2) < array.length;

      chunks[i] = [
        b64Digit((b1 >> 2) & 0x3F),
        b64Digit(((b1 << 4) & 0x30) | ((b2 >> 4) & 0x0F)),
        has2 ? b64Digit(((b2 << 2) & 0x3C) | ((b3 >> 6) & 0x03)) : "=",
        has3 ? b64Digit(b3 & 0x3F) : "="
      ].join("");
    });
    return chunks.join("");
  };

  /**
   * Reads a File using a FileReader.
   * @param file {File} the File to read.
   * @param type {String} (optional) the mimetype to override with.
   * @return {Parse.Promise} A Promise that will be fulfilled with a
   *     base64-encoded string of the data and its mime type.
   */
  var readAsync = function(file, type) {
    var promise = new Parse.Promise();

    if (typeof(FileReader) === "undefined") {
      return Parse.Promise.error(new Parse.Error(
          Parse.Error.FILE_READ_ERROR,
          "Attempted to use a FileReader on an unsupported browser."));
    }

    var reader = new FileReader();
    reader.onloadend = function() {
      if (reader.readyState !== 2) {
        promise.reject(new Parse.Error(
            Parse.Error.FILE_READ_ERROR,
            "Error reading file."));
        return;
      }

      var dataURL = reader.result;
      var matches = /^data:([^;]*);base64,(.*)$/.exec(dataURL);
      if (!matches) {
        promise.reject(new Parse.Error(
            Parse.Error.FILE_READ_ERROR,
            "Unable to interpret data URL: " + dataURL));
        return;
      }

      promise.resolve(matches[2], type || matches[1]);
    };
    reader.readAsDataURL(file);
    return promise;
  };

  /**
   * A Parse.File is a local representation of a file that is saved to the Parse
   * cloud.
   * @class
   * @param name {String} The file's name. This will be prefixed by a unique
   *     value once the file has finished saving. The file name must begin with
   *     an alphanumeric character, and consist of alphanumeric characters,
   *     periods, spaces, underscores, or dashes.
   * @param data {Array} The data for the file, as either:
   *     1. an Array of byte value Numbers, or
   *     2. an Object like { base64: "..." } with a base64-encoded String.
   *     3. a File object selected with a file upload control. (3) only works
   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.
   *        For example:<pre>
   * var fileUploadControl = $("#profilePhotoFileUpload")[0];
   * if (fileUploadControl.files.length > 0) {
   *   var file = fileUploadControl.files[0];
   *   var name = "photo.jpg";
   *   var parseFile = new Parse.File(name, file);
   *   parseFile.save().then(function() {
   *     // The file has been saved to Parse.
   *   }, function(error) {
   *     // The file either could not be read, or could not be saved to Parse.
   *   });
   * }</pre>
   * @param type {String} Optional Content-Type header to use for the file. If
   *     this is omitted, the content type will be inferred from the name's
   *     extension.
   */
  Parse.File = function(name, data, type) {
    this._name = name;

    // Guess the content type from the extension if we need to.
    var extension = /\.([^.]*)$/.exec(name);
    if (extension) {
      extension = extension[1].toLowerCase();
    }
    var specifiedType = type || '';

    if (_.isArray(data)) {
      this._source = Parse.Promise.as(encodeBase64(data), specifiedType);
    } else if (data && data.base64) {
      // if it contains data uri, extract based64 and the type out of it.
      /*jslint maxlen: 1000*/
      var dataUriRegexp = /^data:([a-zA-Z]*\/[a-zA-Z+.-]*);(charset=[a-zA-Z0-9\-\/\s]*,)?base64,(\S+)/;
      /*jslint maxlen: 80*/

      var matches = dataUriRegexp.exec(data.base64);
      if (matches && matches.length > 0) {
        // if data URI with charset, there will have 4 matches.
        this._source = Parse.Promise.as(
          (matches.length === 4 ? matches[3] : matches[2]), matches[1]
        );
      } else {
        this._source = Parse.Promise.as(data.base64, specifiedType);
      }
    } else if (typeof(File) !== "undefined" && data instanceof File) {
      this._source = readAsync(data, type);
    } else if (_.isString(data)) {
      throw "Creating a Parse.File from a String is not yet supported.";
    }
  };

  Parse.File.prototype = {

    /**
     * Gets the name of the file. Before save is called, this is the filename
     * given by the user. After save is called, that name gets prefixed with a
     * unique identifier.
     */
    name: function() {
      return this._name;
    },

    /**
     * Gets the url of the file. It is only available after you save the file or
     * after you get the file from a Parse.Object.
     * @return {String}
     */
    url: function() {
      return this._url;
    },

    /**
     * Saves the file to the Parse cloud.
     * @param {Object} options A Backbone-style options object.
     * @return {Parse.Promise} Promise that is resolved when the save finishes.
     */
    save: function(options) {
      options= options || {};

      var self = this;
      if (!self._previousSave) {
        self._previousSave = self._source.then(function(base64, type) {
          var data = {
            base64: base64,
            _ContentType: type
          };
          return Parse._request({
            route: "files",
            className: self._name,
            method: 'POST',
            data: data,
            useMasterKey: options.useMasterKey
          });

        }).then(function(response) {
          self._name = response.name;
          self._url = response.url;
          return self;
        });
      }
      return self._previousSave._thenRunCallbacks(options);
    }
  };

}(this));

// Parse.Object is analogous to the Java ParseObject.
// It also implements the same interface as a Backbone model.
// TODO: multiple dispatch for callbacks
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * Creates a new model with defined attributes. A client id (cid) is
   * automatically generated and assigned for you.
   *
   * <p>You won't normally call this method directly.  It is recommended that
   * you use a subclass of <code>Parse.Object</code> instead, created by calling
   * <code>extend</code>.</p>
   *
   * <p>However, if you don't want to use a subclass, or aren't sure which
   * subclass is appropriate, you can use this form:<pre>
   *     var object = new Parse.Object("ClassName");
   * </pre>
   * That is basically equivalent to:<pre>
   *     var MyClass = Parse.Object.extend("ClassName");
   *     var object = new MyClass();
   * </pre></p>
   *
   * @param {Object} attributes The initial set of data to store in the object.
   * @param {Object} options A set of Backbone-like options for creating the
   *     object.  The only option currently supported is "collection".
   * @see Parse.Object.extend
   *
   * @class
   *
   * <p>The fundamental unit of Parse data, which implements the Backbone Model
   * interface.</p>
   */
  Parse.Object = function(attributes, options) {
    // Allow new Parse.Object("ClassName") as a shortcut to _create.
    if (_.isString(attributes)) {
      return Parse.Object._create.apply(this, arguments);
    }

    attributes = attributes || {};
    if (options && options.parse) {
      attributes = this.parse(attributes);
    }
    var defaults = Parse._getValue(this, 'defaults');
    if (defaults) {
      attributes = _.extend({}, defaults, attributes);
    }
    if (options && options.collection) {
      this.collection = options.collection;
    }

    this._serverData = {};  // The last known data for this object from cloud.
    this._opSetQueue = [{}];  // List of sets of changes to the data.
    this.attributes = {};  // The best estimate of this's current data.

    this._hashedJSON = {};  // Hash of values of containers at last save.
    this._escapedAttributes = {};
    this.cid = _.uniqueId('c');
    this.changed = {};
    this._silent = {};
    this._pending = {};
    if (!this.set(attributes, {silent: true})) {
      throw new Error("Can't create an invalid Parse.Object");
    }
    this.changed = {};
    this._silent = {};
    this._pending = {};
    this._hasData = true;
    this._previousAttributes = _.clone(this.attributes);
    this.initialize.apply(this, arguments);
  };

  /**
   * The ID of this object, unique within its class.
   * @name id
   * @type String
   * @field
   * @memberOf Parse.Object.prototype
   */

  /**
   * The first time this object was saved on the server.
   * @name createdAt
   * @type Date
   * @field
   * @memberOf Parse.Object.prototype
   */

  /**
   * The last time this object was updated on the server.
   * @name updatedAt
   * @type Date
   * @field
   * @memberOf Parse.Object.prototype
   */

  /**
   * Saves the given list of Parse.Object.
   * If any error is encountered, stops and calls the error handler.
   *
   * <pre>
   *   Parse.Object.saveAll([object1, object2, ...], {
   *     success: function(list) {
   *       // All the objects were saved.
   *     },
   *     error: function(error) {
   *       // An error occurred while saving one of the objects.
   *     },
   *   });
   * </pre>
   *
   * @param {Array} list A list of <code>Parse.Object</code>.
   * @param {Object} options A Backbone-style callback object.
   * Valid options are:<ul>
   *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
   *     be used for this request.
   *   <li>sessionToken: A valid session token, used for making a request on
   *       behalf of a specific user.
   * </ul>
   */
  Parse.Object.saveAll = function(list, options) {
    options = options || {};
    return Parse.Object._deepSaveAsync(list, {
      useMasterKey: options.useMasterKey,
      sessionToken: options.sessionToken
    })._thenRunCallbacks(options);
  };

  /**
   * Destroy the given list of models on the server if it was already persisted.
   * Optimistically removes each model from its collection, if it has one.
   * If `wait: true` is passed, waits for the server to respond before removal.
   *
   * <p>Unlike saveAll, if an error occurs while deleting an individual model,
   * this method will continue trying to delete the rest of the models if
   * possible, except in the case of a fatal error like a connection error.
   *
   * <p>In particular, the Parse.Error object returned in the case of error may
   * be one of two types:
   *
   * <ul>
   *   <li>A Parse.Error.AGGREGATE_ERROR. This object's "errors" property is an
   *       array of other Parse.Error objects. Each error object in this array
   *       has an "object" property that references the object that could not be
   *       deleted (for instance, because that object could not be found).</li>
   *   <li>A non-aggregate Parse.Error. This indicates a serious error that
   *       caused the delete operation to be aborted partway through (for
   *       instance, a connection failure in the middle of the delete).</li>
   * </ul>
   *
   * <pre>
   *   Parse.Object.destroyAll([object1, object2, ...], {
   *     success: function() {
   *       // All the objects were deleted.
   *     },
   *     error: function(error) {
   *       // An error occurred while deleting one or more of the objects.
   *       // If this is an aggregate error, then we can inspect each error
   *       // object individually to determine the reason why a particular
   *       // object was not deleted.
   *       if (error.code == Parse.Error.AGGREGATE_ERROR) {
   *         for (var i = 0; i < error.errors.length; i++) {
   *           console.log("Couldn't delete " + error.errors[i].object.id +
   *             "due to " + error.errors[i].message);
   *         }
   *       } else {
   *         console.log("Delete aborted because of " + error.message);
   *       }
   *     },
   *   });
   * </pre>
   *
   * @param {Array} list A list of <code>Parse.Object</code>.
   * @param {Object} options A Backbone-style callback object.
   * Valid options are:<ul>
   *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
   *     be used for this request.
   *   <li>sessionToken: A valid session token, used for making a request on
   *       behalf of a specific user.
   * </ul>
   * @return {Parse.Promise} A promise that is fulfilled when the destroyAll
   *     completes.
   */
  Parse.Object.destroyAll = function(list, options) {
    options = options || {};

    var triggerDestroy = function(object) {
      object.trigger('destroy', object, object.collection, options);
    };

    var errors = [];
    var destroyBatch = function(batch) {
      var promise = Parse.Promise.as();

      if (batch.length > 0) {
        promise = promise.then(function() {
          return Parse._request({
            route: "batch",
            method: "POST",
            useMasterKey: options.useMasterKey,
            sessionToken: options.sessionToken,
            data: {
              requests: _.map(batch, function(object) {
                return {
                  method: "DELETE",
                  path: "/1/classes/" + object.className + "/" + object.id
                };
              })
            }
          });
        }).then(function(responses, status, xhr) {
          Parse._arrayEach(batch, function(object, i) {
            if (responses[i].success && options.wait) {
              triggerDestroy(object);
            } else if (responses[i].error) {
              var error = new Parse.Error(responses[i].error.code,
                                          responses[i].error.error);
              error.object = object;

              errors.push(error);
            }
          });
        });
      }

      return promise;
    };

    var promise = Parse.Promise.as();
    var batch = [];
    Parse._arrayEach(list, function(object, i) {
      if (!object.id || !options.wait) {
        triggerDestroy(object);
      }

      if (object.id) {
        batch.push(object);
      }

      if (batch.length === 20 || i+1 === list.length) {
        var thisBatch = batch;
        batch = [];

        promise = promise.then(function() {
          return destroyBatch(thisBatch);
        });
      }
    });

    return promise.then(function() {
      if (errors.length === 0) {
        return true;
      } else {
        var error = new Parse.Error(Parse.Error.AGGREGATE_ERROR,
                                    "Error deleting an object in destroyAll");
        error.errors = errors;

        return Parse.Promise.error(error);
      }
    })._thenRunCallbacks(options);
  };

  /**
   * Fetches the given list of Parse.Object.
   * If any error is encountered, stops and calls the error handler.
   *
   * <pre>
   *   Parse.Object.fetchAll([object1, object2, ...], {
   *     success: function(list) {
   *       // All the objects were fetched.
   *     },
   *     error: function(error) {
   *       // An error occurred while fetching one of the objects.
   *     },
   *   });
   * </pre>
   *
   * @param {Array} list A list of <code>Parse.Object</code>.
   * @param {Object} options A Backbone-style callback object.
   * Valid options are:<ul>
   *   <li>success: A Backbone-style success callback.
   *   <li>error: An Backbone-style error callback.
   * </ul>
   */
  Parse.Object.fetchAll = function(list, options) {
    return Parse.Object._fetchAll(
      list,
      true
    )._thenRunCallbacks(options);
  };

  /**
   * Fetches the given list of Parse.Object if needed.
   * If any error is encountered, stops and calls the error handler.
   *
   * <pre>
   *   Parse.Object.fetchAllIfNeeded([object1, ...], {
   *     success: function(list) {
   *       // Objects were fetched and updated.
   *     },
   *     error: function(error) {
   *       // An error occurred while fetching one of the objects.
   *     },
   *   });
   * </pre>
   *
   * @param {Array} list A list of <code>Parse.Object</code>.
   * @param {Object} options A Backbone-style callback object.
   * Valid options are:<ul>
   *   <li>success: A Backbone-style success callback.
   *   <li>error: An Backbone-style error callback.
   * </ul>
   */
  Parse.Object.fetchAllIfNeeded = function(list, options) {
    return Parse.Object._fetchAll(
      list,
      false
    )._thenRunCallbacks(options);
  };

  // Attach all inheritable methods to the Parse.Object prototype.
  _.extend(Parse.Object.prototype, Parse.Events,
           /** @lends Parse.Object.prototype */ {
    _existed: false,

    /**
     * Initialize is an empty function by default. Override it with your own
     * initialization logic.
     */
    initialize: function(){},

    /**
     * Returns a JSON version of the object suitable for saving to Parse.
     * @return {Object}
     */
    toJSON: function() {
      var json = this._toFullJSON();
      Parse._arrayEach(["__type", "className"],
                       function(key) { delete json[key]; });
      return json;
    },

    _toFullJSON: function(seenObjects) {
      var json = _.clone(this.attributes);
      Parse._objectEach(json, function(val, key) {
        json[key] = Parse._encode(val, seenObjects);
      });
      Parse._objectEach(this._operations, function(val, key) {
        json[key] = val;
      });

      if (_.has(this, "id")) {
        json.objectId = this.id;
      }
      if (_.has(this, "createdAt")) {
        if (_.isDate(this.createdAt)) {
          json.createdAt = this.createdAt.toJSON();
        } else {
          json.createdAt = this.createdAt;
        }
      }

      if (_.has(this, "updatedAt")) {
        if (_.isDate(this.updatedAt)) {
          json.updatedAt = this.updatedAt.toJSON();
        } else {
          json.updatedAt = this.updatedAt;
        }
      }
      json.__type = "Object";
      json.className = this.className;
      return json;
    },

    /**
     * Updates _hashedJSON to reflect the current state of this object.
     * Adds any changed hash values to the set of pending changes.
     */
    _refreshCache: function() {
      var self = this;
      if (self._refreshingCache) {
        return;
      }
      self._refreshingCache = true;
      Parse._objectEach(this.attributes, function(value, key) {
        if (value instanceof Parse.Object) {
          value._refreshCache();
        } else if (_.isObject(value)) {
          var objectArray = false;
          if (_.isArray(value)) {
            // We don't cache arrays of Parse.Objects
            _.each(value, function(arrVal) {
              if (arrVal instanceof Parse.Object) {
                objectArray = true;
                arrVal._refreshCache();
              }
            });
          }
          if (!objectArray && self._resetCacheForKey(key)) {
            self.set(key, new Parse.Op.Set(value), { silent: true });
          }
        }
      });
      delete self._refreshingCache;
    },

    /**
     * Returns true if this object has been modified since its last
     * save/refresh.  If an attribute is specified, it returns true only if that
     * particular attribute has been modified since the last save/refresh.
     * @param {String} attr An attribute name (optional).
     * @return {Boolean}
     */
    dirty: function(attr) {
      this._refreshCache();

      var currentChanges = _.last(this._opSetQueue);

      if (attr) {
        return (currentChanges[attr] ? true : false);
      }
      if (!this.id) {
        return true;
      }
      if (_.keys(currentChanges).length > 0) {
        return true;
      }
      return false;
    },

    /**
     * Returns an array of keys that have been modified since last save/refresh
     * @return {Array of string}
     */
    dirtyKeys: function() {
      return _.keys(_.last(this._opSetQueue));
    },

    /**
     * Gets a Pointer referencing this Object.
     */
    _toPointer: function() {
      if (!this.id) {
        throw new Error("Can't serialize an unsaved Parse.Object");
      }
      return { __type: "Pointer",
               className: this.className,
               objectId: this.id };
    },

    /**
     * Gets the value of an attribute.
     * @param {String} attr The string name of an attribute.
     */
    get: function(attr) {
      return this.attributes[attr];
    },

    /**
     * Gets a relation on the given class for the attribute.
     * @param String attr The attribute to get the relation for.
     */
    relation: function(attr) {
      var value = this.get(attr);
      if (value) {
        if (!(value instanceof Parse.Relation)) {
          throw "Called relation() on non-relation field " + attr;
        }
        value._ensureParentAndKey(this, attr);
        return value;
      } else {
        return new Parse.Relation(this, attr);
      }
    },

    /**
     * Gets the HTML-escaped value of an attribute.
     */
    escape: function(attr) {
      var html = this._escapedAttributes[attr];
      if (html) {
        return html;
      }
      var val = this.attributes[attr];
      var escaped;
      if (Parse._isNullOrUndefined(val)) {
        escaped = '';
      } else {
        escaped = _.escape(val.toString());
      }
      this._escapedAttributes[attr] = escaped;
      return escaped;
    },

    /**
     * Returns <code>true</code> if the attribute contains a value that is not
     * null or undefined.
     * @param {String} attr The string name of the attribute.
     * @return {Boolean}
     */
    has: function(attr) {
      return !Parse._isNullOrUndefined(this.attributes[attr]);
    },

    /**
     * Pulls "special" fields like objectId, createdAt, etc. out of attrs
     * and puts them on "this" directly.  Removes them from attrs.
     * @param attrs - A dictionary with the data for this Parse.Object.
     */
    _mergeMagicFields: function(attrs) {
      // Check for changes of magic fields.
      var model = this;
      var specialFields = ["id", "objectId", "createdAt", "updatedAt"];
      Parse._arrayEach(specialFields, function(attr) {
        if (attrs[attr]) {
          if (attr === "objectId") {
            model.id = attrs[attr];
          } else if ((attr === "createdAt" || attr === "updatedAt") &&
                     !_.isDate(attrs[attr])) {
            model[attr] = Parse._parseDate(attrs[attr]);
          } else {
            model[attr] = attrs[attr];
          }
          delete attrs[attr];
        }
      });
    },

    /**
     * Copies the given serverData to "this", refreshes attributes, and
     * clears pending changes;
     */
    _copyServerData: function(serverData) {
      // Copy server data
      var tempServerData = {};
      Parse._objectEach(serverData, function(value, key) {
        tempServerData[key] = Parse._decode(key, value);
      });
      this._serverData = tempServerData;

      // Refresh the attributes.
      this._rebuildAllEstimatedData();

      // TODO (bklimt): Revisit clearing operations, perhaps move to revert.
      // Clear out any changes the user might have made previously.
      this._refreshCache();
      this._opSetQueue = [{}];

      // Refresh the attributes again.
      this._rebuildAllEstimatedData();
    },

    /**
     * Merges another object's attributes into this object.
     */
    _mergeFromObject: function(other) {
      if (!other) {
        return;
      }

      // This does the inverse of _mergeMagicFields.
      this.id = other.id;
      this.createdAt = other.createdAt;
      this.updatedAt = other.updatedAt;

      this._copyServerData(other._serverData);

      this._hasData = true;
    },

    /**
     * Returns the json to be sent to the server.
     */
    _startSave: function() {
      this._opSetQueue.push({});
    },

    /**
     * Called when a save fails because of an error. Any changes that were part
     * of the save need to be merged with changes made after the save. This
     * might throw an exception is you do conflicting operations. For example,
     * if you do:
     *   object.set("foo", "bar");
     *   object.set("invalid field name", "baz");
     *   object.save();
     *   object.increment("foo");
     * then this will throw when the save fails and the client tries to merge
     * "bar" with the +1.
     */
    _cancelSave: function() {
      var self = this;
      var failedChanges = _.first(this._opSetQueue);
      this._opSetQueue = _.rest(this._opSetQueue);
      var nextChanges = _.first(this._opSetQueue);
      Parse._objectEach(failedChanges, function(op, key) {
        var op1 = failedChanges[key];
        var op2 = nextChanges[key];
        if (op1 && op2) {
          nextChanges[key] = op2._mergeWithPrevious(op1);
        } else if (op1) {
          nextChanges[key] = op1;
        }
      });
      this._saving = this._saving - 1;
    },

    /**
     * Called when a save completes successfully. This merges the changes that
     * were saved into the known server data, and overrides it with any data
     * sent directly from the server.
     */
    _finishSave: function(serverData) {
      // Grab a copy of any object referenced by this object. These instances
      // may have already been fetched, and we don't want to lose their data.
      // Note that doing it like this means we will unify separate copies of the
      // same object, but that's a risk we have to take.
      var fetchedObjects = {};
      Parse._traverse(this.attributes, function(object) {
        if (object instanceof Parse.Object && object.id && object._hasData) {
          fetchedObjects[object.id] = object;
        }
      });

      var savedChanges = _.first(this._opSetQueue);
      this._opSetQueue = _.rest(this._opSetQueue);
      this._applyOpSet(savedChanges, this._serverData);
      this._mergeMagicFields(serverData);
      var self = this;
      Parse._objectEach(serverData, function(value, key) {
        self._serverData[key] = Parse._decode(key, value);

        // Look for any objects that might have become unfetched and fix them
        // by replacing their values with the previously observed values.
        var fetched = Parse._traverse(self._serverData[key], function(object) {
          if (object instanceof Parse.Object && fetchedObjects[object.id]) {
            return fetchedObjects[object.id];
          }
        });
        if (fetched) {
          self._serverData[key] = fetched;
        }
      });
      this._rebuildAllEstimatedData();
      this._saving = this._saving - 1;
    },

    /**
     * Called when a fetch or login is complete to set the known server data to
     * the given object.
     */
    _finishFetch: function(serverData, hasData) {
      // TODO (bklimt): Revisit clearing operations, perhaps move to revert.
      this._opSetQueue = [{}];

      // Bring in all the new server data.
      this._mergeMagicFields(serverData);
      this._copyServerData(serverData);

      this._hasData = hasData;
    },

    /**
     * Applies the set of Parse.Op in opSet to the object target.
     */
    _applyOpSet: function(opSet, target) {
      var self = this;
      Parse._objectEach(opSet, function(change, key) {
        target[key] = change._estimate(target[key], self, key);
        if (target[key] === Parse.Op._UNSET) {
          delete target[key];
        }
      });
    },

    /**
     * Replaces the cached value for key with the current value.
     * Returns true if the new value is different than the old value.
     */
    _resetCacheForKey: function(key) {
      var value = this.attributes[key];
      if (_.isObject(value) &&
          !(value instanceof Parse.Object) &&
          !(value instanceof Parse.File)) {
        value = value.toJSON ? value.toJSON() : value;
        var json = JSON.stringify(value);
        if (this._hashedJSON[key] !== json) {
          var wasSet = !!this._hashedJSON[key];
          this._hashedJSON[key] = json;
          return wasSet;
        }
      }
      return false;
    },

    /**
     * Populates attributes[key] by starting with the last known data from the
     * server, and applying all of the local changes that have been made to that
     * key since then.
     */
    _rebuildEstimatedDataForKey: function(key) {
      var self = this;
      delete this.attributes[key];
      if (this._serverData[key]) {
        this.attributes[key] = this._serverData[key];
      }
      Parse._arrayEach(this._opSetQueue, function(opSet) {
        var op = opSet[key];
        if (op) {
          self.attributes[key] = op._estimate(self.attributes[key], self, key);
          if (self.attributes[key] === Parse.Op._UNSET) {
            delete self.attributes[key];
          } else {
            self._resetCacheForKey(key);
          }
        }
      });
    },

    /**
     * Populates attributes by starting with the last known data from the
     * server, and applying all of the local changes that have been made since
     * then.
     */
    _rebuildAllEstimatedData: function() {
      var self = this;

      var previousAttributes = _.clone(this.attributes);

      this.attributes = _.clone(this._serverData);
      Parse._arrayEach(this._opSetQueue, function(opSet) {
        self._applyOpSet(opSet, self.attributes);
        Parse._objectEach(opSet, function(op, key) {
          self._resetCacheForKey(key);
        });
      });

      // Trigger change events for anything that changed because of the fetch.
      Parse._objectEach(previousAttributes, function(oldValue, key) {
        if (self.attributes[key] !== oldValue) {
          self.trigger('change:' + key, self, self.attributes[key], {});
        }
      });
      Parse._objectEach(this.attributes, function(newValue, key) {
        if (!_.has(previousAttributes, key)) {
          self.trigger('change:' + key, self, newValue, {});
        }
      });
    },

    /**
     * Sets a hash of model attributes on the object, firing
     * <code>"change"</code> unless you choose to silence it.
     *
     * <p>You can call it with an object containing keys and values, or with one
     * key and value.  For example:<pre>
     *   gameTurn.set({
     *     player: player1,
     *     diceRoll: 2
     *   }, {
     *     error: function(gameTurnAgain, error) {
     *       // The set failed validation.
     *     }
     *   });
     *
     *   game.set("currentPlayer", player2, {
     *     error: function(gameTurnAgain, error) {
     *       // The set failed validation.
     *     }
     *   });
     *
     *   game.set("finished", true);</pre></p>
     *
     * @param {String} key The key to set.
     * @param {} value The value to give it.
     * @param {Object} options A set of Backbone-like options for the set.
     *     The only supported options are <code>silent</code>,
     *     <code>error</code>, and <code>promise</code>.
     * @return {Boolean} true if the set succeeded.
     * @see Parse.Object#validate
     * @see Parse.Error
     */
    set: function(key, value, options) {
      var attrs, attr;
      if (_.isObject(key) || Parse._isNullOrUndefined(key)) {
        attrs = key;
        Parse._objectEach(attrs, function(v, k) {
          attrs[k] = Parse._decode(k, v);
        });
        options = value;
      } else {
        attrs = {};
        attrs[key] = Parse._decode(key, value);
      }

      // Extract attributes and options.
      options = options || {};
      if (!attrs) {
        return this;
      }
      if (attrs instanceof Parse.Object) {
        attrs = attrs.attributes;
      }

      var self = this;
      Parse._objectEach(attrs, function(unused_value, key) {
        if (self.constructor.readOnlyAttributes &&
          self.constructor.readOnlyAttributes[key]) {
          throw new Error('Cannot modify readonly key: ' + key);
        }
      });

      // If the unset option is used, every attribute should be a Unset.
      if (options.unset) {
        Parse._objectEach(attrs, function(unused_value, key) {
          attrs[key] = new Parse.Op.Unset();
        });
      }

      // Apply all the attributes to get the estimated values.
      var dataToValidate = _.clone(attrs);
      Parse._objectEach(dataToValidate, function(value, key) {
        if (value instanceof Parse.Op) {
          dataToValidate[key] = value._estimate(self.attributes[key],
                                                self, key);
          if (dataToValidate[key] === Parse.Op._UNSET) {
            delete dataToValidate[key];
          }
        }
      });

      // Run validation.
      if (!this._validate(attrs, options)) {
        return false;
      }

      this._mergeMagicFields(attrs);

      options.changes = {};
      var escaped = this._escapedAttributes;
      var prev = this._previousAttributes || {};

      // Update attributes.
      Parse._arrayEach(_.keys(attrs), function(attr) {
        var val = attrs[attr];

        // If this is a relation object we need to set the parent correctly,
        // since the location where it was parsed does not have access to
        // this object.
        if (val instanceof Parse.Relation) {
          val.parent = self;
        }

        if (!(val instanceof Parse.Op)) {
          val = new Parse.Op.Set(val);
        }

        // See if this change will actually have any effect.
        var isRealChange = true;
        if (val instanceof Parse.Op.Set &&
            _.isEqual(self.attributes[attr], val.value)) {
          isRealChange = false;
        }

        if (isRealChange) {
          delete escaped[attr];
          if (options.silent) {
            self._silent[attr] = true;
          } else {
            options.changes[attr] = true;
          }
        }

        var currentChanges = _.last(self._opSetQueue);
        currentChanges[attr] = val._mergeWithPrevious(currentChanges[attr]);
        self._rebuildEstimatedDataForKey(attr);

        if (isRealChange) {
          self.changed[attr] = self.attributes[attr];
          if (!options.silent) {
            self._pending[attr] = true;
          }
        } else {
          delete self.changed[attr];
          delete self._pending[attr];
        }
      });

      if (!options.silent) {
        this.change(options);
      }
      return this;
    },

    /**
     * Remove an attribute from the model, firing <code>"change"</code> unless
     * you choose to silence it. This is a noop if the attribute doesn't
     * exist.
     */
    unset: function(attr, options) {
      options = options || {};
      options.unset = true;
      return this.set(attr, null, options);
    },

    /**
     * Atomically increments the value of the given attribute the next time the
     * object is saved. If no amount is specified, 1 is used by default.
     *
     * @param attr {String} The key.
     * @param amount {Number} The amount to increment by.
     */
    increment: function(attr, amount) {
      if (_.isUndefined(amount) || _.isNull(amount)) {
        amount = 1;
      }
      return this.set(attr, new Parse.Op.Increment(amount));
    },

    /**
     * Atomically add an object to the end of the array associated with a given
     * key.
     * @param attr {String} The key.
     * @param item {} The item to add.
     */
    add: function(attr, item) {
      return this.set(attr, new Parse.Op.Add([item]));
    },

    /**
     * Atomically add an object to the array associated with a given key, only
     * if it is not already present in the array. The position of the insert is
     * not guaranteed.
     *
     * @param attr {String} The key.
     * @param item {} The object to add.
     */
    addUnique: function(attr, item) {
      return this.set(attr, new Parse.Op.AddUnique([item]));
    },

    /**
     * Atomically remove all instances of an object from the array associated
     * with a given key.
     *
     * @param attr {String} The key.
     * @param item {} The object to remove.
     */
    remove: function(attr, item) {
      return this.set(attr, new Parse.Op.Remove([item]));
    },

    /**
     * Returns an instance of a subclass of Parse.Op describing what kind of
     * modification has been performed on this field since the last time it was
     * saved. For example, after calling object.increment("x"), calling
     * object.op("x") would return an instance of Parse.Op.Increment.
     *
     * @param attr {String} The key.
     * @returns {Parse.Op} The operation, or undefined if none.
     */
    op: function(attr) {
      return _.last(this._opSetQueue)[attr];
    },

    /**
     * Clear all attributes on the model, firing <code>"change"</code> unless
     * you choose to silence it.
     */
    clear: function(options) {
      options = options || {};
      options.unset = true;
      var keysToClear = _.extend(this.attributes, this._operations);
      return this.set(keysToClear, options);
    },

    /**
     * Returns a JSON-encoded set of operations to be sent with the next save
     * request.
     */
    _getSaveJSON: function() {
      var json = _.clone(_.first(this._opSetQueue));
      Parse._objectEach(json, function(op, key) {
        json[key] = op.toJSON();
      });
      return json;
    },

    /**
     * Returns true if this object can be serialized for saving.
     */
    _canBeSerialized: function() {
      return Parse.Object._canBeSerializedAsValue(this.attributes);
    },

    /**
     * Fetch the model from the server. If the server's representation of the
     * model differs from its current attributes, they will be overriden,
     * triggering a <code>"change"</code> event.
     *
     * @param {Object} options A Backbone-style callback object.
     * Valid options are:<ul>
     *   <li>success: A Backbone-style success callback.
     *   <li>error: An Backbone-style error callback.
     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
     *     be used for this request.
     *   <li>sessionToken: A valid session token, used for making a request on
     *       behalf of a specific user.
     * </ul>
     * @return {Parse.Promise} A promise that is fulfilled when the fetch
     *     completes.
     */
    fetch: function(options) {
      var self = this;
      options = options || {};
      var request = Parse._request({
        method: 'GET',
        route: "classes",
        className: this.className,
        objectId: this.id,
        useMasterKey: options.useMasterKey,
        sessionToken: options.sessionToken
      });
      return request.then(function(response, status, xhr) {
        self._finishFetch(self.parse(response, status, xhr), true);
        return self;
      })._thenRunCallbacks(options, this);
    },

    /**
     * Set a hash of model attributes, and save the model to the server.
     * updatedAt will be updated when the request returns.
     * You can either call it as:<pre>
     *   object.save();</pre>
     * or<pre>
     *   object.save(null, options);</pre>
     * or<pre>
     *   object.save(attrs, options);</pre>
     * or<pre>
     *   object.save(key, value, options);</pre>
     *
     * For example, <pre>
     *   gameTurn.save({
     *     player: "Jake Cutter",
     *     diceRoll: 2
     *   }, {
     *     success: function(gameTurnAgain) {
     *       // The save was successful.
     *     },
     *     error: function(gameTurnAgain, error) {
     *       // The save failed.  Error is an instance of Parse.Error.
     *     }
     *   });</pre>
     * or with promises:<pre>
     *   gameTurn.save({
     *     player: "Jake Cutter",
     *     diceRoll: 2
     *   }).then(function(gameTurnAgain) {
     *     // The save was successful.
     *   }, function(error) {
     *     // The save failed.  Error is an instance of Parse.Error.
     *   });</pre>
     *
     * @param {Object} options A Backbone-style callback object.
     * Valid options are:<ul>
     *   <li>wait: Set to true to wait for the server to confirm a successful
     *   save before modifying the attributes on the object.
     *   <li>silent: Set to true to avoid firing the `set` event.
     *   <li>success: A Backbone-style success callback.
     *   <li>error: An Backbone-style error callback.
     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
     *     be used for this request.
     *   <li>sessionToken: A valid session token, used for making a request on
     *       behalf of a specific user.
     * </ul>
     * @return {Parse.Promise} A promise that is fulfilled when the save
     *     completes.
     * @see Parse.Error
     */
    save: function(arg1, arg2, arg3) {
      var i, attrs, current, options, saved;
      if (_.isObject(arg1) || Parse._isNullOrUndefined(arg1)) {
        attrs = arg1;
        options = arg2;
      } else {
        attrs = {};
        attrs[arg1] = arg2;
        options = arg3;
      }

      // Make save({ success: function() {} }) work.
      if (!options && attrs) {
        var extra_keys = _.reject(attrs, function(value, key) {
          return _.include(["success", "error", "wait"], key);
        });
        if (extra_keys.length === 0) {
          var all_functions = true;
          if (_.has(attrs, "success") && !_.isFunction(attrs.success)) {
            all_functions = false;
          }
          if (_.has(attrs, "error") && !_.isFunction(attrs.error)) {
            all_functions = false;
          }
          if (all_functions) {
            // This attrs object looks like it's really an options object,
            // and there's no other options object, so let's just use it.
            return this.save(null, attrs);
          }
        }
      }

      options = _.clone(options) || {};
      if (options.wait) {
        current = _.clone(this.attributes);
      }

      var setOptions = _.clone(options) || {};
      if (setOptions.wait) {
        setOptions.silent = true;
      }
      var setError;
      setOptions.error = function(model, error) {
        setError = error;
      };
      if (attrs && !this.set(attrs, setOptions)) {
        return Parse.Promise.error(setError)._thenRunCallbacks(options, this);
      }

      var model = this;

      // If there is any unsaved child, save it first.
      model._refreshCache();

      // TODO(klimt): Refactor this so that the save starts now, not later.

      var unsavedChildren = [];
      var unsavedFiles = [];
      Parse.Object._findUnsavedChildren(model.attributes,
                                        unsavedChildren,
                                        unsavedFiles);
      if (unsavedChildren.length + unsavedFiles.length > 0) {
        return Parse.Object._deepSaveAsync(this.attributes, {
          useMasterKey: options.useMasterKey,
          sessionToken: options.sessionToken
        }).then(function() {
          return model.save(null, options);
        }, function(error) {
          return Parse.Promise.error(error)._thenRunCallbacks(options, model);
        });
      }

      this._startSave();
      this._saving = (this._saving || 0) + 1;

      this._allPreviousSaves = this._allPreviousSaves || Parse.Promise.as();
      this._allPreviousSaves = this._allPreviousSaves._continueWith(function() {
        var method = model.id ? 'PUT' : 'POST';

        var json = model._getSaveJSON();

        var route = "classes";
        var className = model.className;
        if (model.className === "_User" && !model.id) {
          // Special-case user sign-up.
          route = "users";
          className = null;
        }
        var request = Parse._request({
          route: route,
          className: className,
          objectId: model.id,
          method: method,
          useMasterKey: options.useMasterKey,
          sessionToken: options.sessionToken,
          data: json
        });

        request = request.then(function(resp, status, xhr) {
          var serverAttrs = model.parse(resp, status, xhr);
          if (options.wait) {
            serverAttrs = _.extend(attrs || {}, serverAttrs);
          }
          model._finishSave(serverAttrs);
          if (options.wait) {
            model.set(current, setOptions);
          }
          return model;

        }, function(error) {
          model._cancelSave();
          return Parse.Promise.error(error);

        })._thenRunCallbacks(options, model);

        return request;
      });
      return this._allPreviousSaves;
    },

    /**
     * Destroy this model on the server if it was already persisted.
     * Optimistically removes the model from its collection, if it has one.
     * If `wait: true` is passed, waits for the server to respond
     * before removal.
     *
     * @param {Object} options A Backbone-style callback object.
     * Valid options are:<ul>
     *   <li>wait: Set to true to wait for the server to confirm successful
     *   deletion of the object before triggering the `destroy` event.
     *   <li>success: A Backbone-style success callback
     *   <li>error: An Backbone-style error callback.
     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
     *     be used for this request.
     *   <li>sessionToken: A valid session token, used for making a request on
     *       behalf of a specific user.
     * </ul>
     * @return {Parse.Promise} A promise that is fulfilled when the destroy
     *     completes.
     */
    destroy: function(options) {
      options = options || {};
      var model = this;

      var triggerDestroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      if (!this.id) {
        return triggerDestroy();
      }

      if (!options.wait) {
        triggerDestroy();
      }

      var request = Parse._request({
        route: "classes",
        className: this.className,
        objectId: this.id,
        method: 'DELETE',
        useMasterKey: options.useMasterKey,
        sessionToken: options.sessionToken
      });
      return request.then(function() {
        if (options.wait) {
          triggerDestroy();
        }
        return model;
      })._thenRunCallbacks(options, this);
    },

    /**
     * Converts a response into the hash of attributes to be set on the model.
     * @ignore
     */
    parse: function(resp, status, xhr) {
      var output = _.clone(resp);
      _(["createdAt", "updatedAt"]).each(function(key) {
        if (output[key]) {
          output[key] = Parse._parseDate(output[key]);
        }
      });
      if (!output.updatedAt) {
        output.updatedAt = output.createdAt;
      }
      if (status) {
        this._existed = (status !== 201);
      }
      return output;
    },

    /**
     * Creates a new model with identical attributes to this one.
     * @return {Parse.Object}
     */
    clone: function() {
      return new this.constructor(this.attributes);
    },

    /**
     * Returns true if this object has never been saved to Parse.
     * @return {Boolean}
     */
    isNew: function() {
      return !this.id;
    },

    /**
     * Call this method to manually fire a `"change"` event for this model and
     * a `"change:attribute"` event for each changed attribute.
     * Calling this will cause all objects observing the model to update.
     */
    change: function(options) {
      options = options || {};
      var changing = this._changing;
      this._changing = true;

      // Silent changes become pending changes.
      var self = this;
      Parse._objectEach(this._silent, function(attr) {
        self._pending[attr] = true;
      });

      // Silent changes are triggered.
      var changes = _.extend({}, options.changes, this._silent);
      this._silent = {};
      Parse._objectEach(changes, function(unused_value, attr) {
        self.trigger('change:' + attr, self, self.get(attr), options);
      });
      if (changing) {
        return this;
      }

      // This is to get around lint not letting us make a function in a loop.
      var deleteChanged = function(value, attr) {
        if (!self._pending[attr] && !self._silent[attr]) {
          delete self.changed[attr];
        }
      };

      // Continue firing `"change"` events while there are pending changes.
      while (!_.isEmpty(this._pending)) {
        this._pending = {};
        this.trigger('change', this, options);
        // Pending and silent changes still remain.
        Parse._objectEach(this.changed, deleteChanged);
        self._previousAttributes = _.clone(this.attributes);
      }

      this._changing = false;
      return this;
    },

    /**
     * Returns true if this object was created by the Parse server when the
     * object might have already been there (e.g. in the case of a Facebook
     * login)
     */
    existed: function() {
      return this._existed;
    },

    /**
     * Determine if the model has changed since the last <code>"change"</code>
     * event.  If you specify an attribute name, determine if that attribute
     * has changed.
     * @param {String} attr Optional attribute name
     * @return {Boolean}
     */
    hasChanged: function(attr) {
      if (!arguments.length) {
        return !_.isEmpty(this.changed);
      }
      return this.changed && _.has(this.changed, attr);
    },

    /**
     * Returns an object containing all the attributes that have changed, or
     * false if there are no changed attributes. Useful for determining what
     * parts of a view need to be updated and/or what attributes need to be
     * persisted to the server. Unset attributes will be set to undefined.
     * You can also pass an attributes object to diff against the model,
     * determining if there *would be* a change.
     */
    changedAttributes: function(diff) {
      if (!diff) {
        return this.hasChanged() ? _.clone(this.changed) : false;
      }
      var changed = {};
      var old = this._previousAttributes;
      Parse._objectEach(diff, function(diffVal, attr) {
        if (!_.isEqual(old[attr], diffVal)) {
          changed[attr] = diffVal;
        }
      });
      return changed;
    },

    /**
     * Gets the previous value of an attribute, recorded at the time the last
     * <code>"change"</code> event was fired.
     * @param {String} attr Name of the attribute to get.
     */
    previous: function(attr) {
      if (!arguments.length || !this._previousAttributes) {
        return null;
      }
      return this._previousAttributes[attr];
    },

    /**
     * Gets all of the attributes of the model at the time of the previous
     * <code>"change"</code> event.
     * @return {Object}
     */
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    /**
     * Checks if the model is currently in a valid state. It's only possible to
     * get into an *invalid* state if you're using silent changes.
     * @return {Boolean}
     */
    isValid: function() {
      return !this.validate(this.attributes);
    },

    /**
     * You should not call this function directly unless you subclass
     * <code>Parse.Object</code>, in which case you can override this method
     * to provide additional validation on <code>set</code> and
     * <code>save</code>.  Your implementation should return
     *
     * @param {Object} attrs The current data to validate.
     * @param {Object} options A Backbone-like options object.
     * @return {} False if the data is valid.  An error object otherwise.
     * @see Parse.Object#set
     */
    validate: function(attrs, options) {
      if (_.has(attrs, "ACL") && !(attrs.ACL instanceof Parse.ACL)) {
        return new Parse.Error(Parse.Error.OTHER_CAUSE,
                               "ACL must be a Parse.ACL.");
      }
      var correct = true;
      Parse._objectEach(attrs, function(unused_value, key) {
        if (!(/^[A-Za-z][0-9A-Za-z_]*$/).test(key)) {
          correct = false;
        }
      });
      if (!correct) {
        return new Parse.Error(Parse.Error.INVALID_KEY_NAME);
      }
      return false;
    },

    /**
     * Run validation against a set of incoming attributes, returning `true`
     * if all is well. If a specific `error` callback has been passed,
     * call that instead of firing the general `"error"` event.
     */
    _validate: function(attrs, options) {
      if (options.silent || !this.validate) {
        return true;
      }
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validate(attrs, options);
      if (!error) {
        return true;
      }
      if (options && options.error) {
        options.error(this, error, options);
      } else {
        this.trigger('error', this, error, options);
      }
      return false;
    },

    /**
     * Returns the ACL for this object.
     * @returns {Parse.ACL} An instance of Parse.ACL.
     * @see Parse.Object#get
     */
    getACL: function() {
      return this.get("ACL");
    },

    /**
     * Sets the ACL to be used for this object.
     * @param {Parse.ACL} acl An instance of Parse.ACL.
     * @param {Object} options Optional Backbone-like options object to be
     *     passed in to set.
     * @return {Boolean} Whether the set passed validation.
     * @see Parse.Object#set
     */
    setACL: function(acl, options) {
      return this.set("ACL", acl, options);
    }

  });

  /**
   * Returns the appropriate subclass for making new instances of the given
   * className string.
   */
  Parse.Object._getSubclass = function(className) {
    if (!_.isString(className)) {
      throw "Parse.Object._getSubclass requires a string argument.";
    }
    var ObjectClass = Parse.Object._classMap[className];
    if (!ObjectClass) {
      ObjectClass = Parse.Object.extend(className);
      Parse.Object._classMap[className] = ObjectClass;
    }
    return ObjectClass;
  };

  /**
   * Creates an instance of a subclass of Parse.Object for the given classname.
   */
  Parse.Object._create = function(className, attributes, options) {
    var ObjectClass = Parse.Object._getSubclass(className);
    return new ObjectClass(attributes, options);
  };

  /**
   * Returns a list of object ids given a list of objects.
   */
  Parse.Object._toObjectIdArray = function(list, omitObjectsWithData) {
    if (list.length === 0) {
      return Parse.Promise.as(list);
    }

    var error;
    var className = list[0].className;
    var objectIds = [];
    for (var i = 0; i < list.length; i++) {
      var object = list[i];
      if (className !== object.className) {
        error = new Parse.Error(Parse.Error.INVALID_CLASS_NAME,
                                "All objects should be of the same class");
        return Parse.Promise.error(error);
      } else if (!object.id) {
        error = new Parse.Error(Parse.Error.MISSING_OBJECT_ID,
                                "All objects must have an ID");
        return Parse.Promise.error(error);
      } else if (omitObjectsWithData && object._hasData) {
        continue;
      }
      objectIds.push(object.id);
    }

    return Parse.Promise.as(objectIds);
  };

  /**
   * Updates a list of objects with fetched results.
   */
  Parse.Object._updateWithFetchedResults = function(list, fetched, forceFetch) {
    var fetchedObjectsById = {};
    Parse._arrayEach(fetched, function(object, i) {
      fetchedObjectsById[object.id] = object;
    });

    for (var i = 0; i < list.length; i++) {
      var object = list[i];
      var fetchedObject = fetchedObjectsById[object.id];
      if (!fetchedObject && forceFetch) {
        var error = new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,
                                "All objects must exist on the server");
        return Parse.Promise.error(error);
      }

      object._mergeFromObject(fetchedObject);
    }

    return Parse.Promise.as(list);
  };

  /**
   * Fetches the objects given in list.  The forceFetch option will fetch all
   * objects if true and ignore objects with data if false.
   */
  Parse.Object._fetchAll = function(list, forceFetch) {
    if (list.length === 0) {
      return Parse.Promise.as(list);
    }

    var omitObjectsWithData = !forceFetch;
    return Parse.Object._toObjectIdArray(
      list,
      omitObjectsWithData
    ).then(function(objectIds) {
      var className = list[0].className;
      var query = new Parse.Query(className);
      query.containedIn("objectId", objectIds);
      query.limit = objectIds.length;
      return query.find();
    }).then(function(results) {
      return Parse.Object._updateWithFetchedResults(
        list,
        results,
        forceFetch
      );
    });
  };

  // Set up a map of className to class so that we can create new instances of
  // Parse Objects from JSON automatically.
  Parse.Object._classMap = {};

  Parse.Object._extend = Parse._extend;

  /**
   * Creates a new subclass of Parse.Object for the given Parse class name.
   *
   * <p>Every extension of a Parse class will inherit from the most recent
   * previous extension of that class. When a Parse.Object is automatically
   * created by parsing JSON, it will use the most recent extension of that
   * class.</p>
   *
   * <p>You should call either:<pre>
   *     var MyClass = Parse.Object.extend("MyClass", {
   *         <i>Instance methods</i>,
   *         initialize: function(attrs, options) {
   *             this.someInstanceProperty = [],
   *             <i>Other instance properties</i>
   *         }
   *     }, {
   *         <i>Class properties</i>
   *     });</pre>
   * or, for Backbone compatibility:<pre>
   *     var MyClass = Parse.Object.extend({
   *         className: "MyClass",
   *         <i>Instance methods</i>,
   *         initialize: function(attrs, options) {
   *             this.someInstanceProperty = [],
   *             <i>Other instance properties</i>
   *         }
   *     }, {
   *         <i>Class properties</i>
   *     });</pre></p>
   *
   * @param {String} className The name of the Parse class backing this model.
   * @param {Object} protoProps Instance properties to add to instances of the
   *     class returned from this method.
   * @param {Object} classProps Class properties to add the class returned from
   *     this method.
   * @return {Class} A new subclass of Parse.Object.
   */
  Parse.Object.extend = function(className, protoProps, classProps) {
    // Handle the case with only two args.
    if (!_.isString(className)) {
      if (className && _.has(className, "className")) {
        return Parse.Object.extend(className.className, className, protoProps);
      } else {
        throw new Error(
            "Parse.Object.extend's first argument should be the className.");
      }
    }

    // If someone tries to subclass "User", coerce it to the right type.
    if (className === "User" && Parse.User._performUserRewrite) {
      className = "_User";
    }
    protoProps = protoProps || {};
    protoProps.className = className;

    var NewClassObject = null;
    if (_.has(Parse.Object._classMap, className)) {
      var OldClassObject = Parse.Object._classMap[className];
      // This new subclass has been told to extend both from "this" and from
      // OldClassObject. This is multiple inheritance, which isn't supported.
      // For now, let's just pick one.
      NewClassObject = OldClassObject._extend(protoProps, classProps);
    } else {
      NewClassObject = this._extend(protoProps, classProps);
    }
    // Extending a subclass should reuse the classname automatically.
    NewClassObject.extend = function(arg0) {
      if (_.isString(arg0) || (arg0 && _.has(arg0, "className"))) {
        return Parse.Object.extend.apply(NewClassObject, arguments);
      }
      var newArguments = [className].concat(Parse._.toArray(arguments));
      return Parse.Object.extend.apply(NewClassObject, newArguments);
    };

    /**
     * Creates a reference to a subclass of Parse.Object with the given id. This
     * does not exist on Parse.Object, only on subclasses.
     *
     * <p>A shortcut for: <pre>
     *  var Foo = Parse.Object.extend("Foo");
     *  var pointerToFoo = new Foo();
     *  pointerToFoo.id = "myObjectId";
     * </pre>
     *
     * @name createWithoutData
     * @param {String} id The ID of the object to create a reference to.
     * @return {Parse.Object} A Parse.Object reference.
     * @function
     * @memberOf Parse.Object
     */
    NewClassObject.createWithoutData = function(id) {
      var obj = new NewClassObject();
      obj.id = id;
      return obj;
    };

    Parse.Object._classMap[className] = NewClassObject;
    return NewClassObject;
  };

  Parse.Object._findUnsavedChildren = function(object, children, files) {
    Parse._traverse(object, function(object) {
      if (object instanceof Parse.Object) {
        object._refreshCache();
        if (object.dirty()) {
          children.push(object);
        }
        return;
      }

      if (object instanceof Parse.File) {
        if (!object.url()) {
          files.push(object);
        }
        return;
      }
    });
  };

  Parse.Object._canBeSerializedAsValue = function(object) {
    // TODO(klimt): We should rewrite _traverse so that it can be used here.
    if (object instanceof Parse.Object) {
      return !!object.id;
    }
    if (object instanceof Parse.File) {
      // Don't recurse indefinitely into files.
      return true;
    }

    var canBeSerializedAsValue = true;

    if (_.isArray(object)) {
      Parse._arrayEach(object, function(child) {
        if (!Parse.Object._canBeSerializedAsValue(child)) {
          canBeSerializedAsValue = false;
        }
      });
    } else if (_.isObject(object)) {
      Parse._objectEach(object, function(child) {
        if (!Parse.Object._canBeSerializedAsValue(child)) {
          canBeSerializedAsValue = false;
        }
      });
    }
    return canBeSerializedAsValue;
  };

  /**
   * @param {Object} object The root object.
   * @param {Object} options: The only valid option is useMasterKey.
   */
  Parse.Object._deepSaveAsync = function(object, options) {
    var unsavedChildren = [];
    var unsavedFiles = [];
    Parse.Object._findUnsavedChildren(object, unsavedChildren, unsavedFiles);

    var promise = Parse.Promise.as();
    _.each(unsavedFiles, function(file) {
      promise = promise.then(function() {
        return file.save(options);
      });
    });

    var objects = _.uniq(unsavedChildren);
    var remaining = _.uniq(objects);

    return promise.then(function() {
      return Parse.Promise._continueWhile(function() {
        return remaining.length > 0;
      }, function() {

        // Gather up all the objects that can be saved in this batch.
        var batch = [];
        var newRemaining = [];
        Parse._arrayEach(remaining, function(object) {
          // Limit batches to 20 objects.
          if (batch.length > 20) {
            newRemaining.push(object);
            return;
          }

          if (object._canBeSerialized()) {
            batch.push(object);
          } else {
            newRemaining.push(object);
          }
        });
        remaining = newRemaining;

        // If we can't save any objects, there must be a circular reference.
        if (batch.length === 0) {
          return Parse.Promise.error(
            new Parse.Error(Parse.Error.OTHER_CAUSE,
                            "Tried to save a batch with a cycle."));
        }

        // Reserve a spot in every object's save queue.
        var readyToStart = Parse.Promise.when(_.map(batch, function(object) {
          return object._allPreviousSaves || Parse.Promise.as();
        }));
        var batchFinished = new Parse.Promise();
        Parse._arrayEach(batch, function(object) {
          object._allPreviousSaves = batchFinished;
        });

        // Save a single batch, whether previous saves succeeded or failed.
        return readyToStart._continueWith(function() {
          return Parse._request({
            route: "batch",
            method: "POST",
            useMasterKey: options.useMasterKey,
            sessionToken: options.sessionToken,
            data: {
              requests: _.map(batch, function(object) {
                var json = object._getSaveJSON();
                var method = "POST";

                var path = "/1/classes/" + object.className;
                if (object.id) {
                  path = path + "/" + object.id;
                  method = "PUT";
                }

                object._startSave();

                return {
                  method: method,
                  path: path,
                  body: json
                };
              })
            }
          }).then(function(response, status, xhr) {
            var error;
            Parse._arrayEach(batch, function(object, i) {
              if (response[i].success) {
                object._finishSave(
                  object.parse(response[i].success, status, xhr));
              } else {
                error = error || response[i].error;
                object._cancelSave();
              }
            });
            if (error) {
              return Parse.Promise.error(
                new Parse.Error(error.code, error.error));
            }

          }).then(function(results) {
            batchFinished.resolve(results);
            return results;
          }, function(error) {
            batchFinished.reject(error);
            return Parse.Promise.error(error);
          });
        });
      });
    }).then(function() {
      return object;
    });
  };

}(this));

(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * Represents a Role on the Parse server. Roles represent groupings of
   * Users for the purposes of granting permissions (e.g. specifying an ACL
   * for an Object). Roles are specified by their sets of child users and
   * child roles, all of which are granted any permissions that the parent
   * role has.
   *
   * <p>Roles must have a name (which cannot be changed after creation of the
   * role), and must specify an ACL.</p>
   * @class
   * A Parse.Role is a local representation of a role persisted to the Parse
   * cloud.
   */
  Parse.Role = Parse.Object.extend("_Role", /** @lends Parse.Role.prototype */ {
    // Instance Methods
    
    /**
     * Constructs a new ParseRole with the given name and ACL.
     * 
     * @param {String} name The name of the Role to create.
     * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.
     */
    constructor: function(name, acl) {
      if (_.isString(name) && (acl instanceof Parse.ACL)) {
        Parse.Object.prototype.constructor.call(this, null, null);
        this.setName(name);
        this.setACL(acl);
      } else {
        Parse.Object.prototype.constructor.call(this, name, acl);
      }
    },
    
    /**
     * Gets the name of the role.  You can alternatively call role.get("name")
     * 
     * @return {String} the name of the role.
     */
    getName: function() {
      return this.get("name");
    },
    
    /**
     * Sets the name for a role. This value must be set before the role has
     * been saved to the server, and cannot be set once the role has been
     * saved.
     * 
     * <p>
     *   A role's name can only contain alphanumeric characters, _, -, and
     *   spaces.
     * </p>
     *
     * <p>This is equivalent to calling role.set("name", name)</p>
     * 
     * @param {String} name The name of the role.
     * @param {Object} options Standard options object with success and error
     *     callbacks.
     */
    setName: function(name, options) {
      return this.set("name", name, options);
    },
    
    /**
     * Gets the Parse.Relation for the Parse.Users that are direct
     * children of this role. These users are granted any privileges that this
     * role has been granted (e.g. read or write access through ACLs). You can
     * add or remove users from the role through this relation.
     * 
     * <p>This is equivalent to calling role.relation("users")</p>
     * 
     * @return {Parse.Relation} the relation for the users belonging to this
     *     role.
     */
    getUsers: function() {
      return this.relation("users");
    },
    
    /**
     * Gets the Parse.Relation for the Parse.Roles that are direct
     * children of this role. These roles' users are granted any privileges that
     * this role has been granted (e.g. read or write access through ACLs). You
     * can add or remove child roles from this role through this relation.
     * 
     * <p>This is equivalent to calling role.relation("roles")</p>
     * 
     * @return {Parse.Relation} the relation for the roles belonging to this
     *     role.
     */
    getRoles: function() {
      return this.relation("roles");
    },
    
    /**
     * @ignore
     */
    validate: function(attrs, options) {
      if ("name" in attrs && attrs.name !== this.getName()) {
        var newName = attrs.name;
        if (this.id && this.id !== attrs.objectId) {
          // Check to see if the objectId being set matches this.id.
          // This happens during a fetch -- the id is set before calling fetch.
          // Let the name be set in this case.
          return new Parse.Error(Parse.Error.OTHER_CAUSE,
              "A role's name can only be set before it has been saved.");
        }
        if (!_.isString(newName)) {
          return new Parse.Error(Parse.Error.OTHER_CAUSE,
              "A role's name must be a String.");
        }
        if (!(/^[0-9a-zA-Z\-_ ]+$/).test(newName)) {
          return new Parse.Error(Parse.Error.OTHER_CAUSE,
              "A role's name can only contain alphanumeric characters, _," +
              " -, and spaces.");
        }
      }
      if (Parse.Object.prototype.validate) {
        return Parse.Object.prototype.validate.call(this, attrs, options);
      }
      return false;
    }
  });
}(this));


/*global _: false */
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * Creates a new instance with the given models and options.  Typically, you
   * will not call this method directly, but will instead make a subclass using
   * <code>Parse.Collection.extend</code>.
   *
   * @param {Array} models An array of instances of <code>Parse.Object</code>.
   *
   * @param {Object} options An optional object with Backbone-style options.
   * Valid options are:<ul>
   *   <li>model: The Parse.Object subclass that this collection contains.
   *   <li>query: An instance of Parse.Query to use when fetching items.
   *   <li>comparator: A string property name or function to sort by.
   * </ul>
   *
   * @see Parse.Collection.extend
   *
   * @class
   *
   * <p>Provides a standard collection class for our sets of models, ordered
   * or unordered.  For more information, see the
   * <a href="http://documentcloud.github.com/backbone/#Collection">Backbone
   * documentation</a>.</p>
   */
  Parse.Collection = function(models, options) {
    options = options || {};
    if (options.comparator) {
      this.comparator = options.comparator;
    }
    if (options.model) {
      this.model = options.model;
    }
    if (options.query) {
      this.query = options.query;
    }
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) {
      this.reset(models, {silent: true, parse: options.parse});
    }
  };

  // Define the Collection's inheritable methods.
  _.extend(Parse.Collection.prototype, Parse.Events,
      /** @lends Parse.Collection.prototype */ {

    // The default model for a collection is just a Parse.Object.
    // This should be overridden in most cases.
    // TODO: think harder. this is likely to be weird.
    model: Parse.Object,

    /**
     * Initialize is an empty function by default. Override it with your own
     * initialization logic.
     */
    initialize: function(){},

    /**
     * The JSON representation of a Collection is an array of the
     * models' attributes.
     */
    toJSON: function() {
      return this.map(function(model){ return model.toJSON(); });
    },

    /**
     * Add a model, or list of models to the set. Pass **silent** to avoid
     * firing the `add` event for every new model.
     *
     * @param {Array} models An array of instances of <code>Parse.Object</code>.
     *
     * @param {Object} options An optional object with Backbone-style options.
     * Valid options are:<ul>
     *   <li>at: The index at which to add the models.
     *   <li>silent: Set to true to avoid firing the `add` event for every new
     *   model.
     * </ul>
     */
    add: function(models, options) {
      var i, index, length, model, cid, id, cids = {}, ids = {};
      options = options || {};
      models = _.isArray(models) ? models.slice() : [models];

      // Begin by turning bare objects into model references, and preventing
      // invalid models or duplicate models from being added.
      for (i = 0, length = models.length; i < length; i++) {
        models[i] = this._prepareModel(models[i], options);
        model = models[i];
        if (!model) {
          throw new Error("Can't add an invalid model to a collection");
        }
        cid = model.cid;
        if (cids[cid] || this._byCid[cid]) {
          throw new Error("Duplicate cid: can't add the same model " +
                          "to a collection twice");
        }
        id = model.id;
        if (!Parse._isNullOrUndefined(id) && (ids[id] || this._byId[id])) {
          throw new Error("Duplicate id: can't add the same model " +
                          "to a collection twice");
        }
        ids[id] = model;
        cids[cid] = model;
      }

      // Listen to added models' events, and index models for lookup by
      // `id` and by `cid`.
      for (i = 0; i < length; i++) {
        (model = models[i]).on('all', this._onModelEvent, this);
        this._byCid[model.cid] = model;
        if (model.id) {
          this._byId[model.id] = model;
        }
      }

      // Insert models into the collection, re-sorting if needed, and triggering
      // `add` events unless silenced.
      this.length += length;
      index = Parse._isNullOrUndefined(options.at) ? 
          this.models.length : options.at;
      this.models.splice.apply(this.models, [index, 0].concat(models));
      if (this.comparator) {
        this.sort({silent: true});
      }
      if (options.silent) {
        return this;
      }
      for (i = 0, length = this.models.length; i < length; i++) {
        model = this.models[i];
        if (cids[model.cid]) {
          options.index = i;
          model.trigger('add', model, this, options);
        }
      }
      return this;
    },

    /**
     * Remove a model, or a list of models from the set. Pass silent to avoid
     * firing the <code>remove</code> event for every model removed.
     *
     * @param {Array} models The model or list of models to remove from the
     *   collection.
     * @param {Object} options An optional object with Backbone-style options.
     * Valid options are: <ul>
     *   <li>silent: Set to true to avoid firing the `remove` event.
     * </ul>
     */
    remove: function(models, options) {
      var i, l, index, model;
      options = options || {};
      models = _.isArray(models) ? models.slice() : [models];
      for (i = 0, l = models.length; i < l; i++) {
        model = this.getByCid(models[i]) || this.get(models[i]);
        if (!model) {
          continue;
        }
        delete this._byId[model.id];
        delete this._byCid[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model);
      }
      return this;
    },

    /**
     * Gets a model from the set by id.
     * @param {String} id The Parse objectId identifying the Parse.Object to
     * fetch from this collection.
     */
    get: function(id) {
      return id && this._byId[id.id || id];
    },

    /**
     * Gets a model from the set by client id.
     * @param {} cid The Backbone collection id identifying the Parse.Object to
     * fetch from this collection.
     */
    getByCid: function(cid) {
      return cid && this._byCid[cid.cid || cid];
    },

    /**
     * Gets the model at the given index.
     *
     * @param {Number} index The index of the model to return.
     */
    at: function(index) {
      return this.models[index];
    },

    /**
     * Forces the collection to re-sort itself. You don't need to call this
     * under normal circumstances, as the set will maintain sort order as each
     * item is added.
     * @param {Object} options An optional object with Backbone-style options.
     * Valid options are: <ul>
     *   <li>silent: Set to true to avoid firing the `reset` event.
     * </ul>
     */
    sort: function(options) {
      options = options || {};
      if (!this.comparator) {
        throw new Error('Cannot sort a set without a comparator');
      }
      var boundComparator = _.bind(this.comparator, this);
      if (this.comparator.length === 1) {
        this.models = this.sortBy(boundComparator);
      } else {
        this.models.sort(boundComparator);
      }
      if (!options.silent) {
        this.trigger('reset', this, options);
      }
      return this;
    },

    /**
     * Plucks an attribute from each model in the collection.
     * @param {String} attr The attribute to return from each model in the
     * collection.
     */
    pluck: function(attr) {
      return _.map(this.models, function(model){ return model.get(attr); });
    },

    /**
     * When you have more items than you want to add or remove individually,
     * you can reset the entire set with a new list of models, without firing
     * any `add` or `remove` events. Fires `reset` when finished.
     *
     * @param {Array} models The model or list of models to remove from the
     *   collection.
     * @param {Object} options An optional object with Backbone-style options.
     * Valid options are: <ul>
     *   <li>silent: Set to true to avoid firing the `reset` event.
     * </ul>
     */
    reset: function(models, options) {
      var self = this;
      models = models || [];
      options = options || {};
      Parse._arrayEach(this.models, function(model) {
        self._removeReference(model);
      });
      this._reset();
      this.add(models, {silent: true, parse: options.parse});
      if (!options.silent) {
        this.trigger('reset', this, options);
      }
      return this;
    },

    /**
     * Fetches the default set of models for this collection, resetting the
     * collection when they arrive. If `add: true` is passed, appends the
     * models to the collection instead of resetting.
     *
     * @param {Object} options An optional object with Backbone-style options.
     * Valid options are:<ul>
     *   <li>silent: Set to true to avoid firing `add` or `reset` events for
     *   models fetched by this fetch.
     *   <li>success: A Backbone-style success callback.
     *   <li>error: An Backbone-style error callback.
     *   <li>useMasterKey: In Cloud Code and Node only, uses the Master Key for
     *       this request.
     *   <li>sessionToken: A valid session token, used for making a request on
     *       behalf of a specific user.
     * </ul>
     */
    fetch: function(options) {
      options = _.clone(options) || {};
      if (options.parse === undefined) {
        options.parse = true;
      }
      var collection = this;
      var query = this.query || new Parse.Query(this.model);
      return query.find({
        useMasterKey: options.useMasterKey,
        sessionToken: options.sessionToken
      }).then(function(results) {
        if (options.add) {
          collection.add(results, options);
        } else {
          collection.reset(results, options);
        }
        return collection;
      })._thenRunCallbacks(options, this);
    },

    /**
     * Creates a new instance of a model in this collection. Add the model to
     * the collection immediately, unless `wait: true` is passed, in which case
     * we wait for the server to agree.
     *
     * @param {Parse.Object} model The new model to create and add to the
     *   collection.
     * @param {Object} options An optional object with Backbone-style options.
     * Valid options are:<ul>
     *   <li>wait: Set to true to wait for the server to confirm creation of the
     *       model before adding it to the collection.
     *   <li>silent: Set to true to avoid firing an `add` event.
     *   <li>success: A Backbone-style success callback.
     *   <li>error: An Backbone-style error callback.
     *   <li>useMasterKey: In Cloud Code and Node only, uses the Master Key for
     *       this request.
     *   <li>sessionToken: A valid session token, used for making a request on
     *       behalf of a specific user.
     * </ul>
     */
    create: function(model, options) {
      var coll = this;
      options = options ? _.clone(options) : {};
      model = this._prepareModel(model, options);
      if (!model) {
        return false;
      }
      if (!options.wait) {
        coll.add(model, options);
      }
      var success = options.success;
      options.success = function(nextModel, resp, xhr) {
        if (options.wait) {
          coll.add(nextModel, options);
        }
        if (success) {
          success(nextModel, resp);
        } else {
          nextModel.trigger('sync', model, resp, options);
        }
      };
      model.save(null, options);
      return model;
    },

    /**
     * Converts a response into a list of models to be added to the collection.
     * The default implementation is just to pass it through.
     * @ignore
     */
    parse: function(resp, xhr) {
      return resp;
    },

    /**
     * Proxy to _'s chain. Can't be proxied the same way the rest of the
     * underscore methods are proxied because it relies on the underscore
     * constructor.
     */
    chain: function() {
      return _(this.models).chain();
    },

    /**
     * Reset all internal state. Called when the collection is reset.
     */
    _reset: function(options) {
      this.length = 0;
      this.models = [];
      this._byId  = {};
      this._byCid = {};
    },

    /**
     * Prepare a model or hash of attributes to be added to this collection.
     */
    _prepareModel: function(model, options) {
      if (!(model instanceof Parse.Object)) {
        var attrs = model;
        options.collection = this;
        model = new this.model(attrs, options);
        if (!model._validate(model.attributes, options)) {
          model = false;
        }
      } else if (!model.collection) {
        model.collection = this;
      }
      return model;
    },

    /**
     * Internal method to remove a model's ties to a collection.
     */
    _removeReference: function(model) {
      if (this === model.collection) {
        delete model.collection;
      }
      model.off('all', this._onModelEvent, this);
    },

    /**
     * Internal method called every time a model in the set fires an event.
     * Sets need to update their indexes when models change ids. All other
     * events simply proxy through. "add" and "remove" events that originate
     * in other collections are ignored.
     */
    _onModelEvent: function(ev, model, collection, options) {
      if ((ev === 'add' || ev === 'remove') && collection !== this) {
        return;
      }
      if (ev === 'destroy') {
        this.remove(model, options);
      }
      if (model && ev === 'change:objectId') {
        delete this._byId[model.previous("objectId")];
        this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  var methods = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find',
    'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any',
    'include', 'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex',
    'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf',
    'shuffle', 'lastIndexOf', 'isEmpty', 'groupBy'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  Parse._arrayEach(methods, function(method) {
    Parse.Collection.prototype[method] = function() {
      return _[method].apply(_, [this.models].concat(_.toArray(arguments)));
    };
  });

  /**
   * Creates a new subclass of <code>Parse.Collection</code>.  For example,<pre>
   *   var MyCollection = Parse.Collection.extend({
   *     // Instance properties
   *
   *     model: MyClass,
   *     query: MyQuery,
   *
   *     getFirst: function() {
   *       return this.at(0);
   *     }
   *   }, {
   *     // Class properties
   *
   *     makeOne: function() {
   *       return new MyCollection();
   *     }
   *   });
   *
   *   var collection = new MyCollection();
   * </pre>
   *
   * @function
   * @param {Object} instanceProps Instance properties for the collection.
   * @param {Object} classProps Class properies for the collection.
   * @return {Class} A new subclass of <code>Parse.Collection</code>.
   */
  Parse.Collection.extend = Parse._extend;

}(this));

/*global _: false, document: false */
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * Creating a Parse.View creates its initial element outside of the DOM,
   * if an existing element is not provided...
   * @class
   *
   * <p>A fork of Backbone.View, provided for your convenience.  If you use this
   * class, you must also include jQuery, or another library that provides a
   * jQuery-compatible $ function.  For more information, see the
   * <a href="http://documentcloud.github.com/backbone/#View">Backbone
   * documentation</a>.</p>
   * <p><strong><em>Available in the client SDK only.</em></strong></p>
   */
  Parse.View = function(options) {
    this.cid = _.uniqueId('view');
    this._configure(options || {});
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var eventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  // TODO: include objectId, createdAt, updatedAt?
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes',
                     'className', 'tagName'];

  // Set up all inheritable **Parse.View** properties and methods.
  _.extend(Parse.View.prototype, Parse.Events,
           /** @lends Parse.View.prototype */ {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    /**
     * jQuery delegate for element lookup, scoped to DOM elements within the
     * current view. This should be prefered to global lookups where possible.
     */
    $: function(selector) {
      return this.$el.find(selector);
    },

    /**
     * Initialize is an empty function by default. Override it with your own
     * initialization logic.
     */
    initialize: function(){},

    /**
     * The core function that your view should override, in order
     * to populate its element (`this.el`), with the appropriate HTML. The
     * convention is for **render** to always return `this`.
     */
    render: function() {
      return this;
    },

    /**
     * Remove this view from the DOM. Note that the view isn't present in the
     * DOM by default, so calling this method may be a no-op.
     */
    remove: function() {
      this.$el.remove();
      return this;
    },

    /**
     * For small amounts of DOM Elements, where a full-blown template isn't
     * needed, use **make** to manufacture elements, one at a time.
     * <pre>
     *     var el = this.make('li', {'class': 'row'},
     *                        this.model.escape('title'));</pre>
     */
    make: function(tagName, attributes, content) {
      var el = document.createElement(tagName);
      if (attributes) {
        Parse.$(el).attr(attributes);
      }
      if (content) {
        Parse.$(el).html(content);
      }
      return el;
    },

    /**
     * Changes the view's element (`this.el` property), including event
     * re-delegation.
     */
    setElement: function(element, delegate) {
      this.$el = Parse.$(element);
      this.el = this.$el[0];
      if (delegate !== false) {
        this.delegateEvents();
      }
      return this;
    },

    /**
     * Set callbacks.  <code>this.events</code> is a hash of
     * <pre>
     * *{"event selector": "callback"}*
     *
     *     {
     *       'mousedown .title':  'edit',
     *       'click .button':     'save'
     *       'click .open':       function(e) { ... }
     *     }
     * </pre>
     * pairs. Callbacks will be bound to the view, with `this` set properly.
     * Uses event delegation for efficiency.
     * Omitting the selector binds the event to `this.el`.
     * This only works for delegate-able events: not `focus`, `blur`, and
     * not `change`, `submit`, and `reset` in Internet Explorer.
     */
    delegateEvents: function(events) {
      events = events || Parse._getValue(this, 'events');
      if (!events) {
        return;
      }
      this.undelegateEvents();
      var self = this;
      Parse._objectEach(events, function(method, key) {
        if (!_.isFunction(method)) {
          method = self[events[key]];
        }
        if (!method) {
          throw new Error('Event "' + events[key] + '" does not exist');
        }
        var match = key.match(eventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, self);
        eventName += '.delegateEvents' + self.cid;
        if (selector === '') {
          self.$el.bind(eventName, method);
        } else {
          self.$el.delegate(selector, eventName, method);
        }
      });
    },

    /**
     * Clears all callbacks previously bound to the view with `delegateEvents`.
     * You usually don't need to use this, but may wish to if you have multiple
     * Backbone views attached to the same DOM element.
     */
    undelegateEvents: function() {
      this.$el.unbind('.delegateEvents' + this.cid);
    },

    /**
     * Performs the initial configuration of a View with a set of options.
     * Keys with special meaning *(model, collection, id, className)*, are
     * attached directly to the view.
     */
    _configure: function(options) {
      if (this.options) {
        options = _.extend({}, this.options, options);
      }
      var self = this;
      _.each(viewOptions, function(attr) {
        if (options[attr]) {
          self[attr] = options[attr];
        }
      });
      this.options = options;
    },

    /**
     * Ensure that the View has a DOM element to render into.
     * If `this.el` is a string, pass it through `$()`, take the first
     * matching element, and re-assign it to `el`. Otherwise, create
     * an element from the `id`, `className` and `tagName` properties.
     */
    _ensureElement: function() {
      if (!this.el) {
        var attrs = Parse._getValue(this, 'attributes') || {};
        if (this.id) {
          attrs.id = this.id;
        }
        if (this.className) {
          attrs['class'] = this.className;
        }
        this.setElement(this.make(this.tagName, attrs), false);
      } else {
        this.setElement(this.el, false);
      }
    }

  });

  /**
   * @function
   * @param {Object} instanceProps Instance properties for the view.
   * @param {Object} classProps Class properies for the view.
   * @return {Class} A new subclass of <code>Parse.View</code>.
   */
  Parse.View.extend = Parse._extend;

}(this));

(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * @class
   *
   * <p>A Parse.User object is a local representation of a user persisted to the
   * Parse cloud. This class is a subclass of a Parse.Object, and retains the
   * same functionality of a Parse.Object, but also extends it with various
   * user specific methods, like authentication, signing up, and validation of
   * uniqueness.</p>
   */
  Parse.User = Parse.Object.extend("_User", /** @lends Parse.User.prototype */ {
    // Instance Variables
    _isCurrentUser: false,


    // Instance Methods
    
    /**
     * Merges another object's attributes into this object.
     */
    _mergeFromObject: function(other) {
      if (other.getSessionToken()) {
        this._sessionToken = other.getSessionToken();      
      }    
      Parse.User.__super__._mergeFromObject.call(this, other);
    },    

    /**
     * Internal method to handle special fields in a _User response.
     */
    _mergeMagicFields: function(attrs) {
      if (attrs.sessionToken) {
        this._sessionToken = attrs.sessionToken;
        delete attrs.sessionToken;
      }
      Parse.User.__super__._mergeMagicFields.call(this, attrs);
    },

    /**
     * Removes null values from authData (which exist temporarily for
     * unlinking)
     */
    _cleanupAuthData: function() {
      if (!this.isCurrent()) {
        return;
      }
      var authData = this.get('authData');
      if (!authData) {
        return;
      }
      Parse._objectEach(this.get('authData'), function(value, key) {
        if (!authData[key]) {
          delete authData[key];
        }
      });
    },

    /**
     * Synchronizes authData for all providers.
     */
    _synchronizeAllAuthData: function() {
      var authData = this.get('authData');
      if (!authData) {
        return;
      }

      var self = this;
      Parse._objectEach(this.get('authData'), function(value, key) {
        self._synchronizeAuthData(key);
      });
    },

    /**
     * Synchronizes auth data for a provider (e.g. puts the access token in the
     * right place to be used by the Facebook SDK).
     */
    _synchronizeAuthData: function(provider) {
      if (!this.isCurrent()) {
        return;
      }
      var authType;
      if (_.isString(provider)) {
        authType = provider;
        provider = Parse.User._authProviders[authType];
      } else {
        authType = provider.getAuthType();
      }
      var authData = this.get('authData');
      if (!authData || !provider) {
        return;
      }
      var success = provider.restoreAuthentication(authData[authType]);
      if (!success) {
        this._unlinkFrom(provider);
      }
    },

    _handleSaveResult: function(makeCurrent) {
      // Clean up and synchronize the authData object, removing any unset values
      if (makeCurrent) {
        this._isCurrentUser = true;
      }
      this._cleanupAuthData();
      this._synchronizeAllAuthData();
      // Don't keep the password around.
      delete this._serverData.password;
      this._rebuildEstimatedDataForKey("password");
      this._refreshCache();
      if (makeCurrent || this.isCurrent()) {
        Parse.User._saveCurrentUser(this);
      }
    },

    /**
     * Unlike in the Android/iOS SDKs, logInWith is unnecessary, since you can
     * call linkWith on the user (even if it doesn't exist yet on the server).
     */
    _linkWith: function(provider, options) {
      var authType;
      if (_.isString(provider)) {
        authType = provider;
        provider = Parse.User._authProviders[provider];
      } else {
        authType = provider.getAuthType();
      }
      if (_.has(options, 'authData')) {
        var authData = this.get('authData') || {};
        authData[authType] = options.authData;
        this.set('authData', authData);

        // Overridden so that the user can be made the current user.
        var newOptions = _.clone(options) || {};
        newOptions.success = function(model) {
          model._handleSaveResult(true);
          if (options.success) {
            options.success.apply(this, arguments);
          }
        };
        return this.save({'authData': authData}, newOptions);
      } else {
        var self = this;
        var promise = new Parse.Promise();
        provider.authenticate({
          success: function(provider, result) {
            self._linkWith(provider, {
              authData: result,
              success: options.success,
              error: options.error
            }).then(function() {
              promise.resolve(self);
            });
          },
          error: function(provider, error) {
            if (options.error) {
              options.error(self, error);
            }
            promise.reject(error);
          }
        });
        return promise;
      }
    },

    /**
     * Unlinks a user from a service.
     */
    _unlinkFrom: function(provider, options) {
      var authType;
      if (_.isString(provider)) {
        authType = provider;
        provider = Parse.User._authProviders[provider];
      } else {
        authType = provider.getAuthType();
      }
      var newOptions = _.clone(options);
      var self = this;
      newOptions.authData = null;
      newOptions.success = function(model) {
        self._synchronizeAuthData(provider);
        if (options.success) {
          options.success.apply(this, arguments);
        }
      };
      return this._linkWith(provider, newOptions);
    },

    /**
     * Checks whether a user is linked to a service.
     */
    _isLinked: function(provider) {
      var authType;
      if (_.isString(provider)) {
        authType = provider;
      } else {
        authType = provider.getAuthType();
      }
      var authData = this.get('authData') || {};
      return !!authData[authType];
    },

    /**
     * Deauthenticates all providers.
     */
    _logOutWithAll: function() {
      var authData = this.get('authData');
      if (!authData) {
        return;
      }
      var self = this;
      Parse._objectEach(this.get('authData'), function(value, key) {
        self._logOutWith(key);
      });
    },

    /**
     * Deauthenticates a single provider (e.g. removing access tokens from the
     * Facebook SDK).
     */
    _logOutWith: function(provider) {
      if (!this.isCurrent()) {
        return;
      }
      if (_.isString(provider)) {
        provider = Parse.User._authProviders[provider];
      }
      if (provider && provider.deauthenticate) {
        provider.deauthenticate();
      }
    },

    /**
     * Signs up a new user. You should call this instead of save for
     * new Parse.Users. This will create a new Parse.User on the server, and
     * also persist the session on disk so that you can access the user using
     * <code>current</code>.
     *
     * <p>A username and password must be set before calling signUp.</p>
     *
     * <p>Calls options.success or options.error on completion.</p>
     *
     * @param {Object} attrs Extra fields to set on the new user, or null.
     * @param {Object} options A Backbone-style options object.
     * @return {Parse.Promise} A promise that is fulfilled when the signup
     *     finishes.
     * @see Parse.User.signUp
     */
    signUp: function(attrs, options) {
      var error;
      options = options || {};

      var username = (attrs && attrs.username) || this.get("username");
      if (!username || (username === "")) {
        error = new Parse.Error(
            Parse.Error.OTHER_CAUSE,
            "Cannot sign up user with an empty name.");
        if (options && options.error) {
          options.error(this, error);
        }
        return Parse.Promise.error(error);
      }

      var password = (attrs && attrs.password) || this.get("password");
      if (!password || (password === "")) {
        error = new Parse.Error(
            Parse.Error.OTHER_CAUSE,
            "Cannot sign up user with an empty password.");
        if (options && options.error) {
          options.error(this, error);
        }
        return Parse.Promise.error(error);
      }

      // Overridden so that the user can be made the current user.
      var newOptions = _.clone(options);
      newOptions.success = function(model) {
        model._handleSaveResult(Parse.User._canUseCurrentUser());
        if (options.success) {
          options.success.apply(this, arguments);
        }
      };
      return this.save(attrs, newOptions);
    },

    /**
     * Logs in a Parse.User. On success, this saves the session to localStorage,
     * so you can retrieve the currently logged in user using
     * <code>current</code>.
     *
     * <p>A username and password must be set before calling logIn.</p>
     *
     * <p>Calls options.success or options.error on completion.</p>
     *
     * @param {Object} options A Backbone-style options object.
     * @see Parse.User.logIn
     * @return {Parse.Promise} A promise that is fulfilled with the user when
     *     the login is complete.
     */
    logIn: function(options) {
      if (!Parse.User._canUseCurrentUser()) {
        throw new Error(
          'It is not possible to log in on a server environment.'
        );
      }
      var model = this;
      options = options || {};
      var request = Parse._request({
        route: "login",
        method: "GET",
        useMasterKey: options.useMasterKey,
        data: this.toJSON()
      });
      return request.then(function(resp, status, xhr) {
        var serverAttrs = model.parse(resp, status, xhr);
        model._finishFetch(serverAttrs);
        model._handleSaveResult(true);
        return model;
      })._thenRunCallbacks(options, this);
    },

    /**
     * @see Parse.Object#save
     */
    save: function(arg1, arg2, arg3) {
      var i, attrs, current, options, saved;
      if (_.isObject(arg1) || _.isNull(arg1) || _.isUndefined(arg1)) {
        attrs = arg1;
        options = arg2;
      } else {
        attrs = {};
        attrs[arg1] = arg2;
        options = arg3;
      }
      options = options || {};

      var newOptions = _.clone(options);
      newOptions.success = function(model) {
        model._handleSaveResult(false);
        if (options.success) {
          options.success.apply(this, arguments);
        }
      };
      return Parse.Object.prototype.save.call(this, attrs, newOptions);
    },

    /**
     * @see Parse.Object#fetch
     */
    fetch: function(options) {
      var newOptions = options ? _.clone(options) : {};
      newOptions.success = function(model) {
        model._handleSaveResult(false);
        if (options && options.success) {
          options.success.apply(this, arguments);
        }
      };
      return Parse.Object.prototype.fetch.call(this, newOptions);
    },

    /**
     * Returns true if <code>current</code> would return this user.
     * @see Parse.User#current
     */
    isCurrent: function() {
      return this._isCurrentUser;
    },

    /**
     * Returns get("username").
     * @return {String}
     * @see Parse.Object#get
     */
    getUsername: function() {
      return this.get("username");
    },

    /**
     * Calls set("username", username, options) and returns the result.
     * @param {String} username
     * @param {Object} options A Backbone-style options object.
     * @return {Boolean}
     * @see Parse.Object.set
     */
    setUsername: function(username, options) {
      return this.set("username", username, options);
    },

    /**
     * Calls set("password", password, options) and returns the result.
     * @param {String} password
     * @param {Object} options A Backbone-style options object.
     * @return {Boolean}
     * @see Parse.Object.set
     */
    setPassword: function(password, options) {
      return this.set("password", password, options);
    },

    /**
     * Returns get("email").
     * @return {String}
     * @see Parse.Object#get
     */
    getEmail: function() {
      return this.get("email");
    },

    /**
     * Calls set("email", email, options) and returns the result.
     * @param {String} email
     * @param {Object} options A Backbone-style options object.
     * @return {Boolean}
     * @see Parse.Object.set
     */
    setEmail: function(email, options) {
      return this.set("email", email, options);
    },

    /**
     * Checks whether this user is the current user and has been authenticated.
     * @return (Boolean) whether this user is the current user and is logged in.
     */
    authenticated: function() {
      return !!this._sessionToken &&
          (Parse.User.current() && Parse.User.current().id === this.id);
    },

    /**
     * Returns the session token for this user, if the user has been logged in,
     * or if it is the result of a query with the master key. Otherwise, returns
     * undefined.
     * @return {String} the session token, or undefined
     */
    getSessionToken: function() {
      return this._sessionToken;
    },

    /**
     * Request a revocable session token to replace the older style of token.
     * @param {Object} options A Backbone-style options object.
     *
     * @return {Parse.Promise} A promise that is resolved when the replacement
     *   token has been fetched.
     */
    _upgradeToRevocableSession: function(options) {
      options = options || {};
      if (!Parse.User.current()) {
        return Parse.Promise.as()._thenRunCallbacks(options);
      }
      var currentSession = Parse.User.current().getSessionToken();
      if (Parse.Session._isRevocable(currentSession)) {
        return Parse.Promise.as()._thenRunCallbacks(options);
      }
      return Parse._request({
        route: 'upgradeToRevocableSession',
        method: 'POST',
        useMasterKey: options.useMasterKey,
        sessionToken: currentSession
      }).then(function(result) {
        var session = new Parse.Session();
        session._finishFetch(result);
        var currentUser = Parse.User.current();
        currentUser._sessionToken = session.getSessionToken();
        Parse.User._saveCurrentUser(currentUser);
      })._thenRunCallbacks(options);
    },

  }, /** @lends Parse.User */ {
    // Class Variables

    // The currently logged-in user.
    _currentUser: null,

    // Whether currentUser is known to match the serialized version on disk.
    // This is useful for saving a localstorage check if you try to load
    // _currentUser frequently while there is none stored.
    _currentUserMatchesDisk: false,

    // The localStorage key suffix that the current user is stored under.
    _CURRENT_USER_KEY: "currentUser",

    // The mapping of auth provider names to actual providers
    _authProviders: {},

    // Whether to rewrite className User to _User
    _performUserRewrite: true,

    // Whether to send a Revocable Session header
    _isRevocableSessionEnabled: false,

    // Whether to enable a memory-unsafe current user in node.js
    _enableUnsafeCurrentUser: false,


    // Class Methods

    /**
     * Signs up a new user with a username (or email) and password.
     * This will create a new Parse.User on the server, and also persist the
     * session in localStorage so that you can access the user using
     * {@link #current}.
     *
     * <p>Calls options.success or options.error on completion.</p>
     *
     * @param {String} username The username (or email) to sign up with.
     * @param {String} password The password to sign up with.
     * @param {Object} attrs Extra fields to set on the new user.
     * @param {Object} options A Backbone-style options object.
     * @return {Parse.Promise} A promise that is fulfilled with the user when
     *     the signup completes.
     * @see Parse.User#signUp
     */
    signUp: function(username, password, attrs, options) {
      attrs = attrs || {};
      attrs.username = username;
      attrs.password = password;
      var user = Parse.Object._create("_User");
      return user.signUp(attrs, options);
    },

    /**
     * Logs in a user with a username (or email) and password. On success, this
     * saves the session to disk, so you can retrieve the currently logged in
     * user using <code>current</code>.
     *
     * <p>Calls options.success or options.error on completion.</p>
     *
     * @param {String} username The username (or email) to log in with.
     * @param {String} password The password to log in with.
     * @param {Object} options A Backbone-style options object.
     * @return {Parse.Promise} A promise that is fulfilled with the user when
     *     the login completes.
     * @see Parse.User#logIn
     */
    logIn: function(username, password, options) {
      var user = Parse.Object._create("_User");
      user._finishFetch({ username: username, password: password });
      return user.logIn(options);
    },

    /**
     * Logs in a user with a session token. On success, this saves the session
     * to disk, so you can retrieve the currently logged in user using
     * <code>current</code>.
     *
     * <p>Calls options.success or options.error on completion.</p>
     *
     * @param {String} sessionToken The sessionToken to log in with.
     * @param {Object} options A Backbone-style options object.
     * @return {Parse.Promise} A promise that is fulfilled with the user when
     *     the login completes.
     */
    become: function(sessionToken, options) {
      if (!Parse.User._canUseCurrentUser()) {
        throw new Error(
          'It is not secure to become a user on a node.js server environment.'
        );
      }
      options = options || {};

      var user = Parse.Object._create("_User");
      return Parse._request({
        route: "users",
        className: "me",
        method: "GET",
        useMasterKey: options.useMasterKey,
        sessionToken: sessionToken
      }).then(function(resp, status, xhr) {
        var serverAttrs = user.parse(resp, status, xhr);
        user._finishFetch(serverAttrs);
        user._handleSaveResult(true);
        return user;

      })._thenRunCallbacks(options, user);
    },

    /**
     * Logs out the currently logged in user session. This will remove the
     * session from disk, log out of linked services, and future calls to
     * <code>current</code> will return <code>null</code>.
     * @return {Parse.Promise} A promise that is resolved when the session is
     *   destroyed on the server.
     */
    logOut: function() {
      if (!Parse.User._canUseCurrentUser()) {
        throw new Error(
          'There is no current user user on a node.js server environment.'
        );
      }
      return Parse.User._currentAsync().then(function(currentUser) {
        var promise = Parse.Storage.removeItemAsync(
          Parse._getParsePath(Parse.User._CURRENT_USER_KEY));

        if (currentUser !== null) {
          var currentSession = currentUser.getSessionToken();
          if (Parse.Session._isRevocable(currentSession)) {
            promise.then(function() {
              return Parse._request({
                route: 'logout',
                method: 'POST',
                sessionToken: currentSession
              });
            });
          }
          currentUser._logOutWithAll();
          currentUser._isCurrentUser = false;
        }
        Parse.User._currentUserMatchesDisk = true;
        Parse.User._currentUser = null;

        return promise;
      });
    },

    /**
     * Requests a password reset email to be sent to the specified email address
     * associated with the user account. This email allows the user to securely
     * reset their password on the Parse site.
     *
     * <p>Calls options.success or options.error on completion.</p>
     *
     * @param {String} email The email address associated with the user that
     *     forgot their password.
     * @param {Object} options A Backbone-style options object.
     */
    requestPasswordReset: function(email, options) {
      options = options || {};
      var request = Parse._request({
        route: "requestPasswordReset",
        method: "POST",
        useMasterKey: options.useMasterKey,
        data: { email: email }
      });
      return request._thenRunCallbacks(options);
    },

    /**
     * Retrieves the currently logged in ParseUser with a valid session,
     * either from memory or localStorage, if necessary.
     * @return {Parse.Object} The currently logged in Parse.User.
     */
    current: function() {
      if (!Parse.User._canUseCurrentUser()) {
        throw new Error(
          'There is no current user user on a node.js server environment.'
        );
      }
      if (Parse.Storage.async) {
        // We can't return the current user synchronously
        Parse.User._currentAsync();
        return Parse.User._currentUser;
      }
      
      if (Parse.User._currentUser) {
        return Parse.User._currentUser;
      }

      if (Parse.User._currentUserMatchesDisk) {
        // TODO: Lazily log in anonymous user.
        return Parse.User._currentUser;
      }

      // Load the user from local storage.
      Parse.User._currentUserMatchesDisk = true;

      var userData = Parse.Storage.getItem(Parse._getParsePath(
          Parse.User._CURRENT_USER_KEY));
      if (!userData) {
        // TODO: Lazily log in anonymous user.
        return null;
      }
      Parse.User._currentUser = Parse.Object._create("_User");
      Parse.User._currentUser._isCurrentUser = true;

      var json = JSON.parse(userData);
      Parse.User._currentUser.id = json._id;
      delete json._id;
      Parse.User._currentUser._sessionToken = json._sessionToken;
      delete json._sessionToken;
      Parse.User._currentUser._finishFetch(json);

      Parse.User._currentUser._synchronizeAllAuthData();
      Parse.User._currentUser._refreshCache();
      Parse.User._currentUser._opSetQueue = [{}];
      return Parse.User._currentUser;
    },

    /**
     * Retrieves the currently logged in ParseUser from asynchronous Storage.
     * @return {Parse.Promise} A Promise that is resolved with the currently
     *   logged in Parse User
     */
    _currentAsync: function() {
      if (Parse.User._currentUser) {
        return Parse.Promise.as(Parse.User._currentUser);
      }

      if (Parse.User._currentUserMatchesDisk) {
        return Parse.Promise.as(Parse.User._currentUser);
      }

      // Load the user from Storage
      return Parse.Storage.getItemAsync(Parse._getParsePath(
        Parse.User._CURRENT_USER_KEY)).then(function(userData) {
        if (!userData) {
          return null;
        }
        Parse.User._currentUser = Parse.Object._create("_User");
        Parse.User._currentUser._isCurrentUser = true;

        var json = JSON.parse(userData);
        Parse.User._currentUser.id = json._id;
        delete json._id;
        Parse.User._currentUser._sessionToken = json._sessionToken;
        delete json._sessionToken;
        Parse.User._currentUser._finishFetch(json);

        Parse.User._currentUser._synchronizeAllAuthData();
        Parse.User._currentUser._refreshCache();
        Parse.User._currentUser._opSetQueue = [{}];
        return Parse.User._currentUser;
      });
    },

    /**
     * Allow someone to define a custom User class without className
     * being rewritten to _User. The default behavior is to rewrite
     * User to _User for legacy reasons. This allows developers to
     * override that behavior.
     *
     * @param {Boolean} isAllowed Whether or not to allow custom User class
     */
    allowCustomUserClass: function(isAllowed) {
      this._performUserRewrite = !isAllowed;
    },

    /**
     * Allow a legacy application to start using revocable sessions. If the
     * current session token is not revocable, a request will be made for a new,
     * revocable session.
     * It is not necessary to call this method from cloud code unless you are
     * handling user signup or login from the server side. In a cloud code call,
     * this function will not attempt to upgrade the current token.
     * @param {Object} options A Backbone-style options object.
     *
     * @return {Parse.Promise} A promise that is resolved when the process has
     *   completed. If a replacement session token is requested, the promise
     *   will be resolved after a new token has been fetched.
     */
    enableRevocableSession: function(options) {
      options = options || {};
      Parse.User._isRevocableSessionEnabled = true;
      if (Parse.User._canUseCurrentUser() && Parse.User.current()) {
        return Parse.User.current()._upgradeToRevocableSession(options);
      }
      return Parse.Promise.as()._thenRunCallbacks(options);
    },

    /**
     *
     */
    enableUnsafeCurrentUser: function() {
      Parse.User._enableUnsafeCurrentUser = true;
    },

    _canUseCurrentUser: function() {
      return !Parse._isNode || Parse.User._enableUnsafeCurrentUser;
    },

    /**
     * Persists a user as currentUser to localStorage, and into the singleton.
     */
    _saveCurrentUser: function(user) {
      if (Parse.User._currentUser !== null &&
          Parse.User._currentUser !== user) {
        Parse.User.logOut();
      }
      user._isCurrentUser = true;
      Parse.User._currentUser = user;
      Parse.User._currentUserMatchesDisk = true;

      var json = user.toJSON();
      json._id = user.id;
      json._sessionToken = user._sessionToken;
      if (Parse.Storage.async) {
        Parse.Storage.setItemAsync(
          Parse._getParsePath(Parse.User._CURRENT_USER_KEY),
          JSON.stringify(json));
      } else {
        Parse.Storage.setItem(
          Parse._getParsePath(Parse.User._CURRENT_USER_KEY),
          JSON.stringify(json));
      }
    },

    _registerAuthenticationProvider: function(provider) {
      Parse.User._authProviders[provider.getAuthType()] = provider;
      // Synchronize the current user with the auth provider.
      if (Parse.User.current()) {
        Parse.User.current()._synchronizeAuthData(provider.getAuthType());
      }
    },

    _logInWith: function(provider, options) {
      var user = Parse.Object._create("_User");
      return user._linkWith(provider, options);
    }

  });
}(this));


(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;

  /**
   * @class
   *
   * <p>A Parse.Session object is a local representation of a revocable session.
   * This class is a subclass of a Parse.Object, and retains the same
   * functionality of a Parse.Object.</p>
   */
  Parse.Session = Parse.Object.extend('_Session',
  /** @lends Parse.Session.prototype */
  {
    /**
     * Returns the session token string.
     * @return {String}
     */
    getSessionToken: function() {
      return this._sessionToken;
    },

    /**
     * Internal method to handle special fields in a _Session response.
     */
    _mergeMagicFields: function(attrs) {
      if (attrs.sessionToken) {
        this._sessionToken = attrs.sessionToken;
        delete attrs.sessionToken;
      }
      Parse.Session.__super__._mergeMagicFields.call(this, attrs);
    },
  }, /** @lends Parse.Session */ {

    // Throw an error when modifying these read-only fields
    readOnlyAttributes: {
      createdWith: true,
      expiresAt: true,
      installationId: true,
      restricted: true,
      sessionToken: true,
      user: true
    },

    /**
     * Retrieves the Session object for the currently logged in session.
     * @return {Parse.Promise} A promise that is resolved with the Parse.Session
     *   object after it has been fetched.
     */
    current: function(options) {
      options = options || {};

      var session = Parse.Object._create('_Session');
      var currentToken = Parse.User.current().getSessionToken();
      return Parse._request({
        route: 'sessions',
        className: 'me',
        method: 'GET',
        useMasterKey: options.useMasterKey,
        sessionToken: currentToken
      }).then(function(resp, status, xhr) {
        var serverAttrs = session.parse(resp, status, xhr);
        session._finishFetch(serverAttrs);
        return session;
      })._thenRunCallbacks(options, session);
    },

    /**
     * Determines whether a session token is revocable.
     * @return {Boolean}
     */
    _isRevocable: function(token) {
      return token.indexOf('r:') > -1;
    },

    /**
     * Determines whether the current session token is revocable.
     * This method is useful for migrating Express.js or Node.js web apps to
     * use revocable sessions. If you are migrating an app that uses the Parse
     * SDK in the browser only, please use Parse.User.enableRevocableSession()
     * instead, so that sessions can be automatically upgraded.
     * @return {Boolean}
     */
    isCurrentSessionRevocable: function() {
      if (Parse.User.current() !== null) {
        return Parse.Session._isRevocable(
          Parse.User.current().getSessionToken()
        );
      }
    }
  });
})(this);

// Parse.Query is a way to create a list of Parse.Objects.
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * Creates a new parse Parse.Query for the given Parse.Object subclass.
   * @param objectClass -
   *   An instance of a subclass of Parse.Object, or a Parse className string.
   * @class
   *
   * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The
   * most common use case is finding all objects that match a query through the
   * <code>find</code> method. For example, this sample code fetches all objects
   * of class <code>MyClass</code>. It calls a different function depending on
   * whether the fetch succeeded or not.
   * 
   * <pre>
   * var query = new Parse.Query(MyClass);
   * query.find({
   *   success: function(results) {
   *     // results is an array of Parse.Object.
   *   },
   *
   *   error: function(error) {
   *     // error is an instance of Parse.Error.
   *   }
   * });</pre></p>
   * 
   * <p>A Parse.Query can also be used to retrieve a single object whose id is
   * known, through the get method. For example, this sample code fetches an
   * object of class <code>MyClass</code> and id <code>myId</code>. It calls a
   * different function depending on whether the fetch succeeded or not.
   * 
   * <pre>
   * var query = new Parse.Query(MyClass);
   * query.get(myId, {
   *   success: function(object) {
   *     // object is an instance of Parse.Object.
   *   },
   *
   *   error: function(object, error) {
   *     // error is an instance of Parse.Error.
   *   }
   * });</pre></p>
   * 
   * <p>A Parse.Query can also be used to count the number of objects that match
   * the query without retrieving all of those objects. For example, this
   * sample code counts the number of objects of the class <code>MyClass</code>
   * <pre>
   * var query = new Parse.Query(MyClass);
   * query.count({
   *   success: function(number) {
   *     // There are number instances of MyClass.
   *   },
   *
   *   error: function(error) {
   *     // error is an instance of Parse.Error.
   *   }
   * });</pre></p>
   */
  Parse.Query = function(objectClass) {
    if (_.isString(objectClass)) {
      objectClass = Parse.Object._getSubclass(objectClass);
    }

    this.objectClass = objectClass;

    this.className = objectClass.prototype.className;

    this._where = {};
    this._include = [];
    this._limit = -1; // negative limit means, do not send a limit
    this._skip = 0;
    this._extraOptions = {};
  };

  /**
   * Constructs a Parse.Query that is the OR of the passed in queries.  For
   * example:
   * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>
   *
   * will create a compoundQuery that is an or of the query1, query2, and
   * query3.
   * @param {...Parse.Query} var_args The list of queries to OR.
   * @return {Parse.Query} The query that is the OR of the passed in queries.
   */
  Parse.Query.or = function() {
    var queries = _.toArray(arguments);
    var className = null;
    Parse._arrayEach(queries, function(q) {
      if (_.isNull(className)) {
        className = q.className;
      }

      if (className !== q.className) {
        throw "All queries must be for the same class";
      }
    });
    var query = new Parse.Query(className);
    query._orQuery(queries);
    return query;
  };

  Parse.Query.prototype = {
    /**
     * Constructs a Parse.Object whose id is already known by fetching data from
     * the server.  Either options.success or options.error is called when the
     * find completes.
     *
     * @param {String} objectId The id of the object to be fetched.
     * @param {Object} options A Backbone-style options object.
     * Valid options are:<ul>
     *   <li>success: A Backbone-style success callback
     *   <li>error: An Backbone-style error callback.
     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
     *     be used for this request.
     *   <li>sessionToken: A valid session token, used for making a request on
     *       behalf of a specific user.
     * </ul>
     */
    get: function(objectId, options) {
      var self = this;
      self.equalTo('objectId', objectId);

      var firstOptions = {};
      if (options && _.has(options, 'useMasterKey')) {
        firstOptions = { useMasterKey: options.useMasterKey };
      }
      if (options && _.has(options, 'sessionToken')) {
        firstOptions.sessionToken = options.sessionToken;
      }

      return self.first(firstOptions).then(function(response) {
        if (response) {
          return response;
        }

        var errorObject = new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,
                                          "Object not found.");
        return Parse.Promise.error(errorObject);

      })._thenRunCallbacks(options, null);
    },

    /**
     * Returns a JSON representation of this query.
     * @return {Object} The JSON representation of the query.
     */
    toJSON: function() {
      var params = {
        where: this._where
      };

      if (this._include.length > 0) {
        params.include = this._include.join(",");
      }
      if (this._select) {
        params.keys = this._select.join(",");
      }
      if (this._limit >= 0) {
        params.limit = this._limit;
      }
      if (this._skip > 0) {
        params.skip = this._skip;
      }
      if (this._order !== undefined) {
        params.order = this._order.join(",");
      }

      Parse._objectEach(this._extraOptions, function(v, k) {
        params[k] = v;
      });

      return params;
    },

    /**
     * Retrieves a list of ParseObjects that satisfy this query.
     * Either options.success or options.error is called when the find
     * completes.
     *
     * @param {Object} options A Backbone-style options object. Valid options
     * are:<ul>
     *   <li>success: Function to call when the find completes successfully.
     *   <li>error: Function to call when the find fails.
     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
     *     be used for this request.
     *   <li>sessionToken: A valid session token, used for making a request on
     *       behalf of a specific user.
     * </ul>
     *
     * @return {Parse.Promise} A promise that is resolved with the results when
     * the query completes.
     */
    find: function(options) {
      var self = this;
      options = options || {};

      var request = Parse._request({
        route: "classes",
        className: this.className,
        method: "GET",
        useMasterKey: options.useMasterKey,
        sessionToken: options.sessionToken,
        data: this.toJSON()
      });

      return request.then(function(response) {
        return _.map(response.results, function(json) {
          var obj;
          if (response.className) {
            obj = new Parse.Object(response.className);
          } else {
            obj = new self.objectClass();
          }
          obj._finishFetch(json, true);
          return obj;
        });
      })._thenRunCallbacks(options);
    },

    /**
     * Counts the number of objects that match this query.
     * Either options.success or options.error is called when the count
     * completes.
     *
     * @param {Object} options A Backbone-style options object. Valid options
     * are:<ul>
     *   <li>success: Function to call when the count completes successfully.
     *   <li>error: Function to call when the find fails.
     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
     *     be used for this request.
     *   <li>sessionToken: A valid session token, used for making a request on
     *       behalf of a specific user.
     * </ul>
     *
     * @return {Parse.Promise} A promise that is resolved with the count when
     * the query completes.
     */
    count: function(options) {
      var self = this;
      options = options || {};

      var params = this.toJSON();
      params.limit = 0;
      params.count = 1;
      var request = Parse._request({
        route: "classes",
        className: self.className, 
        method: "GET",
        useMasterKey: options.useMasterKey,
        sessionToken: options.sessionToken,
        data: params
      });

      return request.then(function(response) {
        return response.count;
      })._thenRunCallbacks(options);
    },

    /**
     * Retrieves at most one Parse.Object that satisfies this query.
     *
     * Either options.success or options.error is called when it completes.
     * success is passed the object if there is one. otherwise, undefined.
     *
     * @param {Object} options A Backbone-style options object. Valid options
     * are:<ul>
     *   <li>success: Function to call when the find completes successfully.
     *   <li>error: Function to call when the find fails.
     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
     *     be used for this request.
     *   <li>sessionToken: A valid session token, used for making a request on
     *       behalf of a specific user.
     * </ul>
     *
     * @return {Parse.Promise} A promise that is resolved with the object when
     * the query completes.
     */
    first: function(options) {
      var self = this;
      options = options || {};

      var params = this.toJSON();
      params.limit = 1;
      var request = Parse._request({
        route: "classes",
        className: this.className, 
        method: "GET",
        useMasterKey: options.useMasterKey,
        sessionToken: options.sessionToken,
        data: params
      });

      return request.then(function(response) {
        return _.map(response.results, function(json) {
          var obj;
          if (response.className) {
            obj = new Parse.Object(response.className);
          } else {
            obj = new self.objectClass();
          }
          obj._finishFetch(json, true);
          return obj;
        })[0];
      })._thenRunCallbacks(options);
    },

    /**
     * Returns a new instance of Parse.Collection backed by this query.
     * @param {Array} items An array of instances of <code>Parse.Object</code>
     *     with which to start this Collection.
     * @param {Object} options An optional object with Backbone-style options.
     * Valid options are:<ul>
     *   <li>model: The Parse.Object subclass that this collection contains.
     *   <li>query: An instance of Parse.Query to use when fetching items.
     *   <li>comparator: A string property name or function to sort by.
     * </ul>
     * @return {Parse.Collection}
     */
    collection: function(items, options) {
      options = options || {};
      return new Parse.Collection(items, _.extend(options, {
        model: this.objectClass,
        query: this
      }));
    },

    /**
     * Sets the number of results to skip before returning any results.
     * This is useful for pagination.
     * Default is to skip zero results.
     * @param {Number} n the number of results to skip.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    skip: function(n) {
      this._skip = n;
      return this;
    },

    /**
     * Sets the limit of the number of results to return. The default limit is
     * 100, with a maximum of 1000 results being returned at a time.
     * @param {Number} n the number of results to limit to.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    limit: function(n) {
      this._limit = n;
      return this;
    },

    /**
     * Add a constraint to the query that requires a particular key's value to
     * be equal to the provided value.
     * @param {String} key The key to check.
     * @param value The value that the Parse.Object must contain.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    equalTo: function(key, value) {
      if (_.isUndefined(value)) {
        return this.doesNotExist(key);
      } 

      this._where[key] = Parse._encode(value);
      return this;
    },

    /**
     * Helper for condition queries
     */
    _addCondition: function(key, condition, value) {
      // Check if we already have a condition
      if (!this._where[key]) {
        this._where[key] = {};
      }
      this._where[key][condition] = Parse._encode(value);
      return this;
    },

    /**
     * Add a constraint to the query that requires a particular key's value to
     * be not equal to the provided value.
     * @param {String} key The key to check.
     * @param value The value that must not be equalled.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    notEqualTo: function(key, value) {
      this._addCondition(key, "$ne", value);
      return this;
    },

    /**
     * Add a constraint to the query that requires a particular key's value to
     * be less than the provided value.
     * @param {String} key The key to check.
     * @param value The value that provides an upper bound.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    lessThan: function(key, value) {
      this._addCondition(key, "$lt", value);
      return this;
    },

    /**
     * Add a constraint to the query that requires a particular key's value to
     * be greater than the provided value.
     * @param {String} key The key to check.
     * @param value The value that provides an lower bound.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    greaterThan: function(key, value) {
      this._addCondition(key, "$gt", value);
      return this;
    },

    /**
     * Add a constraint to the query that requires a particular key's value to
     * be less than or equal to the provided value.
     * @param {String} key The key to check.
     * @param value The value that provides an upper bound.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    lessThanOrEqualTo: function(key, value) {
      this._addCondition(key, "$lte", value);
      return this;
    },

    /**
     * Add a constraint to the query that requires a particular key's value to
     * be greater than or equal to the provided value.
     * @param {String} key The key to check.
     * @param value The value that provides an lower bound.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    greaterThanOrEqualTo: function(key, value) {
      this._addCondition(key, "$gte", value);
      return this;
    },

    /**
     * Add a constraint to the query that requires a particular key's value to
     * be contained in the provided list of values.
     * @param {String} key The key to check.
     * @param {Array} values The values that will match.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    containedIn: function(key, values) {
      this._addCondition(key, "$in", values);
      return this;
    },

    /**
     * Add a constraint to the query that requires a particular key's value to
     * not be contained in the provided list of values.
     * @param {String} key The key to check.
     * @param {Array} values The values that will not match.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    notContainedIn: function(key, values) {
      this._addCondition(key, "$nin", values);
      return this;
    },

    /**
     * Add a constraint to the query that requires a particular key's value to
     * contain each one of the provided list of values.
     * @param {String} key The key to check.  This key's value must be an array.
     * @param {Array} values The values that will match.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    containsAll: function(key, values) {
      this._addCondition(key, "$all", values);
      return this;
    },


    /**
     * Add a constraint for finding objects that contain the given key.
     * @param {String} key The key that should exist.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    exists: function(key) {
      this._addCondition(key, "$exists", true);
      return this;
    },

    /**
     * Add a constraint for finding objects that do not contain a given key.
     * @param {String} key The key that should not exist
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    doesNotExist: function(key) {
      this._addCondition(key, "$exists", false);
      return this;
    },

    /**
     * Add a regular expression constraint for finding string values that match
     * the provided regular expression.
     * This may be slow for large datasets.
     * @param {String} key The key that the string to match is stored in.
     * @param {RegExp} regex The regular expression pattern to match.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    matches: function(key, regex, modifiers) {
      this._addCondition(key, "$regex", regex);
      if (!modifiers) { modifiers = ""; }
      // Javascript regex options support mig as inline options but store them 
      // as properties of the object. We support mi & should migrate them to
      // modifiers
      if (regex.ignoreCase) { modifiers += 'i'; }
      if (regex.multiline) { modifiers += 'm'; }

      if (modifiers && modifiers.length) {
        this._addCondition(key, "$options", modifiers);
      }
      return this;
    },

    /**
     * Add a constraint that requires that a key's value matches a Parse.Query
     * constraint.
     * @param {String} key The key that the contains the object to match the
     *                     query.
     * @param {Parse.Query} query The query that should match.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    matchesQuery: function(key, query) {
      var queryJSON = query.toJSON();
      queryJSON.className = query.className;
      this._addCondition(key, "$inQuery", queryJSON);
      return this;
    },

   /**
     * Add a constraint that requires that a key's value not matches a
     * Parse.Query constraint.
     * @param {String} key The key that the contains the object to match the
     *                     query.
     * @param {Parse.Query} query The query that should not match.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    doesNotMatchQuery: function(key, query) {
      var queryJSON = query.toJSON();
      queryJSON.className = query.className;
      this._addCondition(key, "$notInQuery", queryJSON);
      return this;
    },


    /**
     * Add a constraint that requires that a key's value matches a value in
     * an object returned by a different Parse.Query.
     * @param {String} key The key that contains the value that is being
     *                     matched.
     * @param {String} queryKey The key in the objects returned by the query to
     *                          match against.
     * @param {Parse.Query} query The query to run.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    matchesKeyInQuery: function(key, queryKey, query) {
      var queryJSON = query.toJSON();
      queryJSON.className = query.className;
      this._addCondition(key, "$select",
                         { key: queryKey, query: queryJSON });
      return this;
    },

    /**
     * Add a constraint that requires that a key's value not match a value in
     * an object returned by a different Parse.Query.
     * @param {String} key The key that contains the value that is being
     *                     excluded.
     * @param {String} queryKey The key in the objects returned by the query to
     *                          match against.
     * @param {Parse.Query} query The query to run.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    doesNotMatchKeyInQuery: function(key, queryKey, query) {
      var queryJSON = query.toJSON();
      queryJSON.className = query.className;
      this._addCondition(key, "$dontSelect",
                         { key: queryKey, query: queryJSON });
      return this;
    },

    /**
     * Add constraint that at least one of the passed in queries matches.
     * @param {Array} queries
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    _orQuery: function(queries) {
      var queryJSON = _.map(queries, function(q) {
        return q.toJSON().where;
      });

      this._where.$or = queryJSON;
      return this;
    },

    /**
     * Converts a string into a regex that matches it.
     * Surrounding with \Q .. \E does this, we just need to escape \E's in
     * the text separately.
     */
    _quote: function(s) {
      return "\\Q" + s.replace("\\E", "\\E\\\\E\\Q") + "\\E";
    },

    /**
     * Add a constraint for finding string values that contain a provided
     * string.  This may be slow for large datasets.
     * @param {String} key The key that the string to match is stored in.
     * @param {String} substring The substring that the value must contain.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    contains: function(key, value) {
      this._addCondition(key, "$regex", this._quote(value));
      return this;
    },

    /**
     * Add a constraint for finding string values that start with a provided
     * string.  This query will use the backend index, so it will be fast even
     * for large datasets.
     * @param {String} key The key that the string to match is stored in.
     * @param {String} prefix The substring that the value must start with.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    startsWith: function(key, value) {
      this._addCondition(key, "$regex", "^" + this._quote(value));
      return this;
    },

    /**
     * Add a constraint for finding string values that end with a provided
     * string.  This will be slow for large datasets.
     * @param {String} key The key that the string to match is stored in.
     * @param {String} suffix The substring that the value must end with.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    endsWith: function(key, value) {
      this._addCondition(key, "$regex", this._quote(value) + "$");
      return this;
    },

    /**
     * Sorts the results in ascending order by the given key.
     * 
     * @param {(String|String[]|...String} key The key to order by, which is a 
     * string of comma separated values, or an Array of keys, or multiple keys.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    ascending: function() {
      this._order = [];
      return this.addAscending.apply(this, arguments);
    },

    /**
     * Sorts the results in ascending order by the given key, 
     * but can also add secondary sort descriptors without overwriting _order.
     * 
     * @param {(String|String[]|...String} key The key to order by, which is a
     * string of comma separated values, or an Array of keys, or multiple keys.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    addAscending: function(key) {
      var self = this; 
      if (!this._order) {
        this._order = [];
      }
      Parse._arrayEach(arguments, function(key) {
        if (Array.isArray(key)) {
          key = key.join();
        }
        self._order = self._order.concat(key.replace(/\s/g, "").split(","));
      });
      return this;
    },

    /**
     * Sorts the results in descending order by the given key.
     * 
     * @param {(String|String[]|...String} key The key to order by, which is a
     * string of comma separated values, or an Array of keys, or multiple keys.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    descending: function(key) {
      this._order = [];
      return this.addDescending.apply(this, arguments);
    },

    /**
     * Sorts the results in descending order by the given key,
     * but can also add secondary sort descriptors without overwriting _order.
     * 
     * @param {(String|String[]|...String} key The key to order by, which is a
     * string of comma separated values, or an Array of keys, or multiple keys.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    addDescending: function(key) {
      var self = this; 
      if (!this._order) {
        this._order = [];
      }
      Parse._arrayEach(arguments, function(key) {
        if (Array.isArray(key)) {
          key = key.join();
        }
        self._order = self._order.concat(
          _.map(key.replace(/\s/g, "").split(","), 
            function(k) { return "-" + k; }));
      });
      return this;
    },

    /**
     * Add a proximity based constraint for finding objects with key point
     * values near the point given.
     * @param {String} key The key that the Parse.GeoPoint is stored in.
     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    near: function(key, point) {
      if (!(point instanceof Parse.GeoPoint)) {
        // Try to cast it to a GeoPoint, so that near("loc", [20,30]) works.
        point = new Parse.GeoPoint(point);
      }
      this._addCondition(key, "$nearSphere", point);
      return this;
    },

    /**
     * Add a proximity based constraint for finding objects with key point
     * values near the point given and within the maximum distance given.
     * @param {String} key The key that the Parse.GeoPoint is stored in.
     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
     * @param {Number} maxDistance Maximum distance (in radians) of results to
     *   return.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    withinRadians: function(key, point, distance) {
      this.near(key, point);
      this._addCondition(key, "$maxDistance", distance);
      return this;
    },

    /**
     * Add a proximity based constraint for finding objects with key point
     * values near the point given and within the maximum distance given.
     * Radius of earth used is 3958.8 miles.
     * @param {String} key The key that the Parse.GeoPoint is stored in.
     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
     * @param {Number} maxDistance Maximum distance (in miles) of results to
     *     return.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    withinMiles: function(key, point, distance) {
      return this.withinRadians(key, point, distance / 3958.8);
    },

    /**
     * Add a proximity based constraint for finding objects with key point
     * values near the point given and within the maximum distance given.
     * Radius of earth used is 6371.0 kilometers.
     * @param {String} key The key that the Parse.GeoPoint is stored in.
     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
     * @param {Number} maxDistance Maximum distance (in kilometers) of results
     *     to return.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    withinKilometers: function(key, point, distance) {
      return this.withinRadians(key, point, distance / 6371.0);
    },

    /**
     * Add a constraint to the query that requires a particular key's
     * coordinates be contained within a given rectangular geographic bounding
     * box.
     * @param {String} key The key to be constrained.
     * @param {Parse.GeoPoint} southwest
     *     The lower-left inclusive corner of the box.
     * @param {Parse.GeoPoint} northeast
     *     The upper-right inclusive corner of the box.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    withinGeoBox: function(key, southwest, northeast) {
      if (!(southwest instanceof Parse.GeoPoint)) {
        southwest = new Parse.GeoPoint(southwest);
      }
      if (!(northeast instanceof Parse.GeoPoint)) {
        northeast = new Parse.GeoPoint(northeast);
      }
      this._addCondition(key, '$within', { '$box': [southwest, northeast] });
      return this;
    },

    /**
     * Include nested Parse.Objects for the provided key.  You can use dot
     * notation to specify which fields in the included object are also fetched.
     * @param {String} key The name of the key to include.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    include: function() {
      var self = this;
      Parse._arrayEach(arguments, function(key) {
        if (_.isArray(key)) {
          self._include = self._include.concat(key);
        } else {
          self._include.push(key);
        }
      });
      return this;
    },

    /**
     * Restrict the fields of the returned Parse.Objects to include only the
     * provided keys.  If this is called multiple times, then all of the keys
     * specified in each of the calls will be included.
     * @param {Array} keys The names of the keys to include.
     * @return {Parse.Query} Returns the query, so you can chain this call.
     */
    select: function() {
      var self = this;
      this._select = this._select || [];
      Parse._arrayEach(arguments, function(key) {
        if (_.isArray(key)) {
          self._select = self._select.concat(key);
        } else {
          self._select.push(key);
        }
      });
      return this;
    },

    /**
     * Iterates over each result of a query, calling a callback for each one. If
     * the callback returns a promise, the iteration will not continue until
     * that promise has been fulfilled. If the callback returns a rejected
     * promise, then iteration will stop with that error. The items are
     * processed in an unspecified order. The query may not have any sort order,
     * and may not use limit or skip.
     * @param {Function} callback Callback that will be called with each result
     *     of the query.
     * @param {Object} options An optional Backbone-like options object with
     *     success and error callbacks that will be invoked once the iteration
     *     has finished.
     * @return {Parse.Promise} A promise that will be fulfilled once the
     *     iteration has completed.
     */
    each: function(callback, options) {
      options = options || {};

      if (this._order || this._skip || (this._limit >= 0)) {
        var error =
          "Cannot iterate on a query with sort, skip, or limit.";
        return Parse.Promise.error(error)._thenRunCallbacks(options);
      }

      var promise = new Parse.Promise();

      var query = new Parse.Query(this.objectClass);
      // We can override the batch size from the options.
      // This is undocumented, but useful for testing.
      query._limit = options.batchSize || 100;
      query._where = _.clone(this._where);
      query._include = _.clone(this._include);
      if (this._select) {
        query._select = _.clone(this._select);
      }

      query.ascending('objectId');

      var findOptions = {};
      if (_.has(options, "useMasterKey")) {
        findOptions.useMasterKey = options.useMasterKey;
      }
      if (_.has(options, 'sessionToken')) {
        findOptions.sessionToken = options.sessionToken;
      }

      var finished = false;
      return Parse.Promise._continueWhile(function() {
        return !finished;

      }, function() {
        return query.find(findOptions).then(function(results) {
          var callbacksDone = Parse.Promise.as();
          Parse._.each(results, function(result) {
            callbacksDone = callbacksDone.then(function() {
              return callback(result);
            });
          });

          return callbacksDone.then(function() {
            if (results.length >= query._limit) {
              query.greaterThan("objectId", results[results.length - 1].id);
            } else {
              finished = true;
            }
          });
        });
      })._thenRunCallbacks(options);
    }
  };

}(this));

/*global FB: false , console: false*/
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  var PUBLIC_KEY = "*";

  var initialized = false;
  var requestedPermissions;
  var initOptions;
  var provider = {
    authenticate: function(options) {
      var self = this;
      FB.login(function(response) {
        if (response.authResponse) {
          if (options.success) {
            options.success(self, {
              id: response.authResponse.userID,
              access_token: response.authResponse.accessToken,
              expiration_date: new Date(response.authResponse.expiresIn * 1000 +
                  (new Date()).getTime()).toJSON()
            });
          }
        } else {
          if (options.error) {
            options.error(self, response);
          }
        }
      }, {
        scope: requestedPermissions
      });
    },
    restoreAuthentication: function(authData) {
      if (authData) {
        var authResponse = {
          userID: authData.id,
          accessToken: authData.access_token,
          expiresIn: (Parse._parseDate(authData.expiration_date).getTime() -
              (new Date()).getTime()) / 1000
        };
        var newOptions = _.clone(initOptions);
        newOptions.authResponse = authResponse;

        // Suppress checks for login status from the browser.
        newOptions.status = false;

        // If the user doesn't match the one known by the FB SDK, log out.
        // Most of the time, the users will match -- it's only in cases where
        // the FB SDK knows of a different user than the one being restored
        // from a Parse User that logged in with username/password.
        var existingResponse = FB.getAuthResponse();
        if (existingResponse &&
            existingResponse.userID !== authResponse.userID) {
          FB.logout();
        }

        FB.init(newOptions);
      }
      return true;
    },
    getAuthType: function() {
      return "facebook";
    },
    deauthenticate: function() {
      this.restoreAuthentication(null);
    }
  };

  /**
   * Provides a set of utilities for using Parse with Facebook.
   * @namespace
   * Provides a set of utilities for using Parse with Facebook.
   */
  Parse.FacebookUtils = {
    /**
     * Initializes Parse Facebook integration.  Call this function after you
     * have loaded the Facebook Javascript SDK with the same parameters
     * as you would pass to<code>
     * <a href=
     * "https://developers.facebook.com/docs/reference/javascript/FB.init/">
     * FB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you
     * with these arguments.
     *
     * @param {Object} options Facebook options argument as described here:
     *   <a href=
     *   "https://developers.facebook.com/docs/reference/javascript/FB.init/">
     *   FB.init()</a>. The status flag will be coerced to 'false' because it
     *   interferes with Parse Facebook integration. Call FB.getLoginStatus()
     *   explicitly if this behavior is required by your application.
     */
    init: function(options) {
      if (typeof(FB) === 'undefined') {
        throw "The Facebook JavaScript SDK must be loaded before calling init.";
      } 
      initOptions = _.clone(options) || {};
      if (initOptions.status && typeof(console) !== "undefined") {
        var warn = console.warn || console.log || function() {};
        warn.call(console, "The 'status' flag passed into" +
          " FB.init, when set to true, can interfere with Parse Facebook" +
          " integration, so it has been suppressed. Please call" +
          " FB.getLoginStatus() explicitly if you require this behavior.");
      }
      initOptions.status = false;
      FB.init(initOptions);
      Parse.User._registerAuthenticationProvider(provider);
      initialized = true;
    },

    /**
     * Gets whether the user has their account linked to Facebook.
     * 
     * @param {Parse.User} user User to check for a facebook link.
     *     The user must be logged in on this device.
     * @return {Boolean} <code>true</code> if the user has their account
     *     linked to Facebook.
     */
    isLinked: function(user) {
      return user._isLinked("facebook");
    },

    /**
     * Logs in a user using Facebook. This method delegates to the Facebook
     * SDK to authenticate the user, and then automatically logs in (or
     * creates, in the case where it is a new user) a Parse.User.
     * 
     * @param {String, Object} permissions The permissions required for Facebook
     *    log in.  This is a comma-separated string of permissions.
     *    Alternatively, supply a Facebook authData object as described in our
     *    REST API docs if you want to handle getting facebook auth tokens
     *    yourself.
     * @param {Object} options Standard options object with success and error
     *    callbacks.
     */
    logIn: function(permissions, options) {
      if (!permissions || _.isString(permissions)) {
        if (!initialized) {
          throw "You must initialize FacebookUtils before calling logIn.";
        }
        requestedPermissions = permissions;
        return Parse.User._logInWith("facebook", options);
      } else {
        var newOptions = _.clone(options) || {};
        newOptions.authData = permissions;
        return Parse.User._logInWith("facebook", newOptions);
      }
    },

    /**
     * Links Facebook to an existing PFUser. This method delegates to the
     * Facebook SDK to authenticate the user, and then automatically links
     * the account to the Parse.User.
     *
     * @param {Parse.User} user User to link to Facebook. This must be the
     *     current user.
     * @param {String, Object} permissions The permissions required for Facebook
     *    log in.  This is a comma-separated string of permissions. 
     *    Alternatively, supply a Facebook authData object as described in our
     *    REST API docs if you want to handle getting facebook auth tokens
     *    yourself.
     * @param {Object} options Standard options object with success and error
     *    callbacks.
     */
    link: function(user, permissions, options) {
      if (!permissions || _.isString(permissions)) {
        if (!initialized) {
          throw "You must initialize FacebookUtils before calling link.";
        }
        requestedPermissions = permissions;
        return user._linkWith("facebook", options);
      } else {
        var newOptions = _.clone(options) || {};
        newOptions.authData = permissions;
        return user._linkWith("facebook", newOptions);
      }
    },

    /**
     * Unlinks the Parse.User from a Facebook account. 
     * 
     * @param {Parse.User} user User to unlink from Facebook. This must be the
     *     current user.
     * @param {Object} options Standard options object with success and error
     *    callbacks.
     */
    unlink: function(user, options) {
      if (!initialized) {
        throw "You must initialize FacebookUtils before calling unlink.";
      }
      return user._unlinkFrom("facebook", options);
    }
  };
  
}(this));

/*global _: false, document: false, window: false, navigator: false */
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * History serves as a global router (per frame) to handle hashchange
   * events or pushState, match the appropriate route, and trigger
   * callbacks. You shouldn't ever have to create one of these yourself
   * — you should use the reference to <code>Parse.history</code>
   * that will be created for you automatically if you make use of 
   * Routers with routes.
   * @class
   *   
   * <p>A fork of Backbone.History, provided for your convenience.  If you 
   * use this class, you must also include jQuery, or another library 
   * that provides a jQuery-compatible $ function.  For more information,
   * see the <a href="http://documentcloud.github.com/backbone/#History">
   * Backbone documentation</a>.</p>
   * <p><strong><em>Available in the client SDK only.</em></strong></p>
   */
  Parse.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');
  };

  // Cached regex for cleaning leading hashes and slashes .
  var routeStripper = /^[#\/]/;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Has the history handling already been started?
  Parse.History.started = false;

  // Set up all inheritable **Parse.History** properties and methods.
  _.extend(Parse.History.prototype, Parse.Events,
           /** @lends Parse.History.prototype */ {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(windowOverride) {
      var loc = windowOverride ? windowOverride.location : window.location;
      var match = loc.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (Parse._isNullOrUndefined(fragment)) {
        if (this._hasPushState || forcePushState) {
          fragment = window.location.pathname;
          var search = window.location.search;
          if (search) {
            fragment += search;
          }
        } else {
          fragment = this.getHash();
        }
      }
      if (!fragment.indexOf(this.options.root)) {
        fragment = fragment.substr(this.options.root.length);
      }
      return fragment.replace(routeStripper, '');
    },

    /**
     * Start the hash change handling, returning `true` if the current
     * URL matches an existing route, and `false` otherwise.
     */
    start: function(options) {
      if (Parse.History.started) {
        throw new Error("Parse.history has already been started");
      }
      Parse.History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options = _.extend({}, {root: '/'}, this.options, options);
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState = !!this.options.pushState;
      this._hasPushState = !!(this.options.pushState && 
                              window.history &&
                              window.history.pushState);
      var fragment = this.getFragment();
      var docMode = document.documentMode;
      var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) &&
                   (!docMode || docMode <= 7));

      if (oldIE) {
        this.iframe = Parse.$('<iframe src="javascript:0" tabindex="-1" />')
                      .hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Parse.$(window).bind('popstate', this.checkUrl);
      } else if (this._wantsHashChange &&
                 ('onhashchange' in window) &&
                 !oldIE) {
        Parse.$(window).bind('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = window.setInterval(this.checkUrl,
                                                    this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = window.location;
      var atRoot  = loc.pathname === this.options.root;

      // If we've started off with a route from a `pushState`-enabled browser,
      // but we're currently in a browser that doesn't support it...
      if (this._wantsHashChange && 
          this._wantsPushState && 
          !this._hasPushState &&
          !atRoot) {
        this.fragment = this.getFragment(null, true);
        window.location.replace(this.options.root + '#' + this.fragment);
        // Return immediately as browser will do redirect to new url
        return true;

      // Or if we've started out with a hash-based route, but we're currently
      // in a browser where it could be `pushState`-based instead...
      } else if (this._wantsPushState &&
                 this._hasPushState && 
                 atRoot &&
                 loc.hash) {
        this.fragment = this.getHash().replace(routeStripper, '');
        window.history.replaceState({}, document.title,
            loc.protocol + '//' + loc.host + this.options.root + this.fragment);
      }

      if (!this.options.silent) {
        return this.loadUrl();
      }
    },

    // Disable Parse.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Parse.$(window).unbind('popstate', this.checkUrl)
                     .unbind('hashchange', this.checkUrl);
      window.clearInterval(this._checkUrlInterval);
      Parse.History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) {
        return false;
      }
      if (this.iframe) {
        this.navigate(current);
      }
      if (!this.loadUrl()) {
        this.loadUrl(this.getHash());
      }
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragmentOverride) {
      var fragment = this.fragment = this.getFragment(fragmentOverride);
      var matched = _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
      return matched;
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the
    // history.
    navigate: function(fragment, options) {
      if (!Parse.History.started) {
        return false;
      }
      if (!options || options === true) {
        options = {trigger: options};
      }
      var frag = (fragment || '').replace(routeStripper, '');
      if (this.fragment === frag) {
        return;
      }

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        if (frag.indexOf(this.options.root) !== 0) {
          frag = this.options.root + frag;
        }
        this.fragment = frag;
        var replaceOrPush = options.replace ? 'replaceState' : 'pushState';
        window.history[replaceOrPush]({}, document.title, frag);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this.fragment = frag;
        this._updateHash(window.location, frag, options.replace);
        if (this.iframe &&
            (frag !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier
          // to push a history entry on hash-tag change.
          // When replace is true, we don't want this.
          if (!options.replace) {
            this.iframe.document.open().close();
          }
          this._updateHash(this.iframe.location, frag, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        window.location.assign(this.options.root + fragment);
      }
      if (options.trigger) {
        this.loadUrl(fragment);
      }
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var s = location.toString().replace(/(javascript:|#).*$/, '');
        location.replace(s + '#' + fragment);
      } else {
        location.hash = fragment;
      }
    }
  });
}(this));

/*global _: false*/
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * Routers map faux-URLs to actions, and fire events when routes are
   * matched. Creating a new one sets its `routes` hash, if not set statically.
   * @class
   *
   * <p>A fork of Backbone.Router, provided for your convenience.
   * For more information, see the
   * <a href="http://documentcloud.github.com/backbone/#Router">Backbone
   * documentation</a>.</p>
   * <p><strong><em>Available in the client SDK only.</em></strong></p>
   */
  Parse.Router = function(options) {
    options = options || {};
    if (options.routes) {
      this.routes = options.routes;
    }
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var namedParam    = /:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-\[\]{}()+?.,\\\^\$\|#\s]/g;

  // Set up all inheritable **Parse.Router** properties and methods.
  _.extend(Parse.Router.prototype, Parse.Events,
           /** @lends Parse.Router.prototype */ {

    /**
     * Initialize is an empty function by default. Override it with your own
     * initialization logic.
     */
    initialize: function(){},

    /**
     * Manually bind a single named route to a callback. For example:
     *
     * <pre>this.route('search/:query/p:num', 'search', function(query, num) {
     *       ...
     *     });</pre>
     */
    route: function(route, name, callback) {
      Parse.history = Parse.history || new Parse.History();
      if (!_.isRegExp(route)) {
        route = this._routeToRegExp(route);
      } 
      if (!callback) {
        callback = this[name];
      }
      Parse.history.route(route, _.bind(function(fragment) {
        var args = this._extractParameters(route, fragment);
        if (callback) {
          callback.apply(this, args);
        }
        this.trigger.apply(this, ['route:' + name].concat(args));
        Parse.history.trigger('route', this, name, args);
      }, this));
      return this;
    },

    /**
     * Whenever you reach a point in your application that you'd
     * like to save as a URL, call navigate in order to update the
     * URL. If you wish to also call the route function, set the 
     * trigger option to true. To update the URL without creating
     * an entry in the browser's history, set the replace option
     * to true.
     */
    navigate: function(fragment, options) {
      Parse.history.navigate(fragment, options);
    },

    // Bind all defined routes to `Parse.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) { 
        return;
      }
      var routes = [];
      for (var route in this.routes) {
        if (this.routes.hasOwnProperty(route)) {
          routes.unshift([route, this.routes[route]]);
        }
      }
      for (var i = 0, l = routes.length; i < l; i++) {
        this.route(routes[i][0], routes[i][1], this[routes[i][1]]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(namedParam, '([^\/]+)')
                   .replace(splatParam, '(.*?)');
      return new RegExp('^' + route + '$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted parameters.
    _extractParameters: function(route, fragment) {
      return route.exec(fragment).slice(1);
    }
  });

  /**
   * @function
   * @param {Object} instanceProps Instance properties for the router.
   * @param {Object} classProps Class properies for the router.
   * @return {Class} A new subclass of <code>Parse.Router</code>.
   */
  Parse.Router.extend = Parse._extend;
}(this));
(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;
  var _ = Parse._;

  /**
   * @namespace Contains functions for calling and declaring
   * <a href="/docs/cloud_code_guide#functions">cloud functions</a>.
   * <p><strong><em>
   *   Some functions are only available from Cloud Code.
   * </em></strong></p>
   */
  Parse.Cloud = Parse.Cloud || {};

  _.extend(Parse.Cloud, /** @lends Parse.Cloud */ {
    /**
     * Makes a call to a cloud function.
     * @param {String} name The function name.
     * @param {Object} data The parameters to send to the cloud function.
     * @param {Object} options A Backbone-style options object
     * options.success, if set, should be a function to handle a successful
     * call to a cloud function.  options.error should be a function that
     * handles an error running the cloud function.  Both functions are
     * optional.  Both functions take a single argument.
     * @return {Parse.Promise} A promise that will be resolved with the result
     * of the function.
     */
    run: function(name, data, options) {
      options = options || {};

      var request = Parse._request({
        route: "functions",
        className: name,
        method: 'POST',
        useMasterKey: options.useMasterKey,
        sessionToken: options.sessionToken,
        data: Parse._encode(data, null, true)
      });

      return request.then(function(resp) {
        return Parse._decode(null, resp).result;
      })._thenRunCallbacks(options);
    }
  });
}(this));

(function(root) {
  root.Parse = root.Parse || {};
  var Parse = root.Parse;

  Parse.Installation = Parse.Object.extend("_Installation");

  /**
   * Contains functions to deal with Push in Parse
   * @name Parse.Push
   * @namespace
   */
  Parse.Push = Parse.Push || {};

  /**
   * Sends a push notification.
   * @param {Object} data -  The data of the push notification.  Valid fields
   * are:
   *   <ol>
   *     <li>channels - An Array of channels to push to.</li>
   *     <li>push_time - A Date object for when to send the push.</li>
   *     <li>expiration_time -  A Date object for when to expire
   *         the push.</li>
   *     <li>expiration_interval - The seconds from now to expire the push.</li>
   *     <li>where - A Parse.Query over Parse.Installation that is used to match
   *         a set of installations to push to.</li>
   *     <li>data - The data to send as part of the push</li>
   *   <ol>
   * @param {Object} options An object that has an optional success function,
   * that takes no arguments and will be called on a successful push, and
   * an error function that takes a Parse.Error and will be called if the push
   * failed.
   * @return {Parse.Promise} A promise that is fulfilled when the push request
   *     completes.
   */
  Parse.Push.send = function(data, options) {
    options = options || {};

    if (data.where) {
      data.where = data.where.toJSON().where;
    }

    if (data.push_time) {
      data.push_time = data.push_time.toJSON();
    }

    if (data.expiration_time) {
      data.expiration_time = data.expiration_time.toJSON();
    }

    if (data.expiration_time && data.expiration_interval) {
      throw "Both expiration_time and expiration_interval can't be set";
    }

    var request = Parse._request({
      route: 'push',
      method: 'POST',
      data: data,
      useMasterKey: options.useMasterKey
    });
    return request._thenRunCallbacks(options);
  };
}(this));

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"_process":"/Users/surian/Sites/Private/timeboxer/node_modules/browserify/node_modules/process/browser.js"}],"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js":[function(require,module,exports){
/* Riot v2.2.2, @license MIT, (c) 2015 Muut Inc. + contributors */

;(function(window, undefined) {
  'use strict'
  var riot = { version: 'v2.2.2', settings: {} }

  // This globals 'const' helps code size reduction

  // for typeof == '' comparisons
  var T_STRING = 'string',
      T_OBJECT = 'object',
      T_UNDEF  = 'undefined'

  // for IE8 and rest of the world
  /* istanbul ignore next */
  var isArray = Array.isArray || (function () {
    var _ts = Object.prototype.toString
    return function (v) { return _ts.call(v) === '[object Array]' }
  })()

  // Version# for IE 8-11, 0 for others
  var ieVersion = (function (win) {
    return (window && window.document || {}).documentMode | 0
  })()

riot.observable = function(el) {

  el = el || {}

  var callbacks = {},
      _id = 0

  el.on = function(events, fn) {
    if (isFunction(fn)) {
      if (typeof fn.id === T_UNDEF) fn._id = _id++

      events.replace(/\S+/g, function(name, pos) {
        (callbacks[name] = callbacks[name] || []).push(fn)
        fn.typed = pos > 0
      })
    }
    return el
  }

  el.off = function(events, fn) {
    if (events == '*') callbacks = {}
    else {
      events.replace(/\S+/g, function(name) {
        if (fn) {
          var arr = callbacks[name]
          for (var i = 0, cb; (cb = arr && arr[i]); ++i) {
            if (cb._id == fn._id) arr.splice(i--, 1)
          }
        } else {
          callbacks[name] = []
        }
      })
    }
    return el
  }

  // only single event supported
  el.one = function(name, fn) {
    function on() {
      el.off(name, on)
      fn.apply(el, arguments)
    }
    return el.on(name, on)
  }

  el.trigger = function(name) {
    var args = [].slice.call(arguments, 1),
        fns = callbacks[name] || []

    for (var i = 0, fn; (fn = fns[i]); ++i) {
      if (!fn.busy) {
        fn.busy = 1
        fn.apply(el, fn.typed ? [name].concat(args) : args)
        if (fns[i] !== fn) { i-- }
        fn.busy = 0
      }
    }

    if (callbacks.all && name != 'all') {
      el.trigger.apply(el, ['all', name].concat(args))
    }

    return el
  }

  return el

}
riot.mixin = (function() {
  var mixins = {}

  return function(name, mixin) {
    if (!mixin) return mixins[name]
    mixins[name] = mixin
  }

})()

;(function(riot, evt, win) {

  // browsers only
  if (!win) return

  var loc = win.location,
      fns = riot.observable(),
      started = false,
      current

  function hash() {
    return loc.href.split('#')[1] || ''
  }

  function parser(path) {
    return path.split('/')
  }

  function emit(path) {
    if (path.type) path = hash()

    if (path != current) {
      fns.trigger.apply(null, ['H'].concat(parser(path)))
      current = path
    }
  }

  var r = riot.route = function(arg) {
    // string
    if (arg[0]) {
      loc.hash = arg
      emit(arg)

    // function
    } else {
      fns.on('H', arg)
    }
  }

  r.exec = function(fn) {
    fn.apply(null, parser(hash()))
  }

  r.parser = function(fn) {
    parser = fn
  }

  r.stop = function () {
    if (!started) return
    win.removeEventListener ? win.removeEventListener(evt, emit, false) : win.detachEvent('on' + evt, emit)
    fns.off('*')
    started = false
  }

  r.start = function () {
    if (started) return
    win.addEventListener ? win.addEventListener(evt, emit, false) : win.attachEvent('on' + evt, emit)
    started = true
  }

  // autostart the router
  r.start()

})(riot, 'hashchange', window)
/*

//// How it works?


Three ways:

1. Expressions: tmpl('{ value }', data).
   Returns the result of evaluated expression as a raw object.

2. Templates: tmpl('Hi { name } { surname }', data).
   Returns a string with evaluated expressions.

3. Filters: tmpl('{ show: !done, highlight: active }', data).
   Returns a space separated list of trueish keys (mainly
   used for setting html classes), e.g. "show highlight".


// Template examples

tmpl('{ title || "Untitled" }', data)
tmpl('Results are { results ? "ready" : "loading" }', data)
tmpl('Today is { new Date() }', data)
tmpl('{ message.length > 140 && "Message is too long" }', data)
tmpl('This item got { Math.round(rating) } stars', data)
tmpl('<h1>{ title }</h1>{ body }', data)


// Falsy expressions in templates

In templates (as opposed to single expressions) all falsy values
except zero (undefined/null/false) will default to empty string:

tmpl('{ undefined } - { false } - { null } - { 0 }', {})
// will return: " - - - 0"

*/


var brackets = (function(orig) {

  var cachedBrackets,
      r,
      b,
      re = /[{}]/g

  return function(x) {

    // make sure we use the current setting
    var s = riot.settings.brackets || orig

    // recreate cached vars if needed
    if (cachedBrackets !== s) {
      cachedBrackets = s
      b = s.split(' ')
      r = b.map(function (e) { return e.replace(/(?=.)/g, '\\') })
    }

    // if regexp given, rewrite it with current brackets (only if differ from default)
    return x instanceof RegExp ? (
        s === orig ? x :
        new RegExp(x.source.replace(re, function(b) { return r[~~(b === '}')] }), x.global ? 'g' : '')
      ) :
      // else, get specific bracket
      b[x]
  }
})('{ }')


var tmpl = (function() {

  var cache = {},
      reVars = /(['"\/]).*?[^\\]\1|\.\w*|\w*:|\b(?:(?:new|typeof|in|instanceof) |(?:this|true|false|null|undefined)\b|function *\()|([a-z_$]\w*)/gi
              // [ 1               ][ 2  ][ 3 ][ 4                                                                                  ][ 5       ]
              // find variable names:
              // 1. skip quoted strings and regexps: "a b", 'a b', 'a \'b\'', /a b/
              // 2. skip object properties: .name
              // 3. skip object literals: name:
              // 4. skip javascript keywords
              // 5. match var name

  // build a template (or get it from cache), render with data
  return function(str, data) {
    return str && (cache[str] = cache[str] || tmpl(str))(data)
  }


  // create a template instance

  function tmpl(s, p) {

    // default template string to {}
    s = (s || (brackets(0) + brackets(1)))

      // temporarily convert \{ and \} to a non-character
      .replace(brackets(/\\{/g), '\uFFF0')
      .replace(brackets(/\\}/g), '\uFFF1')

    // split string to expression and non-expresion parts
    p = split(s, extract(s, brackets(/{/), brackets(/}/)))

    return new Function('d', 'return ' + (

      // is it a single expression or a template? i.e. {x} or <b>{x}</b>
      !p[0] && !p[2] && !p[3]

        // if expression, evaluate it
        ? expr(p[1])

        // if template, evaluate all expressions in it
        : '[' + p.map(function(s, i) {

            // is it an expression or a string (every second part is an expression)
          return i % 2

              // evaluate the expressions
              ? expr(s, true)

              // process string parts of the template:
              : '"' + s

                  // preserve new lines
                  .replace(/\n/g, '\\n')

                  // escape quotes
                  .replace(/"/g, '\\"')

                + '"'

        }).join(',') + '].join("")'
      )

      // bring escaped { and } back
      .replace(/\uFFF0/g, brackets(0))
      .replace(/\uFFF1/g, brackets(1))

    + ';')

  }


  // parse { ... } expression

  function expr(s, n) {
    s = s

      // convert new lines to spaces
      .replace(/\n/g, ' ')

      // trim whitespace, brackets, strip comments
      .replace(brackets(/^[{ ]+|[ }]+$|\/\*.+?\*\//g), '')

    // is it an object literal? i.e. { key : value }
    return /^\s*[\w- "']+ *:/.test(s)

      // if object literal, return trueish keys
      // e.g.: { show: isOpen(), done: item.done } -> "show done"
      ? '[' +

          // extract key:val pairs, ignoring any nested objects
          extract(s,

              // name part: name:, "name":, 'name':, name :
              /["' ]*[\w- ]+["' ]*:/,

              // expression part: everything upto a comma followed by a name (see above) or end of line
              /,(?=["' ]*[\w- ]+["' ]*:)|}|$/
              ).map(function(pair) {

                // get key, val parts
                return pair.replace(/^[ "']*(.+?)[ "']*: *(.+?),? *$/, function(_, k, v) {

                  // wrap all conditional parts to ignore errors
                  return v.replace(/[^&|=!><]+/g, wrap) + '?"' + k + '":"",'

                })

              }).join('')

        + '].join(" ").trim()'

      // if js expression, evaluate as javascript
      : wrap(s, n)

  }


  // execute js w/o breaking on errors or undefined vars

  function wrap(s, nonull) {
    s = s.trim()
    return !s ? '' : '(function(v){try{v='

        // prefix vars (name => data.name)
        + (s.replace(reVars, function(s, _, v) { return v ? '(d.'+v+'===undefined?'+(typeof window == 'undefined' ? 'global.' : 'window.')+v+':d.'+v+')' : s })

          // break the expression if its empty (resulting in undefined value)
          || 'x')
      + '}catch(e){'
      + '}finally{return '

        // default to empty string for falsy values except zero
        + (nonull === true ? '!v&&v!==0?"":v' : 'v')

      + '}}).call(d)'
  }


  // split string by an array of substrings

  function split(str, substrings) {
    var parts = []
    substrings.map(function(sub, i) {

      // push matched expression and part before it
      i = str.indexOf(sub)
      parts.push(str.slice(0, i), sub)
      str = str.slice(i + sub.length)
    })

    // push the remaining part
    return parts.concat(str)
  }


  // match strings between opening and closing regexp, skipping any inner/nested matches

  function extract(str, open, close) {

    var start,
        level = 0,
        matches = [],
        re = new RegExp('('+open.source+')|('+close.source+')', 'g')

    str.replace(re, function(_, open, close, pos) {

      // if outer inner bracket, mark position
      if (!level && open) start = pos

      // in(de)crease bracket level
      level += open ? 1 : -1

      // if outer closing bracket, grab the match
      if (!level && close != null) matches.push(str.slice(start, pos+close.length))

    })

    return matches
  }

})()

// { key, i in items} -> { key, i, items }
function loopKeys(expr) {
  var b0 = brackets(0),
      els = expr.slice(b0.length).match(/^\s*(\S+?)\s*(?:,\s*(\S+))?\s+in\s+(.+)$/)
  return els ? { key: els[1], pos: els[2], val: b0 + els[3] } : { val: expr }
}

function mkitem(expr, key, val) {
  var item = {}
  item[expr.key] = key
  if (expr.pos) item[expr.pos] = val
  return item
}


/* Beware: heavy stuff */
function _each(dom, parent, expr) {

  remAttr(dom, 'each')

  var tagName = getTagName(dom),
      template = dom.outerHTML,
      hasImpl = !!tagImpl[tagName],
      impl = tagImpl[tagName] || {
        tmpl: template
      },
      root = dom.parentNode,
      placeholder = document.createComment('riot placeholder'),
      tags = [],
      child = getTag(dom),
      checksum

  root.insertBefore(placeholder, dom)

  expr = loopKeys(expr)

  // clean template code
  parent
    .one('premount', function () {
      if (root.stub) root = parent.root
      // remove the original DOM node
      dom.parentNode.removeChild(dom)
    })
    .on('update', function () {
      var items = tmpl(expr.val, parent)

      // object loop. any changes cause full redraw
      if (!isArray(items)) {

        checksum = items ? JSON.stringify(items) : ''

        items = !items ? [] :
          Object.keys(items).map(function (key) {
            return mkitem(expr, key, items[key])
          })
      }

      var frag = document.createDocumentFragment(),
          i = tags.length,
          j = items.length

      // unmount leftover items
      while (i > j) {
        tags[--i].unmount()
        tags.splice(i, 1)
      }

      for (i = 0; i < j; ++i) {
        var _item = !checksum && !!expr.key ? mkitem(expr, items[i], i) : items[i]

        if (!tags[i]) {
          // mount new
          (tags[i] = new Tag(impl, {
              parent: parent,
              isLoop: true,
              hasImpl: hasImpl,
              root: hasImpl ? dom.cloneNode() : root,
              item: _item
            }, dom.innerHTML)
          ).mount()

          frag.appendChild(tags[i].root)
        } else
          tags[i].update(_item)

        tags[i]._item = _item

      }

      root.insertBefore(frag, placeholder)

      if (child) parent.tags[tagName] = tags

    }).one('updated', function() {
      var keys = Object.keys(parent)// only set new values
      walk(root, function(node) {
        // only set element node and not isLoop
        if (node.nodeType == 1 && !node.isLoop && !node._looped) {
          node._visited = false // reset _visited for loop node
          node._looped = true // avoid set multiple each
          setNamed(node, parent, keys)
        }
      })
    })

}


function parseNamedElements(root, parent, childTags) {

  walk(root, function(dom) {
    if (dom.nodeType == 1) {
      dom.isLoop = dom.isLoop || (dom.parentNode && dom.parentNode.isLoop || dom.getAttribute('each')) ? 1 : 0

      // custom child tag
      var child = getTag(dom)

      if (child && !dom.isLoop) {
        var tag = new Tag(child, { root: dom, parent: parent }, dom.innerHTML),
            tagName = getTagName(dom),
            ptag = parent,
            cachedTag

        while (!getTag(ptag.root)) {
          if (!ptag.parent) break
          ptag = ptag.parent
        }

        // fix for the parent attribute in the looped elements
        tag.parent = ptag

        cachedTag = ptag.tags[tagName]

        // if there are multiple children tags having the same name
        if (cachedTag) {
          // if the parent tags property is not yet an array
          // create it adding the first cached tag
          if (!isArray(cachedTag))
            ptag.tags[tagName] = [cachedTag]
          // add the new nested tag to the array
          ptag.tags[tagName].push(tag)
        } else {
          ptag.tags[tagName] = tag
        }

        // empty the child node once we got its template
        // to avoid that its children get compiled multiple times
        dom.innerHTML = ''
        childTags.push(tag)
      }

      if (!dom.isLoop)
        setNamed(dom, parent, [])
    }

  })

}

function parseExpressions(root, tag, expressions) {

  function addExpr(dom, val, extra) {
    if (val.indexOf(brackets(0)) >= 0) {
      var expr = { dom: dom, expr: val }
      expressions.push(extend(expr, extra))
    }
  }

  walk(root, function(dom) {
    var type = dom.nodeType

    // text node
    if (type == 3 && dom.parentNode.tagName != 'STYLE') addExpr(dom, dom.nodeValue)
    if (type != 1) return

    /* element */

    // loop
    var attr = dom.getAttribute('each')

    if (attr) { _each(dom, tag, attr); return false }

    // attribute expressions
    each(dom.attributes, function(attr) {
      var name = attr.name,
        bool = name.split('__')[1]

      addExpr(dom, attr.value, { attr: bool || name, bool: bool })
      if (bool) { remAttr(dom, name); return false }

    })

    // skip custom tags
    if (getTag(dom)) return false

  })

}
function Tag(impl, conf, innerHTML) {

  var self = riot.observable(this),
      opts = inherit(conf.opts) || {},
      dom = mkdom(impl.tmpl),
      parent = conf.parent,
      isLoop = conf.isLoop,
      hasImpl = conf.hasImpl,
      item = cleanUpData(conf.item),
      expressions = [],
      childTags = [],
      root = conf.root,
      fn = impl.fn,
      tagName = root.tagName.toLowerCase(),
      attr = {},
      propsInSyncWithParent = [],
      loopDom,
      TAG_ATTRIBUTES = /([\w\-]+)\s?=\s?['"]([^'"]+)["']/gim


  if (fn && root._tag) {
    root._tag.unmount(true)
  }

  // not yet mounted
  this.isMounted = false
  root.isLoop = isLoop

  if (impl.attrs) {
    var attrs = impl.attrs.match(TAG_ATTRIBUTES)

    each(attrs, function(a) {
      var kv = a.split(/\s?=\s?/)
      root.setAttribute(kv[0], kv[1].replace(/['"]/g, ''))
    })

  }

  // keep a reference to the tag just created
  // so we will be able to mount this tag multiple times
  root._tag = this

  // create a unique id to this tag
  // it could be handy to use it also to improve the virtual dom rendering speed
  this._id = fastAbs(~~(new Date().getTime() * Math.random()))

  extend(this, { parent: parent, root: root, opts: opts, tags: {} }, item)

  // grab attributes
  each(root.attributes, function(el) {
    var val = el.value
    // remember attributes with expressions only
    if (brackets(/\{.*\}/).test(val)) attr[el.name] = val
  })

  if (dom.innerHTML && !/select|select|optgroup|tbody|tr/.test(tagName))
    // replace all the yield tags with the tag inner html
    dom.innerHTML = replaceYield(dom.innerHTML, innerHTML)

  // options
  function updateOpts() {
    var ctx = hasImpl && isLoop ? self : parent || self
    // update opts from current DOM attributes
    each(root.attributes, function(el) {
      opts[el.name] = tmpl(el.value, ctx)
    })
    // recover those with expressions
    each(Object.keys(attr), function(name) {
      opts[name] = tmpl(attr[name], ctx)
    })
  }

  function normalizeData(data) {
    for (var key in item) {
      if (typeof self[key] !== T_UNDEF)
        self[key] = data[key]
    }
  }

  function inheritFromParent () {
    if (!self.parent || !isLoop) return
    each(Object.keys(self.parent), function(k) {
      // some properties must be always in sync with the parent tag
      var mustSync = ~propsInSyncWithParent.indexOf(k)
      if (typeof self[k] === T_UNDEF || mustSync) {
        // track the property to keep in sync
        // so we can keep it updated
        if (!mustSync) propsInSyncWithParent.push(k)
        self[k] = self.parent[k]
      }
    })
  }

  this.update = function(data) {
    // make sure the data passed will not override
    // the component core methods
    data = cleanUpData(data)
    // inherit properties from the parent
    inheritFromParent()
    // normalize the tag properties in case an item object was initially passed
    if (typeof item === T_OBJECT || isArray(item)) {
      normalizeData(data)
      item = data
    }
    extend(self, data)
    updateOpts()
    self.trigger('update', data)
    update(expressions, self)
    self.trigger('updated')
  }

  this.mixin = function() {
    each(arguments, function(mix) {
      mix = typeof mix === T_STRING ? riot.mixin(mix) : mix
      each(Object.keys(mix), function(key) {
        // bind methods to self
        if (key != 'init')
          self[key] = isFunction(mix[key]) ? mix[key].bind(self) : mix[key]
      })
      // init method will be called automatically
      if (mix.init) mix.init.bind(self)()
    })
  }

  this.mount = function() {

    updateOpts()

    // initialiation
    fn && fn.call(self, opts)

    toggle(true)


    // parse layout after init. fn may calculate args for nested custom tags
    parseExpressions(dom, self, expressions)
    if (!self.parent || hasImpl) parseExpressions(self.root, self, expressions) // top level before update, empty root

    if (!self.parent || isLoop) self.update(item)

    // internal use only, fixes #403
    self.trigger('premount')

    if (isLoop && !hasImpl) {
      // update the root attribute for the looped elements
      self.root = root = loopDom = dom.firstChild

    } else {
      while (dom.firstChild) root.appendChild(dom.firstChild)
      if (root.stub) self.root = root = parent.root
    }
    // if it's not a child tag we can trigger its mount event
    if (!self.parent || self.parent.isMounted) {
      self.isMounted = true
      self.trigger('mount')
    }
    // otherwise we need to wait that the parent event gets triggered
    else self.parent.one('mount', function() {
      // avoid to trigger the `mount` event for the tags
      // not visible included in an if statement
      if (!isInStub(self.root)) {
        self.parent.isMounted = self.isMounted = true
        self.trigger('mount')
      }
    })
  }


  this.unmount = function(keepRootTag) {
    var el = loopDom || root,
        p = el.parentNode

    if (p) {

      if (parent)
        // remove this tag from the parent tags object
        // if there are multiple nested tags with same name..
        // remove this element form the array
        if (isArray(parent.tags[tagName]))
          each(parent.tags[tagName], function(tag, i) {
            if (tag._id == self._id)
              parent.tags[tagName].splice(i, 1)
          })
        else
          // otherwise just delete the tag instance
          parent.tags[tagName] = undefined
      else
        while (el.firstChild) el.removeChild(el.firstChild)

      if (!keepRootTag)
        p.removeChild(el)

    }


    self.trigger('unmount')
    toggle()
    self.off('*')
    // somehow ie8 does not like `delete root._tag`
    root._tag = null

  }

  function toggle(isMount) {

    // mount/unmount children
    each(childTags, function(child) { child[isMount ? 'mount' : 'unmount']() })

    // listen/unlisten parent (events flow one way from parent to children)
    if (parent) {
      var evt = isMount ? 'on' : 'off'

      // the loop tags will be always in sync with the parent automatically
      if (isLoop)
        parent[evt]('unmount', self.unmount)
      else
        parent[evt]('update', self.update)[evt]('unmount', self.unmount)
    }
  }

  // named elements available for fn
  parseNamedElements(dom, this, childTags)


}

function setEventHandler(name, handler, dom, tag) {

  dom[name] = function(e) {

    var item = tag._item,
        ptag = tag.parent

    if (!item)
      while (ptag) {
        item = ptag._item
        ptag = item ? false : ptag.parent
      }

    // cross browser event fix
    e = e || window.event

    // ignore error on some browsers
    try {
      e.currentTarget = dom
      if (!e.target) e.target = e.srcElement
      if (!e.which) e.which = e.charCode || e.keyCode
    } catch (ignored) { '' }

    e.item = item

    // prevent default behaviour (by default)
    if (handler.call(tag, e) !== true && !/radio|check/.test(dom.type)) {
      e.preventDefault && e.preventDefault()
      e.returnValue = false
    }

    if (!e.preventUpdate) {
      var el = item ? tag.parent : tag
      el.update()
    }

  }

}

// used by if- attribute
function insertTo(root, node, before) {
  if (root) {
    root.insertBefore(before, node)
    root.removeChild(node)
  }
}

function update(expressions, tag) {

  each(expressions, function(expr, i) {

    var dom = expr.dom,
        attrName = expr.attr,
        value = tmpl(expr.expr, tag),
        parent = expr.dom.parentNode

    if (value == null) value = ''

    // leave out riot- prefixes from strings inside textarea
    if (parent && parent.tagName == 'TEXTAREA') value = value.replace(/riot-/g, '')

    // no change
    if (expr.value === value) return
    expr.value = value

    // text node
    if (!attrName) return dom.nodeValue = value.toString()

    // remove original attribute
    remAttr(dom, attrName)

    // event handler
    if (isFunction(value)) {
      setEventHandler(attrName, value, dom, tag)

    // if- conditional
    } else if (attrName == 'if') {
      var stub = expr.stub

      // add to DOM
      if (value) {
        if (stub) {
          insertTo(stub.parentNode, stub, dom)
          dom.inStub = false
          // avoid to trigger the mount event if the tags is not visible yet
          // maybe we can optimize this avoiding to mount the tag at all
          if (!isInStub(dom)) {
            walk(dom, function(el) {
              if (el._tag && !el._tag.isMounted) el._tag.isMounted = !!el._tag.trigger('mount')
            })
          }
        }
      // remove from DOM
      } else {
        stub = expr.stub = stub || document.createTextNode('')
        insertTo(dom.parentNode, dom, stub)
        dom.inStub = true
      }
    // show / hide
    } else if (/^(show|hide)$/.test(attrName)) {
      if (attrName == 'hide') value = !value
      dom.style.display = value ? '' : 'none'

    // field value
    } else if (attrName == 'value') {
      dom.value = value

    // <img src="{ expr }">
    } else if (attrName.slice(0, 5) == 'riot-' && attrName != 'riot-tag') {
      attrName = attrName.slice(5)
      value ? dom.setAttribute(attrName, value) : remAttr(dom, attrName)

    } else {
      if (expr.bool) {
        dom[attrName] = value
        if (!value) return
        value = attrName
      }

      if (typeof value !== T_OBJECT) dom.setAttribute(attrName, value)

    }

  })

}

function each(els, fn) {
  for (var i = 0, len = (els || []).length, el; i < len; i++) {
    el = els[i]
    // return false -> remove current item during loop
    if (el != null && fn(el, i) === false) i--
  }
  return els
}

function isFunction(v) {
  return typeof v === 'function' || false   // avoid IE problems
}

function remAttr(dom, name) {
  dom.removeAttribute(name)
}

function fastAbs(nr) {
  return (nr ^ (nr >> 31)) - (nr >> 31)
}

function getTag(dom) {
  var tagName = dom.tagName.toLowerCase()
  return tagImpl[dom.getAttribute(RIOT_TAG) || tagName]
}

function getTagName(dom) {
  var child = getTag(dom),
    namedTag = dom.getAttribute('name'),
    tagName = namedTag && namedTag.indexOf(brackets(0)) < 0 ? namedTag : child ? child.name : dom.tagName.toLowerCase()

  return tagName
}

function extend(src) {
  var obj, args = arguments
  for (var i = 1; i < args.length; ++i) {
    if ((obj = args[i])) {
      for (var key in obj) {      // eslint-disable-line guard-for-in
        src[key] = obj[key]
      }
    }
  }
  return src
}

// with this function we avoid that the current Tag methods get overridden
function cleanUpData(data) {
  if (!(data instanceof Tag)) return data

  var o = {},
      blackList = ['update', 'root', 'mount', 'unmount', 'mixin', 'isMounted', 'isloop', 'tags', 'parent', 'opts']
  for (var key in data) {
    if (!~blackList.indexOf(key))
      o[key] = data[key]
  }
  return o
}

function mkdom(template) {
  var checkie = ieVersion && ieVersion < 10,
      matches = /^\s*<([\w-]+)/.exec(template),
      tagName = matches ? matches[1].toLowerCase() : '',
      rootTag = (tagName === 'th' || tagName === 'td') ? 'tr' :
                (tagName === 'tr' ? 'tbody' : 'div'),
      el = mkEl(rootTag)

  el.stub = true

  if (checkie) {
    if (tagName === 'optgroup')
      optgroupInnerHTML(el, template)
    else if (tagName === 'option')
      optionInnerHTML(el, template)
    else if (rootTag !== 'div')
      tbodyInnerHTML(el, template, tagName)
    else
      checkie = 0
  }
  if (!checkie) el.innerHTML = template

  return el
}

function walk(dom, fn) {
  if (dom) {
    if (fn(dom) === false) walk(dom.nextSibling, fn)
    else {
      dom = dom.firstChild

      while (dom) {
        walk(dom, fn)
        dom = dom.nextSibling
      }
    }
  }
}

function isInStub(dom) {
  while (dom) {
    if (dom.inStub) return true
    dom = dom.parentNode
  }
  return false
}

function mkEl(name) {
  return document.createElement(name)
}

function replaceYield (tmpl, innerHTML) {
  return tmpl.replace(/<(yield)\/?>(<\/\1>)?/gim, innerHTML || '')
}

function $$(selector, ctx) {
  return (ctx || document).querySelectorAll(selector)
}

function $(selector, ctx) {
  return (ctx || document).querySelector(selector)
}

function inherit(parent) {
  function Child() {}
  Child.prototype = parent
  return new Child()
}

function setNamed(dom, parent, keys) {
  each(dom.attributes, function(attr) {
    if (dom._visited) return
    if (attr.name === 'id' || attr.name === 'name') {
      dom._visited = true
      var p, v = attr.value
      if (~keys.indexOf(v)) return

      p = parent[v]
      if (!p)
        parent[v] = dom
      else
        isArray(p) ? p.push(dom) : (parent[v] = [p, dom])
    }
  })
}
/**
 *
 * Hacks needed for the old internet explorer versions [lower than IE10]
 *
 */
/* istanbul ignore next */
function tbodyInnerHTML(el, html, tagName) {
  var div = mkEl('div'),
      loops = /td|th/.test(tagName) ? 3 : 2,
      child

  div.innerHTML = '<table>' + html + '</table>'
  child = div.firstChild

  while (loops--) child = child.firstChild

  el.appendChild(child)

}
/* istanbul ignore next */
function optionInnerHTML(el, html) {
  var opt = mkEl('option'),
      valRegx = /value=[\"'](.+?)[\"']/,
      selRegx = /selected=[\"'](.+?)[\"']/,
      eachRegx = /each=[\"'](.+?)[\"']/,
      ifRegx = /if=[\"'](.+?)[\"']/,
      innerRegx = />([^<]*)</,
      valuesMatch = html.match(valRegx),
      selectedMatch = html.match(selRegx),
      innerValue = html.match(innerRegx),
      eachMatch = html.match(eachRegx),
      ifMatch = html.match(ifRegx)

  if (innerValue) opt.innerHTML = innerValue[1]
  else opt.innerHTML = html

  if (valuesMatch) opt.value = valuesMatch[1]
  if (selectedMatch) opt.setAttribute('riot-selected', selectedMatch[1])
  if (eachMatch) opt.setAttribute('each', eachMatch[1])
  if (ifMatch) opt.setAttribute('if', ifMatch[1])

  el.appendChild(opt)
}
/* istanbul ignore next */
function optgroupInnerHTML(el, html) {
  var opt = mkEl('optgroup'),
      labelRegx = /label=[\"'](.+?)[\"']/,
      elementRegx = /^<([^>]*)>/,
      tagRegx = /^<([^ \>]*)/,
      labelMatch = html.match(labelRegx),
      elementMatch = html.match(elementRegx),
      tagMatch = html.match(tagRegx),
      innerContent = html

  if (elementMatch) {
    var options = html.slice(elementMatch[1].length+2, -tagMatch[1].length-3).trim()
    innerContent = options
  }

  if (labelMatch) opt.setAttribute('riot-label', labelMatch[1])

  if (innerContent) {
    var innerOpt = mkEl('div')

    optionInnerHTML(innerOpt, innerContent)

    opt.appendChild(innerOpt.firstChild)
  }

  el.appendChild(opt)
}

/*
 Virtual dom is an array of custom tags on the document.
 Updates and unmounts propagate downwards from parent to children.
*/

var virtualDom = [],
    tagImpl = {},
    styleNode

var RIOT_TAG = 'riot-tag'

function injectStyle(css) {

  styleNode = styleNode || mkEl('style')

  if (!document.head) return

  if (styleNode.styleSheet)
    styleNode.styleSheet.cssText += css
  else
    styleNode.innerHTML += css

  if (!styleNode._rendered)
    if (styleNode.styleSheet) {
      document.body.appendChild(styleNode)
    } else {
      var rs = $('style[type=riot]')
      if (rs) {
        rs.parentNode.insertBefore(styleNode, rs)
        rs.parentNode.removeChild(rs)
      } else document.head.appendChild(styleNode)

    }

  styleNode._rendered = true

}

function mountTo(root, tagName, opts) {
  var tag = tagImpl[tagName],
      // cache the inner HTML to fix #855
      innerHTML = root._innerHTML = root._innerHTML || root.innerHTML

  // clear the inner html
  root.innerHTML = ''

  if (tag && root) tag = new Tag(tag, { root: root, opts: opts }, innerHTML)

  if (tag && tag.mount) {
    tag.mount()
    virtualDom.push(tag)
    return tag.on('unmount', function() {
      virtualDom.splice(virtualDom.indexOf(tag), 1)
    })
  }

}

riot.tag = function(name, html, css, attrs, fn) {
  if (isFunction(attrs)) {
    fn = attrs
    if (/^[\w\-]+\s?=/.test(css)) {
      attrs = css
      css = ''
    } else attrs = ''
  }
  if (css) {
    if (isFunction(css)) fn = css
    else injectStyle(css)
  }
  tagImpl[name] = { name: name, tmpl: html, attrs: attrs, fn: fn }
  return name
}

riot.mount = function(selector, tagName, opts) {

  var els,
      allTags,
      tags = []

  // helper functions

  function addRiotTags(arr) {
    var list = ''
    each(arr, function (e) {
      list += ', *[riot-tag="'+ e.trim() + '"]'
    })
    return list
  }

  function selectAllTags() {
    var keys = Object.keys(tagImpl)
    return keys + addRiotTags(keys)
  }

  function pushTags(root) {
    if (root.tagName) {
      if (tagName && !root.getAttribute(RIOT_TAG))
        root.setAttribute(RIOT_TAG, tagName)

      var tag = mountTo(root,
        tagName || root.getAttribute(RIOT_TAG) || root.tagName.toLowerCase(), opts)

      if (tag) tags.push(tag)
    }
    else if (root.length) {
      each(root, pushTags)   // assume nodeList
    }
  }

  // ----- mount code -----

  if (typeof tagName === T_OBJECT) {
    opts = tagName
    tagName = 0
  }

  // crawl the DOM to find the tag
  if (typeof selector === T_STRING) {
    if (selector === '*')
      // select all the tags registered
      // and also the tags found with the riot-tag attribute set
      selector = allTags = selectAllTags()
    else
      // or just the ones named like the selector
      selector += addRiotTags(selector.split(','))

    els = $$(selector)
  }
  else
    // probably you have passed already a tag or a NodeList
    els = selector

  // select all the registered and mount them inside their root elements
  if (tagName === '*') {
    // get all custom tags
    tagName = allTags || selectAllTags()
    // if the root els it's just a single tag
    if (els.tagName)
      els = $$(tagName, els)
    else {
      // select all the children for all the different root elements
      var nodeList = []
      each(els, function (_el) {
        nodeList.push($$(tagName, _el))
      })
      els = nodeList
    }
    // get rid of the tagName
    tagName = 0
  }

  if (els.tagName)
    pushTags(els)
  else
    each(els, pushTags)

  return tags
}

// update everything
riot.update = function() {
  return each(virtualDom, function(tag) {
    tag.update()
  })
}

// @deprecated
riot.mountTo = riot.mount


  // share methods for other riot parts, e.g. compiler
  riot.util = { brackets: brackets, tmpl: tmpl }

  // support CommonJS, AMD & browser
  /* istanbul ignore next */
  if (typeof exports === T_OBJECT)
    module.exports = riot
  else if (typeof define === 'function' && define.amd)
    define(function() { return window.riot = riot })
  else
    window.riot = riot

})(typeof window != 'undefined' ? window : undefined);

},{}],"/Users/surian/Sites/Private/timeboxer/src/js/actions/timeboxer.js":[function(require,module,exports){
var Dispatcher = require('flux-riot').Dispatcher;

var ActionTypes = require('../constants/timeboxer_constants.js').ActionTypes;

var dispatch = function(type, data) {
  return Dispatcher.handleViewAction({
    type: type,
    data: data
  });
};

module.exports = {
  saveTemplate: function(task) {
    return dispatch(ActionTypes.TEMPLATE_SAVE, task);
  },
  updateTemplate: function(task, index) {
    var data = {task: task, index: index};
    return dispatch(ActionTypes.TEMPLATE_UPDATE, data);
  },
  removeTemplate: function(index) {
    return dispatch(ActionTypes.TEMPLATE_REMOVE, index);
  },
  serverDataReceived: function (data) {
    return dispatch(ActionTypes.SERVER_FETCH_COMPLETE, data);
  }
};

},{"../constants/timeboxer_constants.js":"/Users/surian/Sites/Private/timeboxer/src/js/constants/timeboxer_constants.js","flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/components/about.tag":[function(require,module,exports){
var riot = require('riot');
var flux_riot = require('flux-riot')

riot.tag('timeboxer-about', '<h3>{ opts.title }</h3> <div class="row"> <div class="col-md-4"> <img src="http://www.pixentral.com/pics/1DvZ0bKKRrbGgepFMejkpUP1Kcwsz.gif" /> </div> <div class="col-md-8"> <ul> <li>Ray Hausmann</li> <li>Jay</li> <li>Dinks</li> </ul> </div> </div>', function(opts) {


});

},{"flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js","riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/components/contact.tag":[function(require,module,exports){
var riot = require('riot');
var flux_riot = require('flux-riot')

riot.tag('timeboxer-contact', '<h3>{ opts.title }</h3> <a href="http://www.babbel.com/">babbel.com</a>', function(opts) {


});

},{"flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js","riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/components/index.tag":[function(require,module,exports){
var riot = require('riot');
require('./timeboxer_template/index.tag')

var flux_riot = require('flux-riot')

riot.tag('timeboxer-index', '<h3>{ opts.title }</h3> <timeboxer-template-index store="{ opts.store }"></timeboxer-template-index>', function(opts) {


});

},{"./timeboxer_template/index.tag":"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_template/index.tag","flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js","riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_meeting/progress.tag":[function(require,module,exports){
var riot = require('riot');
riot.tag('progress-bar', '<div class="progress"> <div class="progress-bar progress-bar-striped {this.progressState}" role="progressbar" style="width: {this.percentage}%;"> </div> </div>', function(opts) {

  this.showDanger = function() {
    this.progressState = 'progress-bar-danger';
  }.bind(this);

  this.showWarning = function() {
    this.progressState = 'progress-bar-warning';
  }.bind(this);

  this.showNormal = function() {
    this.progressState = 'progress-bar-success';
  }.bind(this);

  this.on('mount', function() {
    this.showNormal();
    this.update();
  });

  this.on('update', function() {
    this.percentage = opts['current-time']*100/opts['total-time'];

    if (opts['current-time'] < 20) {
      this.showDanger();
    } else if (opts['current-time'] < 50) {
      this.showWarning();
    } else {
      this.showNormal();
    }
  });


});

},{"riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_meeting/start.tag":[function(require,module,exports){
var riot = require('riot');
var timeboxer = require('../../actions/timeboxer.js');
var flux_riot = require('flux-riot');
var Timer = require('../../utils/timer');
require('./progress.tag');
require('./timer.tag');

riot.tag('timeboxer-meeting-start', '<hr> <progress-bar current-time="{this.currentTime.total}" total-time="{this.currentAgendaTime}"> </progress-bar> <div class="row"> <div class="col-md-9"> <h4 class="agenda-name">{ this.currentAgenda.name }</h4> <count-down-timer minutes="{this.currentTime.minutes}" seconds="{this.currentTime.seconds}"> </count-down-timer> <div class="row"> <div class="col-md-6"> <a href="#" onclick="{ startOrPause }" class="btn btn-block start-pause-button"> <span class="glyphicon glyphicon-play-circle" aria-hidden="true"></span> <span id="agendaContinue">Start</span> </a> </div> <div class="col-md-6"> <a href="#" onclick="{ nextAgenda }" class="btn btn-block next-button" id="nextAgendaBtn"> <span class="glyphicon glyphicon-ok-circle" aria-hidden="true"></span> Next </a> </div> </div> <div class="row"> <div class="col-md-3"> <a href="#" onclick="{ previousAgenda }" class="btn btn-xs btn-default"> <span class="glyphicon glyphicon-ok-circle" aria-hidden="true"></span> Previous </a> <a href="#" onclick="{ reduceTime }" class="btn btn-xs btn-default">-1</a> <a href="#" onclick="{ increaseTime }" class="btn btn-xs btn-default">+1</a> </div> </div> </div> <div class="col-md-3"> <h4 class="counter-template-name"> { this.template.name } </h4> <ul class="list-group"> <li class="list-group-item" each="{ item, index in this.template.agenda }" if="{ !item.finished }" > <b>{ item.name }</b> <span class="badge">{ item.time }</span> </li> </ul> </div> </div> <div class="modal fade" id="allDone"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-header"> <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button> <h4 class="modal-title">Notice</h4> </div> <div class="modal-body"> <p>Great Job finishing the meeting!!</p> </div> <div class="modal-footer"> <button type="button" class="btn btn-default" data-dismiss="modal">Close</button> </div> </div> </div> </div>', function(opts) {

  this.currentAgendaIndex = 0;
  this.currentAgendaTime = 1;

  this.setCurrentAgenda = function() {
    if(this.template) {
      this.currentAgenda = this.template.agenda[this.currentAgendaIndex];
      if (this.currentAgenda) {
        this.currentAgendaTime = parseFloat(this.currentAgenda.time) * 60;
        this.timerClock.setTime(this.currentAgendaTime);
      } else {
        $(this.allDone).modal();
      }
    }
  }.bind(this);

  this.getTemplateFromStore = function() {
    return opts.template_store.getAll()[opts.templateId];
  }.bind(this);

  this.nextAgenda = function() {
    this.resetStatus();
    this.template.agenda[this.currentAgendaIndex]['finished'] = true;
    this.currentAgendaIndex++;
    this.setCurrentAgenda();
    this.update();
  }.bind(this);

  this.previousAgenda = function() {
    this.resetStatus();
    this.currentAgendaIndex--;
    this.template.agenda[this.currentAgendaIndex]['finished'] = false;
    this.setCurrentAgenda();
  }.bind(this);

  this.reduceTime = function() {
    var remainingTime = this.timerClock.getTime();
    if (remainingTime - 60 > 0) {
      this.timerClock.setTime(remainingTime - 59);
    }
  }.bind(this);

  this.increaseTime = function() {
    var remainingTime = this.timerClock.getTime();
    this.currentAgendaTime = remainingTime + 60;
    this.timerClock.setTime(this.currentAgendaTime);
  }.bind(this);

  this.updateCurrentTime = function(time) {
    this.currentTime = {
      minutes: Math.floor(time/60),
      seconds: time % 60,
      total: time
    };
  }.bind(this);

  this.initClock = function() {
    this.timerClock = new Timer({
      pulseCb: function (time) {
        this.updateCurrentTime(time);
        this.update();
      }.bind(this),
      endCb: function () {

      }.bind(this),
      time: this.currentAgendaTime
    });
  }.bind(this);

  this.updateFromStore = function() {
    this.getTemplateFromStore();
    this.setCurrentAgenda();
    this.update();
  }.bind(this);

  this.startOrPause = function() {
    switch(this.currentAgendaStatus) {
      case 'paused':
        this.timerClock.start();
        this.currentAgendaStatus = 'started';
        $(this.agendaContinue).html('Pause');
        break;
      case 'started':
        this.timerClock.stop();
        this.currentAgendaStatus = 'paused';
        $(this.agendaContinue).html('Start');
        break;
    }
  }.bind(this);

  this.resetStatus = function() {
    this.timerClock.stop();
    this.currentAgendaStatus = 'paused';
    $(this.agendaContinue).html('Start');
  }.bind(this);

  flux_riot.storeMixin(this, opts.template_store, this.updateFromStore);
  this.on('mount', function() {
    this.template = this.getTemplateFromStore();
    this.initClock();
    this.resetStatus();
    this.setCurrentAgenda();
    this.updateCurrentTime(this.currentAgendaTime);
    this.update();
  });

  this.on('unmount', function() {
    this.timerClock.stop();
  });


});

},{"../../actions/timeboxer.js":"/Users/surian/Sites/Private/timeboxer/src/js/actions/timeboxer.js","../../utils/timer":"/Users/surian/Sites/Private/timeboxer/src/js/utils/timer.js","./progress.tag":"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_meeting/progress.tag","./timer.tag":"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_meeting/timer.tag","flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js","riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_meeting/timer.tag":[function(require,module,exports){
var riot = require('riot');
riot.tag('count-down-timer', '<div class="timerContainer {this.containerClass}"> <span>{this.minutes}</span>:<span>{this.seconds}</span> </div>', function(opts) {

  this.prettify = function(data) {
    return (data < 10) ? '0'+ data : data;
  }.bind(this);

  this.showDanger = function() {
    this.containerClass = 'danger';
  }.bind(this);
  this.showNormal = function() {
   this.containerClass = '';
  }.bind(this);
  this.showWarning = function() {
   this.containerClass = 'warning';
  }.bind(this);

  this.on('update', function() {
    this.minutes = opts.minutes;
    this.seconds = this.prettify(opts.seconds);
    if (opts.minutes === 0) {
      if (opts.seconds < 20) {
        this.showDanger();
      } else if (opts.seconds < 50) {
        this.showWarning();
      }
    } else {
      this.showNormal();
    }
  });

});
},{"riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_template/add.tag":[function(require,module,exports){
var riot = require('riot');
var flux_riot = require('flux-riot');
var TimeBoxer = require('../../actions/timeboxer.js');

riot.tag('timeboxer-template-add', '<h3>{ opts.title }</h3> <hr> <form> <div class="form-group"> <label for="templateName">Event Template Name</label> <input type="text" class="form-control" id="templateName" placeholder="Enter Template Name" onkeyup="{ editTitle }"> </div> <div class="form-group"> <label>Agenda</label> <ul class="list-group"> <li class="list-group-item" each="{ item in agendaItems }"> <b>{ item.name }</b> for <b>{ item.time }</b> minutes </li> </ul> </div> </form> <form class="form-inline" onsubmit="{ addAgenda }"> <div class="form-group"> <label class="sr-only" for="agendaTitle">Item Title</label> <input type="text" class="form-control" id="agendaTitle" placeholder="Enter Agenda Item Title" onkeyup="{ editAgendaTitle }"> </div> <div class="form-group"> <label class="sr-only" for="agendaTime">Item Time</label> <input type="text" class="form-control" id="agendaTime" placeholder="Enter Agenda Item Time" onkeyup="{ editAgendaTime }"> </div> <button type="submit" __disabled="{ !(agendaTitleValue && agendaTimeValue) }" class="btn btn-default">Add Agenda Item</button> </form> <hr> <a href="#" onclick="{ saveTemplate }" class="btn btn-success"> <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span> Create </a> <a href="#" onclick="{ cancel }" class="btn btn-info"> <span class="glyphicon glyphicon-ban-circle" aria-hidden="true"></span> Cancel </a>', function(opts) {

  this.title = '';

  this.agendaItems = [];

  this.addAgenda = function() {
    if (this.agendaTitleValue && this.agendaTimeValue) {
      this.agendaItems.push({
        name: this.agendaTitleValue,
        time: this.agendaTimeValue
      });
      this.agendaTitleValue = this.agendaTimeValue = this.agendaTime.value = this.agendaTitle.value = '';
    }
  }.bind(this);

  this.editTitle = function(e) {
    this.title = e.target.value;
  }.bind(this);

  this.editAgendaTitle = function(e) {
    this.agendaTitleValue = e.target.value;
  }.bind(this);

  this.editAgendaTime = function(e) {
    this.agendaTimeValue = e.target.value;
  }.bind(this);

  this.saveTemplate = function() {
    TimeBoxer.saveTemplate({
      name: this.title,
      agenda: this.agendaItems
    });
  }.bind(this);

  this.updateFromStore = function() {
    riot.route('#');
  }.bind(this);
  this.cancel = function() {
    riot.route('#');
  }.bind(this);

  flux_riot.storeMixin(this, opts.store, this.updateFromStore)


});

},{"../../actions/timeboxer.js":"/Users/surian/Sites/Private/timeboxer/src/js/actions/timeboxer.js","flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js","riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_template/edit.tag":[function(require,module,exports){
var riot = require('riot');
var flux_riot = require('flux-riot');
var TimeBoxer = require('../../actions/timeboxer.js');

riot.tag('timer-list', '<li class="list-group-item" > <input type="text" value="{agenda.name}" name="itemName"> <span> For </span> <input type="text" value="{agenda.time}" name="itemTime"> <span> Minutes </span> <span onclick="{moveUp}" data-index="{index}" class="btn btn-default glyphicon glyphicon-arrow-up"> </span> <span onclick="{moveDown}" data-index="{index}" class="btn btn-default glyphicon glyphicon-arrow-down"> </span> <span onclick="{deleteItem}" data-index="{index}" class="btn btn-default glyphicon glyphicon-remove"> </span> <span onclick="{insertAbove}" data-index="{index}" class="btn btn-default glyphicon glyphicon-open-file"> </span> </li>', function(opts) {

  this.moveUp = function(event) {
    var index = parseInt(event.target.dataset.index);
    var tmp;
    var agendas = this.parent.agendaItems.agenda;
    if ( index > 0) {
      tmp = agendas[index - 1];
      agendas[index - 1] = agendas[index];
      agendas[index] = tmp;
      TimeBoxer.updateTemplate(this.parent.agendaItems, this.parent.opts.templateId);
    }
  }.bind(this);
  this.moveDown = function(event) {
    var index = parseInt(event.target.dataset.index, 10);
    var tmp;
    var agendas = this.parent.agendaItems.agenda;

    if ( index < agendas.length - 1) {
      tmp = agendas[index];
      agendas[index] = agendas[index + 1];
      agendas[index + 1] = tmp;
      TimeBoxer.updateTemplate(this.parent.agendaItems, this.parent.opts.templateId);
    }
  }.bind(this);
  this.deleteItem = function(event) {
    var index = parseInt(event.target.dataset.index, 10);
    var agendas = this.parent.agendaItems.agenda;
    agendas.splice(index, 1); // remove the array item
    TimeBoxer.updateTemplate(this.parent.agendaItems, this.parent.opts.templateId);
  }.bind(this);
  this.insertAbove = function(event) {
    var index = parseInt(event.target.dataset.index, 10);
    this.addNewRow(index);
  }.bind(this);

});

riot.tag('timeboxer-template-edit', '<p if="{opts.is_error}"> Fill up all the values </p> <h4> {opts.title} </h4> <form onsubmit="{updateAgenda}"> <div class="form-group"> <input type="text" class="form-control" id="templateName" value="{agendaItems.name}"> </div> <div class="form-group"> <label>Agenda</label> <ul class="list-group"> <timer-list each="{agenda, index in agendaItems.agenda}" data="agenda"></ul> </li> </ul> </div> <button class="btn btn-default" onclick="{addNewRow}">New Item</button> <button type="submit" class="btn btn-default">Update</button> </form>', function(opts) {

  this.addNewRow = function(rowNum) {
    var agenda = {
      name: '',
      time: ''
    };
    this.agendaItems.agenda.splice(rowNum, 0, agenda);
    this.update();
  }.bind(this);

  this.updateAgenda = function() {
    var templateName = this.templateName.value;

    var itemNames = $(this.root).find('[name="itemName"]');
    var itemTimes = $(this.root).find('[name="itemTime"]');

    for (var index = 0 ; index < itemNames.length ; index++) {
      if (itemNames[index].value == '' || itemTimes[index].value === '') {
        opts.is_error = true;
        this.update();
        return false;
      }
      this.agendaItems.agenda[index] = { name : itemNames[index].value,
                                         time : itemTimes[index].value
                                       };
    }
    this.agendaItems.name = templateName;
    TimeBoxer.updateTemplate(this.agendaItems, opts.templateId);
  }.bind(this);

  this.updateFromStore = function() {
    this.agendaItems = this.store.getByIndex(opts.templateId);
    this.update();
  }.bind(this);

  this.on('mount', function () {
    this.agendaItems = this.store.getByIndex(opts.templateId) || {};
    this.update();
  });

  flux_riot.storeMixin(this, opts.store, this.updateFromStore);


});
},{"../../actions/timeboxer.js":"/Users/surian/Sites/Private/timeboxer/src/js/actions/timeboxer.js","flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js","riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_template/index.tag":[function(require,module,exports){
var riot = require('riot');
var timeboxer = require('../../actions/timeboxer.js')
var flux_riot = require('flux-riot')

var ServerApiUtils = require('../../utils/ServerApiUtils.js');
ServerApiUtils.getAll();

riot.tag('timeboxer-template-index', '<h3>{ opts.title }</h3> <table class="table table-hover"> <tr> <th>Template</th> <th>Actions</th> </tr> <tr each="{ item in this.items }"> <td><h4>{ item.name }</h4></td> <td> <a href="#" onclick="{ parent.startMeeting }" class="btn btn-primary"> <span class="glyphicon glyphicon-time" aria-hidden="true"></span> Start a Meeting </a> <a href="#" onclick="{ parent.editMeeting }" class="btn btn-primary"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Edit </a> <a href="#" onclick="{ parent.removeMeeting }" class="btn btn-primary"> <span class="glyphicon glyphicon-trash" aria-hidden="true"></span> Remove </a> </td> </tr> </table> <a href="#" onclick="{ add }" class="btn btn-primary"> <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span> Add New Template </a>', function(opts) {

  this.add = function() {
    riot.route('templates/add')
  }.bind(this);

  this.getDataFromStore = function() {
    this.items = this.store.getAll()
  }.bind(this);

  this.updateFromStore = function() {
    this.getDataFromStore()
    this.update()
  }.bind(this);

  this.startMeeting = function(event) {
    var index = this.items.indexOf(event.item.item);
    riot.route('meeting/start/' + index);
  }.bind(this);

  this.editMeeting = function(event) {
    var index = this.items.indexOf(event.item.item);
    riot.route('templates/edit/' + index);
  }.bind(this);

  this.removeMeeting = function(event) {
    var index = this.items.indexOf(event.item.item);
    timeboxer.removeTemplate(index);
  }.bind(this);

  flux_riot.storeMixin(this, opts.store, this.updateFromStore)

  this.getDataFromStore()


});

},{"../../actions/timeboxer.js":"/Users/surian/Sites/Private/timeboxer/src/js/actions/timeboxer.js","../../utils/ServerApiUtils.js":"/Users/surian/Sites/Private/timeboxer/src/js/utils/ServerApiUtils.js","flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js","riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/constants/timeboxer_constants.js":[function(require,module,exports){
var keymirror = require('keymirror');

module.exports = {
  ActionTypes: keymirror({
    TEMPLATE_SAVE: null,
    TEMPLATE_REMOVE: null,
    TEMPLATE_UPDATE: null,

    SERVER_FETCH_COMPLETE: null
  })
};

},{"keymirror":"/Users/surian/Sites/Private/timeboxer/node_modules/keymirror/index.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/presenters/timeboxer_presenter.js":[function(require,module,exports){
var riot = require('riot/riot');
var timeboxer_template_store = require('../stores/timeboxer_template_store.js');

require('../components/index.tag');
require('../components/timeboxer_template/add.tag');
require('../components/timeboxer_template/edit.tag');
require('../components/timeboxer_meeting/start.tag');


require('../components/contact.tag');
require('../components/about.tag');

var app_tag = null;

var unmount = function() {
  if (app_tag) {
    return app_tag.unmount();
  }
};

var mount = function(tag, opts) {
  var app_container;
  app_container = document.createElement("div");
  app_container.id = 'app-container';
  document.getElementById('container').appendChild(app_container);
  return riot.mount('#app-container', tag, opts)[0];
};

module.exports = {
  index: function() {
    unmount();
    return app_tag = mount('timeboxer-index', {
      title: "Templates",
      store: timeboxer_template_store
    });
  },

  template_add: function() {
    unmount();

    return app_tag = mount('timeboxer-template-add', {
      title: "Add Timeboxer Event Template",
      store: timeboxer_template_store
    });
  },

  template_edit: function(id) {
    unmount();
    return app_tag = mount('timeboxer-template-edit', {
      title: "Edit Timeboxer Event Template",
      templateId: id,
      store: timeboxer_template_store
    });
  },

  meeting_start: function(id) {
    unmount();
    return app_tag = mount('timeboxer-meeting-start', {
      title: "Start a Meeting",
      templateId: id,
      template_store: timeboxer_template_store
    });
  },

  about: function() {
    unmount();
    return app_tag = mount('timeboxer-about', {
      title: "About Us"
    });
  },

  contact: function() {
    unmount();
    return app_tag = mount('timeboxer-contact', {
      title: "Contact Us"
    });
  }
};

},{"../components/about.tag":"/Users/surian/Sites/Private/timeboxer/src/js/components/about.tag","../components/contact.tag":"/Users/surian/Sites/Private/timeboxer/src/js/components/contact.tag","../components/index.tag":"/Users/surian/Sites/Private/timeboxer/src/js/components/index.tag","../components/timeboxer_meeting/start.tag":"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_meeting/start.tag","../components/timeboxer_template/add.tag":"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_template/add.tag","../components/timeboxer_template/edit.tag":"/Users/surian/Sites/Private/timeboxer/src/js/components/timeboxer_template/edit.tag","../stores/timeboxer_template_store.js":"/Users/surian/Sites/Private/timeboxer/src/js/stores/timeboxer_template_store.js","riot/riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/routers/timeboxer_routes.js":[function(require,module,exports){
var riot = require('riot/riot');
var BaseRouter = require('flux-riot').BaseRouter;
var timeboxer_presenter = require('../presenters/timeboxer_presenter.js');

BaseRouter.routes(timeboxer_presenter.index,
  'templates/add', timeboxer_presenter.template_add,
  'templates/edit/:id', timeboxer_presenter.template_edit,
  'meeting/start/:id', timeboxer_presenter.meeting_start,
  'about', timeboxer_presenter.about,
  'contact', timeboxer_presenter.contact
);

module.exports = {
  start: BaseRouter.start
};

},{"../presenters/timeboxer_presenter.js":"/Users/surian/Sites/Private/timeboxer/src/js/presenters/timeboxer_presenter.js","flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js","riot/riot":"/Users/surian/Sites/Private/timeboxer/node_modules/riot/riot.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/stores/timeboxer_template_store.js":[function(require,module,exports){
var assign = require('object-assign');
var Dispatcher = require('flux-riot').Dispatcher;
var ActionTypes = require('../constants/timeboxer_constants.js').ActionTypes;
var flux_riot = require('flux-riot');
var serverUtil = require('../utils/serverApiUtils.js');

var _templates = [];

var getTemplates = function () {
  return _templates;
};
var addTemplates = function (data) {
  _templates.push(data);
};
var saveTemplates = function (obj) {
  _templates = obj;
};
var removeTemplate = function (index) {
  _templates.splice(index, 1);
};
var updateTemplate = function (obj) {
  _templates[obj.index] = obj.task;
};

TimeboxerTemplateStore = assign(new flux_riot.BaseStore(), {
  getAll: function () {
    return getTemplates();
  },
  saveAll: function () {

  },
  getByIndex: function (index) {
    return _templates[index];
  },
  dispatchToken: Dispatcher.register(function(payload) {
    var action, data, index, task;
    action = payload.action;
    switch (action.type) {
      case ActionTypes.SERVER_FETCH_COMPLETE:
        saveTemplates(action.data);
        TimeboxerTemplateStore.emitChange();
      break;
      case ActionTypes.TEMPLATE_SAVE:
        addTemplates(action.data);
        serverUtil.saveTemplate(action.data);
        TimeboxerTemplateStore.emitChange();
      break;
      case ActionTypes.TEMPLATE_UPDATE:
        updateTemplate(action.data);
        serverUtil.updateTemplate(action.data.task);
        TimeboxerTemplateStore.emitChange();
      break;
      case ActionTypes.TEMPLATE_REMOVE:
        serverUtil.destroyTemplate(_templates[action.data]);
        removeTemplate(action.data);
        TimeboxerTemplateStore.emitChange();
      break;
    }
  })
});

module.exports = TimeboxerTemplateStore;

},{"../constants/timeboxer_constants.js":"/Users/surian/Sites/Private/timeboxer/src/js/constants/timeboxer_constants.js","../utils/serverApiUtils.js":"/Users/surian/Sites/Private/timeboxer/src/js/utils/serverApiUtils.js","flux-riot":"/Users/surian/Sites/Private/timeboxer/node_modules/flux-riot/flux-riot.js","object-assign":"/Users/surian/Sites/Private/timeboxer/node_modules/object-assign/index.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/utils/ServerApiUtils.js":[function(require,module,exports){
var Parse = require('parse').Parse;
var TimeBoxer = require('../actions/timeboxer.js');
var storage = require('./localStorage.js');

function ServerApiUtils() {
  this.init = function() {
    Parse.initialize("PEdVTpEnHxhjwXHMjkStSlAMU75xq7TKxMut60BD",
      "vhbx9wTQMwM0821NgzMs0xq2SxHMzBbYdZMZWg1x");
    this.boxerClass = Parse.Object.extend("Hackday2");
    this.query = new Parse.Query(this.boxerClass);
    this.boxerObj = new this.boxerClass();
  };
  this.getAll = function () {
    this.boxerObj.fetch({
      success: function(results) {
        TimeBoxer.serverDataReceived(results.toJSON().results);
      },
      error: function(error) {
        alert("Error: " + error.code + " " + error.message);
      }
    });
  };
  this.saveTemplate = function (data) {
    this.boxerObj.save(data);
  };
  this.updateTemplate = function (data) {
    this.query.get(data.objectId, {
      success: function (result) {
        result.set('agenda', data.agenda);
        result.set('name', data.name);
        result.save();
      }
    });
  };
  this.destroyTemplate = function (data) {
    this.query.get(data.objectId, {
      success: function (result) {
        result.destroy({
          success: function () {
            console.log('destroyed');
          }
        });
      }
    })
  };
  this.init();
};

module.exports = new ServerApiUtils();

},{"../actions/timeboxer.js":"/Users/surian/Sites/Private/timeboxer/src/js/actions/timeboxer.js","./localStorage.js":"/Users/surian/Sites/Private/timeboxer/src/js/utils/localStorage.js","parse":"/Users/surian/Sites/Private/timeboxer/node_modules/parse/build/parse-latest.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/utils/localStorage.js":[function(require,module,exports){
function Storage () {

  this.dataStore = null;

  function init () {
    if (!localStorage.sprintTask) {
      localStorage.sprintTask = '[]';
    }
    this.dataStore = getFromLocalStorage();
  }

  function retrieve () {
    return getFromLocalStorage();
  }

  function save (data) {
    saveToLocalStorage(data);
  }

  function remove (index) {
    this.dataStore[index] = {};
    saveToLocalStorage(this.dataStore);
  }

  function saveToLocalStorage (data) {
    localStorage.sprintTask = JSON.stringify(data);
  }

  function getFromLocalStorage () {
    var data = JSON.parse(localStorage.sprintTask);
    return data;
  }

  function reset () {
    delete localStorage.sprintTask;
    this.init();
  }

  this.init = init;
  this.retrieve = retrieve;
  this.save = save;
  this.remove = remove;
  this.reset = reset;

  this.getFromLocalStorage = getFromLocalStorage;
  this.saveToLocalStorage = saveToLocalStorage;
}
var storage = new Storage();
storage.init();
module.exports = storage;

},{}],"/Users/surian/Sites/Private/timeboxer/src/js/utils/serverApiUtils.js":[function(require,module,exports){
arguments[4]["/Users/surian/Sites/Private/timeboxer/src/js/utils/ServerApiUtils.js"][0].apply(exports,arguments)
},{"../actions/timeboxer.js":"/Users/surian/Sites/Private/timeboxer/src/js/actions/timeboxer.js","./localStorage.js":"/Users/surian/Sites/Private/timeboxer/src/js/utils/localStorage.js","parse":"/Users/surian/Sites/Private/timeboxer/node_modules/parse/build/parse-latest.js"}],"/Users/surian/Sites/Private/timeboxer/src/js/utils/timer.js":[function(require,module,exports){
function Timer(opts) {
  var time = opts.time;
  var endCb = opts.endCb || function () {};
  var pulseCb = opts.pulseCb || function () {};
  var timeOutId = null;

  function updateTime() {

    if (time > 0) {
      time = time - 1;
      pulseCb(time);
      timeOutId = setTimeout(function () {
        updateTime();
      }, 1000);
    } else {
      endCb();
    }
  }

  this.setTime = function (newTime) {
    time = parseInt(newTime, 10);
    pulseCb(time);
  };

  this.getTime = function () {
    return time;
  };

  this.stop = function () {
    clearTimeout(timeOutId);
  };

  this.start = function () {
    updateTime();
  };

  this.reset = function () {
    time = opts.time;
    clearTimeout(timeOutId);
  };
}

module.exports = Timer;

},{}]},{},["./src/js/index.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2ZsdXgtcmlvdC9mbHV4LXJpb3QuanMiLCJub2RlX21vZHVsZXMvZmx1eC1yaW90L25vZGVfbW9kdWxlcy9mbHV4L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2ZsdXgtcmlvdC9ub2RlX21vZHVsZXMvZmx1eC9saWIvRGlzcGF0Y2hlci5qcyIsIm5vZGVfbW9kdWxlcy9mbHV4LXJpb3Qvbm9kZV9tb2R1bGVzL2ZsdXgvbGliL2ludmFyaWFudC5qcyIsIm5vZGVfbW9kdWxlcy9rZXltaXJyb3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wYXJzZS9idWlsZC9wYXJzZS1sYXRlc3QuanMiLCJub2RlX21vZHVsZXMvcmlvdC9yaW90LmpzIiwic3JjL2pzL2FjdGlvbnMvdGltZWJveGVyLmpzIiwic3JjL2pzL2NvbXBvbmVudHMvYWJvdXQudGFnIiwic3JjL2pzL2NvbXBvbmVudHMvY29udGFjdC50YWciLCJzcmMvanMvY29tcG9uZW50cy9pbmRleC50YWciLCJzcmMvanMvY29tcG9uZW50cy90aW1lYm94ZXJfbWVldGluZy9wcm9ncmVzcy50YWciLCJzcmMvanMvY29tcG9uZW50cy90aW1lYm94ZXJfbWVldGluZy9zdGFydC50YWciLCJzcmMvanMvY29tcG9uZW50cy90aW1lYm94ZXJfbWVldGluZy90aW1lci50YWciLCJzcmMvanMvY29tcG9uZW50cy90aW1lYm94ZXJfdGVtcGxhdGUvYWRkLnRhZyIsInNyYy9qcy9jb21wb25lbnRzL3RpbWVib3hlcl90ZW1wbGF0ZS9lZGl0LnRhZyIsInNyYy9qcy9jb21wb25lbnRzL3RpbWVib3hlcl90ZW1wbGF0ZS9pbmRleC50YWciLCJzcmMvanMvY29uc3RhbnRzL3RpbWVib3hlcl9jb25zdGFudHMuanMiLCJzcmMvanMvcHJlc2VudGVycy90aW1lYm94ZXJfcHJlc2VudGVyLmpzIiwic3JjL2pzL3JvdXRlcnMvdGltZWJveGVyX3JvdXRlcy5qcyIsInNyYy9qcy9zdG9yZXMvdGltZWJveGVyX3RlbXBsYXRlX3N0b3JlLmpzIiwic3JjL2pzL3V0aWxzL1NlcnZlckFwaVV0aWxzLmpzIiwic3JjL2pzL3V0aWxzL2xvY2FsU3RvcmFnZS5qcyIsInNyYy9qcy91dGlscy90aW1lci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2g2U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ0aW1lYm94ZXJfcm91dGVzID0gcmVxdWlyZSgnLi9yb3V0ZXJzL3RpbWVib3hlcl9yb3V0ZXMuanMnKTtcblxudGltZWJveGVyX3JvdXRlcy5zdGFydCgpOyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gdHJ1ZTtcbiAgICB2YXIgY3VycmVudFF1ZXVlO1xuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICAgICAgICBjdXJyZW50UXVldWVbaV0oKTtcbiAgICAgICAgfVxuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG59XG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHF1ZXVlLnB1c2goZnVuKTtcbiAgICBpZiAoIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCI7KGZ1bmN0aW9uKCkge1xuXG52YXIgcmlvdCA9IHJlcXVpcmUoJ3Jpb3QvcmlvdCcpXG52YXIgZmx1eF9yaW90ID0geyB2ZXJzaW9uOiAnMC4yLjAnIH1cblxuJ3VzZSBzdHJpY3QnXG5cbmZsdXhfcmlvdC5CYXNlU3RvcmUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgdmFyIENIQU5HRV9FVkVOVCA9ICdTVE9SRV9DSEFOR0VfRVZFTlQnXG5cbiAgZnVuY3Rpb24gQmFzZVN0b3JlKCkge1xuICAgIHJpb3Qub2JzZXJ2YWJsZSh0aGlzKVxuICB9XG5cbiAgQmFzZVN0b3JlLnByb3RvdHlwZSA9IHtcbiAgICBhZGRDaGFuZ2VMaXN0ZW5lcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub24oQ0hBTkdFX0VWRU5ULCBjYWxsYmFjaylcbiAgICB9LFxuXG4gICAgcmVtb3ZlQ2hhbmdlTGlzdGVuZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9mZihDSEFOR0VfRVZFTlQsIGNhbGxiYWNrKVxuICAgIH0sXG5cbiAgICBlbWl0Q2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudHJpZ2dlcihDSEFOR0VfRVZFTlQpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEJhc2VTdG9yZVxuXG59KSgpXG5cbmZsdXhfcmlvdC5zdG9yZU1peGluID0gZnVuY3Rpb24odGFnLCBzdG9yZSwgY2FsbGJhY2spIHtcblxuICB0YWcuc3RvcmUgPSBzdG9yZVxuXG4gIHRhZy5vbignbW91bnQnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RvcmUuYWRkQ2hhbmdlTGlzdGVuZXIoY2FsbGJhY2spXG4gIH0pXG5cbiAgdGFnLm9uKCd1bm1vdW50JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0b3JlLnJlbW92ZUNoYW5nZUxpc3RlbmVyKGNhbGxiYWNrKVxuICB9KVxuXG59XG5cbmZsdXhfcmlvdC5CYXNlUm91dGVyID0gKGZ1bmN0aW9uKCkge1xuXG4gIHZhciByZWdleEZ1bmNzID0gW11cblxuICBmdW5jdGlvbiByZWdleFRyYW5zZmVyKHBhdGgpIHtcbiAgICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KCcvJylcbiAgICB2YXIgcmVnZXhQYXJ0cyA9IFtdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXVxuICAgICAgaWYgKCEocGFydCAmJiBwYXJ0Lmxlbmd0aCA+IDApKSBjb250aW51ZVxuXG4gICAgICBpZiAocGFydFswXSA9PT0gJzonKSB7XG4gICAgICAgIHJlZ2V4UGFydHMucHVzaCgnKCg/Oig/IVxcXFwvKS4pKz8pJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZ2V4UGFydHMucHVzaChwYXJ0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUmVnRXhwKFwiXlwiICsgKHJlZ2V4UGFydHMuam9pbignXFxcXC8nKSkgKyBcIlxcXFwvPyRcIiwgXCJpXCIpXG4gIH1cblxuICBmdW5jdGlvbiByb3V0ZShwYXRoKSB7XG4gICAgaWYgKHJlZ2V4RnVuY3MubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICAgIGlmIChwYXRoID09PSAnJykgcmV0dXJuIHJlZ2V4RnVuY3NbMF1bMV0uYXBwbHkobnVsbCwgW10pXG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHJlZ2V4RnVuY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciByZWdleEZ1bmMgPSByZWdleEZ1bmNzW2ldXG4gICAgICB2YXIgbSA9IHBhdGgubWF0Y2gocmVnZXhGdW5jWzBdKVxuICAgICAgaWYgKG0gIT0gbnVsbCkgcmV0dXJuIHJlZ2V4RnVuY1sxXS5hcHBseShudWxsLCBtLnNsaWNlKDEpKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdXRlcygpIHtcbiAgICBpZiAoIShhcmd1bWVudHMubGVuZ3RoID4gMCkpIHJldHVyblxuXG4gICAgcmVnZXhGdW5jcy5wdXNoKFsgJycsIGFyZ3VtZW50c1swXSBdKVxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICByZWdleCA9IHJlZ2V4VHJhbnNmZXIoYXJndW1lbnRzW2ldKVxuICAgICAgcmVnZXhGdW5jcy5wdXNoKFsgcmVnZXgsIGFyZ3VtZW50c1tpICsgMV0gXSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChyKSB7XG4gICAgcmV0dXJuIHJpb3Qucm91dGUuZXhlYyhyIHx8IHJvdXRlKVxuICB9XG5cbiAgcmlvdC5yb3V0ZS5wYXJzZXIoZnVuY3Rpb24ocGF0aCkgeyByZXR1cm4gW3BhdGhdIH0pXG4gIHJpb3Qucm91dGUocm91dGUpXG5cbiAgcmV0dXJuIHtcbiAgICByb3V0ZXM6IHJvdXRlcyxcbiAgICBzdGFydDogc3RhcnRcbiAgfVxuXG59KSgpXG5cbmZsdXhfcmlvdC5Db25zdGFudHMgPSB7XG4gIEFjdGlvblNvdXJjZXM6IHtcbiAgICBTRVJWRVJfQUNUSU9OOiAnU0VSVkVSX0FDVElPTicsXG4gICAgVklFV19BQ1RJT046ICdWSUVXX0FDVElPTidcbiAgfVxufVxuXG52YXIgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJ2ZsdXgnKS5EaXNwYXRjaGVyXG52YXIgYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpXG5cbmZsdXhfcmlvdC5EaXNwYXRjaGVyID0gYXNzaWduKG5ldyBEaXNwYXRjaGVyKCksIHtcbiAgaGFuZGxlU2VydmVyQWN0aW9uOiBmdW5jdGlvbihhY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVBY3Rpb24oYWN0aW9uLCBmbHV4X3Jpb3QuQ29uc3RhbnRzLkFjdGlvblNvdXJjZXMuU0VSVkVSX0FDVElPTilcbiAgfSxcblxuICBoYW5kbGVWaWV3QWN0aW9uOiBmdW5jdGlvbihhY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVBY3Rpb24oYWN0aW9uLCBmbHV4X3Jpb3QuQ29uc3RhbnRzLkFjdGlvblNvdXJjZXMuVklFV19BQ1RJT04pXG4gIH0sXG5cbiAgaGFuZGxlQWN0aW9uOiBmdW5jdGlvbihhY3Rpb24sIHNvdXJjZSkge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICB9KVxuICB9XG59KVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZmx1eF9yaW90XG5cbn0pKCk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMuRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vbGliL0Rpc3BhdGNoZXInKVxuIiwiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEaXNwYXRjaGVyXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxudmFyIF9sYXN0SUQgPSAxO1xudmFyIF9wcmVmaXggPSAnSURfJztcblxuLyoqXG4gKiBEaXNwYXRjaGVyIGlzIHVzZWQgdG8gYnJvYWRjYXN0IHBheWxvYWRzIHRvIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLiBUaGlzIGlzXG4gKiBkaWZmZXJlbnQgZnJvbSBnZW5lcmljIHB1Yi1zdWIgc3lzdGVtcyBpbiB0d28gd2F5czpcbiAqXG4gKiAgIDEpIENhbGxiYWNrcyBhcmUgbm90IHN1YnNjcmliZWQgdG8gcGFydGljdWxhciBldmVudHMuIEV2ZXJ5IHBheWxvYWQgaXNcbiAqICAgICAgZGlzcGF0Y2hlZCB0byBldmVyeSByZWdpc3RlcmVkIGNhbGxiYWNrLlxuICogICAyKSBDYWxsYmFja3MgY2FuIGJlIGRlZmVycmVkIGluIHdob2xlIG9yIHBhcnQgdW50aWwgb3RoZXIgY2FsbGJhY2tzIGhhdmVcbiAqICAgICAgYmVlbiBleGVjdXRlZC5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgY29uc2lkZXIgdGhpcyBoeXBvdGhldGljYWwgZmxpZ2h0IGRlc3RpbmF0aW9uIGZvcm0sIHdoaWNoXG4gKiBzZWxlY3RzIGEgZGVmYXVsdCBjaXR5IHdoZW4gYSBjb3VudHJ5IGlzIHNlbGVjdGVkOlxuICpcbiAqICAgdmFyIGZsaWdodERpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlcigpO1xuICpcbiAqICAgLy8gS2VlcHMgdHJhY2sgb2Ygd2hpY2ggY291bnRyeSBpcyBzZWxlY3RlZFxuICogICB2YXIgQ291bnRyeVN0b3JlID0ge2NvdW50cnk6IG51bGx9O1xuICpcbiAqICAgLy8gS2VlcHMgdHJhY2sgb2Ygd2hpY2ggY2l0eSBpcyBzZWxlY3RlZFxuICogICB2YXIgQ2l0eVN0b3JlID0ge2NpdHk6IG51bGx9O1xuICpcbiAqICAgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIGJhc2UgZmxpZ2h0IHByaWNlIG9mIHRoZSBzZWxlY3RlZCBjaXR5XG4gKiAgIHZhciBGbGlnaHRQcmljZVN0b3JlID0ge3ByaWNlOiBudWxsfVxuICpcbiAqIFdoZW4gYSB1c2VyIGNoYW5nZXMgdGhlIHNlbGVjdGVkIGNpdHksIHdlIGRpc3BhdGNoIHRoZSBwYXlsb2FkOlxuICpcbiAqICAgZmxpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gKiAgICAgYWN0aW9uVHlwZTogJ2NpdHktdXBkYXRlJyxcbiAqICAgICBzZWxlY3RlZENpdHk6ICdwYXJpcydcbiAqICAgfSk7XG4gKlxuICogVGhpcyBwYXlsb2FkIGlzIGRpZ2VzdGVkIGJ5IGBDaXR5U3RvcmVgOlxuICpcbiAqICAgZmxpZ2h0RGlzcGF0Y2hlci5yZWdpc3RlcihmdW5jdGlvbihwYXlsb2FkKSB7XG4gKiAgICAgaWYgKHBheWxvYWQuYWN0aW9uVHlwZSA9PT0gJ2NpdHktdXBkYXRlJykge1xuICogICAgICAgQ2l0eVN0b3JlLmNpdHkgPSBwYXlsb2FkLnNlbGVjdGVkQ2l0eTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIGNvdW50cnksIHdlIGRpc3BhdGNoIHRoZSBwYXlsb2FkOlxuICpcbiAqICAgZmxpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gKiAgICAgYWN0aW9uVHlwZTogJ2NvdW50cnktdXBkYXRlJyxcbiAqICAgICBzZWxlY3RlZENvdW50cnk6ICdhdXN0cmFsaWEnXG4gKiAgIH0pO1xuICpcbiAqIFRoaXMgcGF5bG9hZCBpcyBkaWdlc3RlZCBieSBib3RoIHN0b3JlczpcbiAqXG4gKiAgICBDb3VudHJ5U3RvcmUuZGlzcGF0Y2hUb2tlbiA9IGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgIGlmIChwYXlsb2FkLmFjdGlvblR5cGUgPT09ICdjb3VudHJ5LXVwZGF0ZScpIHtcbiAqICAgICAgIENvdW50cnlTdG9yZS5jb3VudHJ5ID0gcGF5bG9hZC5zZWxlY3RlZENvdW50cnk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBXaGVuIHRoZSBjYWxsYmFjayB0byB1cGRhdGUgYENvdW50cnlTdG9yZWAgaXMgcmVnaXN0ZXJlZCwgd2Ugc2F2ZSBhIHJlZmVyZW5jZVxuICogdG8gdGhlIHJldHVybmVkIHRva2VuLiBVc2luZyB0aGlzIHRva2VuIHdpdGggYHdhaXRGb3IoKWAsIHdlIGNhbiBndWFyYW50ZWVcbiAqIHRoYXQgYENvdW50cnlTdG9yZWAgaXMgdXBkYXRlZCBiZWZvcmUgdGhlIGNhbGxiYWNrIHRoYXQgdXBkYXRlcyBgQ2l0eVN0b3JlYFxuICogbmVlZHMgdG8gcXVlcnkgaXRzIGRhdGEuXG4gKlxuICogICBDaXR5U3RvcmUuZGlzcGF0Y2hUb2tlbiA9IGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgIGlmIChwYXlsb2FkLmFjdGlvblR5cGUgPT09ICdjb3VudHJ5LXVwZGF0ZScpIHtcbiAqICAgICAgIC8vIGBDb3VudHJ5U3RvcmUuY291bnRyeWAgbWF5IG5vdCBiZSB1cGRhdGVkLlxuICogICAgICAgZmxpZ2h0RGlzcGF0Y2hlci53YWl0Rm9yKFtDb3VudHJ5U3RvcmUuZGlzcGF0Y2hUb2tlbl0pO1xuICogICAgICAgLy8gYENvdW50cnlTdG9yZS5jb3VudHJ5YCBpcyBub3cgZ3VhcmFudGVlZCB0byBiZSB1cGRhdGVkLlxuICpcbiAqICAgICAgIC8vIFNlbGVjdCB0aGUgZGVmYXVsdCBjaXR5IGZvciB0aGUgbmV3IGNvdW50cnlcbiAqICAgICAgIENpdHlTdG9yZS5jaXR5ID0gZ2V0RGVmYXVsdENpdHlGb3JDb3VudHJ5KENvdW50cnlTdG9yZS5jb3VudHJ5KTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSB1c2FnZSBvZiBgd2FpdEZvcigpYCBjYW4gYmUgY2hhaW5lZCwgZm9yIGV4YW1wbGU6XG4gKlxuICogICBGbGlnaHRQcmljZVN0b3JlLmRpc3BhdGNoVG9rZW4gPVxuICogICAgIGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgICAgc3dpdGNoIChwYXlsb2FkLmFjdGlvblR5cGUpIHtcbiAqICAgICAgICAgY2FzZSAnY291bnRyeS11cGRhdGUnOlxuICogICAgICAgICAgIGZsaWdodERpc3BhdGNoZXIud2FpdEZvcihbQ2l0eVN0b3JlLmRpc3BhdGNoVG9rZW5dKTtcbiAqICAgICAgICAgICBGbGlnaHRQcmljZVN0b3JlLnByaWNlID1cbiAqICAgICAgICAgICAgIGdldEZsaWdodFByaWNlU3RvcmUoQ291bnRyeVN0b3JlLmNvdW50cnksIENpdHlTdG9yZS5jaXR5KTtcbiAqICAgICAgICAgICBicmVhaztcbiAqXG4gKiAgICAgICAgIGNhc2UgJ2NpdHktdXBkYXRlJzpcbiAqICAgICAgICAgICBGbGlnaHRQcmljZVN0b3JlLnByaWNlID1cbiAqICAgICAgICAgICAgIEZsaWdodFByaWNlU3RvcmUoQ291bnRyeVN0b3JlLmNvdW50cnksIENpdHlTdG9yZS5jaXR5KTtcbiAqICAgICAgICAgICBicmVhaztcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSBgY291bnRyeS11cGRhdGVgIHBheWxvYWQgd2lsbCBiZSBndWFyYW50ZWVkIHRvIGludm9rZSB0aGUgc3RvcmVzJ1xuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MgaW4gb3JkZXI6IGBDb3VudHJ5U3RvcmVgLCBgQ2l0eVN0b3JlYCwgdGhlblxuICogYEZsaWdodFByaWNlU3RvcmVgLlxuICovXG5cbiAgZnVuY3Rpb24gRGlzcGF0Y2hlcigpIHtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrcyA9IHt9O1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNQZW5kaW5nID0ge307XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0hhbmRsZWQgPSB7fTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX3BlbmRpbmdQYXlsb2FkID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdpdGggZXZlcnkgZGlzcGF0Y2hlZCBwYXlsb2FkLiBSZXR1cm5zXG4gICAqIGEgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB3aXRoIGB3YWl0Rm9yKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5yZWdpc3Rlcj1mdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBpZCA9IF9wcmVmaXggKyBfbGFzdElEKys7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3NbaWRdID0gY2FsbGJhY2s7XG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgY2FsbGJhY2sgYmFzZWQgb24gaXRzIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICovXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLnVucmVnaXN0ZXI9ZnVuY3Rpb24oaWQpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF0sXG4gICAgICAnRGlzcGF0Y2hlci51bnJlZ2lzdGVyKC4uLik6IGAlc2AgZG9lcyBub3QgbWFwIHRvIGEgcmVnaXN0ZXJlZCBjYWxsYmFjay4nLFxuICAgICAgaWRcbiAgICApO1xuICAgIGRlbGV0ZSB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrc1tpZF07XG4gIH07XG5cbiAgLyoqXG4gICAqIFdhaXRzIGZvciB0aGUgY2FsbGJhY2tzIHNwZWNpZmllZCB0byBiZSBpbnZva2VkIGJlZm9yZSBjb250aW51aW5nIGV4ZWN1dGlvblxuICAgKiBvZiB0aGUgY3VycmVudCBjYWxsYmFjay4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBhIGNhbGxiYWNrIGluXG4gICAqIHJlc3BvbnNlIHRvIGEgZGlzcGF0Y2hlZCBwYXlsb2FkLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IGlkc1xuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUud2FpdEZvcj1mdW5jdGlvbihpZHMpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmcsXG4gICAgICAnRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IE11c3QgYmUgaW52b2tlZCB3aGlsZSBkaXNwYXRjaGluZy4nXG4gICAgKTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaWRzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGlkID0gaWRzW2lpXTtcbiAgICAgIGlmICh0aGlzLiREaXNwYXRjaGVyX2lzUGVuZGluZ1tpZF0pIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIHRoaXMuJERpc3BhdGNoZXJfaXNIYW5kbGVkW2lkXSxcbiAgICAgICAgICAnRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IENpcmN1bGFyIGRlcGVuZGVuY3kgZGV0ZWN0ZWQgd2hpbGUgJyArXG4gICAgICAgICAgJ3dhaXRpbmcgZm9yIGAlc2AuJyxcbiAgICAgICAgICBpZFxuICAgICAgICApO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3NbaWRdLFxuICAgICAgICAnRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IGAlc2AgZG9lcyBub3QgbWFwIHRvIGEgcmVnaXN0ZXJlZCBjYWxsYmFjay4nLFxuICAgICAgICBpZFxuICAgICAgKTtcbiAgICAgIHRoaXMuJERpc3BhdGNoZXJfaW52b2tlQ2FsbGJhY2soaWQpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhIHBheWxvYWQgdG8gYWxsIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGF5bG9hZFxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuZGlzcGF0Y2g9ZnVuY3Rpb24ocGF5bG9hZCkge1xuICAgIGludmFyaWFudChcbiAgICAgICF0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmcsXG4gICAgICAnRGlzcGF0Y2guZGlzcGF0Y2goLi4uKTogQ2Fubm90IGRpc3BhdGNoIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC4nXG4gICAgKTtcbiAgICB0aGlzLiREaXNwYXRjaGVyX3N0YXJ0RGlzcGF0Y2hpbmcocGF5bG9hZCk7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIGlkIGluIHRoaXMuJERpc3BhdGNoZXJfY2FsbGJhY2tzKSB7XG4gICAgICAgIGlmICh0aGlzLiREaXNwYXRjaGVyX2lzUGVuZGluZ1tpZF0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiREaXNwYXRjaGVyX2ludm9rZUNhbGxiYWNrKGlkKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9zdG9wRGlzcGF0Y2hpbmcoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIElzIHRoaXMgRGlzcGF0Y2hlciBjdXJyZW50bHkgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5pc0Rpc3BhdGNoaW5nPWZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLiREaXNwYXRjaGVyX2lzRGlzcGF0Y2hpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIGNhbGxiYWNrIHN0b3JlZCB3aXRoIHRoZSBnaXZlbiBpZC4gQWxzbyBkbyBzb21lIGludGVybmFsXG4gICAqIGJvb2trZWVwaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICogQGludGVybmFsXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS4kRGlzcGF0Y2hlcl9pbnZva2VDYWxsYmFjaz1mdW5jdGlvbihpZCkge1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNQZW5kaW5nW2lkXSA9IHRydWU7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9jYWxsYmFja3NbaWRdKHRoaXMuJERpc3BhdGNoZXJfcGVuZGluZ1BheWxvYWQpO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNIYW5kbGVkW2lkXSA9IHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB1cCBib29ra2VlcGluZyBuZWVkZWQgd2hlbiBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBheWxvYWRcbiAgICogQGludGVybmFsXG4gICAqL1xuICBEaXNwYXRjaGVyLnByb3RvdHlwZS4kRGlzcGF0Y2hlcl9zdGFydERpc3BhdGNoaW5nPWZ1bmN0aW9uKHBheWxvYWQpIHtcbiAgICBmb3IgKHZhciBpZCBpbiB0aGlzLiREaXNwYXRjaGVyX2NhbGxiYWNrcykge1xuICAgICAgdGhpcy4kRGlzcGF0Y2hlcl9pc1BlbmRpbmdbaWRdID0gZmFsc2U7XG4gICAgICB0aGlzLiREaXNwYXRjaGVyX2lzSGFuZGxlZFtpZF0gPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9wZW5kaW5nUGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgdGhpcy4kRGlzcGF0Y2hlcl9pc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogQ2xlYXIgYm9va2tlZXBpbmcgdXNlZCBmb3IgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuJERpc3BhdGNoZXJfc3RvcERpc3BhdGNoaW5nPWZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJERpc3BhdGNoZXJfcGVuZGluZ1BheWxvYWQgPSBudWxsO1xuICAgIHRoaXMuJERpc3BhdGNoZXJfaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICB9O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gRGlzcGF0Y2hlcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGludmFyaWFudFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKGZhbHNlKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludmFyaWFudCBWaW9sYXRpb246ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0IEZhY2Vib29rLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYW4gZW51bWVyYXRpb24gd2l0aCBrZXlzIGVxdWFsIHRvIHRoZWlyIHZhbHVlLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqICAgdmFyIENPTE9SUyA9IGtleU1pcnJvcih7Ymx1ZTogbnVsbCwgcmVkOiBudWxsfSk7XG4gKiAgIHZhciBteUNvbG9yID0gQ09MT1JTLmJsdWU7XG4gKiAgIHZhciBpc0NvbG9yVmFsaWQgPSAhIUNPTE9SU1tteUNvbG9yXTtcbiAqXG4gKiBUaGUgbGFzdCBsaW5lIGNvdWxkIG5vdCBiZSBwZXJmb3JtZWQgaWYgdGhlIHZhbHVlcyBvZiB0aGUgZ2VuZXJhdGVkIGVudW0gd2VyZVxuICogbm90IGVxdWFsIHRvIHRoZWlyIGtleXMuXG4gKlxuICogICBJbnB1dDogIHtrZXkxOiB2YWwxLCBrZXkyOiB2YWwyfVxuICogICBPdXRwdXQ6IHtrZXkxOiBrZXkxLCBrZXkyOiBrZXkyfVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xudmFyIGtleU1pcnJvciA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcmV0ID0ge307XG4gIHZhciBrZXk7XG4gIGlmICghKG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhQXJyYXkuaXNBcnJheShvYmopKSkge1xuICAgIHRocm93IG5ldyBFcnJvcigna2V5TWlycm9yKC4uLik6IEFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICB9XG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXRba2V5XSA9IGtleTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlNaXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIFRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIga2V5cztcblx0dmFyIHRvID0gVG9PYmplY3QodGFyZ2V0KTtcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBhcmd1bWVudHNbc107XG5cdFx0a2V5cyA9IE9iamVjdC5rZXlzKE9iamVjdChmcm9tKSk7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRvW2tleXNbaV1dID0gZnJvbVtrZXlzW2ldXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qIVxuICogUGFyc2UgSmF2YVNjcmlwdCBTREtcbiAqIFZlcnNpb246IDEuNS4wXG4gKiBCdWlsdDogRnJpIEp1bCAxMCAyMDE1IDE3OjA1OjQ2XG4gKiBodHRwOi8vcGFyc2UuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgUGFyc2UsIExMQ1xuICpcbiAqIEluY2x1ZGVzOiBVbmRlcnNjb3JlLmpzXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDEyIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBJbmMuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICByb290LlBhcnNlLlZFUlNJT04gPSBcImpzMS41LjBcIjtcbn0odGhpcykpO1xuLy8gICAgIFVuZGVyc2NvcmUuanMgMS40LjRcbi8vICAgICBodHRwOi8vdW5kZXJzY29yZWpzLm9yZ1xuLy8gICAgIChjKSAyMDA5LTIwMTMgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIEluYy5cbi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgLy8gQmFzZWxpbmUgc2V0dXBcbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICAvLyBFc3RhYmxpc2ggdGhlIHJvb3Qgb2JqZWN0LCBgd2luZG93YCBpbiB0aGUgYnJvd3Nlciwgb3IgYGdsb2JhbGAgb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gRXN0YWJsaXNoIHRoZSBvYmplY3QgdGhhdCBnZXRzIHJldHVybmVkIHRvIGJyZWFrIG91dCBvZiBhIGxvb3AgaXRlcmF0aW9uLlxuICB2YXIgYnJlYWtlciA9IHt9O1xuXG4gIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIEZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbiAgdmFyIHB1c2ggICAgICAgICAgICAgPSBBcnJheVByb3RvLnB1c2gsXG4gICAgICBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSxcbiAgICAgIGNvbmNhdCAgICAgICAgICAgPSBBcnJheVByb3RvLmNvbmNhdCxcbiAgICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAvLyBBbGwgKipFQ01BU2NyaXB0IDUqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2VcbiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuXG4gIHZhclxuICAgIG5hdGl2ZUZvckVhY2ggICAgICA9IEFycmF5UHJvdG8uZm9yRWFjaCxcbiAgICBuYXRpdmVNYXAgICAgICAgICAgPSBBcnJheVByb3RvLm1hcCxcbiAgICBuYXRpdmVSZWR1Y2UgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZSxcbiAgICBuYXRpdmVSZWR1Y2VSaWdodCAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0LFxuICAgIG5hdGl2ZUZpbHRlciAgICAgICA9IEFycmF5UHJvdG8uZmlsdGVyLFxuICAgIG5hdGl2ZUV2ZXJ5ICAgICAgICA9IEFycmF5UHJvdG8uZXZlcnksXG4gICAgbmF0aXZlU29tZSAgICAgICAgID0gQXJyYXlQcm90by5zb21lLFxuICAgIG5hdGl2ZUluZGV4T2YgICAgICA9IEFycmF5UHJvdG8uaW5kZXhPZixcbiAgICBuYXRpdmVMYXN0SW5kZXhPZiAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mLFxuICAgIG5hdGl2ZUlzQXJyYXkgICAgICA9IEFycmF5LmlzQXJyYXksXG4gICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsXG4gICAgbmF0aXZlQmluZCAgICAgICAgID0gRnVuY1Byb3RvLmJpbmQ7XG5cbiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgaW5cbiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0IHZpYSBhIHN0cmluZyBpZGVudGlmaWVyLFxuICAvLyBmb3IgQ2xvc3VyZSBDb21waWxlciBcImFkdmFuY2VkXCIgbW9kZS5cbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXztcbiAgICB9XG4gICAgZXhwb3J0cy5fID0gXztcbiAgfSBlbHNlIHtcbiAgICByb290Ll8gPSBfO1xuICB9XG5cbiAgLy8gQ3VycmVudCB2ZXJzaW9uLlxuICBfLlZFUlNJT04gPSAnMS40LjQnO1xuXG4gIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4gIC8vIEhhbmRsZXMgb2JqZWN0cyB3aXRoIHRoZSBidWlsdC1pbiBgZm9yRWFjaGAsIGFycmF5cywgYW5kIHJhdyBvYmplY3RzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZm9yRWFjaGAgaWYgYXZhaWxhYmxlLlxuICB2YXIgZWFjaCA9IF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybjtcbiAgICBpZiAobmF0aXZlRm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gbmF0aXZlRm9yRWFjaCkge1xuICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikgPT09IGJyZWFrZXIpIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoXy5oYXMob2JqLCBrZXkpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0b3IgdG8gZWFjaCBlbGVtZW50LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgbWFwYCBpZiBhdmFpbGFibGUuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgICBpZiAobmF0aXZlTWFwICYmIG9iai5tYXAgPT09IG5hdGl2ZU1hcCkgcmV0dXJuIG9iai5tYXAoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJlc3VsdHNbcmVzdWx0cy5sZW5ndGhdID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIHZhciByZWR1Y2VFcnJvciA9ICdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJztcblxuICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4gIC8vIG9yIGBmb2xkbGAuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGByZWR1Y2VgIGlmIGF2YWlsYWJsZS5cbiAgXy5yZWR1Y2UgPSBfLmZvbGRsID0gXy5pbmplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgdmFyIGluaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdO1xuICAgIGlmIChuYXRpdmVSZWR1Y2UgJiYgb2JqLnJlZHVjZSA9PT0gbmF0aXZlUmVkdWNlKSB7XG4gICAgICBpZiAoY29udGV4dCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGluaXRpYWwgPyBvYmoucmVkdWNlKGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2UoaXRlcmF0b3IpO1xuICAgIH1cbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoIWluaXRpYWwpIHtcbiAgICAgICAgbWVtbyA9IHZhbHVlO1xuICAgICAgICBpbml0aWFsID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG1lbW8sIHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbml0aWFsKSB0aHJvdyBuZXcgVHlwZUVycm9yKHJlZHVjZUVycm9yKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZVJpZ2h0YCBpZiBhdmFpbGFibGUuXG4gIF8ucmVkdWNlUmlnaHQgPSBfLmZvbGRyID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgbWVtbywgY29udGV4dCkge1xuICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTtcbiAgICBpZiAobmF0aXZlUmVkdWNlUmlnaHQgJiYgb2JqLnJlZHVjZVJpZ2h0ID09PSBuYXRpdmVSZWR1Y2VSaWdodCkge1xuICAgICAgaWYgKGNvbnRleHQpIGl0ZXJhdG9yID0gXy5iaW5kKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBpbml0aWFsID8gb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2VSaWdodChpdGVyYXRvcik7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT09ICtsZW5ndGgpIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB9XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgaW5kZXggPSBrZXlzID8ga2V5c1stLWxlbmd0aF0gOiAtLWxlbmd0aDtcbiAgICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgICBtZW1vID0gb2JqW2luZGV4XTtcbiAgICAgICAgaW5pdGlhbCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZW1vID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCBtZW1vLCBvYmpbaW5kZXhdLCBpbmRleCwgbGlzdCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbml0aWFsKSB0aHJvdyBuZXcgVHlwZUVycm9yKHJlZHVjZUVycm9yKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIGZpcnN0IHZhbHVlIHdoaWNoIHBhc3NlcyBhIHRydXRoIHRlc3QuIEFsaWFzZWQgYXMgYGRldGVjdGAuXG4gIF8uZmluZCA9IF8uZGV0ZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgYW55KG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSB7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBmaWx0ZXJgIGlmIGF2YWlsYWJsZS5cbiAgLy8gQWxpYXNlZCBhcyBgc2VsZWN0YC5cbiAgXy5maWx0ZXIgPSBfLnNlbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdHM7XG4gICAgaWYgKG5hdGl2ZUZpbHRlciAmJiBvYmouZmlsdGVyID09PSBuYXRpdmVGaWx0ZXIpIHJldHVybiBvYmouZmlsdGVyKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoXSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuXG4gIF8ucmVqZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmV0dXJuICFpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgfSwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgYWxsIG9mIHRoZSBlbGVtZW50cyBtYXRjaCBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBldmVyeWAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0b3IgfHwgKGl0ZXJhdG9yID0gXy5pZGVudGl0eSk7XG4gICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChuYXRpdmVFdmVyeSAmJiBvYmouZXZlcnkgPT09IG5hdGl2ZUV2ZXJ5KSByZXR1cm4gb2JqLmV2ZXJ5KGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoIShyZXN1bHQgPSByZXN1bHQgJiYgaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSkgcmV0dXJuIGJyZWFrZXI7XG4gICAgfSk7XG4gICAgcmV0dXJuICEhcmVzdWx0O1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IG1hdGNoZXMgYSB0cnV0aCB0ZXN0LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgc29tZWAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBhbnlgLlxuICB2YXIgYW55ID0gXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0b3IgfHwgKGl0ZXJhdG9yID0gXy5pZGVudGl0eSk7XG4gICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAobmF0aXZlU29tZSAmJiBvYmouc29tZSA9PT0gbmF0aXZlU29tZSkgcmV0dXJuIG9iai5zb21lKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocmVzdWx0IHx8IChyZXN1bHQgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjtcbiAgICB9KTtcbiAgICByZXR1cm4gISFyZXN1bHQ7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBhcnJheSBvciBvYmplY3QgY29udGFpbnMgYSBnaXZlbiB2YWx1ZSAodXNpbmcgYD09PWApLlxuICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlYC5cbiAgXy5jb250YWlucyA9IF8uaW5jbHVkZSA9IGZ1bmN0aW9uKG9iaiwgdGFyZ2V0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgb2JqLmluZGV4T2YgPT09IG5hdGl2ZUluZGV4T2YpIHJldHVybiBvYmouaW5kZXhPZih0YXJnZXQpICE9IC0xO1xuICAgIHJldHVybiBhbnkob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0YXJnZXQ7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiAoaXNGdW5jID8gbWV0aG9kIDogdmFsdWVbbWV0aG9kXSkuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYG1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuXG4gIF8ucGx1Y2sgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuIHZhbHVlW2tleV07IH0pO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMsIGZpcnN0KSB7XG4gICAgaWYgKF8uaXNFbXB0eShhdHRycykpIHJldHVybiBmaXJzdCA/IG51bGwgOiBbXTtcbiAgICByZXR1cm4gX1tmaXJzdCA/ICdmaW5kJyA6ICdmaWx0ZXInXShvYmosIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgaWYgKGF0dHJzW2tleV0gIT09IHZhbHVlW2tleV0pIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbmRgOiBnZXR0aW5nIHRoZSBmaXJzdCBvYmplY3RcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5maW5kV2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8ud2hlcmUob2JqLCBhdHRycywgdHJ1ZSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgb3IgKGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICAvLyBDYW4ndCBvcHRpbWl6ZSBhcnJheXMgb2YgaW50ZWdlcnMgbG9uZ2VyIHRoYW4gNjUsNTM1IGVsZW1lbnRzLlxuICAvLyBTZWU6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD04MDc5N1xuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSAmJiBvYmoubGVuZ3RoIDwgNjU1MzUpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCBvYmopO1xuICAgIH1cbiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNFbXB0eShvYmopKSByZXR1cm4gLUluZmluaXR5O1xuICAgIHZhciByZXN1bHQgPSB7Y29tcHV0ZWQgOiAtSW5maW5pdHksIHZhbHVlOiAtSW5maW5pdHl9O1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7XG4gICAgICBjb21wdXRlZCA+PSByZXN1bHQuY29tcHV0ZWQgJiYgKHJlc3VsdCA9IHt2YWx1ZSA6IHZhbHVlLCBjb21wdXRlZCA6IGNvbXB1dGVkfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWluID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0FycmF5KG9iaikgJiYgb2JqWzBdID09PSArb2JqWzBdICYmIG9iai5sZW5ndGggPCA2NTUzNSkge1xuICAgICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KE1hdGgsIG9iaik7XG4gICAgfVxuICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0VtcHR5KG9iaikpIHJldHVybiBJbmZpbml0eTtcbiAgICB2YXIgcmVzdWx0ID0ge2NvbXB1dGVkIDogSW5maW5pdHksIHZhbHVlOiBJbmZpbml0eX07XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTtcbiAgICAgIGNvbXB1dGVkIDwgcmVzdWx0LmNvbXB1dGVkICYmIChyZXN1bHQgPSB7dmFsdWUgOiB2YWx1ZSwgY29tcHV0ZWQgOiBjb21wdXRlZH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gIH07XG5cbiAgLy8gU2h1ZmZsZSBhbiBhcnJheS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJhbmQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgc2h1ZmZsZWQgPSBbXTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJhbmQgPSBfLnJhbmRvbShpbmRleCsrKTtcbiAgICAgIHNodWZmbGVkW2luZGV4IC0gMV0gPSBzaHVmZmxlZFtyYW5kXTtcbiAgICAgIHNodWZmbGVkW3JhbmRdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNodWZmbGVkO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGxvb2t1cCBpdGVyYXRvcnMuXG4gIHZhciBsb29rdXBJdGVyYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IGZ1bmN0aW9uKG9iail7IHJldHVybiBvYmpbdmFsdWVdOyB9O1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRvci5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IodmFsdWUpO1xuICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSA6IHZhbHVlLFxuICAgICAgICBpbmRleCA6IGluZGV4LFxuICAgICAgICBjcml0ZXJpYSA6IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IDwgcmlnaHQuaW5kZXggPyAtMSA6IDE7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24ob2JqLCB2YWx1ZSwgY29udGV4dCwgYmVoYXZpb3IpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IodmFsdWUgfHwgXy5pZGVudGl0eSk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgdmFyIGtleSA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBvYmopO1xuICAgICAgYmVoYXZpb3IocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGVcbiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG4gIF8uZ3JvdXBCeSA9IGZ1bmN0aW9uKG9iaiwgdmFsdWUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZ3JvdXAob2JqLCB2YWx1ZSwgY29udGV4dCwgZnVuY3Rpb24ocmVzdWx0LCBrZXksIHZhbHVlKSB7XG4gICAgICAoXy5oYXMocmVzdWx0LCBrZXkpID8gcmVzdWx0W2tleV0gOiAocmVzdWx0W2tleV0gPSBbXSkpLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBmdW5jdGlvbihvYmosIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGdyb3VwKG9iaiwgdmFsdWUsIGNvbnRleHQsIGZ1bmN0aW9uKHJlc3VsdCwga2V5KSB7XG4gICAgICBpZiAoIV8uaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0gPSAwO1xuICAgICAgcmVzdWx0W2tleV0rKztcbiAgICB9KTtcbiAgfTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYXRvciA9PSBudWxsID8gXy5pZGVudGl0eSA6IGxvb2t1cEl0ZXJhdG9yKGl0ZXJhdG9yKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9iaik7XG4gICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDE7XG4gICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGFycmF5W21pZF0pIDwgdmFsdWUgPyBsb3cgPSBtaWQgKyAxIDogaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBTYWZlbHkgY29udmVydCBhbnl0aGluZyBpdGVyYWJsZSBpbnRvIGEgcmVhbCwgbGl2ZSBhcnJheS5cbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gICAgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSByZXR1cm4gXy5tYXAob2JqLCBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gXy52YWx1ZXMob2JqKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBvYmplY3QuXG4gIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIDA7XG4gICAgcmV0dXJuIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkgPyBvYmoubGVuZ3RoIDogXy5rZXlzKG9iaikubGVuZ3RoO1xuICB9O1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICByZXR1cm4gKG4gIT0gbnVsbCkgJiYgIWd1YXJkID8gc2xpY2UuY2FsbChhcnJheSwgMCwgbikgOiBhcnJheVswXTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb25cbiAgLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW5cbiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoXG4gIC8vIGBfLm1hcGAuXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBhcnJheS5sZW5ndGggLSAoKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbikpO1xuICB9O1xuXG4gIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmICgobiAhPSBudWxsKSAmJiAhZ3VhcmQpIHtcbiAgICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBNYXRoLm1heChhcnJheS5sZW5ndGggLSBuLCAwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKipcbiAgLy8gY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgXy5pZGVudGl0eSk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBvdXRwdXQpIHtcbiAgICBlYWNoKGlucHV0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgc2hhbGxvdyA/IHB1c2guYXBwbHkob3V0cHV0LCB2YWx1ZSkgOiBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBvdXRwdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29tcGxldGVseSBmbGF0dGVuZWQgdmVyc2lvbiBvZiBhbiBhcnJheS5cbiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHtcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgW10pO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGlzU29ydGVkKSkge1xuICAgICAgY29udGV4dCA9IGl0ZXJhdG9yO1xuICAgICAgaXRlcmF0b3IgPSBpc1NvcnRlZDtcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpbml0aWFsID0gaXRlcmF0b3IgPyBfLm1hcChhcnJheSwgaXRlcmF0b3IsIGNvbnRleHQpIDogYXJyYXk7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGVhY2goaW5pdGlhbCwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICBpZiAoaXNTb3J0ZWQgPyAoIWluZGV4IHx8IHNlZW5bc2Vlbi5sZW5ndGggLSAxXSAhPT0gdmFsdWUpIDogIV8uY29udGFpbnMoc2VlbiwgdmFsdWUpKSB7XG4gICAgICAgIHNlZW4ucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJlc3VsdHMucHVzaChhcnJheVtpbmRleF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuaXEoY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbiAgLy8gcGFzc2VkLWluIGFycmF5cy5cbiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBfLmZpbHRlcihfLnVuaXEoYXJyYXkpLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gXy5ldmVyeShyZXN0LCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICByZXR1cm4gXy5pbmRleE9mKG90aGVyLCBpdGVtKSA+PSAwO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7IHJldHVybiAhXy5jb250YWlucyhyZXN0LCB2YWx1ZSk7IH0pO1xuICB9O1xuXG4gIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmVcbiAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXG4gIF8uemlwID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgdmFyIGxlbmd0aCA9IF8ubWF4KF8ucGx1Y2soYXJncywgJ2xlbmd0aCcpKTtcbiAgICB2YXIgcmVzdWx0cyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdHNbaV0gPSBfLnBsdWNrKGFyZ3MsIFwiXCIgKyBpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ29udmVydHMgbGlzdHMgaW50byBvYmplY3RzLiBQYXNzIGVpdGhlciBhIHNpbmdsZSBhcnJheSBvZiBgW2tleSwgdmFsdWVdYFxuICAvLyBwYWlycywgb3IgdHdvIHBhcmFsbGVsIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5ndGggLS0gb25lIG9mIGtleXMsIGFuZCBvbmUgb2ZcbiAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICBfLm9iamVjdCA9IGZ1bmN0aW9uKGxpc3QsIHZhbHVlcykge1xuICAgIGlmIChsaXN0ID09IG51bGwpIHJldHVybiB7fTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIElmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcGx5IHVzIHdpdGggaW5kZXhPZiAoSSdtIGxvb2tpbmcgYXQgeW91LCAqKk1TSUUqKiksXG4gIC8vIHdlIG5lZWQgdGhpcyBmdW5jdGlvbi4gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhblxuICAvLyBpdGVtIGluIGFuIGFycmF5LCBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgaW5kZXhPZmAgaWYgYXZhaWxhYmxlLlxuICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC5cbiAgXy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlzU29ydGVkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTtcbiAgICB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGlzU29ydGVkKSB7XG4gICAgICBpZiAodHlwZW9mIGlzU29ydGVkID09ICdudW1iZXInKSB7XG4gICAgICAgIGkgPSAoaXNTb3J0ZWQgPCAwID8gTWF0aC5tYXgoMCwgbCArIGlzU29ydGVkKSA6IGlzU29ydGVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgPSBfLnNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBpdGVtID8gaSA6IC0xO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmF0aXZlSW5kZXhPZiAmJiBhcnJheS5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtLCBpc1NvcnRlZCk7XG4gICAgZm9yICg7IGkgPCBsOyBpKyspIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBsYXN0SW5kZXhPZmAgaWYgYXZhaWxhYmxlLlxuICBfLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGZyb20pIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgIHZhciBoYXNJbmRleCA9IGZyb20gIT0gbnVsbDtcbiAgICBpZiAobmF0aXZlTGFzdEluZGV4T2YgJiYgYXJyYXkubGFzdEluZGV4T2YgPT09IG5hdGl2ZUxhc3RJbmRleE9mKSB7XG4gICAgICByZXR1cm4gaGFzSW5kZXggPyBhcnJheS5sYXN0SW5kZXhPZihpdGVtLCBmcm9tKSA6IGFycmF5Lmxhc3RJbmRleE9mKGl0ZW0pO1xuICAgIH1cbiAgICB2YXIgaSA9IChoYXNJbmRleCA/IGZyb20gOiBhcnJheS5sZW5ndGgpO1xuICAgIHdoaWxlIChpLS0pIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2ZcbiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWVcbiAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS5cbiAgXy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkge1xuICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIHN0ZXAgPSBhcmd1bWVudHNbMl0gfHwgMTtcblxuICAgIHZhciBsZW4gPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgdmFyIHJhbmdlID0gbmV3IEFycmF5KGxlbik7XG5cbiAgICB3aGlsZShpZHggPCBsZW4pIHtcbiAgICAgIHJhbmdlW2lkeCsrXSA9IHN0YXJ0O1xuICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cyxcbiAgLy8gb3B0aW9uYWxseSkuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBGdW5jdGlvbi5iaW5kYCBpZlxuICAvLyBhdmFpbGFibGUuXG4gIF8uYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQpIHtcbiAgICBpZiAoZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kICYmIG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBQYXJ0aWFsbHkgYXBwbHkgYSBmdW5jdGlvbiBieSBjcmVhdGluZyBhIHZlcnNpb24gdGhhdCBoYXMgaGFkIHNvbWUgb2YgaXRzXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LlxuICBfLnBhcnRpYWwgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBCaW5kIGFsbCBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXRcbiAgLy8gYWxsIGNhbGxiYWNrcyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBmdW5jcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSBmdW5jcyA9IF8uZnVuY3Rpb25zKG9iaik7XG4gICAgZWFjaChmdW5jcywgZnVuY3Rpb24oZikgeyBvYmpbZl0gPSBfLmJpbmQob2JqW2ZdLCBvYmopOyB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXG4gIF8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGZ1bmMsIGhhc2hlcikge1xuICAgIHZhciBtZW1vID0ge307XG4gICAgaGFzaGVyIHx8IChoYXNoZXIgPSBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5ID0gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gXy5oYXMobWVtbywga2V5KSA/IG1lbW9ba2V5XSA6IChtZW1vW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7IH0sIHdhaXQpO1xuICB9O1xuXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xuICAvLyBjbGVhcmVkLlxuICBfLmRlZmVyID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHJldHVybiBfLmRlbGF5LmFwcGx5KF8sIFtmdW5jLCAxXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgIHZhciBjb250ZXh0LCBhcmdzLCB0aW1lb3V0LCByZXN1bHQ7XG4gICAgdmFyIHByZXZpb3VzID0gMDtcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByZXZpb3VzID0gbmV3IERhdGU7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93ID0gbmV3IERhdGU7XG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDApIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0KSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0LCByZXN1bHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICBpZiAoIWltbWVkaWF0ZSkgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIH07XG4gICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIGlmIChjYWxsTm93KSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvd1xuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuICBfLm9uY2UgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIHJhbiA9IGZhbHNlLCBtZW1vO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChyYW4pIHJldHVybiBtZW1vO1xuICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsXG4gIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmRcbiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gW2Z1bmNdO1xuICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHdyYXBwZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBmb3IgKHZhciBpID0gZnVuY3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXJncyA9IFtmdW5jc1tpXS5hcHBseSh0aGlzLCBhcmdzKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnc1swXTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBhZnRlciBiZWluZyBjYWxsZWQgTiB0aW1lcy5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgaWYgKHRpbWVzIDw9IDApIHJldHVybiBmdW5jKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYFxuICBfLmtleXMgPSBuYXRpdmVLZXlzIHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogIT09IE9iamVjdChvYmopKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG9iamVjdCcpO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5c1trZXlzLmxlbmd0aF0gPSBrZXk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSB2YWx1ZXMucHVzaChvYmpba2V5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAgXy5wYWlycyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBwYWlycyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHBhaXJzLnB1c2goW2tleSwgb2JqW2tleV1dKTtcbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSByZXN1bHRbb2JqW2tleV1dID0ga2V5O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYFxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGNvcHkgPSB7fTtcbiAgICB2YXIga2V5cyA9IGNvbmNhdC5hcHBseShBcnJheVByb3RvLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIGVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoa2V5IGluIG9iaikgY29weVtrZXldID0gb2JqW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvcHk7XG4gIH07XG5cbiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgY29weSA9IHt9O1xuICAgIHZhciBrZXlzID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKCFfLmNvbnRhaW5zKGtleXMsIGtleSkpIGNvcHlba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbiAgfTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChvYmpbcHJvcF0gPT0gbnVsbCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBIYXJtb255IGBlZ2FsYCBwcm9wb3NhbDogaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsLlxuICAgIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PSAxIC8gYjtcbiAgICAvLyBBIHN0cmljdCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGBudWxsID09IHVuZGVmaW5lZGAuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBhID09PSBiO1xuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICAgIGlmIChjbGFzc05hbWUgIT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgcmV0dXJuIGEgPT0gU3RyaW5nKGIpO1xuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS4gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvclxuICAgICAgICAvLyBvdGhlciBudW1lcmljIHZhbHVlcy5cbiAgICAgICAgcmV0dXJuIGEgIT0gK2EgPyBiICE9ICtiIDogKGEgPT0gMCA/IDEgLyBhID09IDEgLyBiIDogYSA9PSArYik7XG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgICByZXR1cm4gK2EgPT0gK2I7XG4gICAgICAvLyBSZWdFeHBzIGFyZSBjb21wYXJlZCBieSB0aGVpciBzb3VyY2UgcGF0dGVybnMgYW5kIGZsYWdzLlxuICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgICAgcmV0dXJuIGEuc291cmNlID09IGIuc291cmNlICYmXG4gICAgICAgICAgICAgICBhLmdsb2JhbCA9PSBiLmdsb2JhbCAmJlxuICAgICAgICAgICAgICAgYS5tdWx0aWxpbmUgPT0gYi5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgICAgIGEuaWdub3JlQ2FzZSA9PSBiLmlnbm9yZUNhc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cbiAgICB2YXIgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aDtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxuICAgICAgLy8gdW5pcXVlIG5lc3RlZCBzdHJ1Y3R1cmVzLlxuICAgICAgaWYgKGFTdGFja1tsZW5ndGhdID09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PSBiO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG4gICAgdmFyIHNpemUgPSAwLCByZXN1bHQgPSB0cnVlO1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChjbGFzc05hbWUgPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICBzaXplID0gYS5sZW5ndGg7XG4gICAgICByZXN1bHQgPSBzaXplID09IGIubGVuZ3RoO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID0gZXEoYVtzaXplXSwgYltzaXplXSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgKGFDdG9yIGluc3RhbmNlb2YgYUN0b3IpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiAoYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgZm9yICh2YXIga2V5IGluIGEpIHtcbiAgICAgICAgaWYgKF8uaGFzKGEsIGtleSkpIHtcbiAgICAgICAgICAvLyBDb3VudCB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlci5cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBfLmhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGZvciAoa2V5IGluIGIpIHtcbiAgICAgICAgICBpZiAoXy5oYXMoYiwga2V5KSAmJiAhKHNpemUtLSkpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9ICFzaXplO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucG9wKCk7XG4gICAgYlN0YWNrLnBvcCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbiB0byBjaGVjayBpZiB0d28gb2JqZWN0cyBhcmUgZXF1YWwuXG4gIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gZXEoYSwgYiwgW10sIFtdKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD9cbiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IE9iamVjdChvYmopO1xuICB9O1xuXG4gIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLlxuICBlYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiAhIShvYmogJiYgXy5oYXMob2JqLCAnY2FsbGVlJykpO1xuICAgIH07XG4gIH1cblxuICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuXG4gIGlmICh0eXBlb2YgKC8uLykgIT09ICdmdW5jdGlvbicpIHtcbiAgICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTtcbiAgfTtcblxuICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IChOYU4gaXMgdGhlIG9ubHkgbnVtYmVyIHdoaWNoIGRvZXMgbm90IGVxdWFsIGl0c2VsZikuXG4gIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIG9iaiAhPSArb2JqO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuP1xuICBfLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSBudWxsO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdG9ycy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLlxuICBfLnRpbWVzID0gZnVuY3Rpb24obiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgYWNjdW0gPSBBcnJheShuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZW50aXR5TWFwID0ge1xuICAgIGVzY2FwZToge1xuICAgICAgJyYnOiAnJmFtcDsnLFxuICAgICAgJzwnOiAnJmx0OycsXG4gICAgICAnPic6ICcmZ3Q7JyxcbiAgICAgICdcIic6ICcmcXVvdDsnLFxuICAgICAgXCInXCI6ICcmI3gyNzsnLFxuICAgICAgJy8nOiAnJiN4MkY7J1xuICAgIH1cbiAgfTtcbiAgZW50aXR5TWFwLnVuZXNjYXBlID0gXy5pbnZlcnQoZW50aXR5TWFwLmVzY2FwZSk7XG5cbiAgLy8gUmVnZXhlcyBjb250YWluaW5nIHRoZSBrZXlzIGFuZCB2YWx1ZXMgbGlzdGVkIGltbWVkaWF0ZWx5IGFib3ZlLlxuICB2YXIgZW50aXR5UmVnZXhlcyA9IHtcbiAgICBlc2NhcGU6ICAgbmV3IFJlZ0V4cCgnWycgKyBfLmtleXMoZW50aXR5TWFwLmVzY2FwZSkuam9pbignJykgKyAnXScsICdnJyksXG4gICAgdW5lc2NhcGU6IG5ldyBSZWdFeHAoJygnICsgXy5rZXlzKGVudGl0eU1hcC51bmVzY2FwZSkuam9pbignfCcpICsgJyknLCAnZycpXG4gIH07XG5cbiAgLy8gRnVuY3Rpb25zIGZvciBlc2NhcGluZyBhbmQgdW5lc2NhcGluZyBzdHJpbmdzIHRvL2Zyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuICBfLmVhY2goWydlc2NhcGUnLCAndW5lc2NhcGUnXSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgX1ttZXRob2RdID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBpZiAoc3RyaW5nID09IG51bGwpIHJldHVybiAnJztcbiAgICAgIHJldHVybiAoJycgKyBzdHJpbmcpLnJlcGxhY2UoZW50aXR5UmVnZXhlc1ttZXRob2RdLCBmdW5jdGlvbihtYXRjaCkge1xuICAgICAgICByZXR1cm4gZW50aXR5TWFwW21ldGhvZF1bbWF0Y2hdO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gSWYgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBwcm9wZXJ0eSBpcyBhIGZ1bmN0aW9uIHRoZW4gaW52b2tlIGl0O1xuICAvLyBvdGhlcndpc2UsIHJldHVybiBpdC5cbiAgXy5yZXN1bHQgPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBvYmplY3RbcHJvcGVydHldO1xuICAgIHJldHVybiBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChfLmZ1bmN0aW9ucyhvYmopLCBmdW5jdGlvbihuYW1lKXtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZSAgICA6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xcc1xcU10rPyklPi9nXG4gIH07XG5cbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzXG4gIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcblxuICAvLyBDZXJ0YWluIGNoYXJhY3RlcnMgbmVlZCB0byBiZSBlc2NhcGVkIHNvIHRoYXQgdGhleSBjYW4gYmUgcHV0IGludG8gYVxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cbiAgdmFyIGVzY2FwZXMgPSB7XG4gICAgXCInXCI6ICAgICAgXCInXCIsXG4gICAgJ1xcXFwnOiAgICAgJ1xcXFwnLFxuICAgICdcXHInOiAgICAgJ3InLFxuICAgICdcXG4nOiAgICAgJ24nLFxuICAgICdcXHQnOiAgICAgJ3QnLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICB2YXIgZXNjYXBlciA9IC9cXFxcfCd8XFxyfFxcbnxcXHR8XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLFxuICAvLyBhbmQgY29ycmVjdGx5IGVzY2FwZXMgcXVvdGVzIHdpdGhpbiBpbnRlcnBvbGF0ZWQgY29kZS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIGRhdGEsIHNldHRpbmdzKSB7XG4gICAgdmFyIHJlbmRlcjtcbiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xuXG4gICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgICAgICAucmVwbGFjZShlc2NhcGVyLCBmdW5jdGlvbihtYXRjaCkgeyByZXR1cm4gJ1xcXFwnICsgZXNjYXBlc1ttYXRjaF07IH0pO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9XG4gICAgICBpZiAoZXZhbHVhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlICsgXCJcXG5fX3ArPSdcIjtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xcbicgKyBzb3VyY2UgKyAnfVxcbic7XG5cbiAgICBzb3VyY2UgPSBcInZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixcIiArXG4gICAgICBcInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XFxuXCIgK1xuICAgICAgc291cmNlICsgXCJyZXR1cm4gX19wO1xcblwiO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlbmRlciA9IG5ldyBGdW5jdGlvbihzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJywgJ18nLCBzb3VyY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSkgcmV0dXJuIHJlbmRlcihkYXRhLCBfKTtcbiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIChzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJykgKyAnKXtcXG4nICsgc291cmNlICsgJ30nO1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9O1xuXG4gIC8vIEFkZCBhIFwiY2hhaW5cIiBmdW5jdGlvbiwgd2hpY2ggd2lsbCBkZWxlZ2F0ZSB0byB0aGUgd3JhcHBlci5cbiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfKG9iaikuY2hhaW4oKTtcbiAgfTtcblxuICAvLyBPT1BcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0XG4gIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLlxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICBfLm1peGluKF8pO1xuXG4gIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIGVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT0gJ3NoaWZ0JyB8fCBuYW1lID09ICdzcGxpY2UnKSAmJiBvYmoubGVuZ3RoID09PSAwKSBkZWxldGUgb2JqWzBdO1xuICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIGVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgXy5leHRlbmQoXy5wcm90b3R5cGUsIHtcblxuICAgIC8vIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbiAgICBjaGFpbjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jaGFpbiA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gICAgfVxuXG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4vKmdsb2JhbCBfOiBmYWxzZSwgJDogZmFsc2UsIGxvY2FsU3RvcmFnZTogZmFsc2UsIHByb2Nlc3M6IHRydWUsXG4gIFhNTEh0dHBSZXF1ZXN0OiBmYWxzZSwgWERvbWFpblJlcXVlc3Q6IGZhbHNlLCBleHBvcnRzOiBmYWxzZSxcbiAgcmVxdWlyZTogZmFsc2UsIHNldFRpbWVvdXQ6IHRydWUgKi9cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICAvKipcbiAgICogQ29udGFpbnMgYWxsIFBhcnNlIEFQSSBjbGFzc2VzIGFuZCBmdW5jdGlvbnMuXG4gICAqIEBuYW1lIFBhcnNlXG4gICAqIEBuYW1lc3BhY2VcbiAgICpcbiAgICogQ29udGFpbnMgYWxsIFBhcnNlIEFQSSBjbGFzc2VzIGFuZCBmdW5jdGlvbnMuXG4gICAqL1xuICB2YXIgUGFyc2UgPSByb290LlBhcnNlO1xuXG4gIHZhciByZXEgPSB0eXBlb2YocmVxdWlyZSkgPT09ICdmdW5jdGlvbicgPyByZXF1aXJlIDogbnVsbDtcbiAgLy8gTG9hZCByZWZlcmVuY2VzIHRvIG90aGVyIGRlcGVuZGVuY2llc1xuICBpZiAodHlwZW9mKFhNTEh0dHBSZXF1ZXN0KSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBQYXJzZS5YTUxIdHRwUmVxdWVzdCA9IFhNTEh0dHBSZXF1ZXN0O1xuICB9IGVsc2UgaWYgKHR5cGVvZihyZXF1aXJlKSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mKHJlcXVpcmUuZW5zdXJlKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBQYXJzZS5YTUxIdHRwUmVxdWVzdCA9IHJlcSgneG1saHR0cHJlcXVlc3QnKS5YTUxIdHRwUmVxdWVzdDtcbiAgfVxuICAvLyBJbXBvcnQgUGFyc2UncyBsb2NhbCBjb3B5IG9mIHVuZGVyc2NvcmUuXG4gIGlmICh0eXBlb2YoZXhwb3J0cykgIT09ICd1bmRlZmluZWQnICYmIGV4cG9ydHMuXykge1xuICAgIC8vIFdlJ3JlIHJ1bm5pbmcgaW4gYSBDb21tb25KUyBlbnZpcm9ubWVudFxuICAgIFBhcnNlLl8gPSBleHBvcnRzLl8ubm9Db25mbGljdCgpO1xuICAgIGV4cG9ydHMuUGFyc2UgPSBQYXJzZTtcbiAgfSBlbHNlIHtcbiAgICBQYXJzZS5fID0gXy5ub0NvbmZsaWN0KCk7XG4gIH1cblxuICAvLyBJZiBqUXVlcnkgb3IgWmVwdG8gaGFzIGJlZW4gaW5jbHVkZWQsIGdyYWIgYSByZWZlcmVuY2UgdG8gaXQuXG4gIGlmICh0eXBlb2YoJCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBQYXJzZS4kID0gJDtcbiAgfVxuXG4gIC8vIEhlbHBlcnNcbiAgLy8gLS0tLS0tLVxuXG4gIC8vIFNoYXJlZCBlbXB0eSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBhaWQgaW4gcHJvdG90eXBlLWNoYWluIGNyZWF0aW9uLlxuICB2YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge307XG5cbiAgLy8gVE9ETzogZml4IHRoaXMgc28gdGhhdCBQYXJzZU9iamVjdHMgYXJlbid0IGFsbCBjYWxsZWQgXCJjaGlsZFwiIGluIGRlYnVnZ2VyLlxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29ycmVjdGx5IHNldCB1cCB0aGUgcHJvdG90eXBlIGNoYWluLCBmb3Igc3ViY2xhc3Nlcy5cbiAgLy8gU2ltaWxhciB0byBgZ29vZy5pbmhlcml0c2AsIGJ1dCB1c2VzIGEgaGFzaCBvZiBwcm90b3R5cGUgcHJvcGVydGllcyBhbmRcbiAgLy8gY2xhc3MgcHJvcGVydGllcyB0byBiZSBleHRlbmRlZC5cbiAgdmFyIGluaGVyaXRzID0gZnVuY3Rpb24ocGFyZW50LCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIHZhciBjaGlsZDtcblxuICAgIC8vIFRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIG5ldyBzdWJjbGFzcyBpcyBlaXRoZXIgZGVmaW5lZCBieSB5b3VcbiAgICAvLyAodGhlIFwiY29uc3RydWN0b3JcIiBwcm9wZXJ0eSBpbiB5b3VyIGBleHRlbmRgIGRlZmluaXRpb24pLCBvciBkZWZhdWx0ZWRcbiAgICAvLyBieSB1cyB0byBzaW1wbHkgY2FsbCB0aGUgcGFyZW50J3MgY29uc3RydWN0b3IuXG4gICAgaWYgKHByb3RvUHJvcHMgJiYgcHJvdG9Qcm9wcy5oYXNPd25Qcm9wZXJ0eSgnY29uc3RydWN0b3InKSkge1xuICAgICAgY2hpbGQgPSBwcm90b1Byb3BzLmNvbnN0cnVjdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQGlnbm9yZSAqL1xuICAgICAgY2hpbGQgPSBmdW5jdGlvbigpeyBwYXJlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgICB9XG5cbiAgICAvLyBJbmhlcml0IGNsYXNzIChzdGF0aWMpIHByb3BlcnRpZXMgZnJvbSBwYXJlbnQuXG4gICAgUGFyc2UuXy5leHRlbmQoY2hpbGQsIHBhcmVudCk7XG5cbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBjaGFpbiB0byBpbmhlcml0IGZyb20gYHBhcmVudGAsIHdpdGhvdXQgY2FsbGluZ1xuICAgIC8vIGBwYXJlbnRgJ3MgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgRW1wdHlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlO1xuICAgIGNoaWxkLnByb3RvdHlwZSA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG5cbiAgICAvLyBBZGQgcHJvdG90eXBlIHByb3BlcnRpZXMgKGluc3RhbmNlIHByb3BlcnRpZXMpIHRvIHRoZSBzdWJjbGFzcyxcbiAgICAvLyBpZiBzdXBwbGllZC5cbiAgICBpZiAocHJvdG9Qcm9wcykge1xuICAgICAgUGFyc2UuXy5leHRlbmQoY2hpbGQucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgc3RhdGljIHByb3BlcnRpZXMgdG8gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLCBpZiBzdXBwbGllZC5cbiAgICBpZiAoc3RhdGljUHJvcHMpIHtcbiAgICAgIFBhcnNlLl8uZXh0ZW5kKGNoaWxkLCBzdGF0aWNQcm9wcyk7XG4gICAgfVxuXG4gICAgLy8gQ29ycmVjdGx5IHNldCBjaGlsZCdzIGBwcm90b3R5cGUuY29uc3RydWN0b3JgLlxuICAgIGNoaWxkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNoaWxkO1xuXG4gICAgLy8gU2V0IGEgY29udmVuaWVuY2UgcHJvcGVydHkgaW4gY2FzZSB0aGUgcGFyZW50J3MgcHJvdG90eXBlIGlzXG4gICAgLy8gbmVlZGVkIGxhdGVyLlxuICAgIGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH07XG5cbiAgLy8gU2V0IHRoZSBzZXJ2ZXIgZm9yIFBhcnNlIHRvIHRhbGsgdG8uXG4gIFBhcnNlLnNlcnZlclVSTCA9IFwiaHR0cHM6Ly9hcGkucGFyc2UuY29tXCI7XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB3ZSBhcmUgcnVubmluZyBpbiBOb2RlLmpzLlxuICBpZiAodHlwZW9mKHByb2Nlc3MpICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICBwcm9jZXNzLnZlcnNpb25zICYmXG4gICAgICBwcm9jZXNzLnZlcnNpb25zLm5vZGUpIHtcbiAgICBQYXJzZS5faXNOb2RlID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIGZpcnN0IHRvIHNldCB1cCB5b3VyIGF1dGhlbnRpY2F0aW9uIHRva2VucyBmb3IgUGFyc2UuXG4gICAqIFlvdSBjYW4gZ2V0IHlvdXIga2V5cyBmcm9tIHRoZSBEYXRhIEJyb3dzZXIgb24gcGFyc2UuY29tLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXBwbGljYXRpb25JZCBZb3VyIFBhcnNlIEFwcGxpY2F0aW9uIElELlxuICAgKiBAcGFyYW0ge1N0cmluZ30gamF2YVNjcmlwdEtleSBZb3VyIFBhcnNlIEphdmFTY3JpcHQgS2V5LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWFzdGVyS2V5IChvcHRpb25hbCkgWW91ciBQYXJzZSBNYXN0ZXIgS2V5LiAoTm9kZS5qcyBvbmx5ISlcbiAgICovXG4gIFBhcnNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihhcHBsaWNhdGlvbklkLCBqYXZhU2NyaXB0S2V5LCBtYXN0ZXJLZXkpIHtcbiAgICBpZiAobWFzdGVyS2V5KSB7XG4gICAgICB0aHJvdyBcIlBhcnNlLmluaXRpYWxpemUoKSB3YXMgcGFzc2VkIGEgTWFzdGVyIEtleSwgd2hpY2ggaXMgb25seSBcIiArXG4gICAgICAgIFwiYWxsb3dlZCBmcm9tIHdpdGhpbiBOb2RlLmpzLlwiO1xuICAgIH1cbiAgICBQYXJzZS5faW5pdGlhbGl6ZShhcHBsaWNhdGlvbklkLCBqYXZhU2NyaXB0S2V5KTtcbiAgfTtcblxuICAvKipcbiAgICogQ2FsbCB0aGlzIG1ldGhvZCBmaXJzdCB0byBzZXQgdXAgbWFzdGVyIGF1dGhlbnRpY2F0aW9uIHRva2VucyBmb3IgUGFyc2UuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGZvciBQYXJzZSdzIG93biBwcml2YXRlIHVzZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGFwcGxpY2F0aW9uSWQgWW91ciBQYXJzZSBBcHBsaWNhdGlvbiBJRC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGphdmFTY3JpcHRLZXkgWW91ciBQYXJzZSBKYXZhU2NyaXB0IEtleS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1hc3RlcktleSBZb3VyIFBhcnNlIE1hc3RlciBLZXkuXG4gICAqL1xuICBQYXJzZS5faW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKGFwcGxpY2F0aW9uSWQsIGphdmFTY3JpcHRLZXksIG1hc3RlcktleSkge1xuICAgIFBhcnNlLmFwcGxpY2F0aW9uSWQgPSBhcHBsaWNhdGlvbklkO1xuICAgIFBhcnNlLmphdmFTY3JpcHRLZXkgPSBqYXZhU2NyaXB0S2V5O1xuICAgIFBhcnNlLm1hc3RlcktleSA9IG1hc3RlcktleTtcbiAgICBQYXJzZS5fdXNlTWFzdGVyS2V5ID0gZmFsc2U7XG4gIH07XG5cbiAgLy8gSWYgd2UncmUgcnVubmluZyBpbiBub2RlLmpzLCBhbGxvdyB1c2luZyB0aGUgbWFzdGVyIGtleS5cbiAgaWYgKFBhcnNlLl9pc05vZGUpIHtcbiAgICBQYXJzZS5pbml0aWFsaXplID0gUGFyc2UuX2luaXRpYWxpemU7XG5cbiAgICBQYXJzZS5DbG91ZCA9IFBhcnNlLkNsb3VkIHx8IHt9O1xuICAgIC8qKlxuICAgICAqIFN3aXRjaGVzIHRoZSBQYXJzZSBTREsgdG8gdXNpbmcgdGhlIE1hc3RlciBrZXkuICBUaGUgTWFzdGVyIGtleSBncmFudHNcbiAgICAgKiBwcml2ZWxlZ2VkIGFjY2VzcyB0byB0aGUgZGF0YSBpbiBQYXJzZSBhbmQgY2FuIGJlIHVzZWQgdG8gYnlwYXNzIEFDTHMgYW5kXG4gICAgICogb3RoZXIgcmVzdHJpY3Rpb25zIHRoYXQgYXJlIGFwcGxpZWQgdG8gdGhlIGNsaWVudCBTREtzLlxuICAgICAqIDxwPjxzdHJvbmc+PGVtPkF2YWlsYWJsZSBpbiBDbG91ZCBDb2RlIGFuZCBOb2RlLmpzIG9ubHkuPC9lbT48L3N0cm9uZz5cbiAgICAgKiA8L3A+XG4gICAgICovXG4gICAgUGFyc2UuQ2xvdWQudXNlTWFzdGVyS2V5ID0gZnVuY3Rpb24oKSB7XG4gICAgICBQYXJzZS5fdXNlTWFzdGVyS2V5ID0gdHJ1ZTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcHJlZml4IGZvciBTdG9yYWdlIGtleXMgdXNlZCBieSB0aGlzIGluc3RhbmNlIG9mIFBhcnNlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBUaGUgcmVsYXRpdmUgc3VmZml4IHRvIGFwcGVuZCB0byBpdC5cbiAgICogICAgIG51bGwgb3IgdW5kZWZpbmVkIGlzIHRyZWF0ZWQgYXMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgZnVsbCBrZXkgbmFtZS5cbiAgICovXG4gIFBhcnNlLl9nZXRQYXJzZVBhdGggPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgaWYgKCFQYXJzZS5hcHBsaWNhdGlvbklkKSB7XG4gICAgICB0aHJvdyBcIllvdSBuZWVkIHRvIGNhbGwgUGFyc2UuaW5pdGlhbGl6ZSBiZWZvcmUgdXNpbmcgUGFyc2UuXCI7XG4gICAgfVxuICAgIGlmICghcGF0aCkge1xuICAgICAgcGF0aCA9IFwiXCI7XG4gICAgfVxuICAgIGlmICghUGFyc2UuXy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgdGhyb3cgXCJUcmllZCB0byBnZXQgYSBTdG9yYWdlIHBhdGggdGhhdCB3YXNuJ3QgYSBTdHJpbmcuXCI7XG4gICAgfVxuICAgIGlmIChwYXRoWzBdID09PSBcIi9cIikge1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICByZXR1cm4gXCJQYXJzZS9cIiArIFBhcnNlLmFwcGxpY2F0aW9uSWQgKyBcIi9cIiArIHBhdGg7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgdW5pcXVlIHN0cmluZyBmb3IgdGhpcyBhcHAgb25cbiAgICogdGhpcyBtYWNoaW5lLlxuICAgKiBHZXRzIHJlc2V0IHdoZW4gU3RvcmFnZSBpcyBjbGVhcmVkLlxuICAgKi9cbiAgUGFyc2UuX2luc3RhbGxhdGlvbklkID0gbnVsbDtcbiAgUGFyc2UuX2dldEluc3RhbGxhdGlvbklkID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gU2VlIGlmIGl0J3MgY2FjaGVkIGluIFJBTS5cbiAgICBpZiAoUGFyc2UuX2luc3RhbGxhdGlvbklkKSB7XG4gICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5hcyhQYXJzZS5faW5zdGFsbGF0aW9uSWQpO1xuICAgIH1cblxuICAgIC8vIFRyeSB0byBnZXQgaXQgZnJvbSBTdG9yYWdlLlxuICAgIHZhciBwYXRoID0gUGFyc2UuX2dldFBhcnNlUGF0aChcImluc3RhbGxhdGlvbklkXCIpO1xuICAgIHJldHVybiAoUGFyc2UuU3RvcmFnZS5nZXRJdGVtQXN5bmMocGF0aClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIFBhcnNlLl9pbnN0YWxsYXRpb25JZCA9IHZhbHVlO1xuXG4gICAgICAgIGlmICghUGFyc2UuX2luc3RhbGxhdGlvbklkIHx8IFBhcnNlLl9pbnN0YWxsYXRpb25JZCA9PT0gXCJcIikge1xuICAgICAgICAgIC8vIEl0IHdhc24ndCBpbiBTdG9yYWdlLCBzbyBjcmVhdGUgYSBuZXcgb25lLlxuICAgICAgICAgIHZhciBoZXhPY3RldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgTWF0aC5mbG9vcigoMStNYXRoLnJhbmRvbSgpKSoweDEwMDAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH07XG4gICAgICAgICAgUGFyc2UuX2luc3RhbGxhdGlvbklkID0gKFxuICAgICAgICAgICAgaGV4T2N0ZXQoKSArIGhleE9jdGV0KCkgKyBcIi1cIiArXG4gICAgICAgICAgICBoZXhPY3RldCgpICsgXCItXCIgK1xuICAgICAgICAgICAgaGV4T2N0ZXQoKSArIFwiLVwiICtcbiAgICAgICAgICAgIGhleE9jdGV0KCkgKyBcIi1cIiArXG4gICAgICAgICAgICBoZXhPY3RldCgpICsgaGV4T2N0ZXQoKSArIGhleE9jdGV0KCkpO1xuICAgICAgICAgIHJldHVybiBQYXJzZS5TdG9yYWdlLnNldEl0ZW1Bc3luYyhwYXRoLCBQYXJzZS5faW5zdGFsbGF0aW9uSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuYXMoUGFyc2UuX2luc3RhbGxhdGlvbklkKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfTtcblxuICBQYXJzZS5fcGFyc2VEYXRlID0gZnVuY3Rpb24oaXNvODYwMSkge1xuICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKFxuICAgICAgXCJeKFswLTldezEsNH0pLShbMC05XXsxLDJ9KS0oWzAtOV17MSwyfSlcIiArIFwiVFwiICtcbiAgICAgIFwiKFswLTldezEsMn0pOihbMC05XXsxLDJ9KTooWzAtOV17MSwyfSlcIiArXG4gICAgICBcIiguKFswLTldKykpP1wiICsgXCJaJFwiKTtcbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhpc284NjAxKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgeWVhciA9IG1hdGNoWzFdIHx8IDA7XG4gICAgdmFyIG1vbnRoID0gKG1hdGNoWzJdIHx8IDEpIC0gMTtcbiAgICB2YXIgZGF5ID0gbWF0Y2hbM10gfHwgMDtcbiAgICB2YXIgaG91ciA9IG1hdGNoWzRdIHx8IDA7XG4gICAgdmFyIG1pbnV0ZSA9IG1hdGNoWzVdIHx8IDA7XG4gICAgdmFyIHNlY29uZCA9IG1hdGNoWzZdIHx8IDA7XG4gICAgdmFyIG1pbGxpID0gbWF0Y2hbOF0gfHwgMDtcblxuICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGkpKTtcbiAgfTtcblxuICBQYXJzZS5fYWpheElFOCA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBkYXRhKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgUGFyc2UuUHJvbWlzZSgpO1xuICAgIHZhciB4ZHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB4ZHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICB0cnkge1xuICAgICAgICByZXNwb25zZSA9IEpTT04ucGFyc2UoeGRyLnJlc3BvbnNlVGV4dCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHByb21pc2UucmVqZWN0KGUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgIHByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB4ZHIub25lcnJvciA9IHhkci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIExldCdzIGZha2UgYSByZWFsIGVycm9yIG1lc3NhZ2UuXG4gICAgICB2YXIgZmFrZVJlc3BvbnNlID0ge1xuICAgICAgICByZXNwb25zZVRleHQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBjb2RlOiBQYXJzZS5FcnJvci5YX0RPTUFJTl9SRVFVRVNULFxuICAgICAgICAgIGVycm9yOiBcIklFJ3MgWERvbWFpblJlcXVlc3QgZG9lcyBub3Qgc3VwcGx5IGVycm9yIGluZm8uXCJcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgICBwcm9taXNlLnJlamVjdChmYWtlUmVzcG9uc2UpO1xuICAgIH07XG4gICAgeGRyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHt9O1xuICAgIHhkci5vcGVuKG1ldGhvZCwgdXJsKTtcbiAgICB4ZHIuc2VuZChkYXRhKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBQYXJzZS5fdXNlWERvbWFpblJlcXVlc3QgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mKFhEb21haW5SZXF1ZXN0KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgLy8gV2UncmUgaW4gSUUgOCsuXG4gICAgICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCkpIHtcbiAgICAgICAgLy8gV2UncmUgaW4gSUUgMTArLlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vIFRPRE8oa2xpbXQpOiBHZXQgcmlkIG9mIHN1Y2Nlc3MvZXJyb3IgdXNhZ2UgaW4gd2Vic2l0ZS5cbiAgUGFyc2UuX2FqYXggPSBmdW5jdGlvbihtZXRob2QsIHVybCwgZGF0YSwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsXG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuXG4gICAgaWYgKFBhcnNlLl91c2VYRG9tYWluUmVxdWVzdCgpKSB7XG4gICAgICByZXR1cm4gUGFyc2UuX2FqYXhJRTgobWV0aG9kLCB1cmwsIGRhdGEpLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlID0gbmV3IFBhcnNlLlByb21pc2UoKTtcbiAgICB2YXIgYXR0ZW1wdHMgPSAwO1xuXG4gICAgdmFyIGRpc3BhdGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaGFuZGxlZCA9IGZhbHNlO1xuICAgICAgdmFyIHhociA9IG5ldyBQYXJzZS5YTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmIChoYW5kbGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlLCB4aHIuc3RhdHVzLCB4aHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA+PSA1MDApIHsgLy8gUmV0cnkgb24gNVhYXG4gICAgICAgICAgICBpZiAoKythdHRlbXB0cyA8IDUpIHtcbiAgICAgICAgICAgICAgLy8gRXhwb25lbnRpYWxseS1ncm93aW5nIGRlbGF5XG4gICAgICAgICAgICAgIHZhciBkZWxheSA9IE1hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgTWF0aC5yYW5kb20oKSAqIDEyNSAqIE1hdGgucG93KDIsIGF0dGVtcHRzKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGRpc3BhdGNoLCBkZWxheSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBBZnRlciA1IHJldHJpZXMsIGZhaWxcbiAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoeGhyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoeGhyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9wbGFpbicpOyAgLy8gYXZvaWQgcHJlLWZsaWdodC5cbiAgICAgIGlmIChQYXJzZS5faXNOb2RlKSB7XG4gICAgICAgIC8vIEFkZCBhIHNwZWNpYWwgdXNlciBhZ2VudCBqdXN0IGZvciByZXF1ZXN0IGZyb20gbm9kZS5qcy5cbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJVc2VyLUFnZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUGFyc2UvXCIgKyBQYXJzZS5WRVJTSU9OICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgKE5vZGVKUyBcIiArIHByb2Nlc3MudmVyc2lvbnMubm9kZSArIFwiKVwiKTtcbiAgICAgIH1cbiAgICAgIHhoci5zZW5kKGRhdGEpO1xuICAgIH07XG5cbiAgICBkaXNwYXRjaCgpO1xuICAgIHJldHVybiBwcm9taXNlLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpOyBcbiAgfTtcblxuICAvLyBBIHNlbGYtcHJvcGFnYXRpbmcgZXh0ZW5kIGZ1bmN0aW9uLlxuICBQYXJzZS5fZXh0ZW5kID0gZnVuY3Rpb24ocHJvdG9Qcm9wcywgY2xhc3NQcm9wcykge1xuICAgIHZhciBjaGlsZCA9IGluaGVyaXRzKHRoaXMsIHByb3RvUHJvcHMsIGNsYXNzUHJvcHMpO1xuICAgIGNoaWxkLmV4dGVuZCA9IHRoaXMuZXh0ZW5kO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfTtcblxuICAvKipcbiAgICogT3B0aW9uczpcbiAgICogICByb3V0ZTogaXMgY2xhc3NlcywgdXNlcnMsIGxvZ2luLCBldGMuXG4gICAqICAgb2JqZWN0SWQ6IG51bGwgaWYgdGhlcmUgaXMgbm8gYXNzb2NpYXRlZCBvYmplY3RJZC5cbiAgICogICBtZXRob2Q6IHRoZSBodHRwIG1ldGhvZCBmb3IgdGhlIFJFU1QgQVBJLlxuICAgKiAgIGRhdGFPYmplY3Q6IHRoZSBwYXlsb2FkIGFzIGFuIG9iamVjdCwgb3IgbnVsbCBpZiB0aGVyZSBpcyBub25lLlxuICAgKiAgIHVzZU1hc3RlcktleTogb3ZlcnJpZGVzIHdoZXRoZXIgdG8gdXNlIHRoZSBtYXN0ZXIga2V5IGlmIHNldC5cbiAgICogQGlnbm9yZVxuICAgKi9cbiAgUGFyc2UuX3JlcXVlc3QgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIHJvdXRlID0gb3B0aW9ucy5yb3V0ZTtcbiAgICB2YXIgY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc05hbWU7XG4gICAgdmFyIG9iamVjdElkID0gb3B0aW9ucy5vYmplY3RJZDtcbiAgICB2YXIgbWV0aG9kID0gb3B0aW9ucy5tZXRob2Q7XG4gICAgdmFyIHVzZU1hc3RlcktleSA9IG9wdGlvbnMudXNlTWFzdGVyS2V5O1xuICAgIHZhciBzZXNzaW9uVG9rZW4gPSBvcHRpb25zLnNlc3Npb25Ub2tlbjtcbiAgICB2YXIgZGF0YU9iamVjdCA9IG9wdGlvbnMuZGF0YTtcblxuICAgIGlmICghUGFyc2UuYXBwbGljYXRpb25JZCkge1xuICAgICAgdGhyb3cgXCJZb3UgbXVzdCBzcGVjaWZ5IHlvdXIgYXBwbGljYXRpb25JZCB1c2luZyBQYXJzZS5pbml0aWFsaXplLlwiO1xuICAgIH1cblxuICAgIGlmICghUGFyc2UuamF2YVNjcmlwdEtleSAmJiAhUGFyc2UubWFzdGVyS2V5KSB7XG4gICAgICB0aHJvdyBcIllvdSBtdXN0IHNwZWNpZnkgYSBrZXkgdXNpbmcgUGFyc2UuaW5pdGlhbGl6ZS5cIjtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBXZSBjYW4gcmVtb3ZlIHRoaXMgY2hlY2sgbGF0ZXIsIGJ1dCBpdCdzIHVzZWZ1bCBmb3IgZGV2ZWxvcG1lbnQuXG4gICAgaWYgKHJvdXRlICE9PSBcImJhdGNoXCIgJiZcbiAgICAgICAgcm91dGUgIT09IFwiY2xhc3Nlc1wiICYmXG4gICAgICAgIHJvdXRlICE9PSBcImV2ZW50c1wiICYmXG4gICAgICAgIHJvdXRlICE9PSBcImZpbGVzXCIgJiZcbiAgICAgICAgcm91dGUgIT09IFwiZnVuY3Rpb25zXCIgJiZcbiAgICAgICAgcm91dGUgIT09IFwibG9naW5cIiAmJlxuICAgICAgICByb3V0ZSAhPT0gXCJsb2dvdXRcIiAmJlxuICAgICAgICByb3V0ZSAhPT0gXCJwdXNoXCIgJiZcbiAgICAgICAgcm91dGUgIT09IFwicmVxdWVzdFBhc3N3b3JkUmVzZXRcIiAmJlxuICAgICAgICByb3V0ZSAhPT0gXCJyZXN0X3ZlcmlmeV9hbmFseXRpY3NcIiAmJlxuICAgICAgICByb3V0ZSAhPT0gXCJ1c2Vyc1wiICYmXG4gICAgICAgIHJvdXRlICE9PSBcImpvYnNcIiAmJlxuICAgICAgICByb3V0ZSAhPT0gXCJjb25maWdcIiAmJlxuICAgICAgICByb3V0ZSAhPT0gXCJzZXNzaW9uc1wiICYmXG4gICAgICAgIHJvdXRlICE9PSBcInVwZ3JhZGVUb1Jldm9jYWJsZVNlc3Npb25cIikge1xuICAgICAgdGhyb3cgXCJCYWQgcm91dGU6ICdcIiArIHJvdXRlICsgXCInLlwiO1xuICAgIH1cblxuICAgIHZhciB1cmwgPSBQYXJzZS5zZXJ2ZXJVUkw7XG4gICAgaWYgKHVybC5jaGFyQXQodXJsLmxlbmd0aCAtIDEpICE9PSBcIi9cIikge1xuICAgICAgdXJsICs9IFwiL1wiO1xuICAgIH1cbiAgICB1cmwgKz0gXCIxL1wiICsgcm91dGU7XG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgdXJsICs9IFwiL1wiICsgY2xhc3NOYW1lO1xuICAgIH1cbiAgICBpZiAob2JqZWN0SWQpIHtcbiAgICAgIHVybCArPSBcIi9cIiArIG9iamVjdElkO1xuICAgIH1cblxuICAgIGRhdGFPYmplY3QgPSBQYXJzZS5fLmNsb25lKGRhdGFPYmplY3QgfHwge30pO1xuICAgIGlmIChtZXRob2QgIT09IFwiUE9TVFwiKSB7XG4gICAgICBkYXRhT2JqZWN0Ll9tZXRob2QgPSBtZXRob2Q7XG4gICAgICBtZXRob2QgPSBcIlBPU1RcIjtcbiAgICB9XG5cbiAgICBpZiAoUGFyc2UuXy5pc1VuZGVmaW5lZCh1c2VNYXN0ZXJLZXkpKSB7XG4gICAgICB1c2VNYXN0ZXJLZXkgPSBQYXJzZS5fdXNlTWFzdGVyS2V5O1xuICAgIH1cblxuICAgIGRhdGFPYmplY3QuX0FwcGxpY2F0aW9uSWQgPSBQYXJzZS5hcHBsaWNhdGlvbklkO1xuICAgIGlmICghdXNlTWFzdGVyS2V5KSB7XG4gICAgICBkYXRhT2JqZWN0Ll9KYXZhU2NyaXB0S2V5ID0gUGFyc2UuamF2YVNjcmlwdEtleTtcbiAgICB9IGVsc2UgaWYgKCFQYXJzZS5tYXN0ZXJLZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVzZSB0aGUgTWFzdGVyIEtleSwgaXQgaGFzIG5vdCBiZWVuIHByb3ZpZGVkLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhT2JqZWN0Ll9NYXN0ZXJLZXkgPSBQYXJzZS5tYXN0ZXJLZXk7XG4gICAgfVxuXG4gICAgZGF0YU9iamVjdC5fQ2xpZW50VmVyc2lvbiA9IFBhcnNlLlZFUlNJT047XG5cbiAgICByZXR1cm4gUGFyc2UuX2dldEluc3RhbGxhdGlvbklkKCkudGhlbihmdW5jdGlvbihpaWQpIHtcbiAgICAgIGRhdGFPYmplY3QuX0luc3RhbGxhdGlvbklkID0gaWlkO1xuXG4gICAgICBpZiAoc2Vzc2lvblRva2VuKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmFzKHsgX3Nlc3Npb25Ub2tlbjogc2Vzc2lvblRva2VuIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFQYXJzZS5Vc2VyLl9jYW5Vc2VDdXJyZW50VXNlcigpKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmFzKG51bGwpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUGFyc2UuVXNlci5fY3VycmVudEFzeW5jKCk7XG4gICAgfSkudGhlbihmdW5jdGlvbihjdXJyZW50VXNlcikge1xuICAgICAgaWYgKGN1cnJlbnRVc2VyICYmIGN1cnJlbnRVc2VyLl9zZXNzaW9uVG9rZW4pIHtcbiAgICAgICAgZGF0YU9iamVjdC5fU2Vzc2lvblRva2VuID0gY3VycmVudFVzZXIuX3Nlc3Npb25Ub2tlbjtcbiAgICAgIH1cblxuICAgICAgaWYgKFBhcnNlLlVzZXIuX2lzUmV2b2NhYmxlU2Vzc2lvbkVuYWJsZWQpIHtcbiAgICAgICAgZGF0YU9iamVjdC5fUmV2b2NhYmxlU2Vzc2lvbiA9ICcxJztcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhT2JqZWN0KTtcblxuICAgICAgcmV0dXJuIFBhcnNlLl9hamF4KG1ldGhvZCwgdXJsLCBkYXRhKTtcbiAgICB9KS50aGVuKG51bGwsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAvLyBUcmFuc2Zvcm0gdGhlIGVycm9yIGludG8gYW4gaW5zdGFuY2Ugb2YgUGFyc2UuRXJyb3IgYnkgdHJ5aW5nIHRvIHBhcnNlXG4gICAgICAvLyB0aGUgZXJyb3Igc3RyaW5nIGFzIEpTT04uXG4gICAgICB2YXIgZXJyb3I7XG4gICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGVycm9ySlNPTiA9IEpTT04ucGFyc2UocmVzcG9uc2UucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICBlcnJvciA9IG5ldyBQYXJzZS5FcnJvcihlcnJvckpTT04uY29kZSwgZXJyb3JKU09OLmVycm9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIElmIHdlIGZhaWwgdG8gcGFyc2UgdGhlIGVycm9yIHRleHQsIHRoYXQncyBva2F5LlxuICAgICAgICAgIGVycm9yID0gbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sXG4gICAgICAgICAgICAgIFwiUmVjZWl2ZWQgYW4gZXJyb3Igd2l0aCBpbnZhbGlkIEpTT04gZnJvbSBQYXJzZTogXCIgK1xuICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgICBQYXJzZS5FcnJvci5DT05ORUNUSU9OX0ZBSUxFRCxcbiAgICAgICAgICAgIFwiWE1MSHR0cFJlcXVlc3QgZmFpbGVkOiBcIiArIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7XG4gICAgICB9XG4gICAgICAvLyBCeSBleHBsaWNpdGx5IHJldHVybmluZyBhIHJlamVjdGVkIFByb21pc2UsIHRoaXMgd2lsbCB3b3JrIHdpdGhcbiAgICAgIC8vIGVpdGhlciBqUXVlcnkgb3IgUHJvbWlzZXMvQSBzZW1hbnRpY3MuXG4gICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5lcnJvcihlcnJvcik7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBhIHZhbHVlIGZyb20gYSBCYWNrYm9uZSBvYmplY3QgYXMgYSBwcm9wZXJ0eVxuICAvLyBvciBhcyBhIGZ1bmN0aW9uLlxuICBQYXJzZS5fZ2V0VmFsdWUgPSBmdW5jdGlvbihvYmplY3QsIHByb3ApIHtcbiAgICBpZiAoIShvYmplY3QgJiYgb2JqZWN0W3Byb3BdKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBQYXJzZS5fLmlzRnVuY3Rpb24ob2JqZWN0W3Byb3BdKSA/IG9iamVjdFtwcm9wXSgpIDogb2JqZWN0W3Byb3BdO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIHZhbHVlIGluIGEgUGFyc2UgT2JqZWN0IGludG8gdGhlIGFwcHJvcHJpYXRlIHJlcHJlc2VudGF0aW9uLlxuICAgKiBUaGlzIGlzIHRoZSBKUyBlcXVpdmFsZW50IG9mIEphdmEncyBQYXJzZS5tYXliZVJlZmVyZW5jZUFuZEVuY29kZShPYmplY3QpXG4gICAqIGlmIHNlZW5PYmplY3RzIGlzIGZhbHNleS4gT3RoZXJ3aXNlIGFueSBQYXJzZS5PYmplY3RzIG5vdCBpblxuICAgKiBzZWVuT2JqZWN0cyB3aWxsIGJlIGZ1bGx5IGVtYmVkZGVkIHJhdGhlciB0aGFuIGVuY29kZWRcbiAgICogYXMgYSBwb2ludGVyLiAgVGhpcyBhcnJheSB3aWxsIGJlIHVzZWQgdG8gcHJldmVudCBnb2luZyBpbnRvIGFuIGluZmluaXRlXG4gICAqIGxvb3AgYmVjYXVzZSB3ZSBoYXZlIGNpcmN1bGFyIHJlZmVyZW5jZXMuICBJZiBzZWVuT2JqZWN0c1xuICAgKiBpcyBzZXQsIHRoZW4gbm9uZSBvZiB0aGUgUGFyc2UgT2JqZWN0cyB0aGF0IGFyZSBzZXJpYWxpemVkIGNhbiBiZSBkaXJ0eS5cbiAgICovXG4gIFBhcnNlLl9lbmNvZGUgPSBmdW5jdGlvbih2YWx1ZSwgc2Vlbk9iamVjdHMsIGRpc2FsbG93T2JqZWN0cykge1xuICAgIHZhciBfID0gUGFyc2UuXztcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQYXJzZS5PYmplY3QpIHtcbiAgICAgIGlmIChkaXNhbGxvd09iamVjdHMpIHtcbiAgICAgICAgdGhyb3cgXCJQYXJzZS5PYmplY3RzIG5vdCBhbGxvd2VkIGhlcmVcIjtcbiAgICAgIH1cbiAgICAgIGlmICghc2Vlbk9iamVjdHMgfHwgXy5pbmNsdWRlKHNlZW5PYmplY3RzLCB2YWx1ZSkgfHwgIXZhbHVlLl9oYXNEYXRhKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5fdG9Qb2ludGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoIXZhbHVlLmRpcnR5KCkpIHtcbiAgICAgICAgc2Vlbk9iamVjdHMgPSBzZWVuT2JqZWN0cy5jb25jYXQodmFsdWUpO1xuICAgICAgICByZXR1cm4gUGFyc2UuX2VuY29kZSh2YWx1ZS5fdG9GdWxsSlNPTihzZWVuT2JqZWN0cyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZW5PYmplY3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhbGxvd09iamVjdHMpO1xuICAgICAgfVxuICAgICAgdGhyb3cgXCJUcmllZCB0byBzYXZlIGFuIG9iamVjdCB3aXRoIGEgcG9pbnRlciB0byBhIG5ldywgdW5zYXZlZCBvYmplY3QuXCI7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFBhcnNlLkFDTCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSlNPTigpO1xuICAgIH1cbiAgICBpZiAoXy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGVuY29kZSBpbnZhbGlkIERhdGUnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IFwiX190eXBlXCI6IFwiRGF0ZVwiLCBcImlzb1wiOiB2YWx1ZS50b0pTT04oKSB9O1xuICAgIH1cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQYXJzZS5HZW9Qb2ludCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSlNPTigpO1xuICAgIH1cbiAgICBpZiAoXy5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIF8ubWFwKHZhbHVlLCBmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5fZW5jb2RlKHgsIHNlZW5PYmplY3RzLCBkaXNhbGxvd09iamVjdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChfLmlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnNvdXJjZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUGFyc2UuUmVsYXRpb24pIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0pTT04oKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUGFyc2UuT3ApIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0pTT04oKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUGFyc2UuRmlsZSkge1xuICAgICAgaWYgKCF2YWx1ZS51cmwoKSkge1xuICAgICAgICB0aHJvdyBcIlRyaWVkIHRvIHNhdmUgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYW4gdW5zYXZlZCBmaWxlLlwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX190eXBlOiBcIkZpbGVcIixcbiAgICAgICAgbmFtZTogdmFsdWUubmFtZSgpLFxuICAgICAgICB1cmw6IHZhbHVlLnVybCgpXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHZhciBvdXRwdXQgPSB7fTtcbiAgICAgIFBhcnNlLl9vYmplY3RFYWNoKHZhbHVlLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICAgIG91dHB1dFtrXSA9IFBhcnNlLl9lbmNvZGUodiwgc2Vlbk9iamVjdHMsIGRpc2FsbG93T2JqZWN0cyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICAvKipcbiAgICogVGhlIGludmVyc2UgZnVuY3Rpb24gb2YgUGFyc2UuX2VuY29kZS5cbiAgICogVE9ETzogbWFrZSBkZWNvZGUgbm90IG11dGF0ZSB2YWx1ZS5cbiAgICovXG4gIFBhcnNlLl9kZWNvZGUgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdmFyIF8gPSBQYXJzZS5fO1xuICAgIGlmICghXy5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIFBhcnNlLl9hcnJheUVhY2godmFsdWUsIGZ1bmN0aW9uKHYsIGspIHtcbiAgICAgICAgdmFsdWVba10gPSBQYXJzZS5fZGVjb2RlKGssIHYpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFBhcnNlLk9iamVjdCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQYXJzZS5GaWxlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFBhcnNlLk9wKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5fX29wKSB7XG4gICAgICByZXR1cm4gUGFyc2UuT3AuX2RlY29kZSh2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5fX3R5cGUgPT09IFwiUG9pbnRlclwiICYmIHZhbHVlLmNsYXNzTmFtZSkge1xuICAgICAgdmFyIHBvaW50ZXIgPSBQYXJzZS5PYmplY3QuX2NyZWF0ZSh2YWx1ZS5jbGFzc05hbWUpO1xuICAgICAgcG9pbnRlci5fZmluaXNoRmV0Y2goeyBvYmplY3RJZDogdmFsdWUub2JqZWN0SWQgfSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHBvaW50ZXI7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5fX3R5cGUgPT09IFwiT2JqZWN0XCIgJiYgdmFsdWUuY2xhc3NOYW1lKSB7XG4gICAgICAvLyBJdCdzIGFuIE9iamVjdCBpbmNsdWRlZCBpbiBhIHF1ZXJ5IHJlc3VsdC5cbiAgICAgIHZhciBjbGFzc05hbWUgPSB2YWx1ZS5jbGFzc05hbWU7XG4gICAgICBkZWxldGUgdmFsdWUuX190eXBlO1xuICAgICAgZGVsZXRlIHZhbHVlLmNsYXNzTmFtZTtcbiAgICAgIHZhciBvYmplY3QgPSBQYXJzZS5PYmplY3QuX2NyZWF0ZShjbGFzc05hbWUpO1xuICAgICAgb2JqZWN0Ll9maW5pc2hGZXRjaCh2YWx1ZSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbiAgICBpZiAodmFsdWUuX190eXBlID09PSBcIkRhdGVcIikge1xuICAgICAgcmV0dXJuIFBhcnNlLl9wYXJzZURhdGUodmFsdWUuaXNvKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLl9fdHlwZSA9PT0gXCJHZW9Qb2ludFwiKSB7XG4gICAgICByZXR1cm4gbmV3IFBhcnNlLkdlb1BvaW50KHtcbiAgICAgICAgbGF0aXR1ZGU6IHZhbHVlLmxhdGl0dWRlLFxuICAgICAgICBsb25naXR1ZGU6IHZhbHVlLmxvbmdpdHVkZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChrZXkgPT09IFwiQUNMXCIpIHtcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFBhcnNlLkFDTCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFBhcnNlLkFDTCh2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5fX3R5cGUgPT09IFwiUmVsYXRpb25cIikge1xuICAgICAgdmFyIHJlbGF0aW9uID0gbmV3IFBhcnNlLlJlbGF0aW9uKG51bGwsIGtleSk7XG4gICAgICByZWxhdGlvbi50YXJnZXRDbGFzc05hbWUgPSB2YWx1ZS5jbGFzc05hbWU7XG4gICAgICByZXR1cm4gcmVsYXRpb247XG4gICAgfVxuICAgIGlmICh2YWx1ZS5fX3R5cGUgPT09IFwiRmlsZVwiKSB7XG4gICAgICB2YXIgZmlsZSA9IG5ldyBQYXJzZS5GaWxlKHZhbHVlLm5hbWUpO1xuICAgICAgZmlsZS5fdXJsID0gdmFsdWUudXJsO1xuICAgICAgcmV0dXJuIGZpbGU7XG4gICAgfVxuICAgIFBhcnNlLl9vYmplY3RFYWNoKHZhbHVlLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICB2YWx1ZVtrXSA9IFBhcnNlLl9kZWNvZGUoaywgdik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIFBhcnNlLl9hcnJheUVhY2ggPSBQYXJzZS5fLmVhY2g7XG5cbiAgLyoqXG4gICAqIERvZXMgYSBkZWVwIHRyYXZlcnNhbCBvZiBldmVyeSBpdGVtIGluIG9iamVjdCwgY2FsbGluZyBmdW5jIG9uIGV2ZXJ5IG9uZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIHRyYXZlcnNlIGRlZXBseS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZXZlcnkgaXRlbS4gSXQgd2lsbFxuICAgKiAgICAgYmUgcGFzc2VkIHRoZSBpdGVtIGFzIGFuIGFyZ3VtZW50LiBJZiBpdCByZXR1cm5zIGEgdHJ1dGh5IHZhbHVlLCB0aGF0XG4gICAqICAgICB2YWx1ZSB3aWxsIHJlcGxhY2UgdGhlIGl0ZW0gaW4gaXRzIHBhcmVudCBjb250YWluZXIuXG4gICAqIEByZXR1cm5zIHt9IHRoZSByZXN1bHQgb2YgY2FsbGluZyBmdW5jIG9uIHRoZSB0b3AtbGV2ZWwgb2JqZWN0IGl0c2VsZi5cbiAgICovXG4gIFBhcnNlLl90cmF2ZXJzZSA9IGZ1bmN0aW9uKG9iamVjdCwgZnVuYywgc2Vlbikge1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBQYXJzZS5PYmplY3QpIHtcbiAgICAgIHNlZW4gPSBzZWVuIHx8IFtdO1xuICAgICAgaWYgKFBhcnNlLl8uaW5kZXhPZihzZWVuLCBvYmplY3QpID49IDApIHtcbiAgICAgICAgLy8gV2UndmUgYWxyZWFkeSB2aXNpdGVkIHRoaXMgb2JqZWN0IGluIHRoaXMgY2FsbC5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2Vlbi5wdXNoKG9iamVjdCk7XG4gICAgICBQYXJzZS5fdHJhdmVyc2Uob2JqZWN0LmF0dHJpYnV0ZXMsIGZ1bmMsIHNlZW4pO1xuICAgICAgcmV0dXJuIGZ1bmMob2JqZWN0KTtcbiAgICB9XG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFBhcnNlLlJlbGF0aW9uIHx8IG9iamVjdCBpbnN0YW5jZW9mIFBhcnNlLkZpbGUpIHtcbiAgICAgIC8vIE5vdGhpbmcgbmVlZHMgdG8gYmUgZG9uZSwgYnV0IHdlIGRvbid0IHdhbnQgdG8gcmVjdXJzZSBpbnRvIHRoZVxuICAgICAgLy8gb2JqZWN0J3MgcGFyZW50IGluZmluaXRlbHksIHNvIHdlIGNhdGNoIHRoaXMgY2FzZS5cbiAgICAgIHJldHVybiBmdW5jKG9iamVjdCk7XG4gICAgfVxuICAgIGlmIChQYXJzZS5fLmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgUGFyc2UuXy5lYWNoKG9iamVjdCwgZnVuY3Rpb24oY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIHZhciBuZXdDaGlsZCA9IFBhcnNlLl90cmF2ZXJzZShjaGlsZCwgZnVuYywgc2Vlbik7XG4gICAgICAgIGlmIChuZXdDaGlsZCkge1xuICAgICAgICAgIG9iamVjdFtpbmRleF0gPSBuZXdDaGlsZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuYyhvYmplY3QpO1xuICAgIH1cbiAgICBpZiAoUGFyc2UuXy5pc09iamVjdChvYmplY3QpKSB7XG4gICAgICBQYXJzZS5fZWFjaChvYmplY3QsIGZ1bmN0aW9uKGNoaWxkLCBrZXkpIHtcbiAgICAgICAgdmFyIG5ld0NoaWxkID0gUGFyc2UuX3RyYXZlcnNlKGNoaWxkLCBmdW5jLCBzZWVuKTtcbiAgICAgICAgaWYgKG5ld0NoaWxkKSB7XG4gICAgICAgICAgb2JqZWN0W2tleV0gPSBuZXdDaGlsZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuYyhvYmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYyhvYmplY3QpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGxpa2UgXy5lYWNoLCBleGNlcHQ6XG4gICAqICogaXQgZG9lc24ndCB3b3JrIGZvciBzby1jYWxsZWQgYXJyYXktbGlrZSBvYmplY3RzLFxuICAgKiAqIGl0IGRvZXMgd29yayBmb3IgZGljdGlvbmFyaWVzIHdpdGggYSBcImxlbmd0aFwiIGF0dHJpYnV0ZS5cbiAgICovXG4gIFBhcnNlLl9vYmplY3RFYWNoID0gUGFyc2UuX2VhY2ggPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSBQYXJzZS5fO1xuICAgIGlmIChfLmlzT2JqZWN0KG9iaikpIHtcbiAgICAgIF8uZWFjaChfLmtleXMob2JqKSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGNhbGxiYWNrKG9ialtrZXldLCBrZXkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF8uZWFjaChvYmosIGNhbGxiYWNrKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIG51bGwgb3IgdW5kZWZpbmVkLlxuICBQYXJzZS5faXNOdWxsT3JVbmRlZmluZWQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIFBhcnNlLl8uaXNOdWxsKHgpIHx8IFBhcnNlLl8uaXNVbmRlZmluZWQoeCk7XG4gIH07XG59KHRoaXMpKTtcblxuLyogZ2xvYmFsIHJlcXVpcmU6IGZhbHNlLCBsb2NhbFN0b3JhZ2U6IGZhbHNlICovXG4oZnVuY3Rpb24ocm9vdCkge1xuICByb290LlBhcnNlID0gcm9vdC5QYXJzZSB8fCB7fTtcbiAgdmFyIFBhcnNlID0gcm9vdC5QYXJzZTtcbiAgXG4gIHZhciBTdG9yYWdlID0ge1xuICAgIGFzeW5jOiBmYWxzZSxcbiAgfTtcblxuICB2YXIgaGFzTG9jYWxTdG9yYWdlID0gKHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKTtcbiAgaWYgKGhhc0xvY2FsU3RvcmFnZSkge1xuICAgIHRyeSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc3VwcG9ydGVkJywgdHJ1ZSk7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc3VwcG9ydGVkJyk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBoYXNMb2NhbFN0b3JhZ2UgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc0xvY2FsU3RvcmFnZSkge1xuICAgIFN0b3JhZ2UuZ2V0SXRlbSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwYXRoKTtcbiAgICB9O1xuXG4gICAgU3RvcmFnZS5zZXRJdGVtID0gZnVuY3Rpb24ocGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShwYXRoLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFN0b3JhZ2UucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShwYXRoKTtcbiAgICB9O1xuXG4gICAgU3RvcmFnZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgQXN5bmNTdG9yYWdlO1xuICAgIHRyeSB7XG4gICAgICBBc3luY1N0b3JhZ2UgPSBldmFsKFwicmVxdWlyZSgnQXN5bmNTdG9yYWdlJylcIik7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuXG4gICAgICBTdG9yYWdlLmFzeW5jID0gdHJ1ZTtcblxuICAgICAgU3RvcmFnZS5nZXRJdGVtQXN5bmMgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHZhciBwID0gbmV3IFBhcnNlLlByb21pc2UoKTtcbiAgICAgICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ocGF0aCwgZnVuY3Rpb24oZXJyLCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHAucmVqZWN0KGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHAucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9O1xuXG4gICAgICBTdG9yYWdlLnNldEl0ZW1Bc3luYyA9IGZ1bmN0aW9uKHBhdGgsIHZhbHVlKSB7XG4gICAgICAgIHZhciBwID0gbmV3IFBhcnNlLlByb21pc2UoKTtcbiAgICAgICAgQXN5bmNTdG9yYWdlLnNldEl0ZW0ocGF0aCwgdmFsdWUsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHAucmVqZWN0KGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHAucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9O1xuXG4gICAgICBTdG9yYWdlLnJlbW92ZUl0ZW1Bc3luYyA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgdmFyIHAgPSBuZXcgUGFyc2UuUHJvbWlzZSgpO1xuICAgICAgICBBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbShwYXRoLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBwLnJlamVjdChlcnIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwLnJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcDtcbiAgICAgIH07XG5cbiAgICAgIFN0b3JhZ2UuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgQXN5bmNTdG9yYWdlLmNsZWFyKCk7XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHsgfVxuICB9XG4gIGlmICghU3RvcmFnZS5hc3luYyAmJiAhU3RvcmFnZS5nZXRJdGVtKSB7XG4gICAgdmFyIG1lbU1hcCA9IFN0b3JhZ2UuaW5NZW1vcnlNYXAgPSB7fTtcbiAgICBTdG9yYWdlLmdldEl0ZW0gPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgICBpZiAobWVtTWFwLmhhc093blByb3BlcnR5KHBhdGgpKSB7XG4gICAgICAgIHJldHVybiBtZW1NYXBbcGF0aF07XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgU3RvcmFnZS5zZXRJdGVtID0gZnVuY3Rpb24ocGF0aCwgdmFsdWUpIHtcbiAgICAgIG1lbU1hcFtwYXRoXSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFN0b3JhZ2UucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIGRlbGV0ZSBtZW1NYXBbcGF0aF07XG4gICAgfTtcblxuICAgIFN0b3JhZ2UuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBtZW1NYXApIHtcbiAgICAgICAgaWYgKG1lbU1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgZGVsZXRlIG1lbU1hcFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIFdlIGNhbiB1c2Ugc3luY2hyb25vdXMgbWV0aG9kcyBmcm9tIGFzeW5jIHNjZW5hcmlvcywgYnV0IG5vdCB2aWNlLXZlcnNhXG4gIGlmICghU3RvcmFnZS5hc3luYykge1xuICAgIFN0b3JhZ2UuZ2V0SXRlbUFzeW5jID0gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuYXMoXG4gICAgICAgIFN0b3JhZ2UuZ2V0SXRlbShwYXRoKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgU3RvcmFnZS5zZXRJdGVtQXN5bmMgPSBmdW5jdGlvbihwYXRoLCB2YWx1ZSkge1xuICAgICAgU3RvcmFnZS5zZXRJdGVtKHBhdGgsIHZhbHVlKTtcbiAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmFzKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgU3RvcmFnZS5yZW1vdmVJdGVtQXN5bmMgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5hcyhcbiAgICAgICAgU3RvcmFnZS5yZW1vdmVJdGVtKHBhdGgpXG4gICAgICApO1xuICAgIH07XG4gIH1cblxuICBQYXJzZS5TdG9yYWdlID0gU3RvcmFnZTtcblxufSkodGhpcyk7XG5cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICB2YXIgUGFyc2UgPSByb290LlBhcnNlO1xuICB2YXIgXyA9IFBhcnNlLl87XG5cbiAgLyoqXG4gICAqIEBuYW1lc3BhY2UgUHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIFBhcnNlJ3MgbG9nZ2luZyBhbmQgYW5hbHl0aWNzIGJhY2tlbmQuXG4gICAqL1xuICBQYXJzZS5BbmFseXRpY3MgPSBQYXJzZS5BbmFseXRpY3MgfHwge307XG5cbiAgXy5leHRlbmQoUGFyc2UuQW5hbHl0aWNzLCAvKiogQGxlbmRzIFBhcnNlLkFuYWx5dGljcyAqLyB7XG4gICAgLyoqXG4gICAgICogVHJhY2tzIHRoZSBvY2N1cnJlbmNlIG9mIGEgY3VzdG9tIGV2ZW50IHdpdGggYWRkaXRpb25hbCBkaW1lbnNpb25zLlxuICAgICAqIFBhcnNlIHdpbGwgc3RvcmUgYSBkYXRhIHBvaW50IGF0IHRoZSB0aW1lIG9mIGludm9jYXRpb24gd2l0aCB0aGUgZ2l2ZW5cbiAgICAgKiBldmVudCBuYW1lLlxuICAgICAqXG4gICAgICogRGltZW5zaW9ucyB3aWxsIGFsbG93IHNlZ21lbnRhdGlvbiBvZiB0aGUgb2NjdXJyZW5jZXMgb2YgdGhpcyBjdXN0b21cbiAgICAgKiBldmVudC4gS2V5cyBhbmQgdmFsdWVzIHNob3VsZCBiZSB7QGNvZGUgU3RyaW5nfXMsIGFuZCB3aWxsIHRocm93XG4gICAgICogb3RoZXJ3aXNlLlxuICAgICAqXG4gICAgICogVG8gdHJhY2sgYSB1c2VyIHNpZ251cCBhbG9uZyB3aXRoIGFkZGl0aW9uYWwgbWV0YWRhdGEsIGNvbnNpZGVyIHRoZVxuICAgICAqIGZvbGxvd2luZzpcbiAgICAgKiA8cHJlPlxuICAgICAqIHZhciBkaW1lbnNpb25zID0ge1xuICAgICAqICBnZW5kZXI6ICdtJyxcbiAgICAgKiAgc291cmNlOiAnd2ViJyxcbiAgICAgKiAgZGF5VHlwZTogJ3dlZWtlbmQnXG4gICAgICogfTtcbiAgICAgKiBQYXJzZS5BbmFseXRpY3MudHJhY2soJ3NpZ251cCcsIGRpbWVuc2lvbnMpO1xuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogVGhlcmUgaXMgYSBkZWZhdWx0IGxpbWl0IG9mIDggZGltZW5zaW9ucyBwZXIgZXZlbnQgdHJhY2tlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjdXN0b20gZXZlbnQgdG8gcmVwb3J0IHRvIFBhcnNlIGFzXG4gICAgICogaGF2aW5nIGhhcHBlbmVkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkaW1lbnNpb25zIFRoZSBkaWN0aW9uYXJ5IG9mIGluZm9ybWF0aW9uIGJ5IHdoaWNoIHRvXG4gICAgICogc2VnbWVudCB0aGlzIGV2ZW50LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgY2FsbGJhY2sgb2JqZWN0LlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlByb21pc2V9IEEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdoZW4gdGhlIHJvdW5kLXRyaXBcbiAgICAgKiB0byB0aGUgc2VydmVyIGNvbXBsZXRlcy5cbiAgICAgKi9cbiAgICB0cmFjazogZnVuY3Rpb24obmFtZSwgZGltZW5zaW9ucywgb3B0aW9ucykge1xuICAgICAgbmFtZSA9IG5hbWUgfHwgJyc7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1xccyokLywgJycpO1xuICAgICAgaWYgKG5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93ICdBIG5hbWUgZm9yIHRoZSBjdXN0b20gZXZlbnQgbXVzdCBiZSBwcm92aWRlZCc7XG4gICAgICB9XG5cbiAgICAgIF8uZWFjaChkaW1lbnNpb25zLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgICBpZiAoIV8uaXNTdHJpbmcoa2V5KSB8fCAhXy5pc1N0cmluZyh2YWwpKSB7XG4gICAgICAgICAgdGhyb3cgJ3RyYWNrKCkgZGltZW5zaW9ucyBleHBlY3RzIGtleXMgYW5kIHZhbHVlcyBvZiB0eXBlIFwic3RyaW5nXCIuJztcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgcmV0dXJuIFBhcnNlLl9yZXF1ZXN0KHtcbiAgICAgICAgcm91dGU6ICdldmVudHMnLFxuICAgICAgICBjbGFzc05hbWU6IG5hbWUsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBkYXRhOiB7IGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMgfVxuICAgICAgfSkuX3RoZW5SdW5DYWxsYmFja3Mob3B0aW9ucyk7XG4gICAgfVxuICB9KTtcbn0odGhpcykpO1xuXG4oZnVuY3Rpb24ocm9vdCkge1xuICByb290LlBhcnNlID0gcm9vdC5QYXJzZSB8fCB7fTtcbiAgdmFyIFBhcnNlID0gcm9vdC5QYXJzZTtcbiAgdmFyIF8gPSBQYXJzZS5fO1xuXG4gIC8qKlxuICAgKiBAY2xhc3MgUGFyc2UuQ29uZmlnIGlzIGEgbG9jYWwgcmVwcmVzZW50YXRpb24gb2YgY29uZmlndXJhdGlvbiBkYXRhIHRoYXRcbiAgICogY2FuIGJlIHNldCBmcm9tIHRoZSBQYXJzZSBkYXNoYm9hcmQuXG4gICAqL1xuICBQYXJzZS5Db25maWcgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICB0aGlzLl9lc2NhcGVkQXR0cmlidXRlcyA9IHt9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIG1vc3QgcmVjZW50bHktZmV0Y2hlZCBjb25maWd1cmF0aW9uIG9iamVjdCwgZWl0aGVyIGZyb21cbiAgICogbWVtb3J5IG9yIGZyb20gbG9jYWwgc3RvcmFnZSBpZiBuZWNlc3NhcnkuXG4gICAqXG4gICAqIEByZXR1cm4ge1BhcnNlLkNvbmZpZ30gVGhlIG1vc3QgcmVjZW50bHktZmV0Y2hlZCBQYXJzZS5Db25maWcgaWYgaXRcbiAgICogICAgIGV4aXN0cywgZWxzZSBhbiBlbXB0eSBQYXJzZS5Db25maWcuXG4gICAqL1xuICBQYXJzZS5Db25maWcuY3VycmVudCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChQYXJzZS5Db25maWcuX2N1cnJlbnRDb25maWcpIHtcbiAgICAgIHJldHVybiBQYXJzZS5Db25maWcuX2N1cnJlbnRDb25maWc7XG4gICAgfVxuXG4gICAgdmFyIGNvbmZpZyA9IG5ldyBQYXJzZS5Db25maWcoKTtcblxuICAgIGlmIChQYXJzZS5TdG9yYWdlLmFzeW5jKSB7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIHZhciBjb25maWdEYXRhID0gUGFyc2UuU3RvcmFnZS5nZXRJdGVtKFBhcnNlLl9nZXRQYXJzZVBhdGgoXG4gICAgICAgICAgUGFyc2UuQ29uZmlnLl9DVVJSRU5UX0NPTkZJR19LRVkpKTtcblxuICAgIGlmIChjb25maWdEYXRhKSB7ICBcbiAgICAgIGNvbmZpZy5fZmluaXNoRmV0Y2goSlNPTi5wYXJzZShjb25maWdEYXRhKSk7XG4gICAgICBQYXJzZS5Db25maWcuX2N1cnJlbnRDb25maWcgPSBjb25maWc7XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgYSBuZXcgY29uZmlndXJhdGlvbiBvYmplY3QgZnJvbSB0aGUgc2VydmVyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBIEJhY2tib25lLXN0eWxlIG9wdGlvbnMgb2JqZWN0LlxuICAgKiBWYWxpZCBvcHRpb25zIGFyZTo8dWw+XG4gICAqICAgPGxpPnN1Y2Nlc3M6IEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZ2V0IGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gICAqICAgPGxpPmVycm9yOiBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGdldCBmYWlscy5cbiAgICogPC91bD5cbiAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2l0aCBhIG5ld2x5LWNyZWF0ZWRcbiAgICogICAgIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdoZW4gdGhlIGdldCBjb21wbGV0ZXMuXG4gICAqL1xuICBQYXJzZS5Db25maWcuZ2V0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIHJlcXVlc3QgPSBQYXJzZS5fcmVxdWVzdCh7XG4gICAgICByb3V0ZTogXCJjb25maWdcIixcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICB9KTtcblxuICAgIHJldHVybiByZXF1ZXN0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnBhcmFtcykge1xuICAgICAgICB2YXIgZXJyb3JPYmplY3QgPSBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9KU09OLFxuICAgICAgICAgIFwiQ29uZmlnIEpTT04gcmVzcG9uc2UgaW52YWxpZC5cIik7XG4gICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmVycm9yKGVycm9yT2JqZWN0KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmZpZyA9IG5ldyBQYXJzZS5Db25maWcoKTtcbiAgICAgIGNvbmZpZy5fZmluaXNoRmV0Y2gocmVzcG9uc2UpO1xuICAgICAgUGFyc2UuQ29uZmlnLl9jdXJyZW50Q29uZmlnID0gY29uZmlnO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9KS5fdGhlblJ1bkNhbGxiYWNrcyhvcHRpb25zKTtcbiAgfTtcblxuICBQYXJzZS5Db25maWcucHJvdG90eXBlID0ge1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgSFRNTC1lc2NhcGVkIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS5cbiAgICAgKi9cbiAgICBlc2NhcGU6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHZhciBodG1sID0gdGhpcy5fZXNjYXBlZEF0dHJpYnV0ZXNbYXR0cl07XG4gICAgICBpZiAoaHRtbCkge1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgIH1cbiAgICAgIHZhciB2YWwgPSB0aGlzLmF0dHJpYnV0ZXNbYXR0cl07XG4gICAgICB2YXIgZXNjYXBlZDtcbiAgICAgIGlmIChQYXJzZS5faXNOdWxsT3JVbmRlZmluZWQodmFsKSkge1xuICAgICAgICBlc2NhcGVkID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlc2NhcGVkID0gXy5lc2NhcGUodmFsLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5fZXNjYXBlZEF0dHJpYnV0ZXNbYXR0cl0gPSBlc2NhcGVkO1xuICAgICAgcmV0dXJuIGVzY2FwZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0ciBUaGUgbmFtZSBvZiBhbiBhdHRyaWJ1dGUuXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJdO1xuICAgIH0sXG5cbiAgICBfZmluaXNoRmV0Y2g6IGZ1bmN0aW9uKHNlcnZlckRhdGEpIHtcbiAgICAgIHRoaXMuYXR0cmlidXRlcyA9IFBhcnNlLl9kZWNvZGUobnVsbCwgXy5jbG9uZShzZXJ2ZXJEYXRhLnBhcmFtcykpO1xuICAgICAgaWYgKCFQYXJzZS5TdG9yYWdlLmFzeW5jKSB7XG4gICAgICAgIC8vIFdlIG9ubHkgcHJvdmlkZSBsb2NhbCBjYWNoaW5nIG9mIGNvbmZpZyB3aXRoIHN5bmNocm9ub3VzIFN0b3JhZ2VcbiAgICAgICAgUGFyc2UuU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgUGFyc2UuX2dldFBhcnNlUGF0aChQYXJzZS5Db25maWcuX0NVUlJFTlRfQ09ORklHX0tFWSksXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShzZXJ2ZXJEYXRhKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFBhcnNlLkNvbmZpZy5fY3VycmVudENvbmZpZyA9IG51bGw7XG5cbiAgUGFyc2UuQ29uZmlnLl9DVVJSRU5UX0NPTkZJR19LRVkgPSBcImN1cnJlbnRDb25maWdcIjtcblxufSh0aGlzKSk7XG5cblxuKGZ1bmN0aW9uKHJvb3QpIHtcbiAgcm9vdC5QYXJzZSA9IHJvb3QuUGFyc2UgfHwge307XG4gIHZhciBQYXJzZSA9IHJvb3QuUGFyc2U7XG4gIHZhciBfID0gUGFyc2UuXztcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBQYXJzZS5FcnJvciBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gY29kZSBhbmQgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNvZGUgQW4gZXJyb3IgY29kZSBjb25zdGFudCBmcm9tIDxjb2RlPlBhcnNlLkVycm9yPC9jb2RlPi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgQSBkZXRhaWxlZCBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IuXG4gICAqIEBjbGFzc1xuICAgKlxuICAgKiA8cD5DbGFzcyB1c2VkIGZvciBhbGwgb2JqZWN0cyBwYXNzZWQgdG8gZXJyb3IgY2FsbGJhY2tzLjwvcD5cbiAgICovXG4gIFBhcnNlLkVycm9yID0gZnVuY3Rpb24oY29kZSwgbWVzc2FnZSkge1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfTtcblxuICBfLmV4dGVuZChQYXJzZS5FcnJvciwgLyoqIEBsZW5kcyBQYXJzZS5FcnJvciAqLyB7XG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHNvbWUgZXJyb3Igb3RoZXIgdGhhbiB0aG9zZSBlbnVtZXJhdGVkIGhlcmUuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgT1RIRVJfQ0FVU0U6IC0xLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgc29tZXRoaW5nIGhhcyBnb25lIHdyb25nIHdpdGggdGhlIHNlcnZlci5cbiAgICAgKiBJZiB5b3UgZ2V0IHRoaXMgZXJyb3IgY29kZSwgaXQgaXMgUGFyc2UncyBmYXVsdC4gQ29udGFjdCB1cyBhdCBcbiAgICAgKiBodHRwczovL3BhcnNlLmNvbS9oZWxwXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiAxLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoZSBjb25uZWN0aW9uIHRvIHRoZSBQYXJzZSBzZXJ2ZXJzIGZhaWxlZC5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBDT05ORUNUSU9OX0ZBSUxFRDogMTAwLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoZSBzcGVjaWZpZWQgb2JqZWN0IGRvZXNuJ3QgZXhpc3QuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgT0JKRUNUX05PVF9GT1VORDogMTAxLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHlvdSB0cmllZCB0byBxdWVyeSB3aXRoIGEgZGF0YXR5cGUgdGhhdCBkb2Vzbid0XG4gICAgICogc3VwcG9ydCBpdCwgbGlrZSBleGFjdCBtYXRjaGluZyBhbiBhcnJheSBvciBvYmplY3QuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgSU5WQUxJRF9RVUVSWTogMTAyLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIGEgbWlzc2luZyBvciBpbnZhbGlkIGNsYXNzbmFtZS4gQ2xhc3NuYW1lcyBhcmVcbiAgICAgKiBjYXNlLXNlbnNpdGl2ZS4gVGhleSBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIsIGFuZCBhLXpBLVowLTlfIGFyZSB0aGVcbiAgICAgKiBvbmx5IHZhbGlkIGNoYXJhY3RlcnMuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgSU5WQUxJRF9DTEFTU19OQU1FOiAxMDMsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgYW4gdW5zcGVjaWZpZWQgb2JqZWN0IGlkLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIE1JU1NJTkdfT0JKRUNUX0lEOiAxMDQsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgYW4gaW52YWxpZCBrZXkgbmFtZS4gS2V5cyBhcmUgY2FzZS1zZW5zaXRpdmUuIFRoZXlcbiAgICAgKiBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIsIGFuZCBhLXpBLVowLTlfIGFyZSB0aGUgb25seSB2YWxpZCBjaGFyYWN0ZXJzLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIElOVkFMSURfS0VZX05BTUU6IDEwNSxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyBhIG1hbGZvcm1lZCBwb2ludGVyLiBZb3Ugc2hvdWxkIG5vdCBzZWUgdGhpcyB1bmxlc3NcbiAgICAgKiB5b3UgaGF2ZSBiZWVuIG11Y2tpbmcgYWJvdXQgY2hhbmdpbmcgaW50ZXJuYWwgUGFyc2UgY29kZS5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBJTlZBTElEX1BPSU5URVI6IDEwNixcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGF0IGJhZGx5IGZvcm1lZCBKU09OIHdhcyByZWNlaXZlZCB1cHN0cmVhbS4gVGhpc1xuICAgICAqIGVpdGhlciBpbmRpY2F0ZXMgeW91IGhhdmUgZG9uZSBzb21ldGhpbmcgdW51c3VhbCB3aXRoIG1vZGlmeWluZyBob3dcbiAgICAgKiB0aGluZ3MgZW5jb2RlIHRvIEpTT04sIG9yIHRoZSBuZXR3b3JrIGlzIGZhaWxpbmcgYmFkbHkuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgSU5WQUxJRF9KU09OOiAxMDcsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgdGhhdCB0aGUgZmVhdHVyZSB5b3UgdHJpZWQgdG8gYWNjZXNzIGlzIG9ubHlcbiAgICAgKiBhdmFpbGFibGUgaW50ZXJuYWxseSBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBDT01NQU5EX1VOQVZBSUxBQkxFOiAxMDgsXG5cbiAgICAvKipcbiAgICAgKiBZb3UgbXVzdCBjYWxsIFBhcnNlLmluaXRpYWxpemUgYmVmb3JlIHVzaW5nIHRoZSBQYXJzZSBsaWJyYXJ5LlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIE5PVF9JTklUSUFMSVpFRDogMTA5LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYSBmaWVsZCB3YXMgc2V0IHRvIGFuIGluY29uc2lzdGVudCB0eXBlLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIElOQ09SUkVDVF9UWVBFOiAxMTEsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgYW4gaW52YWxpZCBjaGFubmVsIG5hbWUuIEEgY2hhbm5lbCBuYW1lIGlzIGVpdGhlclxuICAgICAqIGFuIGVtcHR5IHN0cmluZyAodGhlIGJyb2FkY2FzdCBjaGFubmVsKSBvciBjb250YWlucyBvbmx5IGEtekEtWjAtOV9cbiAgICAgKiBjaGFyYWN0ZXJzIGFuZCBzdGFydHMgd2l0aCBhIGxldHRlci5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBJTlZBTElEX0NIQU5ORUxfTkFNRTogMTEyLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgcHVzaCBpcyBtaXNjb25maWd1cmVkLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIFBVU0hfTUlTQ09ORklHVVJFRDogMTE1LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgdGhlIG9iamVjdCBpcyB0b28gbGFyZ2UuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgT0JKRUNUX1RPT19MQVJHRTogMTE2LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgdGhlIG9wZXJhdGlvbiBpc24ndCBhbGxvd2VkIGZvciBjbGllbnRzLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIE9QRVJBVElPTl9GT1JCSURERU46IDExOSxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGUgcmVzdWx0IHdhcyBub3QgZm91bmQgaW4gdGhlIGNhY2hlLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIENBQ0hFX01JU1M6IDEyMCxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGF0IGFuIGludmFsaWQga2V5IHdhcyB1c2VkIGluIGEgbmVzdGVkXG4gICAgICogSlNPTk9iamVjdC5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBJTlZBTElEX05FU1RFRF9LRVk6IDEyMSxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGF0IGFuIGludmFsaWQgZmlsZW5hbWUgd2FzIHVzZWQgZm9yIFBhcnNlRmlsZS5cbiAgICAgKiBBIHZhbGlkIGZpbGUgbmFtZSBjb250YWlucyBvbmx5IGEtekEtWjAtOV8uIGNoYXJhY3RlcnMgYW5kIGlzIGJldHdlZW4gMVxuICAgICAqIGFuZCAxMjggY2hhcmFjdGVycy5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBJTlZBTElEX0ZJTEVfTkFNRTogMTIyLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIGFuIGludmFsaWQgQUNMIHdhcyBwcm92aWRlZC5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBJTlZBTElEX0FDTDogMTIzLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgdGhlIHJlcXVlc3QgdGltZWQgb3V0IG9uIHRoZSBzZXJ2ZXIuIFR5cGljYWxseVxuICAgICAqIHRoaXMgaW5kaWNhdGVzIHRoYXQgdGhlIHJlcXVlc3QgaXMgdG9vIGV4cGVuc2l2ZSB0byBydW4uXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgVElNRU9VVDogMTI0LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgdGhlIGVtYWlsIGFkZHJlc3Mgd2FzIGludmFsaWQuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgSU5WQUxJRF9FTUFJTF9BRERSRVNTOiAxMjUsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgYSBtaXNzaW5nIGNvbnRlbnQgdHlwZS5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBNSVNTSU5HX0NPTlRFTlRfVFlQRTogMTI2LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIGEgbWlzc2luZyBjb250ZW50IGxlbmd0aC5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBNSVNTSU5HX0NPTlRFTlRfTEVOR1RIOiAxMjcsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgYW4gaW52YWxpZCBjb250ZW50IGxlbmd0aC5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBJTlZBTElEX0NPTlRFTlRfTEVOR1RIOiAxMjgsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgYSBmaWxlIHRoYXQgd2FzIHRvbyBsYXJnZS5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBGSUxFX1RPT19MQVJHRTogMTI5LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIGFuIGVycm9yIHNhdmluZyBhIGZpbGUuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgRklMRV9TQVZFX0VSUk9SOiAxMzAsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgdGhhdCBhIHVuaXF1ZSBmaWVsZCB3YXMgZ2l2ZW4gYSB2YWx1ZSB0aGF0IGlzXG4gICAgICogYWxyZWFkeSB0YWtlbi5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBEVVBMSUNBVEVfVkFMVUU6IDEzNyxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGF0IGEgcm9sZSdzIG5hbWUgaXMgaW52YWxpZC5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBJTlZBTElEX1JPTEVfTkFNRTogMTM5LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYW4gYXBwbGljYXRpb24gcXVvdGEgd2FzIGV4Y2VlZGVkLiAgVXBncmFkZSB0b1xuICAgICAqIHJlc29sdmUuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgRVhDRUVERURfUVVPVEE6IDE0MCxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGF0IGEgQ2xvdWQgQ29kZSBzY3JpcHQgZmFpbGVkLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIFNDUklQVF9GQUlMRUQ6IDE0MSxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGF0IGEgQ2xvdWQgQ29kZSB2YWxpZGF0aW9uIGZhaWxlZC5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBWQUxJREFUSU9OX0VSUk9SOiAxNDIsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgdGhhdCBpbnZhbGlkIGltYWdlIGRhdGEgd2FzIHByb3ZpZGVkLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIElOVkFMSURfSU1BR0VfREFUQTogMTUwLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIGFuIHVuc2F2ZWQgZmlsZS5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBVTlNBVkVEX0ZJTEVfRVJST1I6IDE1MSxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyBhbiBpbnZhbGlkIHB1c2ggdGltZS5cbiAgICAgKi9cbiAgICBJTlZBTElEX1BVU0hfVElNRV9FUlJPUjogMTUyLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIGFuIGVycm9yIGRlbGV0aW5nIGEgZmlsZS5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBGSUxFX0RFTEVURV9FUlJPUjogMTUzLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgdGhlIGFwcGxpY2F0aW9uIGhhcyBleGNlZWRlZCBpdHMgcmVxdWVzdFxuICAgICAqIGxpbWl0LlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIFJFUVVFU1RfTElNSVRfRVhDRUVERUQ6IDE1NSxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyBhbiBpbnZhbGlkIGV2ZW50IG5hbWUuXG4gICAgICovXG4gICAgSU5WQUxJRF9FVkVOVF9OQU1FOiAxNjAsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgdGhhdCB0aGUgdXNlcm5hbWUgaXMgbWlzc2luZyBvciBlbXB0eS5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBVU0VSTkFNRV9NSVNTSU5HOiAyMDAsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgdGhhdCB0aGUgcGFzc3dvcmQgaXMgbWlzc2luZyBvciBlbXB0eS5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBQQVNTV09SRF9NSVNTSU5HOiAyMDEsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgdGhhdCB0aGUgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiB0YWtlbi5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBVU0VSTkFNRV9UQUtFTjogMjAyLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgdGhlIGVtYWlsIGhhcyBhbHJlYWR5IGJlZW4gdGFrZW4uXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgRU1BSUxfVEFLRU46IDIwMyxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGF0IHRoZSBlbWFpbCBpcyBtaXNzaW5nLCBidXQgbXVzdCBiZSBzcGVjaWZpZWQuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgRU1BSUxfTUlTU0lORzogMjA0LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYSB1c2VyIHdpdGggdGhlIHNwZWNpZmllZCBlbWFpbCB3YXMgbm90IGZvdW5kLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIEVNQUlMX05PVF9GT1VORDogMjA1LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYSB1c2VyIG9iamVjdCB3aXRob3V0IGEgdmFsaWQgc2Vzc2lvbiBjb3VsZFxuICAgICAqIG5vdCBiZSBhbHRlcmVkLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIFNFU1NJT05fTUlTU0lORzogMjA2LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYSB1c2VyIGNhbiBvbmx5IGJlIGNyZWF0ZWQgdGhyb3VnaCBzaWdudXAuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgTVVTVF9DUkVBVEVfVVNFUl9USFJPVUdIX1NJR05VUDogMjA3LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYW4gYW4gYWNjb3VudCBiZWluZyBsaW5rZWQgaXMgYWxyZWFkeSBsaW5rZWRcbiAgICAgKiB0byBhbm90aGVyIHVzZXIuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgQUNDT1VOVF9BTFJFQURZX0xJTktFRDogMjA4LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgdGhlIGN1cnJlbnQgc2Vzc2lvbiB0b2tlbiBpcyBpbnZhbGlkLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIElOVkFMSURfU0VTU0lPTl9UT0tFTjogMjA5LFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYSB1c2VyIGNhbm5vdCBiZSBsaW5rZWQgdG8gYW4gYWNjb3VudCBiZWNhdXNlXG4gICAgICogdGhhdCBhY2NvdW50J3MgaWQgY291bGQgbm90IGJlIGZvdW5kLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIExJTktFRF9JRF9NSVNTSU5HOiAyNTAsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgdGhhdCBhIHVzZXIgd2l0aCBhIGxpbmtlZCAoZS5nLiBGYWNlYm9vaykgYWNjb3VudFxuICAgICAqIGhhcyBhbiBpbnZhbGlkIHNlc3Npb24uXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgSU5WQUxJRF9MSU5LRURfU0VTU0lPTjogMjUxLFxuXG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYSBzZXJ2aWNlIGJlaW5nIGxpbmtlZCAoZS5nLiBGYWNlYm9vayBvclxuICAgICAqIFR3aXR0ZXIpIGlzIHVuc3VwcG9ydGVkLlxuICAgICAqIEBjb25zdGFudFxuICAgICAqL1xuICAgIFVOU1VQUE9SVEVEX1NFUlZJQ0U6IDI1MixcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGF0IHRoZXJlIHdlcmUgbXVsdGlwbGUgZXJyb3JzLiBBZ2dyZWdhdGUgZXJyb3JzXG4gICAgICogaGF2ZSBhbiBcImVycm9yc1wiIHByb3BlcnR5LCB3aGljaCBpcyBhbiBhcnJheSBvZiBlcnJvciBvYmplY3RzIHdpdGggbW9yZVxuICAgICAqIGRldGFpbCBhYm91dCBlYWNoIGVycm9yIHRoYXQgb2NjdXJyZWQuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgQUdHUkVHQVRFX0VSUk9SOiA2MDAsXG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIGNsaWVudCB3YXMgdW5hYmxlIHRvIHJlYWQgYW4gaW5wdXQgZmlsZS5cbiAgICAgKiBAY29uc3RhbnRcbiAgICAgKi9cbiAgICBGSUxFX1JFQURfRVJST1I6IDYwMSxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUgaW5kaWNhdGluZyBhIHJlYWwgZXJyb3IgY29kZSBpcyB1bmF2YWlsYWJsZSBiZWNhdXNlXG4gICAgICogd2UgaGFkIHRvIHVzZSBhbiBYRG9tYWluUmVxdWVzdCBvYmplY3QgdG8gYWxsb3cgQ09SUyByZXF1ZXN0cyBpblxuICAgICAqIEludGVybmV0IEV4cGxvcmVyLCB3aGljaCBzdHJpcHMgdGhlIGJvZHkgZnJvbSBIVFRQIHJlc3BvbnNlcyB0aGF0IGhhdmVcbiAgICAgKiBhIG5vbi0yWFggc3RhdHVzIGNvZGUuXG4gICAgICogQGNvbnN0YW50XG4gICAgICovXG4gICAgWF9ET01BSU5fUkVRVUVTVDogNjAyXG4gIH0pO1xuXG59KHRoaXMpKTtcblxuLypnbG9iYWwgXzogZmFsc2UgKi9cbihmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3QgPSB0aGlzO1xuICB2YXIgUGFyc2UgPSAocm9vdC5QYXJzZSB8fCAocm9vdC5QYXJzZSA9IHt9KSk7XG4gIHZhciBldmVudFNwbGl0dGVyID0gL1xccysvO1xuICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKlxuICAgKiA8cD5QYXJzZS5FdmVudHMgaXMgYSBmb3JrIG9mIEJhY2tib25lJ3MgRXZlbnRzIG1vZHVsZSwgcHJvdmlkZWQgZm9yIHlvdXJcbiAgICogY29udmVuaWVuY2UuPC9wPlxuICAgKlxuICAgKiA8cD5BIG1vZHVsZSB0aGF0IGNhbiBiZSBtaXhlZCBpbiB0byBhbnkgb2JqZWN0IGluIG9yZGVyIHRvIHByb3ZpZGVcbiAgICogaXQgd2l0aCBjdXN0b20gZXZlbnRzLiBZb3UgbWF5IGJpbmQgY2FsbGJhY2sgZnVuY3Rpb25zIHRvIGFuIGV2ZW50XG4gICAqIHdpdGggYG9uYCwgb3IgcmVtb3ZlIHRoZXNlIGZ1bmN0aW9ucyB3aXRoIGBvZmZgLlxuICAgKiBUcmlnZ2VyaW5nIGFuIGV2ZW50IGZpcmVzIGFsbCBjYWxsYmFja3MgaW4gdGhlIG9yZGVyIHRoYXQgYG9uYCB3YXNcbiAgICogY2FsbGVkLlxuICAgKlxuICAgKiA8cHJlPlxuICAgKiAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgKiAgICAgXy5leHRlbmQob2JqZWN0LCBQYXJzZS5FdmVudHMpO1xuICAgKiAgICAgb2JqZWN0Lm9uKCdleHBhbmQnLCBmdW5jdGlvbigpeyBhbGVydCgnZXhwYW5kZWQnKTsgfSk7XG4gICAqICAgICBvYmplY3QudHJpZ2dlcignZXhwYW5kJyk7PC9wcmU+PC9wPlxuICAgKlxuICAgKiA8cD5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZVxuICAgKiA8YSBocmVmPVwiaHR0cDovL2RvY3VtZW50Y2xvdWQuZ2l0aHViLmNvbS9iYWNrYm9uZS8jRXZlbnRzXCI+QmFja2JvbmVcbiAgICogZG9jdW1lbnRhdGlvbjwvYT4uPC9wPlxuICAgKi9cbiAgUGFyc2UuRXZlbnRzID0ge1xuICAgIC8qKlxuICAgICAqIEJpbmQgb25lIG9yIG1vcmUgc3BhY2Ugc2VwYXJhdGVkIGV2ZW50cywgYGV2ZW50c2AsIHRvIGEgYGNhbGxiYWNrYFxuICAgICAqIGZ1bmN0aW9uLiBQYXNzaW5nIGBcImFsbFwiYCB3aWxsIGJpbmQgdGhlIGNhbGxiYWNrIHRvIGFsbCBldmVudHMgZmlyZWQuXG4gICAgICovXG4gICAgb246IGZ1bmN0aW9uKGV2ZW50cywgY2FsbGJhY2ssIGNvbnRleHQpIHtcblxuICAgICAgdmFyIGNhbGxzLCBldmVudCwgbm9kZSwgdGFpbCwgbGlzdDtcbiAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBldmVudHMgPSBldmVudHMuc3BsaXQoZXZlbnRTcGxpdHRlcik7XG4gICAgICBjYWxscyA9IHRoaXMuX2NhbGxiYWNrcyB8fCAodGhpcy5fY2FsbGJhY2tzID0ge30pO1xuXG4gICAgICAvLyBDcmVhdGUgYW4gaW1tdXRhYmxlIGNhbGxiYWNrIGxpc3QsIGFsbG93aW5nIHRyYXZlcnNhbCBkdXJpbmdcbiAgICAgIC8vIG1vZGlmaWNhdGlvbi4gIFRoZSB0YWlsIGlzIGFuIGVtcHR5IG9iamVjdCB0aGF0IHdpbGwgYWx3YXlzIGJlIHVzZWRcbiAgICAgIC8vIGFzIHRoZSBuZXh0IG5vZGUuXG4gICAgICBldmVudCA9IGV2ZW50cy5zaGlmdCgpO1xuICAgICAgd2hpbGUgKGV2ZW50KSB7XG4gICAgICAgIGxpc3QgPSBjYWxsc1tldmVudF07XG4gICAgICAgIG5vZGUgPSBsaXN0ID8gbGlzdC50YWlsIDoge307XG4gICAgICAgIG5vZGUubmV4dCA9IHRhaWwgPSB7fTtcbiAgICAgICAgbm9kZS5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgbm9kZS5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsc1tldmVudF0gPSB7dGFpbDogdGFpbCwgbmV4dDogbGlzdCA/IGxpc3QubmV4dCA6IG5vZGV9O1xuICAgICAgICBldmVudCA9IGV2ZW50cy5zaGlmdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIG9uZSBvciBtYW55IGNhbGxiYWNrcy4gSWYgYGNvbnRleHRgIGlzIG51bGwsIHJlbW92ZXMgYWxsIGNhbGxiYWNrc1xuICAgICAqIHdpdGggdGhhdCBmdW5jdGlvbi4gSWYgYGNhbGxiYWNrYCBpcyBudWxsLCByZW1vdmVzIGFsbCBjYWxsYmFja3MgZm9yIHRoZVxuICAgICAqIGV2ZW50LiBJZiBgZXZlbnRzYCBpcyBudWxsLCByZW1vdmVzIGFsbCBib3VuZCBjYWxsYmFja3MgZm9yIGFsbCBldmVudHMuXG4gICAgICovXG4gICAgb2ZmOiBmdW5jdGlvbihldmVudHMsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICB2YXIgZXZlbnQsIGNhbGxzLCBub2RlLCB0YWlsLCBjYiwgY3R4O1xuXG4gICAgICAvLyBObyBldmVudHMsIG9yIHJlbW92aW5nICphbGwqIGV2ZW50cy5cbiAgICAgIGlmICghKGNhbGxzID0gdGhpcy5fY2FsbGJhY2tzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIShldmVudHMgfHwgY2FsbGJhY2sgfHwgY29udGV4dCkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgbGlzdGVkIGV2ZW50cyBhbmQgY29udGV4dHMsIHNwbGljaW5nIHRoZW0gb3V0IG9mIHRoZVxuICAgICAgLy8gbGlua2VkIGxpc3Qgb2YgY2FsbGJhY2tzIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgZXZlbnRzID0gZXZlbnRzID8gZXZlbnRzLnNwbGl0KGV2ZW50U3BsaXR0ZXIpIDogT2JqZWN0LmtleXMoY2FsbHMpO1xuICAgICAgZXZlbnQgPSBldmVudHMuc2hpZnQoKTtcbiAgICAgIHdoaWxlIChldmVudCkge1xuICAgICAgICBub2RlID0gY2FsbHNbZXZlbnRdO1xuICAgICAgICBkZWxldGUgY2FsbHNbZXZlbnRdO1xuICAgICAgICBpZiAoIW5vZGUgfHwgIShjYWxsYmFjayB8fCBjb250ZXh0KSkge1xuICAgICAgICAgIGV2ZW50ID0gZXZlbnRzLnNoaWZ0KCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGxpc3QsIG9taXR0aW5nIHRoZSBpbmRpY2F0ZWQgY2FsbGJhY2tzLlxuICAgICAgICB0YWlsID0gbm9kZS50YWlsO1xuICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgICB3aGlsZSAobm9kZSAhPT0gdGFpbCkge1xuICAgICAgICAgIGNiID0gbm9kZS5jYWxsYmFjaztcbiAgICAgICAgICBjdHggPSBub2RlLmNvbnRleHQ7XG4gICAgICAgICAgaWYgKChjYWxsYmFjayAmJiBjYiAhPT0gY2FsbGJhY2spIHx8IChjb250ZXh0ICYmIGN0eCAhPT0gY29udGV4dCkpIHtcbiAgICAgICAgICAgIHRoaXMub24oZXZlbnQsIGNiLCBjdHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50ID0gZXZlbnRzLnNoaWZ0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIG9uZSBvciBtYW55IGV2ZW50cywgZmlyaW5nIGFsbCBib3VuZCBjYWxsYmFja3MuIENhbGxiYWNrcyBhcmVcbiAgICAgKiBwYXNzZWQgdGhlIHNhbWUgYXJndW1lbnRzIGFzIGB0cmlnZ2VyYCBpcywgYXBhcnQgZnJvbSB0aGUgZXZlbnQgbmFtZVxuICAgICAqICh1bmxlc3MgeW91J3JlIGxpc3RlbmluZyBvbiBgXCJhbGxcImAsIHdoaWNoIHdpbGwgY2F1c2UgeW91ciBjYWxsYmFjayB0b1xuICAgICAqIHJlY2VpdmUgdGhlIHRydWUgbmFtZSBvZiB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50KS5cbiAgICAgKi9cbiAgICB0cmlnZ2VyOiBmdW5jdGlvbihldmVudHMpIHtcbiAgICAgIHZhciBldmVudCwgbm9kZSwgY2FsbHMsIHRhaWwsIGFyZ3MsIGFsbCwgcmVzdDtcbiAgICAgIGlmICghKGNhbGxzID0gdGhpcy5fY2FsbGJhY2tzKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGFsbCA9IGNhbGxzLmFsbDtcbiAgICAgIGV2ZW50cyA9IGV2ZW50cy5zcGxpdChldmVudFNwbGl0dGVyKTtcbiAgICAgIHJlc3QgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICAgIC8vIEZvciBlYWNoIGV2ZW50LCB3YWxrIHRocm91Z2ggdGhlIGxpbmtlZCBsaXN0IG9mIGNhbGxiYWNrcyB0d2ljZSxcbiAgICAgIC8vIGZpcnN0IHRvIHRyaWdnZXIgdGhlIGV2ZW50LCB0aGVuIHRvIHRyaWdnZXIgYW55IGBcImFsbFwiYCBjYWxsYmFja3MuXG4gICAgICBldmVudCA9IGV2ZW50cy5zaGlmdCgpO1xuICAgICAgd2hpbGUgKGV2ZW50KSB7XG4gICAgICAgIG5vZGUgPSBjYWxsc1tldmVudF07XG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgdGFpbCA9IG5vZGUudGFpbDtcbiAgICAgICAgICB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHQpICE9PSB0YWlsKSB7XG4gICAgICAgICAgICBub2RlLmNhbGxiYWNrLmFwcGx5KG5vZGUuY29udGV4dCB8fCB0aGlzLCByZXN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IGFsbDtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICB0YWlsID0gbm9kZS50YWlsO1xuICAgICAgICAgIGFyZ3MgPSBbZXZlbnRdLmNvbmNhdChyZXN0KTtcbiAgICAgICAgICB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHQpICE9PSB0YWlsKSB7XG4gICAgICAgICAgICBub2RlLmNhbGxiYWNrLmFwcGx5KG5vZGUuY29udGV4dCB8fCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQgPSBldmVudHMuc2hpZnQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9OyAgXG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgUGFyc2UuRXZlbnRzLmJpbmQgPSBQYXJzZS5FdmVudHMub247XG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgUGFyc2UuRXZlbnRzLnVuYmluZCA9IFBhcnNlLkV2ZW50cy5vZmY7XG59LmNhbGwodGhpcykpO1xuXG5cbi8qZ2xvYmFsIG5hdmlnYXRvcjogZmFsc2UgKi9cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICB2YXIgUGFyc2UgPSByb290LlBhcnNlO1xuICB2YXIgXyA9IFBhcnNlLl87XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgR2VvUG9pbnQgd2l0aCBhbnkgb2YgdGhlIGZvbGxvd2luZyBmb3Jtczo8YnI+XG4gICAqICAgPHByZT5cbiAgICogICBuZXcgR2VvUG9pbnQob3RoZXJHZW9Qb2ludClcbiAgICogICBuZXcgR2VvUG9pbnQoMzAsIDMwKVxuICAgKiAgIG5ldyBHZW9Qb2ludChbMzAsIDMwXSlcbiAgICogICBuZXcgR2VvUG9pbnQoe2xhdGl0dWRlOiAzMCwgbG9uZ2l0dWRlOiAzMH0pXG4gICAqICAgbmV3IEdlb1BvaW50KCkgIC8vIGRlZmF1bHRzIHRvICgwLCAwKVxuICAgKiAgIDwvcHJlPlxuICAgKiBAY2xhc3NcbiAgICpcbiAgICogPHA+UmVwcmVzZW50cyBhIGxhdGl0dWRlIC8gbG9uZ2l0dWRlIHBvaW50IHRoYXQgbWF5IGJlIGFzc29jaWF0ZWRcbiAgICogd2l0aCBhIGtleSBpbiBhIFBhcnNlT2JqZWN0IG9yIHVzZWQgYXMgYSByZWZlcmVuY2UgcG9pbnQgZm9yIGdlbyBxdWVyaWVzLlxuICAgKiBUaGlzIGFsbG93cyBwcm94aW1pdHktYmFzZWQgcXVlcmllcyBvbiB0aGUga2V5LjwvcD5cbiAgICpcbiAgICogPHA+T25seSBvbmUga2V5IGluIGEgY2xhc3MgbWF5IGNvbnRhaW4gYSBHZW9Qb2ludC48L3A+XG4gICAqXG4gICAqIDxwPkV4YW1wbGU6PHByZT5cbiAgICogICB2YXIgcG9pbnQgPSBuZXcgUGFyc2UuR2VvUG9pbnQoMzAuMCwgLTIwLjApO1xuICAgKiAgIHZhciBvYmplY3QgPSBuZXcgUGFyc2UuT2JqZWN0KFwiUGxhY2VPYmplY3RcIik7XG4gICAqICAgb2JqZWN0LnNldChcImxvY2F0aW9uXCIsIHBvaW50KTtcbiAgICogICBvYmplY3Quc2F2ZSgpOzwvcHJlPjwvcD5cbiAgICovXG4gIFBhcnNlLkdlb1BvaW50ID0gZnVuY3Rpb24oYXJnMSwgYXJnMikge1xuICAgIGlmIChfLmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgIFBhcnNlLkdlb1BvaW50Ll92YWxpZGF0ZShhcmcxWzBdLCBhcmcxWzFdKTtcbiAgICAgIHRoaXMubGF0aXR1ZGUgPSBhcmcxWzBdO1xuICAgICAgdGhpcy5sb25naXR1ZGUgPSBhcmcxWzFdO1xuICAgIH0gZWxzZSBpZiAoXy5pc09iamVjdChhcmcxKSkge1xuICAgICAgUGFyc2UuR2VvUG9pbnQuX3ZhbGlkYXRlKGFyZzEubGF0aXR1ZGUsIGFyZzEubG9uZ2l0dWRlKTtcbiAgICAgIHRoaXMubGF0aXR1ZGUgPSBhcmcxLmxhdGl0dWRlO1xuICAgICAgdGhpcy5sb25naXR1ZGUgPSBhcmcxLmxvbmdpdHVkZTtcbiAgICB9IGVsc2UgaWYgKF8uaXNOdW1iZXIoYXJnMSkgJiYgXy5pc051bWJlcihhcmcyKSkge1xuICAgICAgUGFyc2UuR2VvUG9pbnQuX3ZhbGlkYXRlKGFyZzEsIGFyZzIpO1xuICAgICAgdGhpcy5sYXRpdHVkZSA9IGFyZzE7XG4gICAgICB0aGlzLmxvbmdpdHVkZSA9IGFyZzI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGF0aXR1ZGUgPSAwO1xuICAgICAgdGhpcy5sb25naXR1ZGUgPSAwO1xuICAgIH1cblxuICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHNvIHRoYXQgYW55b25lIHVzaW5nIFdlYmtpdCBvciBNb3ppbGxhIHdpbGwgZ2V0IGFuIGVycm9yXG4gICAgLy8gaWYgdGhleSB0cnkgdG8gc2V0IHZhbHVlcyB0aGF0IGFyZSBvdXQgb2YgYm91bmRzLlxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodGhpcy5fX2RlZmluZUdldHRlcl9fICYmIHRoaXMuX19kZWZpbmVTZXR0ZXJfXykge1xuICAgICAgLy8gVXNlIF9sYXRpdHVkZSBhbmQgX2xvbmdpdHVkZSB0byBhY3R1YWxseSBzdG9yZSB0aGUgdmFsdWVzLCBhbmQgYWRkXG4gICAgICAvLyBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGZvciBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLlxuICAgICAgdGhpcy5fbGF0aXR1ZGUgPSB0aGlzLmxhdGl0dWRlO1xuICAgICAgdGhpcy5fbG9uZ2l0dWRlID0gdGhpcy5sb25naXR1ZGU7XG4gICAgICB0aGlzLl9fZGVmaW5lR2V0dGVyX18oXCJsYXRpdHVkZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuX2xhdGl0dWRlO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9fZGVmaW5lR2V0dGVyX18oXCJsb25naXR1ZGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9sb25naXR1ZGU7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX19kZWZpbmVTZXR0ZXJfXyhcImxhdGl0dWRlXCIsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBQYXJzZS5HZW9Qb2ludC5fdmFsaWRhdGUodmFsLCBzZWxmLmxvbmdpdHVkZSk7XG4gICAgICAgIHNlbGYuX2xhdGl0dWRlID0gdmFsO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9fZGVmaW5lU2V0dGVyX18oXCJsb25naXR1ZGVcIiwgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIFBhcnNlLkdlb1BvaW50Ll92YWxpZGF0ZShzZWxmLmxhdGl0dWRlLCB2YWwpO1xuICAgICAgICBzZWxmLl9sb25naXR1ZGUgPSB2YWw7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBsZW5kcyBQYXJzZS5HZW9Qb2ludC5wcm90b3R5cGVcbiAgICogQHByb3BlcnR5IHtmbG9hdH0gbGF0aXR1ZGUgTm9ydGgtc291dGggcG9ydGlvbiBvZiB0aGUgY29vcmRpbmF0ZSwgaW4gcmFuZ2VcbiAgICogICBbLTkwLCA5MF0uICBUaHJvd3MgYW4gZXhjZXB0aW9uIGlmIHNldCBvdXQgb2YgcmFuZ2UgaW4gYSBtb2Rlcm4gYnJvd3Nlci5cbiAgICogQHByb3BlcnR5IHtmbG9hdH0gbG9uZ2l0dWRlIEVhc3Qtd2VzdCBwb3J0aW9uIG9mIHRoZSBjb29yZGluYXRlLCBpbiByYW5nZVxuICAgKiAgIFstMTgwLCAxODBdLiAgVGhyb3dzIGlmIHNldCBvdXQgb2YgcmFuZ2UgaW4gYSBtb2Rlcm4gYnJvd3Nlci5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRocm93cyBhbiBleGNlcHRpb24gaWYgdGhlIGdpdmVuIGxhdC1sb25nIGlzIG91dCBvZiBib3VuZHMuXG4gICAqL1xuICBQYXJzZS5HZW9Qb2ludC5fdmFsaWRhdGUgPSBmdW5jdGlvbihsYXRpdHVkZSwgbG9uZ2l0dWRlKSB7XG4gICAgaWYgKGxhdGl0dWRlIDwgLTkwLjApIHtcbiAgICAgIHRocm93IFwiUGFyc2UuR2VvUG9pbnQgbGF0aXR1ZGUgXCIgKyBsYXRpdHVkZSArIFwiIDwgLTkwLjAuXCI7XG4gICAgfVxuICAgIGlmIChsYXRpdHVkZSA+IDkwLjApIHtcbiAgICAgIHRocm93IFwiUGFyc2UuR2VvUG9pbnQgbGF0aXR1ZGUgXCIgKyBsYXRpdHVkZSArIFwiID4gOTAuMC5cIjtcbiAgICB9XG4gICAgaWYgKGxvbmdpdHVkZSA8IC0xODAuMCkge1xuICAgICAgdGhyb3cgXCJQYXJzZS5HZW9Qb2ludCBsb25naXR1ZGUgXCIgKyBsb25naXR1ZGUgKyBcIiA8IC0xODAuMC5cIjtcbiAgICB9XG4gICAgaWYgKGxvbmdpdHVkZSA+IDE4MC4wKSB7XG4gICAgICB0aHJvdyBcIlBhcnNlLkdlb1BvaW50IGxvbmdpdHVkZSBcIiArIGxvbmdpdHVkZSArIFwiID4gMTgwLjAuXCI7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgR2VvUG9pbnQgd2l0aCB0aGUgdXNlcidzIGN1cnJlbnQgbG9jYXRpb24sIGlmIGF2YWlsYWJsZS5cbiAgICogQ2FsbHMgb3B0aW9ucy5zdWNjZXNzIHdpdGggYSBuZXcgR2VvUG9pbnQgaW5zdGFuY2Ugb3IgY2FsbHMgb3B0aW9ucy5lcnJvci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gb2JqZWN0IHdpdGggc3VjY2VzcyBhbmQgZXJyb3IgY2FsbGJhY2tzLlxuICAgKi9cbiAgUGFyc2UuR2VvUG9pbnQuY3VycmVudCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQYXJzZS5Qcm9taXNlKCk7XG4gICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihmdW5jdGlvbihsb2NhdGlvbikge1xuICAgICAgcHJvbWlzZS5yZXNvbHZlKG5ldyBQYXJzZS5HZW9Qb2ludCh7XG4gICAgICAgIGxhdGl0dWRlOiBsb2NhdGlvbi5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgIGxvbmdpdHVkZTogbG9jYXRpb24uY29vcmRzLmxvbmdpdHVkZVxuICAgICAgfSkpO1xuXG4gICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIHByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9taXNlLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpO1xuICB9O1xuXG4gIFBhcnNlLkdlb1BvaW50LnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgR2VvUG9pbnQsIHN1aXRhYmxlIGZvciBQYXJzZS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgdG9KU09OOiBmdW5jdGlvbigpIHtcbiAgICAgIFBhcnNlLkdlb1BvaW50Ll92YWxpZGF0ZSh0aGlzLmxhdGl0dWRlLCB0aGlzLmxvbmdpdHVkZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBcIl9fdHlwZVwiOiBcIkdlb1BvaW50XCIsXG4gICAgICAgIGxhdGl0dWRlOiB0aGlzLmxhdGl0dWRlLFxuICAgICAgICBsb25naXR1ZGU6IHRoaXMubG9uZ2l0dWRlXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSBmcm9tIHRoaXMgR2VvUG9pbnQgdG8gYW5vdGhlciBpbiByYWRpYW5zLlxuICAgICAqIEBwYXJhbSB7UGFyc2UuR2VvUG9pbnR9IHBvaW50IHRoZSBvdGhlciBQYXJzZS5HZW9Qb2ludC5cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgcmFkaWFuc1RvOiBmdW5jdGlvbihwb2ludCkge1xuICAgICAgdmFyIGQyciA9IE1hdGguUEkgLyAxODAuMDtcbiAgICAgIHZhciBsYXQxcmFkID0gdGhpcy5sYXRpdHVkZSAqIGQycjtcbiAgICAgIHZhciBsb25nMXJhZCA9IHRoaXMubG9uZ2l0dWRlICogZDJyO1xuICAgICAgdmFyIGxhdDJyYWQgPSBwb2ludC5sYXRpdHVkZSAqIGQycjtcbiAgICAgIHZhciBsb25nMnJhZCA9IHBvaW50LmxvbmdpdHVkZSAqIGQycjtcbiAgICAgIHZhciBkZWx0YUxhdCA9IGxhdDFyYWQgLSBsYXQycmFkO1xuICAgICAgdmFyIGRlbHRhTG9uZyA9IGxvbmcxcmFkIC0gbG9uZzJyYWQ7XG4gICAgICB2YXIgc2luRGVsdGFMYXREaXYyID0gTWF0aC5zaW4oZGVsdGFMYXQgLyAyKTtcbiAgICAgIHZhciBzaW5EZWx0YUxvbmdEaXYyID0gTWF0aC5zaW4oZGVsdGFMb25nIC8gMik7XG4gICAgICAvLyBTcXVhcmUgb2YgaGFsZiB0aGUgc3RyYWlnaHQgbGluZSBjaG9yZCBkaXN0YW5jZSBiZXR3ZWVuIGJvdGggcG9pbnRzLlxuICAgICAgdmFyIGEgPSAoKHNpbkRlbHRhTGF0RGl2MiAqIHNpbkRlbHRhTGF0RGl2MikgK1xuICAgICAgICAgICAgICAgKE1hdGguY29zKGxhdDFyYWQpICogTWF0aC5jb3MobGF0MnJhZCkgKlxuICAgICAgICAgICAgICAgIHNpbkRlbHRhTG9uZ0RpdjIgKiBzaW5EZWx0YUxvbmdEaXYyKSk7XG4gICAgICBhID0gTWF0aC5taW4oMS4wLCBhKTtcbiAgICAgIHJldHVybiAyICogTWF0aC5hc2luKE1hdGguc3FydChhKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRpc3RhbmNlIGZyb20gdGhpcyBHZW9Qb2ludCB0byBhbm90aGVyIGluIGtpbG9tZXRlcnMuXG4gICAgICogQHBhcmFtIHtQYXJzZS5HZW9Qb2ludH0gcG9pbnQgdGhlIG90aGVyIFBhcnNlLkdlb1BvaW50LlxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBraWxvbWV0ZXJzVG86IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5yYWRpYW5zVG8ocG9pbnQpICogNjM3MS4wO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSBmcm9tIHRoaXMgR2VvUG9pbnQgdG8gYW5vdGhlciBpbiBtaWxlcy5cbiAgICAgKiBAcGFyYW0ge1BhcnNlLkdlb1BvaW50fSBwb2ludCB0aGUgb3RoZXIgUGFyc2UuR2VvUG9pbnQuXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIG1pbGVzVG86IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5yYWRpYW5zVG8ocG9pbnQpICogMzk1OC44O1xuICAgIH1cbiAgfTtcbn0odGhpcykpO1xuXG4vKmdsb2JhbCBuYXZpZ2F0b3I6IGZhbHNlICovXG4oZnVuY3Rpb24ocm9vdCkge1xuICByb290LlBhcnNlID0gcm9vdC5QYXJzZSB8fCB7fTtcbiAgdmFyIFBhcnNlID0gcm9vdC5QYXJzZTtcbiAgdmFyIF8gPSBQYXJzZS5fO1xuXG4gIHZhciBQVUJMSUNfS0VZID0gXCIqXCI7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQUNMLlxuICAgKiBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgdGhlIEFDTCBoYXMgbm8gcGVybWlzc2lvbnMgZm9yIGFueW9uZS5cbiAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgUGFyc2UuVXNlciwgdGhlIEFDTCB3aWxsIGhhdmUgcmVhZCBhbmQgd3JpdGVcbiAgICogICBwZXJtaXNzaW9uIGZvciBvbmx5IHRoYXQgdXNlci5cbiAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGFueSBvdGhlciBKU09OIG9iamVjdCwgdGhhdCBvYmplY3Qgd2lsbCBiZSBpbnRlcnByZXR0ZWRcbiAgICogICBhcyBhIHNlcmlhbGl6ZWQgQUNMIGNyZWF0ZWQgd2l0aCB0b0pTT04oKS5cbiAgICogQHNlZSBQYXJzZS5PYmplY3Qjc2V0QUNMXG4gICAqIEBjbGFzc1xuICAgKlxuICAgKiA8cD5BbiBBQ0wsIG9yIEFjY2VzcyBDb250cm9sIExpc3QgY2FuIGJlIGFkZGVkIHRvIGFueVxuICAgKiA8Y29kZT5QYXJzZS5PYmplY3Q8L2NvZGU+IHRvIHJlc3RyaWN0IGFjY2VzcyB0byBvbmx5IGEgc3Vic2V0IG9mIHVzZXJzXG4gICAqIG9mIHlvdXIgYXBwbGljYXRpb24uPC9wPlxuICAgKi9cbiAgUGFyc2UuQUNMID0gZnVuY3Rpb24oYXJnMSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLnBlcm1pc3Npb25zQnlJZCA9IHt9O1xuICAgIGlmIChfLmlzT2JqZWN0KGFyZzEpKSB7XG4gICAgICBpZiAoYXJnMSBpbnN0YW5jZW9mIFBhcnNlLlVzZXIpIHtcbiAgICAgICAgc2VsZi5zZXRSZWFkQWNjZXNzKGFyZzEsIHRydWUpO1xuICAgICAgICBzZWxmLnNldFdyaXRlQWNjZXNzKGFyZzEsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihhcmcxKSkge1xuICAgICAgICAgIHRocm93IFwiUGFyc2UuQUNMKCkgY2FsbGVkIHdpdGggYSBmdW5jdGlvbi4gIERpZCB5b3UgZm9yZ2V0ICgpP1wiO1xuICAgICAgICB9XG4gICAgICAgIFBhcnNlLl9vYmplY3RFYWNoKGFyZzEsIGZ1bmN0aW9uKGFjY2Vzc0xpc3QsIHVzZXJJZCkge1xuICAgICAgICAgIGlmICghXy5pc1N0cmluZyh1c2VySWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBcIlRyaWVkIHRvIGNyZWF0ZSBhbiBBQ0wgd2l0aCBhbiBpbnZhbGlkIHVzZXJJZC5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi5wZXJtaXNzaW9uc0J5SWRbdXNlcklkXSA9IHt9O1xuICAgICAgICAgIFBhcnNlLl9vYmplY3RFYWNoKGFjY2Vzc0xpc3QsIGZ1bmN0aW9uKGFsbG93ZWQsIHBlcm1pc3Npb24pIHtcbiAgICAgICAgICAgIGlmIChwZXJtaXNzaW9uICE9PSBcInJlYWRcIiAmJiBwZXJtaXNzaW9uICE9PSBcIndyaXRlXCIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJUcmllZCB0byBjcmVhdGUgYW4gQUNMIHdpdGggYW4gaW52YWxpZCBwZXJtaXNzaW9uIHR5cGUuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIV8uaXNCb29sZWFuKGFsbG93ZWQpKSB7XG4gICAgICAgICAgICAgIHRocm93IFwiVHJpZWQgdG8gY3JlYXRlIGFuIEFDTCB3aXRoIGFuIGludmFsaWQgcGVybWlzc2lvbiB2YWx1ZS5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYucGVybWlzc2lvbnNCeUlkW3VzZXJJZF1bcGVybWlzc2lvbl0gPSBhbGxvd2VkO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKU09OLWVuY29kZWQgdmVyc2lvbiBvZiB0aGUgQUNMLlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBQYXJzZS5BQ0wucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLmNsb25lKHRoaXMucGVybWlzc2lvbnNCeUlkKTtcbiAgfTtcblxuICBQYXJzZS5BQ0wucHJvdG90eXBlLl9zZXRBY2Nlc3MgPSBmdW5jdGlvbihhY2Nlc3NUeXBlLCB1c2VySWQsIGFsbG93ZWQpIHtcbiAgICBpZiAodXNlcklkIGluc3RhbmNlb2YgUGFyc2UuVXNlcikge1xuICAgICAgdXNlcklkID0gdXNlcklkLmlkO1xuICAgIH0gZWxzZSBpZiAodXNlcklkIGluc3RhbmNlb2YgUGFyc2UuUm9sZSkge1xuICAgICAgdXNlcklkID0gXCJyb2xlOlwiICsgdXNlcklkLmdldE5hbWUoKTtcbiAgICB9XG4gICAgaWYgKCFfLmlzU3RyaW5nKHVzZXJJZCkpIHtcbiAgICAgIHRocm93IFwidXNlcklkIG11c3QgYmUgYSBzdHJpbmcuXCI7XG4gICAgfVxuICAgIGlmICghXy5pc0Jvb2xlYW4oYWxsb3dlZCkpIHtcbiAgICAgIHRocm93IFwiYWxsb3dlZCBtdXN0IGJlIGVpdGhlciB0cnVlIG9yIGZhbHNlLlwiO1xuICAgIH1cbiAgICB2YXIgcGVybWlzc2lvbnMgPSB0aGlzLnBlcm1pc3Npb25zQnlJZFt1c2VySWRdO1xuICAgIGlmICghcGVybWlzc2lvbnMpIHtcbiAgICAgIGlmICghYWxsb3dlZCkge1xuICAgICAgICAvLyBUaGUgdXNlciBhbHJlYWR5IGRvZXNuJ3QgaGF2ZSB0aGlzIHBlcm1pc3Npb24sIHNvIG5vIGFjdGlvbiBuZWVkZWQuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlcm1pc3Npb25zID0ge307XG4gICAgICAgIHRoaXMucGVybWlzc2lvbnNCeUlkW3VzZXJJZF0gPSBwZXJtaXNzaW9ucztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWxsb3dlZCkge1xuICAgICAgdGhpcy5wZXJtaXNzaW9uc0J5SWRbdXNlcklkXVthY2Nlc3NUeXBlXSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBwZXJtaXNzaW9uc1thY2Nlc3NUeXBlXTtcbiAgICAgIGlmIChfLmlzRW1wdHkocGVybWlzc2lvbnMpKSB7XG4gICAgICAgIGRlbGV0ZSBwZXJtaXNzaW9uc1t1c2VySWRdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBQYXJzZS5BQ0wucHJvdG90eXBlLl9nZXRBY2Nlc3MgPSBmdW5jdGlvbihhY2Nlc3NUeXBlLCB1c2VySWQpIHtcbiAgICBpZiAodXNlcklkIGluc3RhbmNlb2YgUGFyc2UuVXNlcikge1xuICAgICAgdXNlcklkID0gdXNlcklkLmlkO1xuICAgIH0gZWxzZSBpZiAodXNlcklkIGluc3RhbmNlb2YgUGFyc2UuUm9sZSkge1xuICAgICAgdXNlcklkID0gXCJyb2xlOlwiICsgdXNlcklkLmdldE5hbWUoKTtcbiAgICB9XG4gICAgdmFyIHBlcm1pc3Npb25zID0gdGhpcy5wZXJtaXNzaW9uc0J5SWRbdXNlcklkXTtcbiAgICBpZiAoIXBlcm1pc3Npb25zKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBwZXJtaXNzaW9uc1thY2Nlc3NUeXBlXSA/IHRydWUgOiBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHdoZXRoZXIgdGhlIGdpdmVuIHVzZXIgaXMgYWxsb3dlZCB0byByZWFkIHRoaXMgb2JqZWN0LlxuICAgKiBAcGFyYW0gdXNlcklkIEFuIGluc3RhbmNlIG9mIFBhcnNlLlVzZXIgb3IgaXRzIG9iamVjdElkLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFsbG93ZWQgV2hldGhlciB0aGF0IHVzZXIgc2hvdWxkIGhhdmUgcmVhZCBhY2Nlc3MuXG4gICAqL1xuICBQYXJzZS5BQ0wucHJvdG90eXBlLnNldFJlYWRBY2Nlc3MgPSBmdW5jdGlvbih1c2VySWQsIGFsbG93ZWQpIHtcbiAgICB0aGlzLl9zZXRBY2Nlc3MoXCJyZWFkXCIsIHVzZXJJZCwgYWxsb3dlZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIHRoZSBnaXZlbiB1c2VyIGlkIGlzICpleHBsaWNpdGx5KiBhbGxvd2VkIHRvIHJlYWQgdGhpcyBvYmplY3QuXG4gICAqIEV2ZW4gaWYgdGhpcyByZXR1cm5zIGZhbHNlLCB0aGUgdXNlciBtYXkgc3RpbGwgYmUgYWJsZSB0byBhY2Nlc3MgaXQgaWZcbiAgICogZ2V0UHVibGljUmVhZEFjY2VzcyByZXR1cm5zIHRydWUgb3IgYSByb2xlIHRoYXQgdGhlIHVzZXIgYmVsb25ncyB0byBoYXNcbiAgICogd3JpdGUgYWNjZXNzLlxuICAgKiBAcGFyYW0gdXNlcklkIEFuIGluc3RhbmNlIG9mIFBhcnNlLlVzZXIgb3IgaXRzIG9iamVjdElkLCBvciBhIFBhcnNlLlJvbGUuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBQYXJzZS5BQ0wucHJvdG90eXBlLmdldFJlYWRBY2Nlc3MgPSBmdW5jdGlvbih1c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0QWNjZXNzKFwicmVhZFwiLCB1c2VySWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgd2hldGhlciB0aGUgZ2l2ZW4gdXNlciBpZCBpcyBhbGxvd2VkIHRvIHdyaXRlIHRoaXMgb2JqZWN0LlxuICAgKiBAcGFyYW0gdXNlcklkIEFuIGluc3RhbmNlIG9mIFBhcnNlLlVzZXIgb3IgaXRzIG9iamVjdElkLCBvciBhIFBhcnNlLlJvbGUuLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFsbG93ZWQgV2hldGhlciB0aGF0IHVzZXIgc2hvdWxkIGhhdmUgd3JpdGUgYWNjZXNzLlxuICAgKi9cbiAgUGFyc2UuQUNMLnByb3RvdHlwZS5zZXRXcml0ZUFjY2VzcyA9IGZ1bmN0aW9uKHVzZXJJZCwgYWxsb3dlZCkge1xuICAgIHRoaXMuX3NldEFjY2VzcyhcIndyaXRlXCIsIHVzZXJJZCwgYWxsb3dlZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIHRoZSBnaXZlbiB1c2VyIGlkIGlzICpleHBsaWNpdGx5KiBhbGxvd2VkIHRvIHdyaXRlIHRoaXMgb2JqZWN0LlxuICAgKiBFdmVuIGlmIHRoaXMgcmV0dXJucyBmYWxzZSwgdGhlIHVzZXIgbWF5IHN0aWxsIGJlIGFibGUgdG8gd3JpdGUgaXQgaWZcbiAgICogZ2V0UHVibGljV3JpdGVBY2Nlc3MgcmV0dXJucyB0cnVlIG9yIGEgcm9sZSB0aGF0IHRoZSB1c2VyIGJlbG9uZ3MgdG8gaGFzXG4gICAqIHdyaXRlIGFjY2Vzcy5cbiAgICogQHBhcmFtIHVzZXJJZCBBbiBpbnN0YW5jZSBvZiBQYXJzZS5Vc2VyIG9yIGl0cyBvYmplY3RJZCwgb3IgYSBQYXJzZS5Sb2xlLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgUGFyc2UuQUNMLnByb3RvdHlwZS5nZXRXcml0ZUFjY2VzcyA9IGZ1bmN0aW9uKHVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRBY2Nlc3MoXCJ3cml0ZVwiLCB1c2VySWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgd2hldGhlciB0aGUgcHVibGljIGlzIGFsbG93ZWQgdG8gcmVhZCB0aGlzIG9iamVjdC5cbiAgICogQHBhcmFtIHtCb29sZWFufSBhbGxvd2VkXG4gICAqL1xuICBQYXJzZS5BQ0wucHJvdG90eXBlLnNldFB1YmxpY1JlYWRBY2Nlc3MgPSBmdW5jdGlvbihhbGxvd2VkKSB7XG4gICAgdGhpcy5zZXRSZWFkQWNjZXNzKFBVQkxJQ19LRVksIGFsbG93ZWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGUgcHVibGljIGlzIGFsbG93ZWQgdG8gcmVhZCB0aGlzIG9iamVjdC5cbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIFBhcnNlLkFDTC5wcm90b3R5cGUuZ2V0UHVibGljUmVhZEFjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFJlYWRBY2Nlc3MoUFVCTElDX0tFWSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB3aGV0aGVyIHRoZSBwdWJsaWMgaXMgYWxsb3dlZCB0byB3cml0ZSB0aGlzIG9iamVjdC5cbiAgICogQHBhcmFtIHtCb29sZWFufSBhbGxvd2VkXG4gICAqL1xuICBQYXJzZS5BQ0wucHJvdG90eXBlLnNldFB1YmxpY1dyaXRlQWNjZXNzID0gZnVuY3Rpb24oYWxsb3dlZCkge1xuICAgIHRoaXMuc2V0V3JpdGVBY2Nlc3MoUFVCTElDX0tFWSwgYWxsb3dlZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIHRoZSBwdWJsaWMgaXMgYWxsb3dlZCB0byB3cml0ZSB0aGlzIG9iamVjdC5cbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIFBhcnNlLkFDTC5wcm90b3R5cGUuZ2V0UHVibGljV3JpdGVBY2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRXcml0ZUFjY2VzcyhQVUJMSUNfS0VZKTtcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB1c2VycyBiZWxvbmdpbmcgdG8gdGhlIGdpdmVuIHJvbGUgYXJlIGFsbG93ZWRcbiAgICogdG8gcmVhZCB0aGlzIG9iamVjdC4gRXZlbiBpZiB0aGlzIHJldHVybnMgZmFsc2UsIHRoZSByb2xlIG1heVxuICAgKiBzdGlsbCBiZSBhYmxlIHRvIHdyaXRlIGl0IGlmIGEgcGFyZW50IHJvbGUgaGFzIHJlYWQgYWNjZXNzLlxuICAgKiBcbiAgICogQHBhcmFtIHJvbGUgVGhlIG5hbWUgb2YgdGhlIHJvbGUsIG9yIGEgUGFyc2UuUm9sZSBvYmplY3QuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIHJvbGUgaGFzIHJlYWQgYWNjZXNzLiBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEB0aHJvd3Mge1N0cmluZ30gSWYgcm9sZSBpcyBuZWl0aGVyIGEgUGFyc2UuUm9sZSBub3IgYSBTdHJpbmcuXG4gICAqL1xuICBQYXJzZS5BQ0wucHJvdG90eXBlLmdldFJvbGVSZWFkQWNjZXNzID0gZnVuY3Rpb24ocm9sZSkge1xuICAgIGlmIChyb2xlIGluc3RhbmNlb2YgUGFyc2UuUm9sZSkge1xuICAgICAgLy8gTm9ybWFsaXplIHRvIHRoZSBTdHJpbmcgbmFtZVxuICAgICAgcm9sZSA9IHJvbGUuZ2V0TmFtZSgpO1xuICAgIH1cbiAgICBpZiAoXy5pc1N0cmluZyhyb2xlKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVhZEFjY2VzcyhcInJvbGU6XCIgKyByb2xlKTtcbiAgICB9XG4gICAgdGhyb3cgXCJyb2xlIG11c3QgYmUgYSBQYXJzZS5Sb2xlIG9yIGEgU3RyaW5nXCI7XG4gIH07XG4gIFxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgdXNlcnMgYmVsb25naW5nIHRvIHRoZSBnaXZlbiByb2xlIGFyZSBhbGxvd2VkXG4gICAqIHRvIHdyaXRlIHRoaXMgb2JqZWN0LiBFdmVuIGlmIHRoaXMgcmV0dXJucyBmYWxzZSwgdGhlIHJvbGUgbWF5XG4gICAqIHN0aWxsIGJlIGFibGUgdG8gd3JpdGUgaXQgaWYgYSBwYXJlbnQgcm9sZSBoYXMgd3JpdGUgYWNjZXNzLlxuICAgKiBcbiAgICogQHBhcmFtIHJvbGUgVGhlIG5hbWUgb2YgdGhlIHJvbGUsIG9yIGEgUGFyc2UuUm9sZSBvYmplY3QuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIHJvbGUgaGFzIHdyaXRlIGFjY2Vzcy4gZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAdGhyb3dzIHtTdHJpbmd9IElmIHJvbGUgaXMgbmVpdGhlciBhIFBhcnNlLlJvbGUgbm9yIGEgU3RyaW5nLlxuICAgKi9cbiAgUGFyc2UuQUNMLnByb3RvdHlwZS5nZXRSb2xlV3JpdGVBY2Nlc3MgPSBmdW5jdGlvbihyb2xlKSB7XG4gICAgaWYgKHJvbGUgaW5zdGFuY2VvZiBQYXJzZS5Sb2xlKSB7XG4gICAgICAvLyBOb3JtYWxpemUgdG8gdGhlIFN0cmluZyBuYW1lXG4gICAgICByb2xlID0gcm9sZS5nZXROYW1lKCk7XG4gICAgfVxuICAgIGlmIChfLmlzU3RyaW5nKHJvbGUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRXcml0ZUFjY2VzcyhcInJvbGU6XCIgKyByb2xlKTtcbiAgICB9XG4gICAgdGhyb3cgXCJyb2xlIG11c3QgYmUgYSBQYXJzZS5Sb2xlIG9yIGEgU3RyaW5nXCI7XG4gIH07XG4gIFxuICAvKipcbiAgICogU2V0IHdoZXRoZXIgdXNlcnMgYmVsb25naW5nIHRvIHRoZSBnaXZlbiByb2xlIGFyZSBhbGxvd2VkXG4gICAqIHRvIHJlYWQgdGhpcyBvYmplY3QuXG4gICAqIFxuICAgKiBAcGFyYW0gcm9sZSBUaGUgbmFtZSBvZiB0aGUgcm9sZSwgb3IgYSBQYXJzZS5Sb2xlIG9iamVjdC5cbiAgICogQHBhcmFtIHtCb29sZWFufSBhbGxvd2VkIFdoZXRoZXIgdGhlIGdpdmVuIHJvbGUgY2FuIHJlYWQgdGhpcyBvYmplY3QuXG4gICAqIEB0aHJvd3Mge1N0cmluZ30gSWYgcm9sZSBpcyBuZWl0aGVyIGEgUGFyc2UuUm9sZSBub3IgYSBTdHJpbmcuXG4gICAqL1xuICBQYXJzZS5BQ0wucHJvdG90eXBlLnNldFJvbGVSZWFkQWNjZXNzID0gZnVuY3Rpb24ocm9sZSwgYWxsb3dlZCkge1xuICAgIGlmIChyb2xlIGluc3RhbmNlb2YgUGFyc2UuUm9sZSkge1xuICAgICAgLy8gTm9ybWFsaXplIHRvIHRoZSBTdHJpbmcgbmFtZVxuICAgICAgcm9sZSA9IHJvbGUuZ2V0TmFtZSgpO1xuICAgIH1cbiAgICBpZiAoXy5pc1N0cmluZyhyb2xlKSkge1xuICAgICAgdGhpcy5zZXRSZWFkQWNjZXNzKFwicm9sZTpcIiArIHJvbGUsIGFsbG93ZWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBcInJvbGUgbXVzdCBiZSBhIFBhcnNlLlJvbGUgb3IgYSBTdHJpbmdcIjtcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBTZXQgd2hldGhlciB1c2VycyBiZWxvbmdpbmcgdG8gdGhlIGdpdmVuIHJvbGUgYXJlIGFsbG93ZWRcbiAgICogdG8gd3JpdGUgdGhpcyBvYmplY3QuXG4gICAqIFxuICAgKiBAcGFyYW0gcm9sZSBUaGUgbmFtZSBvZiB0aGUgcm9sZSwgb3IgYSBQYXJzZS5Sb2xlIG9iamVjdC5cbiAgICogQHBhcmFtIHtCb29sZWFufSBhbGxvd2VkIFdoZXRoZXIgdGhlIGdpdmVuIHJvbGUgY2FuIHdyaXRlIHRoaXMgb2JqZWN0LlxuICAgKiBAdGhyb3dzIHtTdHJpbmd9IElmIHJvbGUgaXMgbmVpdGhlciBhIFBhcnNlLlJvbGUgbm9yIGEgU3RyaW5nLlxuICAgKi9cbiAgUGFyc2UuQUNMLnByb3RvdHlwZS5zZXRSb2xlV3JpdGVBY2Nlc3MgPSBmdW5jdGlvbihyb2xlLCBhbGxvd2VkKSB7XG4gICAgaWYgKHJvbGUgaW5zdGFuY2VvZiBQYXJzZS5Sb2xlKSB7XG4gICAgICAvLyBOb3JtYWxpemUgdG8gdGhlIFN0cmluZyBuYW1lXG4gICAgICByb2xlID0gcm9sZS5nZXROYW1lKCk7XG4gICAgfVxuICAgIGlmIChfLmlzU3RyaW5nKHJvbGUpKSB7XG4gICAgICB0aGlzLnNldFdyaXRlQWNjZXNzKFwicm9sZTpcIiArIHJvbGUsIGFsbG93ZWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBcInJvbGUgbXVzdCBiZSBhIFBhcnNlLlJvbGUgb3IgYSBTdHJpbmdcIjtcbiAgfTtcblxufSh0aGlzKSk7XG5cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICB2YXIgUGFyc2UgPSByb290LlBhcnNlO1xuICB2YXIgXyA9IFBhcnNlLl87XG5cbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBBIFBhcnNlLk9wIGlzIGFuIGF0b21pYyBvcGVyYXRpb24gdGhhdCBjYW4gYmUgYXBwbGllZCB0byBhIGZpZWxkIGluIGFcbiAgICogUGFyc2UuT2JqZWN0LiBGb3IgZXhhbXBsZSwgY2FsbGluZyA8Y29kZT5vYmplY3Quc2V0KFwiZm9vXCIsIFwiYmFyXCIpPC9jb2RlPlxuICAgKiBpcyBhbiBleGFtcGxlIG9mIGEgUGFyc2UuT3AuU2V0LiBDYWxsaW5nIDxjb2RlPm9iamVjdC51bnNldChcImZvb1wiKTwvY29kZT5cbiAgICogaXMgYSBQYXJzZS5PcC5VbnNldC4gVGhlc2Ugb3BlcmF0aW9ucyBhcmUgc3RvcmVkIGluIGEgUGFyc2UuT2JqZWN0IGFuZFxuICAgKiBzZW50IHRvIHRoZSBzZXJ2ZXIgYXMgcGFydCBvZiA8Y29kZT5vYmplY3Quc2F2ZSgpPC9jb2RlPiBvcGVyYXRpb25zLlxuICAgKiBJbnN0YW5jZXMgb2YgUGFyc2UuT3Agc2hvdWxkIGJlIGltbXV0YWJsZS5cbiAgICpcbiAgICogWW91IHNob3VsZCBub3QgY3JlYXRlIHN1YmNsYXNzZXMgb2YgUGFyc2UuT3Agb3IgaW5zdGFudGlhdGUgUGFyc2UuT3BcbiAgICogZGlyZWN0bHkuXG4gICAqL1xuICBQYXJzZS5PcCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2luaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcblxuICBQYXJzZS5PcC5wcm90b3R5cGUgPSB7XG4gICAgX2luaXRpYWxpemU6IGZ1bmN0aW9uKCkge31cbiAgfTtcblxuICBfLmV4dGVuZChQYXJzZS5PcCwge1xuICAgIC8qKlxuICAgICAqIFRvIGNyZWF0ZSBhIG5ldyBPcCwgY2FsbCBQYXJzZS5PcC5fZXh0ZW5kKCk7XG4gICAgICovXG4gICAgX2V4dGVuZDogUGFyc2UuX2V4dGVuZCxcblxuICAgIC8vIEEgbWFwIG9mIF9fb3Agc3RyaW5nIHRvIGRlY29kZXIgZnVuY3Rpb24uXG4gICAgX29wRGVjb2Rlck1hcDoge30sXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBmdW5jdGlvbiB0byBjb252ZXJ0IGEganNvbiBvYmplY3Qgd2l0aCBhbiBfX29wIGZpZWxkIGludG8gYW5cbiAgICAgKiBpbnN0YW5jZSBvZiBhIHN1YmNsYXNzIG9mIFBhcnNlLk9wLlxuICAgICAqL1xuICAgIF9yZWdpc3RlckRlY29kZXI6IGZ1bmN0aW9uKG9wTmFtZSwgZGVjb2Rlcikge1xuICAgICAgUGFyc2UuT3AuX29wRGVjb2Rlck1hcFtvcE5hbWVdID0gZGVjb2RlcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBqc29uIG9iamVjdCBpbnRvIGFuIGluc3RhbmNlIG9mIGEgc3ViY2xhc3Mgb2YgUGFyc2UuT3AuXG4gICAgICovXG4gICAgX2RlY29kZTogZnVuY3Rpb24oanNvbikge1xuICAgICAgdmFyIGRlY29kZXIgPSBQYXJzZS5PcC5fb3BEZWNvZGVyTWFwW2pzb24uX19vcF07XG4gICAgICBpZiAoZGVjb2Rlcikge1xuICAgICAgICByZXR1cm4gZGVjb2Rlcihqc29uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvKlxuICAgKiBBZGQgYSBoYW5kbGVyIGZvciBCYXRjaCBvcHMuXG4gICAqL1xuICBQYXJzZS5PcC5fcmVnaXN0ZXJEZWNvZGVyKFwiQmF0Y2hcIiwgZnVuY3Rpb24oanNvbikge1xuICAgIHZhciBvcCA9IG51bGw7XG4gICAgUGFyc2UuX2FycmF5RWFjaChqc29uLm9wcywgZnVuY3Rpb24obmV4dE9wKSB7XG4gICAgICBuZXh0T3AgPSBQYXJzZS5PcC5fZGVjb2RlKG5leHRPcCk7XG4gICAgICBvcCA9IG5leHRPcC5fbWVyZ2VXaXRoUHJldmlvdXMob3ApO1xuICAgIH0pO1xuICAgIHJldHVybiBvcDtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBBIFNldCBvcGVyYXRpb24gaW5kaWNhdGVzIHRoYXQgZWl0aGVyIHRoZSBmaWVsZCB3YXMgY2hhbmdlZCB1c2luZ1xuICAgKiBQYXJzZS5PYmplY3Quc2V0LCBvciBpdCBpcyBhIG11dGFibGUgY29udGFpbmVyIHRoYXQgd2FzIGRldGVjdGVkIGFzIGJlaW5nXG4gICAqIGNoYW5nZWQuXG4gICAqL1xuICBQYXJzZS5PcC5TZXQgPSBQYXJzZS5PcC5fZXh0ZW5kKC8qKiBAbGVuZHMgUGFyc2UuT3AuU2V0LnByb3RvdHlwZSAqLyB7XG4gICAgX2luaXRpYWxpemU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuZXcgdmFsdWUgb2YgdGhpcyBmaWVsZCBhZnRlciB0aGUgc2V0LlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gdmVyc2lvbiBvZiB0aGUgb3BlcmF0aW9uIHN1aXRhYmxlIGZvciBzZW5kaW5nIHRvIFBhcnNlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFBhcnNlLl9lbmNvZGUodGhpcy52YWx1ZSgpKTtcbiAgICB9LFxuXG4gICAgX21lcmdlV2l0aFByZXZpb3VzOiBmdW5jdGlvbihwcmV2aW91cykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIF9lc3RpbWF0ZTogZnVuY3Rpb24ob2xkVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlKCk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IGlzIHJldHVybmVkIGJ5IFBhcnNlLk9wLlVuc2V0Ll9lc3RpbWF0ZSB0b1xuICAgKiBpbmRpY2F0ZSB0aGUgZmllbGQgc2hvdWxkIGJlIGRlbGV0ZWQuIEJhc2ljYWxseSwgaWYgeW91IGZpbmQgX1VOU0VUIGFzIGFcbiAgICogdmFsdWUgaW4geW91ciBvYmplY3QsIHlvdSBzaG91bGQgcmVtb3ZlIHRoYXQga2V5LlxuICAgKi9cbiAgUGFyc2UuT3AuX1VOU0VUID0ge307XG5cbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBBbiBVbnNldCBvcGVyYXRpb24gaW5kaWNhdGVzIHRoYXQgdGhpcyBmaWVsZCBoYXMgYmVlbiBkZWxldGVkIGZyb20gdGhlXG4gICAqIG9iamVjdC5cbiAgICovXG4gIFBhcnNlLk9wLlVuc2V0ID0gUGFyc2UuT3AuX2V4dGVuZCgvKiogQGxlbmRzIFBhcnNlLk9wLlVuc2V0LnByb3RvdHlwZSAqLyB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gdmVyc2lvbiBvZiB0aGUgb3BlcmF0aW9uIHN1aXRhYmxlIGZvciBzZW5kaW5nIHRvIFBhcnNlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHsgX19vcDogXCJEZWxldGVcIiB9O1xuICAgIH0sXG5cbiAgICBfbWVyZ2VXaXRoUHJldmlvdXM6IGZ1bmN0aW9uKHByZXZpb3VzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgX2VzdGltYXRlOiBmdW5jdGlvbihvbGRWYWx1ZSkge1xuICAgICAgcmV0dXJuIFBhcnNlLk9wLl9VTlNFVDtcbiAgICB9XG4gIH0pO1xuXG4gIFBhcnNlLk9wLl9yZWdpc3RlckRlY29kZXIoXCJEZWxldGVcIiwgZnVuY3Rpb24oanNvbikge1xuICAgIHJldHVybiBuZXcgUGFyc2UuT3AuVW5zZXQoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBBbiBJbmNyZW1lbnQgaXMgYW4gYXRvbWljIG9wZXJhdGlvbiB3aGVyZSB0aGUgbnVtZXJpYyB2YWx1ZSBmb3IgdGhlIGZpZWxkXG4gICAqIHdpbGwgYmUgaW5jcmVhc2VkIGJ5IGEgZ2l2ZW4gYW1vdW50LlxuICAgKi9cbiAgUGFyc2UuT3AuSW5jcmVtZW50ID0gUGFyc2UuT3AuX2V4dGVuZChcbiAgICAgIC8qKiBAbGVuZHMgUGFyc2UuT3AuSW5jcmVtZW50LnByb3RvdHlwZSAqLyB7XG5cbiAgICBfaW5pdGlhbGl6ZTogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICB0aGlzLl9hbW91bnQgPSBhbW91bnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFtb3VudCB0byBpbmNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybiB7TnVtYmVyfSB0aGUgYW1vdW50IHRvIGluY3JlbWVudCBieS5cbiAgICAgKi9cbiAgICBhbW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Ftb3VudDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gdmVyc2lvbiBvZiB0aGUgb3BlcmF0aW9uIHN1aXRhYmxlIGZvciBzZW5kaW5nIHRvIFBhcnNlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHsgX19vcDogXCJJbmNyZW1lbnRcIiwgYW1vdW50OiB0aGlzLl9hbW91bnQgfTtcbiAgICB9LFxuXG4gICAgX21lcmdlV2l0aFByZXZpb3VzOiBmdW5jdGlvbihwcmV2aW91cykge1xuICAgICAgaWYgKCFwcmV2aW91cykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAocHJldmlvdXMgaW5zdGFuY2VvZiBQYXJzZS5PcC5VbnNldCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlLk9wLlNldCh0aGlzLmFtb3VudCgpKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldmlvdXMgaW5zdGFuY2VvZiBQYXJzZS5PcC5TZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZS5PcC5TZXQocHJldmlvdXMudmFsdWUoKSArIHRoaXMuYW1vdW50KCkpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2aW91cyBpbnN0YW5jZW9mIFBhcnNlLk9wLkluY3JlbWVudCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlLk9wLkluY3JlbWVudCh0aGlzLmFtb3VudCgpICsgcHJldmlvdXMuYW1vdW50KCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgXCJPcCBpcyBpbnZhbGlkIGFmdGVyIHByZXZpb3VzIG9wLlwiO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfZXN0aW1hdGU6IGZ1bmN0aW9uKG9sZFZhbHVlKSB7XG4gICAgICBpZiAoIW9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFtb3VudCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9sZFZhbHVlICsgdGhpcy5hbW91bnQoKTtcbiAgICB9XG4gIH0pO1xuXG4gIFBhcnNlLk9wLl9yZWdpc3RlckRlY29kZXIoXCJJbmNyZW1lbnRcIiwgZnVuY3Rpb24oanNvbikge1xuICAgIHJldHVybiBuZXcgUGFyc2UuT3AuSW5jcmVtZW50KGpzb24uYW1vdW50KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBBZGQgaXMgYW4gYXRvbWljIG9wZXJhdGlvbiB3aGVyZSB0aGUgZ2l2ZW4gb2JqZWN0cyB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZVxuICAgKiBhcnJheSB0aGF0IGlzIHN0b3JlZCBpbiB0aGlzIGZpZWxkLlxuICAgKi9cbiAgUGFyc2UuT3AuQWRkID0gUGFyc2UuT3AuX2V4dGVuZCgvKiogQGxlbmRzIFBhcnNlLk9wLkFkZC5wcm90b3R5cGUgKi8ge1xuICAgIF9pbml0aWFsaXplOiBmdW5jdGlvbihvYmplY3RzKSB7XG4gICAgICB0aGlzLl9vYmplY3RzID0gb2JqZWN0cztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb2JqZWN0cyB0byBiZSBhZGRlZCB0byB0aGUgYXJyYXkuXG4gICAgICogQHJldHVybiB7QXJyYXl9IFRoZSBvYmplY3RzIHRvIGJlIGFkZGVkIHRvIHRoZSBhcnJheS5cbiAgICAgKi9cbiAgICBvYmplY3RzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vYmplY3RzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgSlNPTiB2ZXJzaW9uIG9mIHRoZSBvcGVyYXRpb24gc3VpdGFibGUgZm9yIHNlbmRpbmcgdG8gUGFyc2UuXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRvSlNPTjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geyBfX29wOiBcIkFkZFwiLCBvYmplY3RzOiBQYXJzZS5fZW5jb2RlKHRoaXMub2JqZWN0cygpKSB9O1xuICAgIH0sXG5cbiAgICBfbWVyZ2VXaXRoUHJldmlvdXM6IGZ1bmN0aW9uKHByZXZpb3VzKSB7XG4gICAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIGlmIChwcmV2aW91cyBpbnN0YW5jZW9mIFBhcnNlLk9wLlVuc2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2UuT3AuU2V0KHRoaXMub2JqZWN0cygpKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldmlvdXMgaW5zdGFuY2VvZiBQYXJzZS5PcC5TZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZS5PcC5TZXQodGhpcy5fZXN0aW1hdGUocHJldmlvdXMudmFsdWUoKSkpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2aW91cyBpbnN0YW5jZW9mIFBhcnNlLk9wLkFkZCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlLk9wLkFkZChwcmV2aW91cy5vYmplY3RzKCkuY29uY2F0KHRoaXMub2JqZWN0cygpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBcIk9wIGlzIGludmFsaWQgYWZ0ZXIgcHJldmlvdXMgb3AuXCI7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9lc3RpbWF0ZTogZnVuY3Rpb24ob2xkVmFsdWUpIHtcbiAgICAgIGlmICghb2xkVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF8uY2xvbmUodGhpcy5vYmplY3RzKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9sZFZhbHVlLmNvbmNhdCh0aGlzLm9iamVjdHMoKSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBQYXJzZS5PcC5fcmVnaXN0ZXJEZWNvZGVyKFwiQWRkXCIsIGZ1bmN0aW9uKGpzb24pIHtcbiAgICByZXR1cm4gbmV3IFBhcnNlLk9wLkFkZChQYXJzZS5fZGVjb2RlKHVuZGVmaW5lZCwganNvbi5vYmplY3RzKSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQWRkVW5pcXVlIGlzIGFuIGF0b21pYyBvcGVyYXRpb24gd2hlcmUgdGhlIGdpdmVuIGl0ZW1zIHdpbGwgYmUgYXBwZW5kZWQgdG9cbiAgICogdGhlIGFycmF5IHRoYXQgaXMgc3RvcmVkIGluIHRoaXMgZmllbGQgb25seSBpZiB0aGV5IHdlcmUgbm90IGFscmVhZHlcbiAgICogcHJlc2VudCBpbiB0aGUgYXJyYXkuXG4gICAqL1xuICBQYXJzZS5PcC5BZGRVbmlxdWUgPSBQYXJzZS5PcC5fZXh0ZW5kKFxuICAgICAgLyoqIEBsZW5kcyBQYXJzZS5PcC5BZGRVbmlxdWUucHJvdG90eXBlICovIHtcblxuICAgIF9pbml0aWFsaXplOiBmdW5jdGlvbihvYmplY3RzKSB7XG4gICAgICB0aGlzLl9vYmplY3RzID0gXy51bmlxKG9iamVjdHMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvYmplY3RzIHRvIGJlIGFkZGVkIHRvIHRoZSBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gVGhlIG9iamVjdHMgdG8gYmUgYWRkZWQgdG8gdGhlIGFycmF5LlxuICAgICAqL1xuICAgIG9iamVjdHM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29iamVjdHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBKU09OIHZlcnNpb24gb2YgdGhlIG9wZXJhdGlvbiBzdWl0YWJsZSBmb3Igc2VuZGluZyB0byBQYXJzZS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgdG9KU09OOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7IF9fb3A6IFwiQWRkVW5pcXVlXCIsIG9iamVjdHM6IFBhcnNlLl9lbmNvZGUodGhpcy5vYmplY3RzKCkpIH07XG4gICAgfSxcblxuICAgIF9tZXJnZVdpdGhQcmV2aW91czogZnVuY3Rpb24ocHJldmlvdXMpIHtcbiAgICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2UgaWYgKHByZXZpb3VzIGluc3RhbmNlb2YgUGFyc2UuT3AuVW5zZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZS5PcC5TZXQodGhpcy5vYmplY3RzKCkpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2aW91cyBpbnN0YW5jZW9mIFBhcnNlLk9wLlNldCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlLk9wLlNldCh0aGlzLl9lc3RpbWF0ZShwcmV2aW91cy52YWx1ZSgpKSk7XG4gICAgICB9IGVsc2UgaWYgKHByZXZpb3VzIGluc3RhbmNlb2YgUGFyc2UuT3AuQWRkVW5pcXVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2UuT3AuQWRkVW5pcXVlKHRoaXMuX2VzdGltYXRlKHByZXZpb3VzLm9iamVjdHMoKSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgXCJPcCBpcyBpbnZhbGlkIGFmdGVyIHByZXZpb3VzIG9wLlwiO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfZXN0aW1hdGU6IGZ1bmN0aW9uKG9sZFZhbHVlKSB7XG4gICAgICBpZiAoIW9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfLmNsb25lKHRoaXMub2JqZWN0cygpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIGNhbid0IGp1c3QgdGFrZSB0aGUgXy51bmlxKF8udW5pb24oLi4uKSkgb2Ygb2xkVmFsdWUgYW5kXG4gICAgICAgIC8vIHRoaXMub2JqZWN0cywgYmVjYXVzZSB0aGUgdW5pcXVlbmVzcyBtYXkgbm90IGFwcGx5IHRvIG9sZFZhbHVlXG4gICAgICAgIC8vIChlc3BlY2lhbGx5IGlmIHRoZSBvbGRWYWx1ZSB3YXMgc2V0IHZpYSAuc2V0KCkpXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IF8uY2xvbmUob2xkVmFsdWUpO1xuICAgICAgICBQYXJzZS5fYXJyYXlFYWNoKHRoaXMub2JqZWN0cygpLCBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgUGFyc2UuT2JqZWN0ICYmIG9iai5pZCkge1xuICAgICAgICAgICAgdmFyIG1hdGNoaW5nT2JqID0gXy5maW5kKG5ld1ZhbHVlLCBmdW5jdGlvbihhbk9iaikge1xuICAgICAgICAgICAgICByZXR1cm4gKGFuT2JqIGluc3RhbmNlb2YgUGFyc2UuT2JqZWN0KSAmJiAoYW5PYmouaWQgPT09IG9iai5pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghbWF0Y2hpbmdPYmopIHtcbiAgICAgICAgICAgICAgbmV3VmFsdWUucHVzaChvYmopO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGluZGV4ID0gXy5pbmRleE9mKG5ld1ZhbHVlLCBtYXRjaGluZ09iaik7XG4gICAgICAgICAgICAgIG5ld1ZhbHVlW2luZGV4XSA9IG9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFfLmNvbnRhaW5zKG5ld1ZhbHVlLCBvYmopKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZS5wdXNoKG9iaik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgUGFyc2UuT3AuX3JlZ2lzdGVyRGVjb2RlcihcIkFkZFVuaXF1ZVwiLCBmdW5jdGlvbihqc29uKSB7XG4gICAgcmV0dXJuIG5ldyBQYXJzZS5PcC5BZGRVbmlxdWUoUGFyc2UuX2RlY29kZSh1bmRlZmluZWQsIGpzb24ub2JqZWN0cykpO1xuICB9KTtcblxuICAvKipcbiAgICogQGNsYXNzXG4gICAqIFJlbW92ZSBpcyBhbiBhdG9taWMgb3BlcmF0aW9uIHdoZXJlIHRoZSBnaXZlbiBvYmplY3RzIHdpbGwgYmUgcmVtb3ZlZCBmcm9tXG4gICAqIHRoZSBhcnJheSB0aGF0IGlzIHN0b3JlZCBpbiB0aGlzIGZpZWxkLlxuICAgKi9cbiAgUGFyc2UuT3AuUmVtb3ZlID0gUGFyc2UuT3AuX2V4dGVuZCgvKiogQGxlbmRzIFBhcnNlLk9wLlJlbW92ZS5wcm90b3R5cGUgKi8ge1xuICAgIF9pbml0aWFsaXplOiBmdW5jdGlvbihvYmplY3RzKSB7XG4gICAgICB0aGlzLl9vYmplY3RzID0gXy51bmlxKG9iamVjdHMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvYmplY3RzIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgYXJyYXkuXG4gICAgICogQHJldHVybiB7QXJyYXl9IFRoZSBvYmplY3RzIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgYXJyYXkuXG4gICAgICovXG4gICAgb2JqZWN0czogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0cztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gdmVyc2lvbiBvZiB0aGUgb3BlcmF0aW9uIHN1aXRhYmxlIGZvciBzZW5kaW5nIHRvIFBhcnNlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHsgX19vcDogXCJSZW1vdmVcIiwgb2JqZWN0czogUGFyc2UuX2VuY29kZSh0aGlzLm9iamVjdHMoKSkgfTtcbiAgICB9LFxuXG4gICAgX21lcmdlV2l0aFByZXZpb3VzOiBmdW5jdGlvbihwcmV2aW91cykge1xuICAgICAgaWYgKCFwcmV2aW91cykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAocHJldmlvdXMgaW5zdGFuY2VvZiBQYXJzZS5PcC5VbnNldCkge1xuICAgICAgICByZXR1cm4gcHJldmlvdXM7XG4gICAgICB9IGVsc2UgaWYgKHByZXZpb3VzIGluc3RhbmNlb2YgUGFyc2UuT3AuU2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2UuT3AuU2V0KHRoaXMuX2VzdGltYXRlKHByZXZpb3VzLnZhbHVlKCkpKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldmlvdXMgaW5zdGFuY2VvZiBQYXJzZS5PcC5SZW1vdmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZS5PcC5SZW1vdmUoXy51bmlvbihwcmV2aW91cy5vYmplY3RzKCksIHRoaXMub2JqZWN0cygpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBcIk9wIGlzIGludmFsaWQgYWZ0ZXIgcHJldmlvdXMgb3AuXCI7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9lc3RpbWF0ZTogZnVuY3Rpb24ob2xkVmFsdWUpIHtcbiAgICAgIGlmICghb2xkVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gXy5kaWZmZXJlbmNlKG9sZFZhbHVlLCB0aGlzLm9iamVjdHMoKSk7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBzYXZlZCBQYXJzZSBPYmplY3RzIGJlaW5nIHJlbW92ZWQsIGFsc28gcmVtb3ZlIHRoZW0uXG4gICAgICAgIFBhcnNlLl9hcnJheUVhY2godGhpcy5vYmplY3RzKCksIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBQYXJzZS5PYmplY3QgJiYgb2JqLmlkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IF8ucmVqZWN0KG5ld1ZhbHVlLCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICAgICAgICByZXR1cm4gKG90aGVyIGluc3RhbmNlb2YgUGFyc2UuT2JqZWN0KSAmJiAob3RoZXIuaWQgPT09IG9iai5pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBQYXJzZS5PcC5fcmVnaXN0ZXJEZWNvZGVyKFwiUmVtb3ZlXCIsIGZ1bmN0aW9uKGpzb24pIHtcbiAgICByZXR1cm4gbmV3IFBhcnNlLk9wLlJlbW92ZShQYXJzZS5fZGVjb2RlKHVuZGVmaW5lZCwganNvbi5vYmplY3RzKSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQSBSZWxhdGlvbiBvcGVyYXRpb24gaW5kaWNhdGVzIHRoYXQgdGhlIGZpZWxkIGlzIGFuIGluc3RhbmNlIG9mXG4gICAqIFBhcnNlLlJlbGF0aW9uLCBhbmQgb2JqZWN0cyBhcmUgYmVpbmcgYWRkZWQgdG8sIG9yIHJlbW92ZWQgZnJvbSwgdGhhdFxuICAgKiByZWxhdGlvbi5cbiAgICovXG4gIFBhcnNlLk9wLlJlbGF0aW9uID0gUGFyc2UuT3AuX2V4dGVuZChcbiAgICAgIC8qKiBAbGVuZHMgUGFyc2UuT3AuUmVsYXRpb24ucHJvdG90eXBlICovIHtcblxuICAgIF9pbml0aWFsaXplOiBmdW5jdGlvbihhZGRzLCByZW1vdmVzKSB7XG4gICAgICB0aGlzLl90YXJnZXRDbGFzc05hbWUgPSBudWxsO1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHZhciBwb2ludGVyVG9JZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgUGFyc2UuT2JqZWN0KSB7XG4gICAgICAgICAgaWYgKCFvYmplY3QuaWQpIHtcbiAgICAgICAgICAgIHRocm93IFwiWW91IGNhbid0IGFkZCBhbiB1bnNhdmVkIFBhcnNlLk9iamVjdCB0byBhIHJlbGF0aW9uLlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXNlbGYuX3RhcmdldENsYXNzTmFtZSkge1xuICAgICAgICAgICAgc2VsZi5fdGFyZ2V0Q2xhc3NOYW1lID0gb2JqZWN0LmNsYXNzTmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlbGYuX3RhcmdldENsYXNzTmFtZSAhPT0gb2JqZWN0LmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgXCJUcmllZCB0byBjcmVhdGUgYSBQYXJzZS5SZWxhdGlvbiB3aXRoIDIgZGlmZmVyZW50IHR5cGVzOiBcIiArXG4gICAgICAgICAgICAgICAgICBzZWxmLl90YXJnZXRDbGFzc05hbWUgKyBcIiBhbmQgXCIgKyBvYmplY3QuY2xhc3NOYW1lICsgXCIuXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvYmplY3QuaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucmVsYXRpb25zVG9BZGQgPSBfLnVuaXEoXy5tYXAoYWRkcywgcG9pbnRlclRvSWQpKTtcbiAgICAgIHRoaXMucmVsYXRpb25zVG9SZW1vdmUgPSBfLnVuaXEoXy5tYXAocmVtb3ZlcywgcG9pbnRlclRvSWQpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiB1bmZldGNoZWQgUGFyc2UuT2JqZWN0IHRoYXQgYXJlIGJlaW5nIGFkZGVkIHRvIHRoZVxuICAgICAqIHJlbGF0aW9uLlxuICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAqL1xuICAgIGFkZGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHJldHVybiBfLm1hcCh0aGlzLnJlbGF0aW9uc1RvQWRkLCBmdW5jdGlvbihvYmplY3RJZCkge1xuICAgICAgICB2YXIgb2JqZWN0ID0gUGFyc2UuT2JqZWN0Ll9jcmVhdGUoc2VsZi5fdGFyZ2V0Q2xhc3NOYW1lKTtcbiAgICAgICAgb2JqZWN0LmlkID0gb2JqZWN0SWQ7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiB1bmZldGNoZWQgUGFyc2UuT2JqZWN0IHRoYXQgYXJlIGJlaW5nIHJlbW92ZWQgZnJvbVxuICAgICAqIHRoZSByZWxhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICByZW1vdmVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHJldHVybiBfLm1hcCh0aGlzLnJlbGF0aW9uc1RvUmVtb3ZlLCBmdW5jdGlvbihvYmplY3RJZCkge1xuICAgICAgICB2YXIgb2JqZWN0ID0gUGFyc2UuT2JqZWN0Ll9jcmVhdGUoc2VsZi5fdGFyZ2V0Q2xhc3NOYW1lKTtcbiAgICAgICAgb2JqZWN0LmlkID0gb2JqZWN0SWQ7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gdmVyc2lvbiBvZiB0aGUgb3BlcmF0aW9uIHN1aXRhYmxlIGZvciBzZW5kaW5nIHRvIFBhcnNlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFkZHMgPSBudWxsO1xuICAgICAgdmFyIHJlbW92ZXMgPSBudWxsO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGlkVG9Qb2ludGVyID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgcmV0dXJuIHsgX190eXBlOiAnUG9pbnRlcicsXG4gICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogc2VsZi5fdGFyZ2V0Q2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgICBvYmplY3RJZDogaWQgfTtcbiAgICAgIH07XG4gICAgICB2YXIgcG9pbnRlcnMgPSBudWxsO1xuICAgICAgaWYgKHRoaXMucmVsYXRpb25zVG9BZGQubGVuZ3RoID4gMCkge1xuICAgICAgICBwb2ludGVycyA9IF8ubWFwKHRoaXMucmVsYXRpb25zVG9BZGQsIGlkVG9Qb2ludGVyKTtcbiAgICAgICAgYWRkcyA9IHsgXCJfX29wXCI6IFwiQWRkUmVsYXRpb25cIiwgXCJvYmplY3RzXCI6IHBvaW50ZXJzIH07XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnJlbGF0aW9uc1RvUmVtb3ZlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcG9pbnRlcnMgPSBfLm1hcCh0aGlzLnJlbGF0aW9uc1RvUmVtb3ZlLCBpZFRvUG9pbnRlcik7XG4gICAgICAgIHJlbW92ZXMgPSB7IFwiX19vcFwiOiBcIlJlbW92ZVJlbGF0aW9uXCIsIFwib2JqZWN0c1wiOiBwb2ludGVycyB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkcyAmJiByZW1vdmVzKSB7XG4gICAgICAgIHJldHVybiB7IFwiX19vcFwiOiBcIkJhdGNoXCIsIFwib3BzXCI6IFthZGRzLCByZW1vdmVzXX07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhZGRzIHx8IHJlbW92ZXMgfHwge307XG4gICAgfSxcblxuICAgIF9tZXJnZVdpdGhQcmV2aW91czogZnVuY3Rpb24ocHJldmlvdXMpIHtcbiAgICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2UgaWYgKHByZXZpb3VzIGluc3RhbmNlb2YgUGFyc2UuT3AuVW5zZXQpIHtcbiAgICAgICAgdGhyb3cgXCJZb3UgY2FuJ3QgbW9kaWZ5IGEgcmVsYXRpb24gYWZ0ZXIgZGVsZXRpbmcgaXQuXCI7XG4gICAgICB9IGVsc2UgaWYgKHByZXZpb3VzIGluc3RhbmNlb2YgUGFyc2UuT3AuUmVsYXRpb24pIHtcbiAgICAgICAgaWYgKHByZXZpb3VzLl90YXJnZXRDbGFzc05hbWUgJiZcbiAgICAgICAgICAgIHByZXZpb3VzLl90YXJnZXRDbGFzc05hbWUgIT09IHRoaXMuX3RhcmdldENsYXNzTmFtZSkge1xuICAgICAgICAgIHRocm93IFwiUmVsYXRlZCBvYmplY3QgbXVzdCBiZSBvZiBjbGFzcyBcIiArIHByZXZpb3VzLl90YXJnZXRDbGFzc05hbWUgK1xuICAgICAgICAgICAgICBcIiwgYnV0IFwiICsgdGhpcy5fdGFyZ2V0Q2xhc3NOYW1lICsgXCIgd2FzIHBhc3NlZCBpbi5cIjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3QWRkID0gXy51bmlvbihfLmRpZmZlcmVuY2UocHJldmlvdXMucmVsYXRpb25zVG9BZGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aW9uc1RvUmVtb3ZlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGlvbnNUb0FkZCk7XG4gICAgICAgIHZhciBuZXdSZW1vdmUgPSBfLnVuaW9uKF8uZGlmZmVyZW5jZShwcmV2aW91cy5yZWxhdGlvbnNUb1JlbW92ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpb25zVG9BZGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aW9uc1RvUmVtb3ZlKTtcblxuICAgICAgICB2YXIgbmV3UmVsYXRpb24gPSBuZXcgUGFyc2UuT3AuUmVsYXRpb24obmV3QWRkLCBuZXdSZW1vdmUpO1xuICAgICAgICBuZXdSZWxhdGlvbi5fdGFyZ2V0Q2xhc3NOYW1lID0gdGhpcy5fdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgICByZXR1cm4gbmV3UmVsYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBcIk9wIGlzIGludmFsaWQgYWZ0ZXIgcHJldmlvdXMgb3AuXCI7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9lc3RpbWF0ZTogZnVuY3Rpb24ob2xkVmFsdWUsIG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoIW9sZFZhbHVlKSB7XG4gICAgICAgIHZhciByZWxhdGlvbiA9IG5ldyBQYXJzZS5SZWxhdGlvbihvYmplY3QsIGtleSk7XG4gICAgICAgIHJlbGF0aW9uLnRhcmdldENsYXNzTmFtZSA9IHRoaXMuX3RhcmdldENsYXNzTmFtZTtcbiAgICAgIH0gZWxzZSBpZiAob2xkVmFsdWUgaW5zdGFuY2VvZiBQYXJzZS5SZWxhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5fdGFyZ2V0Q2xhc3NOYW1lKSB7XG4gICAgICAgICAgaWYgKG9sZFZhbHVlLnRhcmdldENsYXNzTmFtZSkge1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlLnRhcmdldENsYXNzTmFtZSAhPT0gdGhpcy5fdGFyZ2V0Q2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgIHRocm93IFwiUmVsYXRlZCBvYmplY3QgbXVzdCBiZSBhIFwiICsgb2xkVmFsdWUudGFyZ2V0Q2xhc3NOYW1lICtcbiAgICAgICAgICAgICAgICAgIFwiLCBidXQgYSBcIiArIHRoaXMuX3RhcmdldENsYXNzTmFtZSArIFwiIHdhcyBwYXNzZWQgaW4uXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9sZFZhbHVlLnRhcmdldENsYXNzTmFtZSA9IHRoaXMuX3RhcmdldENsYXNzTmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9sZFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgXCJPcCBpcyBpbnZhbGlkIGFmdGVyIHByZXZpb3VzIG9wLlwiO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgUGFyc2UuT3AuX3JlZ2lzdGVyRGVjb2RlcihcIkFkZFJlbGF0aW9uXCIsIGZ1bmN0aW9uKGpzb24pIHtcbiAgICByZXR1cm4gbmV3IFBhcnNlLk9wLlJlbGF0aW9uKFBhcnNlLl9kZWNvZGUodW5kZWZpbmVkLCBqc29uLm9iamVjdHMpLCBbXSk7XG4gIH0pO1xuICBQYXJzZS5PcC5fcmVnaXN0ZXJEZWNvZGVyKFwiUmVtb3ZlUmVsYXRpb25cIiwgZnVuY3Rpb24oanNvbikge1xuICAgIHJldHVybiBuZXcgUGFyc2UuT3AuUmVsYXRpb24oW10sIFBhcnNlLl9kZWNvZGUodW5kZWZpbmVkLCBqc29uLm9iamVjdHMpKTtcbiAgfSk7XG5cbn0odGhpcykpO1xuXG4oZnVuY3Rpb24ocm9vdCkge1xuICByb290LlBhcnNlID0gcm9vdC5QYXJzZSB8fCB7fTtcbiAgdmFyIFBhcnNlID0gcm9vdC5QYXJzZTtcbiAgdmFyIF8gPSBQYXJzZS5fO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFJlbGF0aW9uIGZvciB0aGUgZ2l2ZW4gcGFyZW50IG9iamVjdCBhbmQga2V5LiBUaGlzXG4gICAqIGNvbnN0cnVjdG9yIHNob3VsZCByYXJlbHkgYmUgdXNlZCBkaXJlY3RseSwgYnV0IHJhdGhlciBjcmVhdGVkIGJ5XG4gICAqIFBhcnNlLk9iamVjdC5yZWxhdGlvbi5cbiAgICogQHBhcmFtIHtQYXJzZS5PYmplY3R9IHBhcmVudCBUaGUgcGFyZW50IG9mIHRoaXMgcmVsYXRpb24uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSBmb3IgdGhpcyByZWxhdGlvbiBvbiB0aGUgcGFyZW50LlxuICAgKiBAc2VlIFBhcnNlLk9iamVjdCNyZWxhdGlvblxuICAgKiBAY2xhc3NcbiAgICpcbiAgICogPHA+XG4gICAqIEEgY2xhc3MgdGhhdCBpcyB1c2VkIHRvIGFjY2VzcyBhbGwgb2YgdGhlIGNoaWxkcmVuIG9mIGEgbWFueS10by1tYW55XG4gICAqIHJlbGF0aW9uc2hpcC4gIEVhY2ggaW5zdGFuY2Ugb2YgUGFyc2UuUmVsYXRpb24gaXMgYXNzb2NpYXRlZCB3aXRoIGFcbiAgICogcGFydGljdWxhciBwYXJlbnQgb2JqZWN0IGFuZCBrZXkuXG4gICAqIDwvcD5cbiAgICovXG4gIFBhcnNlLlJlbGF0aW9uID0gZnVuY3Rpb24ocGFyZW50LCBrZXkpIHtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnRhcmdldENsYXNzTmFtZSA9IG51bGw7XG4gIH07XG5cbiAgUGFyc2UuUmVsYXRpb24ucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIE1ha2VzIHN1cmUgdGhhdCB0aGlzIHJlbGF0aW9uIGhhcyB0aGUgcmlnaHQgcGFyZW50IGFuZCBrZXkuXG4gICAgICovXG4gICAgX2Vuc3VyZVBhcmVudEFuZEtleTogZnVuY3Rpb24ocGFyZW50LCBrZXkpIHtcbiAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgcGFyZW50O1xuICAgICAgdGhpcy5rZXkgPSB0aGlzLmtleSB8fCBrZXk7XG4gICAgICBpZiAodGhpcy5wYXJlbnQgIT09IHBhcmVudCkge1xuICAgICAgICB0aHJvdyBcIkludGVybmFsIEVycm9yLiBSZWxhdGlvbiByZXRyaWV2ZWQgZnJvbSB0d28gZGlmZmVyZW50IE9iamVjdHMuXCI7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5rZXkgIT09IGtleSkge1xuICAgICAgICB0aHJvdyBcIkludGVybmFsIEVycm9yLiBSZWxhdGlvbiByZXRyaWV2ZWQgZnJvbSB0d28gZGlmZmVyZW50IGtleXMuXCI7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBQYXJzZS5PYmplY3Qgb3IgYW4gYXJyYXkgb2YgUGFyc2UuT2JqZWN0cyB0byB0aGUgcmVsYXRpb24uXG4gICAgICogQHBhcmFtIHt9IG9iamVjdHMgVGhlIGl0ZW0gb3IgaXRlbXMgdG8gYWRkLlxuICAgICAqL1xuICAgIGFkZDogZnVuY3Rpb24ob2JqZWN0cykge1xuICAgICAgaWYgKCFfLmlzQXJyYXkob2JqZWN0cykpIHtcbiAgICAgICAgb2JqZWN0cyA9IFtvYmplY3RzXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZSA9IG5ldyBQYXJzZS5PcC5SZWxhdGlvbihvYmplY3RzLCBbXSk7XG4gICAgICB0aGlzLnBhcmVudC5zZXQodGhpcy5rZXksIGNoYW5nZSk7XG4gICAgICB0aGlzLnRhcmdldENsYXNzTmFtZSA9IGNoYW5nZS5fdGFyZ2V0Q2xhc3NOYW1lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgUGFyc2UuT2JqZWN0IG9yIGFuIGFycmF5IG9mIFBhcnNlLk9iamVjdHMgZnJvbSB0aGlzIHJlbGF0aW9uLlxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RzIFRoZSBpdGVtIG9yIGl0ZW1zIHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICByZW1vdmU6IGZ1bmN0aW9uKG9iamVjdHMpIHtcbiAgICAgIGlmICghXy5pc0FycmF5KG9iamVjdHMpKSB7XG4gICAgICAgIG9iamVjdHMgPSBbb2JqZWN0c107XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2UgPSBuZXcgUGFyc2UuT3AuUmVsYXRpb24oW10sIG9iamVjdHMpO1xuICAgICAgdGhpcy5wYXJlbnQuc2V0KHRoaXMua2V5LCBjaGFuZ2UpO1xuICAgICAgdGhpcy50YXJnZXRDbGFzc05hbWUgPSBjaGFuZ2UuX3RhcmdldENsYXNzTmFtZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gdmVyc2lvbiBvZiB0aGUgb2JqZWN0IHN1aXRhYmxlIGZvciBzYXZpbmcgdG8gZGlzay5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgdG9KU09OOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7IFwiX190eXBlXCI6IFwiUmVsYXRpb25cIiwgXCJjbGFzc05hbWVcIjogdGhpcy50YXJnZXRDbGFzc05hbWUgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIFBhcnNlLlF1ZXJ5IHRoYXQgaXMgbGltaXRlZCB0byBvYmplY3RzIGluIHRoaXNcbiAgICAgKiByZWxhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX1cbiAgICAgKi9cbiAgICBxdWVyeTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGFyZ2V0Q2xhc3M7XG4gICAgICB2YXIgcXVlcnk7XG4gICAgICBpZiAoIXRoaXMudGFyZ2V0Q2xhc3NOYW1lKSB7XG4gICAgICAgIHRhcmdldENsYXNzID0gUGFyc2UuT2JqZWN0Ll9nZXRTdWJjbGFzcyh0aGlzLnBhcmVudC5jbGFzc05hbWUpO1xuICAgICAgICBxdWVyeSA9IG5ldyBQYXJzZS5RdWVyeSh0YXJnZXRDbGFzcyk7XG4gICAgICAgIHF1ZXJ5Ll9leHRyYU9wdGlvbnMucmVkaXJlY3RDbGFzc05hbWVGb3JLZXkgPSB0aGlzLmtleTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldENsYXNzID0gUGFyc2UuT2JqZWN0Ll9nZXRTdWJjbGFzcyh0aGlzLnRhcmdldENsYXNzTmFtZSk7XG4gICAgICAgIHF1ZXJ5ID0gbmV3IFBhcnNlLlF1ZXJ5KHRhcmdldENsYXNzKTtcbiAgICAgIH1cbiAgICAgIHF1ZXJ5Ll9hZGRDb25kaXRpb24oXCIkcmVsYXRlZFRvXCIsIFwib2JqZWN0XCIsIHRoaXMucGFyZW50Ll90b1BvaW50ZXIoKSk7XG4gICAgICBxdWVyeS5fYWRkQ29uZGl0aW9uKFwiJHJlbGF0ZWRUb1wiLCBcImtleVwiLCB0aGlzLmtleSk7XG5cbiAgICAgIHJldHVybiBxdWVyeTtcbiAgICB9XG4gIH07XG59KHRoaXMpKTtcblxuLypnbG9iYWwgd2luZG93OiBmYWxzZSwgcHJvY2VzczogZmFsc2UgKi9cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICB2YXIgUGFyc2UgPSByb290LlBhcnNlO1xuICB2YXIgXyA9IFBhcnNlLl87XG5cbiAgLyoqXG4gICAqIEEgUHJvbWlzZSBpcyByZXR1cm5lZCBieSBhc3luYyBtZXRob2RzIGFzIGEgaG9vayB0byBwcm92aWRlIGNhbGxiYWNrcyB0byBiZVxuICAgKiBjYWxsZWQgd2hlbiB0aGUgYXN5bmMgdGFzayBpcyBmdWxmaWxsZWQuXG4gICAqXG4gICAqIDxwPlR5cGljYWwgdXNhZ2Ugd291bGQgYmUgbGlrZTo8cHJlPlxuICAgKiAgICBxdWVyeS5maW5kKCkudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAqICAgICAgcmVzdWx0c1swXS5zZXQoXCJmb29cIiwgXCJiYXJcIik7XG4gICAqICAgICAgcmV0dXJuIHJlc3VsdHNbMF0uc2F2ZUFzeW5jKCk7XG4gICAqICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAqICAgICAgY29uc29sZS5sb2coXCJVcGRhdGVkIFwiICsgcmVzdWx0LmlkKTtcbiAgICogICAgfSk7XG4gICAqIDwvcHJlPjwvcD5cbiAgICpcbiAgICogQHNlZSBQYXJzZS5Qcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAqIEBjbGFzc1xuICAgKi9cbiAgUGFyc2UuUHJvbWlzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3Jlc29sdmVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVqZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZXNvbHZlZENhbGxiYWNrcyA9IFtdO1xuICAgIHRoaXMuX3JlamVjdGVkQ2FsbGJhY2tzID0gW107XG4gIH07XG5cbiAgXy5leHRlbmQoUGFyc2UuUHJvbWlzZSwgLyoqIEBsZW5kcyBQYXJzZS5Qcm9taXNlICovIHtcblxuICAgIF9pc1Byb21pc2VzQVBsdXNDb21wbGlhbnQ6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmZiB0aGUgZ2l2ZW4gb2JqZWN0IGZ1bGZpbHMgdGhlIFByb21pc2UgaW50ZXJmYWNlLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXM6IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIHJldHVybiBwcm9taXNlICYmIHByb21pc2UudGhlbiAmJiBfLmlzRnVuY3Rpb24ocHJvbWlzZS50aGVuKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2l0aCBhIGdpdmVuIHZhbHVlLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlByb21pc2V9IHRoZSBuZXcgcHJvbWlzZS5cbiAgICAgKi9cbiAgICBhczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQYXJzZS5Qcm9taXNlKCk7XG4gICAgICBwcm9taXNlLnJlc29sdmUuYXBwbHkocHJvbWlzZSwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHByb21pc2UgdGhhdCBpcyByZWplY3RlZCB3aXRoIGEgZ2l2ZW4gZXJyb3IuXG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gdGhlIG5ldyBwcm9taXNlLlxuICAgICAqL1xuICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IFBhcnNlLlByb21pc2UoKTtcbiAgICAgIHByb21pc2UucmVqZWN0LmFwcGx5KHByb21pc2UsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIG9mIHRoZSBpbnB1dCBwcm9taXNlc1xuICAgICAqIGFyZSByZXNvbHZlZC4gSWYgYW55IHByb21pc2UgaW4gdGhlIGxpc3QgZmFpbHMsIHRoZW4gdGhlIHJldHVybmVkIHByb21pc2VcbiAgICAgKiB3aWxsIGZhaWwgd2l0aCB0aGUgbGFzdCBlcnJvci4gSWYgdGhleSBhbGwgc3VjY2VlZCwgdGhlbiB0aGUgcmV0dXJuZWRcbiAgICAgKiBwcm9taXNlIHdpbGwgc3VjY2VlZCwgd2l0aCB0aGUgcmVzdWx0cyBiZWluZyB0aGUgcmVzdWx0cyBvZiBhbGwgdGhlIGlucHV0XG4gICAgICogcHJvbWlzZXMuIEZvciBleGFtcGxlOiA8cHJlPlxuICAgICAqICAgdmFyIHAxID0gUGFyc2UuUHJvbWlzZS5hcygxKTtcbiAgICAgKiAgIHZhciBwMiA9IFBhcnNlLlByb21pc2UuYXMoMik7XG4gICAgICogICB2YXIgcDMgPSBQYXJzZS5Qcm9taXNlLmFzKDMpO1xuICAgICAqXG4gICAgICogICBQYXJzZS5Qcm9taXNlLndoZW4ocDEsIHAyLCBwMykudGhlbihmdW5jdGlvbihyMSwgcjIsIHIzKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKHIxKTsgIC8vIHByaW50cyAxXG4gICAgICogICAgIGNvbnNvbGUubG9nKHIyKTsgIC8vIHByaW50cyAyXG4gICAgICogICAgIGNvbnNvbGUubG9nKHIzKTsgIC8vIHByaW50cyAzXG4gICAgICogICB9KTs8L3ByZT5cbiAgICAgKlxuICAgICAqIFRoZSBpbnB1dCBwcm9taXNlcyBjYW4gYWxzbyBiZSBzcGVjaWZpZWQgYXMgYW4gYXJyYXk6IDxwcmU+XG4gICAgICogICB2YXIgcHJvbWlzZXMgPSBbcDEsIHAyLCBwM107XG4gICAgICogICBQYXJzZS5Qcm9taXNlLndoZW4ocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24ocjEsIHIyLCByMykge1xuICAgICAqICAgICBjb25zb2xlLmxvZyhyMSk7ICAvLyBwcmludHMgMVxuICAgICAqICAgICBjb25zb2xlLmxvZyhyMik7ICAvLyBwcmludHMgMlxuICAgICAqICAgICBjb25zb2xlLmxvZyhyMyk7ICAvLyBwcmludHMgM1xuICAgICAqICAgfSk7XG4gICAgICogPC9wcmU+XG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvbWlzZXMgYSBsaXN0IG9mIHByb21pc2VzIHRvIHdhaXQgZm9yLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlByb21pc2V9IHRoZSBuZXcgcHJvbWlzZS5cbiAgICAgKi9cbiAgICB3aGVuOiBmdW5jdGlvbihwcm9taXNlcykge1xuICAgICAgLy8gQWxsb3cgcGFzc2luZyBpbiBQcm9taXNlcyBhcyBzZXBhcmF0ZSBhcmd1bWVudHMgaW5zdGVhZCBvZiBhbiBBcnJheS5cbiAgICAgIHZhciBvYmplY3RzO1xuICAgICAgaWYgKHByb21pc2VzICYmIFBhcnNlLl9pc051bGxPclVuZGVmaW5lZChwcm9taXNlcy5sZW5ndGgpKSB7XG4gICAgICAgIG9iamVjdHMgPSBhcmd1bWVudHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3RzID0gcHJvbWlzZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciB0b3RhbCA9IG9iamVjdHMubGVuZ3RoO1xuICAgICAgdmFyIGhhZEVycm9yID0gZmFsc2U7XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgcmVzdWx0cy5sZW5ndGggPSBvYmplY3RzLmxlbmd0aDtcbiAgICAgIGVycm9ycy5sZW5ndGggPSBvYmplY3RzLmxlbmd0aDtcblxuICAgICAgaWYgKHRvdGFsID09PSAwKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmFzLmFwcGx5KHRoaXMsIHJlc3VsdHMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQYXJzZS5Qcm9taXNlKCk7XG5cbiAgICAgIHZhciByZXNvbHZlT25lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRvdGFsID0gdG90YWwgLSAxO1xuICAgICAgICBpZiAodG90YWwgPT09IDApIHtcbiAgICAgICAgICBpZiAoaGFkRXJyb3IpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVqZWN0KGVycm9ycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZS5hcHBseShwcm9taXNlLCByZXN1bHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIFBhcnNlLl9hcnJheUVhY2gob2JqZWN0cywgZnVuY3Rpb24ob2JqZWN0LCBpKSB7XG4gICAgICAgIGlmIChQYXJzZS5Qcm9taXNlLmlzKG9iamVjdCkpIHtcbiAgICAgICAgICBvYmplY3QudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdHNbaV0gPSByZXN1bHQ7XG4gICAgICAgICAgICByZXNvbHZlT25lKCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yc1tpXSA9IGVycm9yO1xuICAgICAgICAgICAgaGFkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZU9uZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdHNbaV0gPSBvYmplY3Q7XG4gICAgICAgICAgcmVzb2x2ZU9uZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIGdpdmVuIGFzeW5jRnVuY3Rpb24gcmVwZWF0ZWRseSwgYXMgbG9uZyBhcyB0aGUgcHJlZGljYXRlXG4gICAgICogZnVuY3Rpb24gcmV0dXJucyBhIHRydXRoeSB2YWx1ZS4gU3RvcHMgcmVwZWF0aW5nIGlmIGFzeW5jRnVuY3Rpb24gcmV0dXJuc1xuICAgICAqIGEgcmVqZWN0ZWQgcHJvbWlzZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgc2hvdWxkIHJldHVybiBmYWxzZSB3aGVuIHJlYWR5IHRvIHN0b3AuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXN5bmNGdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgUHJvbWlzZS5cbiAgICAgKi9cbiAgICBfY29udGludWVXaGlsZTogZnVuY3Rpb24ocHJlZGljYXRlLCBhc3luY0Z1bmN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jRnVuY3Rpb24oKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLl9jb250aW51ZVdoaWxlKHByZWRpY2F0ZSwgYXN5bmNGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuYXMoKTtcbiAgICB9XG4gIH0pO1xuXG4gIF8uZXh0ZW5kKFBhcnNlLlByb21pc2UucHJvdG90eXBlLCAvKiogQGxlbmRzIFBhcnNlLlByb21pc2UucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoaXMgcHJvbWlzZSBhcyBmdWxmaWxsZWQsIGZpcmluZyBhbnkgY2FsbGJhY2tzIHdhaXRpbmcgb24gaXQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlc3VsdCB0aGUgcmVzdWx0IHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrcy5cbiAgICAgKi9cbiAgICByZXNvbHZlOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgIGlmICh0aGlzLl9yZXNvbHZlZCB8fCB0aGlzLl9yZWplY3RlZCkge1xuICAgICAgICB0aHJvdyBcIkEgcHJvbWlzZSB3YXMgcmVzb2x2ZWQgZXZlbiB0aG91Z2ggaXQgaGFkIGFscmVhZHkgYmVlbiBcIiArXG4gICAgICAgICAgKHRoaXMuX3Jlc29sdmVkID8gXCJyZXNvbHZlZFwiIDogXCJyZWplY3RlZFwiKSArIFwiLlwiO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fcmVzdWx0ID0gYXJndW1lbnRzO1xuICAgICAgdmFyIHJlc3VsdHMgPSBhcmd1bWVudHM7XG4gICAgICBQYXJzZS5fYXJyYXlFYWNoKHRoaXMuX3Jlc29sdmVkQ2FsbGJhY2tzLCBmdW5jdGlvbihyZXNvbHZlZENhbGxiYWNrKSB7XG4gICAgICAgIHJlc29sdmVkQ2FsbGJhY2suYXBwbHkodGhpcywgcmVzdWx0cyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX3Jlc29sdmVkQ2FsbGJhY2tzID0gW107XG4gICAgICB0aGlzLl9yZWplY3RlZENhbGxiYWNrcyA9IFtdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNYXJrcyB0aGlzIHByb21pc2UgYXMgZnVsZmlsbGVkLCBmaXJpbmcgYW55IGNhbGxiYWNrcyB3YWl0aW5nIG9uIGl0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlcnJvciB0aGUgZXJyb3IgdG8gcGFzcyB0byB0aGUgY2FsbGJhY2tzLlxuICAgICAqL1xuICAgIHJlamVjdDogZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIGlmICh0aGlzLl9yZXNvbHZlZCB8fCB0aGlzLl9yZWplY3RlZCkge1xuICAgICAgICB0aHJvdyBcIkEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQgZXZlbiB0aG91Z2ggaXQgaGFkIGFscmVhZHkgYmVlbiBcIiArXG4gICAgICAgICAgKHRoaXMuX3Jlc29sdmVkID8gXCJyZXNvbHZlZFwiIDogXCJyZWplY3RlZFwiKSArIFwiLlwiO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fZXJyb3IgPSBlcnJvcjtcbiAgICAgIFBhcnNlLl9hcnJheUVhY2godGhpcy5fcmVqZWN0ZWRDYWxsYmFja3MsIGZ1bmN0aW9uKHJlamVjdGVkQ2FsbGJhY2spIHtcbiAgICAgICAgcmVqZWN0ZWRDYWxsYmFjayhlcnJvcik7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX3Jlc29sdmVkQ2FsbGJhY2tzID0gW107XG4gICAgICB0aGlzLl9yZWplY3RlZENhbGxiYWNrcyA9IFtdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGNhbGxiYWNrcyB0byBiZSBjYWxsZWQgd2hlbiB0aGlzIHByb21pc2UgaXMgZnVsZmlsbGVkLiBSZXR1cm5zIGEgbmV3XG4gICAgICogUHJvbWlzZSB0aGF0IHdpbGwgYmUgZnVsZmlsbGVkIHdoZW4gdGhlIGNhbGxiYWNrIGlzIGNvbXBsZXRlLiBJdCBhbGxvd3NcbiAgICAgKiBjaGFpbmluZy4gSWYgdGhlIGNhbGxiYWNrIGl0c2VsZiByZXR1cm5zIGEgUHJvbWlzZSwgdGhlbiB0aGUgb25lIHJldHVybmVkXG4gICAgICogYnkgXCJ0aGVuXCIgd2lsbCBub3QgYmUgZnVsZmlsbGVkIHVudGlsIHRoYXQgb25lIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuICAgICAqIGlzIGZ1bGZpbGxlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlZENhbGxiYWNrIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhpc1xuICAgICAqIFByb21pc2UgaXMgcmVzb2x2ZWQuIE9uY2UgdGhlIGNhbGxiYWNrIGlzIGNvbXBsZXRlLCB0aGVuIHRoZSBQcm9taXNlXG4gICAgICogcmV0dXJuZWQgYnkgXCJ0aGVuXCIgd2lsbCBhbHNvIGJlIGZ1bGZpbGxlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZENhbGxiYWNrIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhpc1xuICAgICAqIFByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCBhbiBlcnJvci4gT25jZSB0aGUgY2FsbGJhY2sgaXMgY29tcGxldGUsIHRoZW5cbiAgICAgKiB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSBcInRoZW5cIiB3aXRoIGJlIHJlc29sdmVkIHN1Y2Nlc3NmdWxseS4gSWZcbiAgICAgKiByZWplY3RlZENhbGxiYWNrIGlzIG51bGwsIG9yIGl0IHJldHVybnMgYSByZWplY3RlZCBQcm9taXNlLCB0aGVuIHRoZVxuICAgICAqIFByb21pc2UgcmV0dXJuZWQgYnkgXCJ0aGVuXCIgd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoYXQgZXJyb3IuXG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBuZXcgUHJvbWlzZSB0aGF0IHdpbGwgYmUgZnVsZmlsbGVkIGFmdGVyIHRoaXNcbiAgICAgKiBQcm9taXNlIGlzIGZ1bGZpbGxlZCBhbmQgZWl0aGVyIGNhbGxiYWNrIGhhcyBjb21wbGV0ZWQuIElmIHRoZSBjYWxsYmFja1xuICAgICAqIHJldHVybmVkIGEgUHJvbWlzZSwgdGhlbiB0aGlzIFByb21pc2Ugd2lsbCBub3QgYmUgZnVsZmlsbGVkIHVudGlsIHRoYXRcbiAgICAgKiBvbmUgaXMuXG4gICAgICovXG4gICAgdGhlbjogZnVuY3Rpb24ocmVzb2x2ZWRDYWxsYmFjaywgcmVqZWN0ZWRDYWxsYmFjaykge1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgUGFyc2UuUHJvbWlzZSgpO1xuXG4gICAgICB2YXIgd3JhcHBlZFJlc29sdmVkQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJlc29sdmVkQ2FsbGJhY2spIHtcbiAgICAgICAgICBpZiAoUGFyc2UuUHJvbWlzZS5faXNQcm9taXNlc0FQbHVzQ29tcGxpYW50KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICByZXN1bHQgPSBbcmVzb2x2ZWRDYWxsYmFjay5hcHBseSh0aGlzLCByZXN1bHQpXTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gW1BhcnNlLlByb21pc2UuZXJyb3IoZSldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBbcmVzb2x2ZWRDYWxsYmFjay5hcHBseSh0aGlzLCByZXN1bHQpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDEgJiYgUGFyc2UuUHJvbWlzZS5pcyhyZXN1bHRbMF0pKSB7XG4gICAgICAgICAgcmVzdWx0WzBdLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUuYXBwbHkocHJvbWlzZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZS5hcHBseShwcm9taXNlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgd3JhcHBlZFJlamVjdGVkQ2FsbGJhY2sgPSBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGlmIChyZWplY3RlZENhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKFBhcnNlLlByb21pc2UuX2lzUHJvbWlzZXNBUGx1c0NvbXBsaWFudCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gW3JlamVjdGVkQ2FsbGJhY2soZXJyb3IpXTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gW1BhcnNlLlByb21pc2UuZXJyb3IoZSldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBbcmVqZWN0ZWRDYWxsYmFjayhlcnJvcildO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMSAmJiBQYXJzZS5Qcm9taXNlLmlzKHJlc3VsdFswXSkpIHtcbiAgICAgICAgICAgIHJlc3VsdFswXS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBwcm9taXNlLnJlc29sdmUuYXBwbHkocHJvbWlzZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgIHByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoUGFyc2UuUHJvbWlzZS5faXNQcm9taXNlc0FQbHVzQ29tcGxpYW50KSB7XG4gICAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZS5hcHBseShwcm9taXNlLCByZXN1bHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QocmVzdWx0WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgcnVuTGF0ZXIgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgICAgIGZ1bmMuY2FsbCgpO1xuICAgICAgfTtcbiAgICAgIGlmIChQYXJzZS5Qcm9taXNlLl9pc1Byb21pc2VzQVBsdXNDb21wbGlhbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZih3aW5kb3cpICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuc2V0VGltZW91dCkge1xuICAgICAgICAgIHJ1bkxhdGVyID0gZnVuY3Rpb24oZnVuYykge1xuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuYywgMCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YocHJvY2VzcykgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MubmV4dFRpY2spIHtcbiAgICAgICAgICBydW5MYXRlciA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuYyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAodGhpcy5fcmVzb2x2ZWQpIHtcbiAgICAgICAgcnVuTGF0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgd3JhcHBlZFJlc29sdmVkQ2FsbGJhY2suYXBwbHkoc2VsZiwgc2VsZi5fcmVzdWx0KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3JlamVjdGVkKSB7XG4gICAgICAgIHJ1bkxhdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHdyYXBwZWRSZWplY3RlZENhbGxiYWNrKHNlbGYuX2Vycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yZXNvbHZlZENhbGxiYWNrcy5wdXNoKHdyYXBwZWRSZXNvbHZlZENhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5fcmVqZWN0ZWRDYWxsYmFja3MucHVzaCh3cmFwcGVkUmVqZWN0ZWRDYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHByb21pc2UgXG4gICAgICogaXMgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkXG4gICAgICovXG4gICAgYWx3YXlzOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihjYWxsYmFjaywgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIFByb21pc2Ugb2JqZWN0IGlzIHJlc29sdmVkXG4gICAgICovXG4gICAgZG9uZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4oY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIFByb21pc2Ugb2JqZWN0IGlzIHJlamVjdGVkXG4gICAgICovXG4gICAgZmFpbDogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSdW4gdGhlIGdpdmVuIGNhbGxiYWNrcyBhZnRlciB0aGlzIHByb21pc2UgaXMgZnVsZmlsbGVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zT3JDYWxsYmFjayB7fSBBIEJhY2tib25lLXN0eWxlIG9wdGlvbnMgY2FsbGJhY2ssIG9yIGFcbiAgICAgKiBjYWxsYmFjayBmdW5jdGlvbi4gSWYgdGhpcyBpcyBhbiBvcHRpb25zIG9iamVjdCBhbmQgY29udGFpbnMgYSBcIm1vZGVsXCJcbiAgICAgKiBhdHRyaWJ1dGVzLCB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIGVycm9yIGNhbGxiYWNrcyBhcyB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIG1vZGVsIHt9IElmIHRydXRoeSwgdGhpcyB3aWxsIGJlIHBhc3NlZCBhcyB0aGUgZmlyc3QgcmVzdWx0IG9mXG4gICAgICogZXJyb3IgY2FsbGJhY2tzLiBUaGlzIGlzIGZvciBCYWNrYm9uZS1jb21wYXRhYmlsaXR5LlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlByb21pc2V9IEEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYWZ0ZXIgdGhlXG4gICAgICogY2FsbGJhY2tzIGFyZSBydW4sIHdpdGggdGhlIHNhbWUgcmVzdWx0IGFzIHRoaXMuXG4gICAgICovXG4gICAgX3RoZW5SdW5DYWxsYmFja3M6IGZ1bmN0aW9uKG9wdGlvbnNPckNhbGxiYWNrLCBtb2RlbCkge1xuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKG9wdGlvbnNPckNhbGxiYWNrKSkge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBvcHRpb25zT3JDYWxsYmFjaztcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCwgbnVsbCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zID0gXy5jbG9uZShvcHRpb25zT3JDYWxsYmFjayk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3VjY2Vzcykge1xuICAgICAgICAgIG9wdGlvbnMuc3VjY2Vzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9IGVsc2UgaWYgKG1vZGVsKSB7XG4gICAgICAgICAgLy8gV2hlbiB0aGVyZSdzIG5vIGNhbGxiYWNrLCBhIHN5bmMgZXZlbnQgc2hvdWxkIGJlIHRyaWdnZXJlZC5cbiAgICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3VsdCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuYXMuYXBwbHkoUGFyc2UuUHJvbWlzZSwgYXJndW1lbnRzKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmVycm9yKSB7XG4gICAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKG1vZGVsKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5lcnJvcihtb2RlbCwgZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLmVycm9yKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobW9kZWwpIHtcbiAgICAgICAgICAvLyBXaGVuIHRoZXJlJ3Mgbm8gZXJyb3IgY2FsbGJhY2ssIGFuIGVycm9yIGV2ZW50IHNob3VsZCBiZSB0cmlnZ2VyZWQuXG4gICAgICAgICAgbW9kZWwudHJpZ2dlcignZXJyb3InLCBtb2RlbCwgZXJyb3IsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGEgcmVqZWN0ZWQgUHJvbWlzZSwgdGhpcyB3aWxsIHdvcmsgd2l0aFxuICAgICAgICAvLyBlaXRoZXIgalF1ZXJ5IG9yIFByb21pc2VzL0Egc2VtYW50aWNzLlxuICAgICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5lcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCByZWdhcmRsZXNzIG9mIHdoZXRoZXJcbiAgICAgKiB0aGlzIHByb21pc2UgZmFpbGVkIG9yIHN1Y2NlZWRlZC4gVGhlIGNhbGxiYWNrIHdpbGwgYmUgZ2l2ZW4gZWl0aGVyIHRoZVxuICAgICAqIGFycmF5IG9mIHJlc3VsdHMgZm9yIGl0cyBmaXJzdCBhcmd1bWVudCwgb3IgdGhlIGVycm9yIGFzIGl0cyBzZWNvbmQsXG4gICAgICogZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhpcyBQcm9taXNlIHdhcyByZWplY3RlZCBvciByZXNvbHZlZC4gUmV0dXJucyBhXG4gICAgICogbmV3IFByb21pc2UsIGxpa2UgXCJ0aGVuXCIgd291bGQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29udGludWF0aW9uIHRoZSBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBfY29udGludWVXaXRoOiBmdW5jdGlvbihjb250aW51YXRpb24pIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjb250aW51YXRpb24oYXJndW1lbnRzLCBudWxsKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBjb250aW51YXRpb24obnVsbCwgZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gIH0pO1xuXG59KHRoaXMpKTtcblxuLypqc2hpbnQgYml0d2lzZTpmYWxzZSAqLy8qZ2xvYmFsIEZpbGVSZWFkZXI6IHRydWUsIEZpbGU6IHRydWUgKi9cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICB2YXIgUGFyc2UgPSByb290LlBhcnNlO1xuICB2YXIgXyA9IFBhcnNlLl87XG5cbiAgdmFyIGI2NERpZ2l0ID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDI2KSB7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSArIG51bWJlcik7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCA1Mikge1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyAobnVtYmVyIC0gMjYpKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDYyKSB7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg0OCArIChudW1iZXIgLSA1MikpO1xuICAgIH1cbiAgICBpZiAobnVtYmVyID09PSA2Mikge1xuICAgICAgcmV0dXJuIFwiK1wiO1xuICAgIH1cbiAgICBpZiAobnVtYmVyID09PSA2Mykge1xuICAgICAgcmV0dXJuIFwiL1wiO1xuICAgIH1cbiAgICB0aHJvdyBcIlRyaWVkIHRvIGVuY29kZSBsYXJnZSBkaWdpdCBcIiArIG51bWJlciArIFwiIGluIGJhc2U2NC5cIjtcbiAgfTtcblxuICB2YXIgZW5jb2RlQmFzZTY0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgY2h1bmtzID0gW107XG4gICAgY2h1bmtzLmxlbmd0aCA9IE1hdGguY2VpbChhcnJheS5sZW5ndGggLyAzKTtcbiAgICBfLnRpbWVzKGNodW5rcy5sZW5ndGgsIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHZhciBiMSA9IGFycmF5W2kgKiAzXTtcbiAgICAgIHZhciBiMiA9IGFycmF5W2kgKiAzICsgMV0gfHwgMDtcbiAgICAgIHZhciBiMyA9IGFycmF5W2kgKiAzICsgMl0gfHwgMDtcblxuICAgICAgdmFyIGhhczIgPSAoaSAqIDMgKyAxKSA8IGFycmF5Lmxlbmd0aDtcbiAgICAgIHZhciBoYXMzID0gKGkgKiAzICsgMikgPCBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGNodW5rc1tpXSA9IFtcbiAgICAgICAgYjY0RGlnaXQoKGIxID4+IDIpICYgMHgzRiksXG4gICAgICAgIGI2NERpZ2l0KCgoYjEgPDwgNCkgJiAweDMwKSB8ICgoYjIgPj4gNCkgJiAweDBGKSksXG4gICAgICAgIGhhczIgPyBiNjREaWdpdCgoKGIyIDw8IDIpICYgMHgzQykgfCAoKGIzID4+IDYpICYgMHgwMykpIDogXCI9XCIsXG4gICAgICAgIGhhczMgPyBiNjREaWdpdChiMyAmIDB4M0YpIDogXCI9XCJcbiAgICAgIF0uam9pbihcIlwiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2h1bmtzLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlYWRzIGEgRmlsZSB1c2luZyBhIEZpbGVSZWFkZXIuXG4gICAqIEBwYXJhbSBmaWxlIHtGaWxlfSB0aGUgRmlsZSB0byByZWFkLlxuICAgKiBAcGFyYW0gdHlwZSB7U3RyaW5nfSAob3B0aW9uYWwpIHRoZSBtaW1ldHlwZSB0byBvdmVycmlkZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtQYXJzZS5Qcm9taXNlfSBBIFByb21pc2UgdGhhdCB3aWxsIGJlIGZ1bGZpbGxlZCB3aXRoIGFcbiAgICogICAgIGJhc2U2NC1lbmNvZGVkIHN0cmluZyBvZiB0aGUgZGF0YSBhbmQgaXRzIG1pbWUgdHlwZS5cbiAgICovXG4gIHZhciByZWFkQXN5bmMgPSBmdW5jdGlvbihmaWxlLCB0eXBlKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgUGFyc2UuUHJvbWlzZSgpO1xuXG4gICAgaWYgKHR5cGVvZihGaWxlUmVhZGVyKSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3IobmV3IFBhcnNlLkVycm9yKFxuICAgICAgICAgIFBhcnNlLkVycm9yLkZJTEVfUkVBRF9FUlJPUixcbiAgICAgICAgICBcIkF0dGVtcHRlZCB0byB1c2UgYSBGaWxlUmVhZGVyIG9uIGFuIHVuc3VwcG9ydGVkIGJyb3dzZXIuXCIpKTtcbiAgICB9XG5cbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocmVhZGVyLnJlYWR5U3RhdGUgIT09IDIpIHtcbiAgICAgICAgcHJvbWlzZS5yZWplY3QobmV3IFBhcnNlLkVycm9yKFxuICAgICAgICAgICAgUGFyc2UuRXJyb3IuRklMRV9SRUFEX0VSUk9SLFxuICAgICAgICAgICAgXCJFcnJvciByZWFkaW5nIGZpbGUuXCIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0YVVSTCA9IHJlYWRlci5yZXN1bHQ7XG4gICAgICB2YXIgbWF0Y2hlcyA9IC9eZGF0YTooW147XSopO2Jhc2U2NCwoLiopJC8uZXhlYyhkYXRhVVJMKTtcbiAgICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgICBwcm9taXNlLnJlamVjdChuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgICBQYXJzZS5FcnJvci5GSUxFX1JFQURfRVJST1IsXG4gICAgICAgICAgICBcIlVuYWJsZSB0byBpbnRlcnByZXQgZGF0YSBVUkw6IFwiICsgZGF0YVVSTCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHByb21pc2UucmVzb2x2ZShtYXRjaGVzWzJdLCB0eXBlIHx8IG1hdGNoZXNbMV0pO1xuICAgIH07XG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgUGFyc2UuRmlsZSBpcyBhIGxvY2FsIHJlcHJlc2VudGF0aW9uIG9mIGEgZmlsZSB0aGF0IGlzIHNhdmVkIHRvIHRoZSBQYXJzZVxuICAgKiBjbG91ZC5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9IFRoZSBmaWxlJ3MgbmFtZS4gVGhpcyB3aWxsIGJlIHByZWZpeGVkIGJ5IGEgdW5pcXVlXG4gICAqICAgICB2YWx1ZSBvbmNlIHRoZSBmaWxlIGhhcyBmaW5pc2hlZCBzYXZpbmcuIFRoZSBmaWxlIG5hbWUgbXVzdCBiZWdpbiB3aXRoXG4gICAqICAgICBhbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVyLCBhbmQgY29uc2lzdCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyxcbiAgICogICAgIHBlcmlvZHMsIHNwYWNlcywgdW5kZXJzY29yZXMsIG9yIGRhc2hlcy5cbiAgICogQHBhcmFtIGRhdGEge0FycmF5fSBUaGUgZGF0YSBmb3IgdGhlIGZpbGUsIGFzIGVpdGhlcjpcbiAgICogICAgIDEuIGFuIEFycmF5IG9mIGJ5dGUgdmFsdWUgTnVtYmVycywgb3JcbiAgICogICAgIDIuIGFuIE9iamVjdCBsaWtlIHsgYmFzZTY0OiBcIi4uLlwiIH0gd2l0aCBhIGJhc2U2NC1lbmNvZGVkIFN0cmluZy5cbiAgICogICAgIDMuIGEgRmlsZSBvYmplY3Qgc2VsZWN0ZWQgd2l0aCBhIGZpbGUgdXBsb2FkIGNvbnRyb2wuICgzKSBvbmx5IHdvcmtzXG4gICAqICAgICAgICBpbiBGaXJlZm94IDMuNissIFNhZmFyaSA2LjAuMissIENocm9tZSA3KywgYW5kIElFIDEwKy5cbiAgICogICAgICAgIEZvciBleGFtcGxlOjxwcmU+XG4gICAqIHZhciBmaWxlVXBsb2FkQ29udHJvbCA9ICQoXCIjcHJvZmlsZVBob3RvRmlsZVVwbG9hZFwiKVswXTtcbiAgICogaWYgKGZpbGVVcGxvYWRDb250cm9sLmZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICogICB2YXIgZmlsZSA9IGZpbGVVcGxvYWRDb250cm9sLmZpbGVzWzBdO1xuICAgKiAgIHZhciBuYW1lID0gXCJwaG90by5qcGdcIjtcbiAgICogICB2YXIgcGFyc2VGaWxlID0gbmV3IFBhcnNlLkZpbGUobmFtZSwgZmlsZSk7XG4gICAqICAgcGFyc2VGaWxlLnNhdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy8gVGhlIGZpbGUgaGFzIGJlZW4gc2F2ZWQgdG8gUGFyc2UuXG4gICAqICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIFRoZSBmaWxlIGVpdGhlciBjb3VsZCBub3QgYmUgcmVhZCwgb3IgY291bGQgbm90IGJlIHNhdmVkIHRvIFBhcnNlLlxuICAgKiAgIH0pO1xuICAgKiB9PC9wcmU+XG4gICAqIEBwYXJhbSB0eXBlIHtTdHJpbmd9IE9wdGlvbmFsIENvbnRlbnQtVHlwZSBoZWFkZXIgdG8gdXNlIGZvciB0aGUgZmlsZS4gSWZcbiAgICogICAgIHRoaXMgaXMgb21pdHRlZCwgdGhlIGNvbnRlbnQgdHlwZSB3aWxsIGJlIGluZmVycmVkIGZyb20gdGhlIG5hbWUnc1xuICAgKiAgICAgZXh0ZW5zaW9uLlxuICAgKi9cbiAgUGFyc2UuRmlsZSA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIHR5cGUpIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcblxuICAgIC8vIEd1ZXNzIHRoZSBjb250ZW50IHR5cGUgZnJvbSB0aGUgZXh0ZW5zaW9uIGlmIHdlIG5lZWQgdG8uXG4gICAgdmFyIGV4dGVuc2lvbiA9IC9cXC4oW14uXSopJC8uZXhlYyhuYW1lKTtcbiAgICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgICBleHRlbnNpb24gPSBleHRlbnNpb25bMV0udG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgdmFyIHNwZWNpZmllZFR5cGUgPSB0eXBlIHx8ICcnO1xuXG4gICAgaWYgKF8uaXNBcnJheShkYXRhKSkge1xuICAgICAgdGhpcy5fc291cmNlID0gUGFyc2UuUHJvbWlzZS5hcyhlbmNvZGVCYXNlNjQoZGF0YSksIHNwZWNpZmllZFR5cGUpO1xuICAgIH0gZWxzZSBpZiAoZGF0YSAmJiBkYXRhLmJhc2U2NCkge1xuICAgICAgLy8gaWYgaXQgY29udGFpbnMgZGF0YSB1cmksIGV4dHJhY3QgYmFzZWQ2NCBhbmQgdGhlIHR5cGUgb3V0IG9mIGl0LlxuICAgICAgLypqc2xpbnQgbWF4bGVuOiAxMDAwKi9cbiAgICAgIHZhciBkYXRhVXJpUmVnZXhwID0gL15kYXRhOihbYS16QS1aXSpcXC9bYS16QS1aKy4tXSopOyhjaGFyc2V0PVthLXpBLVowLTlcXC1cXC9cXHNdKiwpP2Jhc2U2NCwoXFxTKykvO1xuICAgICAgLypqc2xpbnQgbWF4bGVuOiA4MCovXG5cbiAgICAgIHZhciBtYXRjaGVzID0gZGF0YVVyaVJlZ2V4cC5leGVjKGRhdGEuYmFzZTY0KTtcbiAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBpZiBkYXRhIFVSSSB3aXRoIGNoYXJzZXQsIHRoZXJlIHdpbGwgaGF2ZSA0IG1hdGNoZXMuXG4gICAgICAgIHRoaXMuX3NvdXJjZSA9IFBhcnNlLlByb21pc2UuYXMoXG4gICAgICAgICAgKG1hdGNoZXMubGVuZ3RoID09PSA0ID8gbWF0Y2hlc1szXSA6IG1hdGNoZXNbMl0pLCBtYXRjaGVzWzFdXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zb3VyY2UgPSBQYXJzZS5Qcm9taXNlLmFzKGRhdGEuYmFzZTY0LCBzcGVjaWZpZWRUeXBlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZihGaWxlKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgRmlsZSkge1xuICAgICAgdGhpcy5fc291cmNlID0gcmVhZEFzeW5jKGRhdGEsIHR5cGUpO1xuICAgIH0gZWxzZSBpZiAoXy5pc1N0cmluZyhkYXRhKSkge1xuICAgICAgdGhyb3cgXCJDcmVhdGluZyBhIFBhcnNlLkZpbGUgZnJvbSBhIFN0cmluZyBpcyBub3QgeWV0IHN1cHBvcnRlZC5cIjtcbiAgICB9XG4gIH07XG5cbiAgUGFyc2UuRmlsZS5wcm90b3R5cGUgPSB7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIHRoZSBmaWxlLiBCZWZvcmUgc2F2ZSBpcyBjYWxsZWQsIHRoaXMgaXMgdGhlIGZpbGVuYW1lXG4gICAgICogZ2l2ZW4gYnkgdGhlIHVzZXIuIEFmdGVyIHNhdmUgaXMgY2FsbGVkLCB0aGF0IG5hbWUgZ2V0cyBwcmVmaXhlZCB3aXRoIGFcbiAgICAgKiB1bmlxdWUgaWRlbnRpZmllci5cbiAgICAgKi9cbiAgICBuYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB1cmwgb2YgdGhlIGZpbGUuIEl0IGlzIG9ubHkgYXZhaWxhYmxlIGFmdGVyIHlvdSBzYXZlIHRoZSBmaWxlIG9yXG4gICAgICogYWZ0ZXIgeW91IGdldCB0aGUgZmlsZSBmcm9tIGEgUGFyc2UuT2JqZWN0LlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICB1cmw6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3VybDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2F2ZXMgdGhlIGZpbGUgdG8gdGhlIFBhcnNlIGNsb3VkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gUHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdoZW4gdGhlIHNhdmUgZmluaXNoZXMuXG4gICAgICovXG4gICAgc2F2ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucz0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKCFzZWxmLl9wcmV2aW91c1NhdmUpIHtcbiAgICAgICAgc2VsZi5fcHJldmlvdXNTYXZlID0gc2VsZi5fc291cmNlLnRoZW4oZnVuY3Rpb24oYmFzZTY0LCB0eXBlKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICBiYXNlNjQ6IGJhc2U2NCxcbiAgICAgICAgICAgIF9Db250ZW50VHlwZTogdHlwZVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIFBhcnNlLl9yZXF1ZXN0KHtcbiAgICAgICAgICAgIHJvdXRlOiBcImZpbGVzXCIsXG4gICAgICAgICAgICBjbGFzc05hbWU6IHNlbGYuX25hbWUsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICB1c2VNYXN0ZXJLZXk6IG9wdGlvbnMudXNlTWFzdGVyS2V5XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIHNlbGYuX25hbWUgPSByZXNwb25zZS5uYW1lO1xuICAgICAgICAgIHNlbGYuX3VybCA9IHJlc3BvbnNlLnVybDtcbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZi5fcHJldmlvdXNTYXZlLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxufSh0aGlzKSk7XG5cbi8vIFBhcnNlLk9iamVjdCBpcyBhbmFsb2dvdXMgdG8gdGhlIEphdmEgUGFyc2VPYmplY3QuXG4vLyBJdCBhbHNvIGltcGxlbWVudHMgdGhlIHNhbWUgaW50ZXJmYWNlIGFzIGEgQmFja2JvbmUgbW9kZWwuXG4vLyBUT0RPOiBtdWx0aXBsZSBkaXNwYXRjaCBmb3IgY2FsbGJhY2tzXG4oZnVuY3Rpb24ocm9vdCkge1xuICByb290LlBhcnNlID0gcm9vdC5QYXJzZSB8fCB7fTtcbiAgdmFyIFBhcnNlID0gcm9vdC5QYXJzZTtcbiAgdmFyIF8gPSBQYXJzZS5fO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IG1vZGVsIHdpdGggZGVmaW5lZCBhdHRyaWJ1dGVzLiBBIGNsaWVudCBpZCAoY2lkKSBpc1xuICAgKiBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBhbmQgYXNzaWduZWQgZm9yIHlvdS5cbiAgICpcbiAgICogPHA+WW91IHdvbid0IG5vcm1hbGx5IGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkuICBJdCBpcyByZWNvbW1lbmRlZCB0aGF0XG4gICAqIHlvdSB1c2UgYSBzdWJjbGFzcyBvZiA8Y29kZT5QYXJzZS5PYmplY3Q8L2NvZGU+IGluc3RlYWQsIGNyZWF0ZWQgYnkgY2FsbGluZ1xuICAgKiA8Y29kZT5leHRlbmQ8L2NvZGU+LjwvcD5cbiAgICpcbiAgICogPHA+SG93ZXZlciwgaWYgeW91IGRvbid0IHdhbnQgdG8gdXNlIGEgc3ViY2xhc3MsIG9yIGFyZW4ndCBzdXJlIHdoaWNoXG4gICAqIHN1YmNsYXNzIGlzIGFwcHJvcHJpYXRlLCB5b3UgY2FuIHVzZSB0aGlzIGZvcm06PHByZT5cbiAgICogICAgIHZhciBvYmplY3QgPSBuZXcgUGFyc2UuT2JqZWN0KFwiQ2xhc3NOYW1lXCIpO1xuICAgKiA8L3ByZT5cbiAgICogVGhhdCBpcyBiYXNpY2FsbHkgZXF1aXZhbGVudCB0bzo8cHJlPlxuICAgKiAgICAgdmFyIE15Q2xhc3MgPSBQYXJzZS5PYmplY3QuZXh0ZW5kKFwiQ2xhc3NOYW1lXCIpO1xuICAgKiAgICAgdmFyIG9iamVjdCA9IG5ldyBNeUNsYXNzKCk7XG4gICAqIDwvcHJlPjwvcD5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXMgVGhlIGluaXRpYWwgc2V0IG9mIGRhdGEgdG8gc3RvcmUgaW4gdGhlIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQSBzZXQgb2YgQmFja2JvbmUtbGlrZSBvcHRpb25zIGZvciBjcmVhdGluZyB0aGVcbiAgICogICAgIG9iamVjdC4gIFRoZSBvbmx5IG9wdGlvbiBjdXJyZW50bHkgc3VwcG9ydGVkIGlzIFwiY29sbGVjdGlvblwiLlxuICAgKiBAc2VlIFBhcnNlLk9iamVjdC5leHRlbmRcbiAgICpcbiAgICogQGNsYXNzXG4gICAqXG4gICAqIDxwPlRoZSBmdW5kYW1lbnRhbCB1bml0IG9mIFBhcnNlIGRhdGEsIHdoaWNoIGltcGxlbWVudHMgdGhlIEJhY2tib25lIE1vZGVsXG4gICAqIGludGVyZmFjZS48L3A+XG4gICAqL1xuICBQYXJzZS5PYmplY3QgPSBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7XG4gICAgLy8gQWxsb3cgbmV3IFBhcnNlLk9iamVjdChcIkNsYXNzTmFtZVwiKSBhcyBhIHNob3J0Y3V0IHRvIF9jcmVhdGUuXG4gICAgaWYgKF8uaXNTdHJpbmcoYXR0cmlidXRlcykpIHtcbiAgICAgIHJldHVybiBQYXJzZS5PYmplY3QuX2NyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzIHx8IHt9O1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucGFyc2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMgPSB0aGlzLnBhcnNlKGF0dHJpYnV0ZXMpO1xuICAgIH1cbiAgICB2YXIgZGVmYXVsdHMgPSBQYXJzZS5fZ2V0VmFsdWUodGhpcywgJ2RlZmF1bHRzJyk7XG4gICAgaWYgKGRlZmF1bHRzKSB7XG4gICAgICBhdHRyaWJ1dGVzID0gXy5leHRlbmQoe30sIGRlZmF1bHRzLCBhdHRyaWJ1dGVzKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jb2xsZWN0aW9uKSB7XG4gICAgICB0aGlzLmNvbGxlY3Rpb24gPSBvcHRpb25zLmNvbGxlY3Rpb247XG4gICAgfVxuXG4gICAgdGhpcy5fc2VydmVyRGF0YSA9IHt9OyAgLy8gVGhlIGxhc3Qga25vd24gZGF0YSBmb3IgdGhpcyBvYmplY3QgZnJvbSBjbG91ZC5cbiAgICB0aGlzLl9vcFNldFF1ZXVlID0gW3t9XTsgIC8vIExpc3Qgb2Ygc2V0cyBvZiBjaGFuZ2VzIHRvIHRoZSBkYXRhLlxuICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9OyAgLy8gVGhlIGJlc3QgZXN0aW1hdGUgb2YgdGhpcydzIGN1cnJlbnQgZGF0YS5cblxuICAgIHRoaXMuX2hhc2hlZEpTT04gPSB7fTsgIC8vIEhhc2ggb2YgdmFsdWVzIG9mIGNvbnRhaW5lcnMgYXQgbGFzdCBzYXZlLlxuICAgIHRoaXMuX2VzY2FwZWRBdHRyaWJ1dGVzID0ge307XG4gICAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKCdjJyk7XG4gICAgdGhpcy5jaGFuZ2VkID0ge307XG4gICAgdGhpcy5fc2lsZW50ID0ge307XG4gICAgdGhpcy5fcGVuZGluZyA9IHt9O1xuICAgIGlmICghdGhpcy5zZXQoYXR0cmlidXRlcywge3NpbGVudDogdHJ1ZX0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBjcmVhdGUgYW4gaW52YWxpZCBQYXJzZS5PYmplY3RcIik7XG4gICAgfVxuICAgIHRoaXMuY2hhbmdlZCA9IHt9O1xuICAgIHRoaXMuX3NpbGVudCA9IHt9O1xuICAgIHRoaXMuX3BlbmRpbmcgPSB7fTtcbiAgICB0aGlzLl9oYXNEYXRhID0gdHJ1ZTtcbiAgICB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMgPSBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGlzIG9iamVjdCwgdW5pcXVlIHdpdGhpbiBpdHMgY2xhc3MuXG4gICAqIEBuYW1lIGlkXG4gICAqIEB0eXBlIFN0cmluZ1xuICAgKiBAZmllbGRcbiAgICogQG1lbWJlck9mIFBhcnNlLk9iamVjdC5wcm90b3R5cGVcbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBmaXJzdCB0aW1lIHRoaXMgb2JqZWN0IHdhcyBzYXZlZCBvbiB0aGUgc2VydmVyLlxuICAgKiBAbmFtZSBjcmVhdGVkQXRcbiAgICogQHR5cGUgRGF0ZVxuICAgKiBAZmllbGRcbiAgICogQG1lbWJlck9mIFBhcnNlLk9iamVjdC5wcm90b3R5cGVcbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBsYXN0IHRpbWUgdGhpcyBvYmplY3Qgd2FzIHVwZGF0ZWQgb24gdGhlIHNlcnZlci5cbiAgICogQG5hbWUgdXBkYXRlZEF0XG4gICAqIEB0eXBlIERhdGVcbiAgICogQGZpZWxkXG4gICAqIEBtZW1iZXJPZiBQYXJzZS5PYmplY3QucHJvdG90eXBlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBTYXZlcyB0aGUgZ2l2ZW4gbGlzdCBvZiBQYXJzZS5PYmplY3QuXG4gICAqIElmIGFueSBlcnJvciBpcyBlbmNvdW50ZXJlZCwgc3RvcHMgYW5kIGNhbGxzIHRoZSBlcnJvciBoYW5kbGVyLlxuICAgKlxuICAgKiA8cHJlPlxuICAgKiAgIFBhcnNlLk9iamVjdC5zYXZlQWxsKFtvYmplY3QxLCBvYmplY3QyLCAuLi5dLCB7XG4gICAqICAgICBzdWNjZXNzOiBmdW5jdGlvbihsaXN0KSB7XG4gICAqICAgICAgIC8vIEFsbCB0aGUgb2JqZWN0cyB3ZXJlIHNhdmVkLlxuICAgKiAgICAgfSxcbiAgICogICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgICAvLyBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBzYXZpbmcgb25lIG9mIHRoZSBvYmplY3RzLlxuICAgKiAgICAgfSxcbiAgICogICB9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGxpc3QgQSBsaXN0IG9mIDxjb2RlPlBhcnNlLk9iamVjdDwvY29kZT4uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgY2FsbGJhY2sgb2JqZWN0LlxuICAgKiBWYWxpZCBvcHRpb25zIGFyZTo8dWw+XG4gICAqICAgPGxpPnVzZU1hc3RlcktleTogSW4gQ2xvdWQgQ29kZSBhbmQgTm9kZSBvbmx5LCBjYXVzZXMgdGhlIE1hc3RlciBLZXkgdG9cbiAgICogICAgIGJlIHVzZWQgZm9yIHRoaXMgcmVxdWVzdC5cbiAgICogICA8bGk+c2Vzc2lvblRva2VuOiBBIHZhbGlkIHNlc3Npb24gdG9rZW4sIHVzZWQgZm9yIG1ha2luZyBhIHJlcXVlc3Qgb25cbiAgICogICAgICAgYmVoYWxmIG9mIGEgc3BlY2lmaWMgdXNlci5cbiAgICogPC91bD5cbiAgICovXG4gIFBhcnNlLk9iamVjdC5zYXZlQWxsID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHJldHVybiBQYXJzZS5PYmplY3QuX2RlZXBTYXZlQXN5bmMobGlzdCwge1xuICAgICAgdXNlTWFzdGVyS2V5OiBvcHRpb25zLnVzZU1hc3RlcktleSxcbiAgICAgIHNlc3Npb25Ub2tlbjogb3B0aW9ucy5zZXNzaW9uVG9rZW5cbiAgICB9KS5fdGhlblJ1bkNhbGxiYWNrcyhvcHRpb25zKTtcbiAgfTtcblxuICAvKipcbiAgICogRGVzdHJveSB0aGUgZ2l2ZW4gbGlzdCBvZiBtb2RlbHMgb24gdGhlIHNlcnZlciBpZiBpdCB3YXMgYWxyZWFkeSBwZXJzaXN0ZWQuXG4gICAqIE9wdGltaXN0aWNhbGx5IHJlbW92ZXMgZWFjaCBtb2RlbCBmcm9tIGl0cyBjb2xsZWN0aW9uLCBpZiBpdCBoYXMgb25lLlxuICAgKiBJZiBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCB3YWl0cyBmb3IgdGhlIHNlcnZlciB0byByZXNwb25kIGJlZm9yZSByZW1vdmFsLlxuICAgKlxuICAgKiA8cD5Vbmxpa2Ugc2F2ZUFsbCwgaWYgYW4gZXJyb3Igb2NjdXJzIHdoaWxlIGRlbGV0aW5nIGFuIGluZGl2aWR1YWwgbW9kZWwsXG4gICAqIHRoaXMgbWV0aG9kIHdpbGwgY29udGludWUgdHJ5aW5nIHRvIGRlbGV0ZSB0aGUgcmVzdCBvZiB0aGUgbW9kZWxzIGlmXG4gICAqIHBvc3NpYmxlLCBleGNlcHQgaW4gdGhlIGNhc2Ugb2YgYSBmYXRhbCBlcnJvciBsaWtlIGEgY29ubmVjdGlvbiBlcnJvci5cbiAgICpcbiAgICogPHA+SW4gcGFydGljdWxhciwgdGhlIFBhcnNlLkVycm9yIG9iamVjdCByZXR1cm5lZCBpbiB0aGUgY2FzZSBvZiBlcnJvciBtYXlcbiAgICogYmUgb25lIG9mIHR3byB0eXBlczpcbiAgICpcbiAgICogPHVsPlxuICAgKiAgIDxsaT5BIFBhcnNlLkVycm9yLkFHR1JFR0FURV9FUlJPUi4gVGhpcyBvYmplY3QncyBcImVycm9yc1wiIHByb3BlcnR5IGlzIGFuXG4gICAqICAgICAgIGFycmF5IG9mIG90aGVyIFBhcnNlLkVycm9yIG9iamVjdHMuIEVhY2ggZXJyb3Igb2JqZWN0IGluIHRoaXMgYXJyYXlcbiAgICogICAgICAgaGFzIGFuIFwib2JqZWN0XCIgcHJvcGVydHkgdGhhdCByZWZlcmVuY2VzIHRoZSBvYmplY3QgdGhhdCBjb3VsZCBub3QgYmVcbiAgICogICAgICAgZGVsZXRlZCAoZm9yIGluc3RhbmNlLCBiZWNhdXNlIHRoYXQgb2JqZWN0IGNvdWxkIG5vdCBiZSBmb3VuZCkuPC9saT5cbiAgICogICA8bGk+QSBub24tYWdncmVnYXRlIFBhcnNlLkVycm9yLiBUaGlzIGluZGljYXRlcyBhIHNlcmlvdXMgZXJyb3IgdGhhdFxuICAgKiAgICAgICBjYXVzZWQgdGhlIGRlbGV0ZSBvcGVyYXRpb24gdG8gYmUgYWJvcnRlZCBwYXJ0d2F5IHRocm91Z2ggKGZvclxuICAgKiAgICAgICBpbnN0YW5jZSwgYSBjb25uZWN0aW9uIGZhaWx1cmUgaW4gdGhlIG1pZGRsZSBvZiB0aGUgZGVsZXRlKS48L2xpPlxuICAgKiA8L3VsPlxuICAgKlxuICAgKiA8cHJlPlxuICAgKiAgIFBhcnNlLk9iamVjdC5kZXN0cm95QWxsKFtvYmplY3QxLCBvYmplY3QyLCAuLi5dLCB7XG4gICAqICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICogICAgICAgLy8gQWxsIHRoZSBvYmplY3RzIHdlcmUgZGVsZXRlZC5cbiAgICogICAgIH0sXG4gICAqICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgICAgLy8gQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgZGVsZXRpbmcgb25lIG9yIG1vcmUgb2YgdGhlIG9iamVjdHMuXG4gICAqICAgICAgIC8vIElmIHRoaXMgaXMgYW4gYWdncmVnYXRlIGVycm9yLCB0aGVuIHdlIGNhbiBpbnNwZWN0IGVhY2ggZXJyb3JcbiAgICogICAgICAgLy8gb2JqZWN0IGluZGl2aWR1YWxseSB0byBkZXRlcm1pbmUgdGhlIHJlYXNvbiB3aHkgYSBwYXJ0aWN1bGFyXG4gICAqICAgICAgIC8vIG9iamVjdCB3YXMgbm90IGRlbGV0ZWQuXG4gICAqICAgICAgIGlmIChlcnJvci5jb2RlID09IFBhcnNlLkVycm9yLkFHR1JFR0FURV9FUlJPUikge1xuICAgKiAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXJyb3IuZXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAqICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvdWxkbid0IGRlbGV0ZSBcIiArIGVycm9yLmVycm9yc1tpXS5vYmplY3QuaWQgK1xuICAgKiAgICAgICAgICAgICBcImR1ZSB0byBcIiArIGVycm9yLmVycm9yc1tpXS5tZXNzYWdlKTtcbiAgICogICAgICAgICB9XG4gICAqICAgICAgIH0gZWxzZSB7XG4gICAqICAgICAgICAgY29uc29sZS5sb2coXCJEZWxldGUgYWJvcnRlZCBiZWNhdXNlIG9mIFwiICsgZXJyb3IubWVzc2FnZSk7XG4gICAqICAgICAgIH1cbiAgICogICAgIH0sXG4gICAqICAgfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBsaXN0IEEgbGlzdCBvZiA8Y29kZT5QYXJzZS5PYmplY3Q8L2NvZGU+LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBIEJhY2tib25lLXN0eWxlIGNhbGxiYWNrIG9iamVjdC5cbiAgICogVmFsaWQgb3B0aW9ucyBhcmU6PHVsPlxuICAgKiAgIDxsaT51c2VNYXN0ZXJLZXk6IEluIENsb3VkIENvZGUgYW5kIE5vZGUgb25seSwgY2F1c2VzIHRoZSBNYXN0ZXIgS2V5IHRvXG4gICAqICAgICBiZSB1c2VkIGZvciB0aGlzIHJlcXVlc3QuXG4gICAqICAgPGxpPnNlc3Npb25Ub2tlbjogQSB2YWxpZCBzZXNzaW9uIHRva2VuLCB1c2VkIGZvciBtYWtpbmcgYSByZXF1ZXN0IG9uXG4gICAqICAgICAgIGJlaGFsZiBvZiBhIHNwZWNpZmljIHVzZXIuXG4gICAqIDwvdWw+XG4gICAqIEByZXR1cm4ge1BhcnNlLlByb21pc2V9IEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIHRoZSBkZXN0cm95QWxsXG4gICAqICAgICBjb21wbGV0ZXMuXG4gICAqL1xuICBQYXJzZS5PYmplY3QuZGVzdHJveUFsbCA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHZhciB0cmlnZ2VyRGVzdHJveSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgb2JqZWN0LnRyaWdnZXIoJ2Rlc3Ryb3knLCBvYmplY3QsIG9iamVjdC5jb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgdmFyIGVycm9ycyA9IFtdO1xuICAgIHZhciBkZXN0cm95QmF0Y2ggPSBmdW5jdGlvbihiYXRjaCkge1xuICAgICAgdmFyIHByb21pc2UgPSBQYXJzZS5Qcm9taXNlLmFzKCk7XG5cbiAgICAgIGlmIChiYXRjaC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFBhcnNlLl9yZXF1ZXN0KHtcbiAgICAgICAgICAgIHJvdXRlOiBcImJhdGNoXCIsXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgdXNlTWFzdGVyS2V5OiBvcHRpb25zLnVzZU1hc3RlcktleSxcbiAgICAgICAgICAgIHNlc3Npb25Ub2tlbjogb3B0aW9ucy5zZXNzaW9uVG9rZW4sXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIHJlcXVlc3RzOiBfLm1hcChiYXRjaCwgZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgICAgICAgICAgICAgIHBhdGg6IFwiLzEvY2xhc3Nlcy9cIiArIG9iamVjdC5jbGFzc05hbWUgKyBcIi9cIiArIG9iamVjdC5pZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VzLCBzdGF0dXMsIHhocikge1xuICAgICAgICAgIFBhcnNlLl9hcnJheUVhY2goYmF0Y2gsIGZ1bmN0aW9uKG9iamVjdCwgaSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlc1tpXS5zdWNjZXNzICYmIG9wdGlvbnMud2FpdCkge1xuICAgICAgICAgICAgICB0cmlnZ2VyRGVzdHJveShvYmplY3QpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZXNbaV0uZXJyb3IpIHtcbiAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IFBhcnNlLkVycm9yKHJlc3BvbnNlc1tpXS5lcnJvci5jb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VzW2ldLmVycm9yLmVycm9yKTtcbiAgICAgICAgICAgICAgZXJyb3Iub2JqZWN0ID0gb2JqZWN0O1xuXG4gICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICB2YXIgcHJvbWlzZSA9IFBhcnNlLlByb21pc2UuYXMoKTtcbiAgICB2YXIgYmF0Y2ggPSBbXTtcbiAgICBQYXJzZS5fYXJyYXlFYWNoKGxpc3QsIGZ1bmN0aW9uKG9iamVjdCwgaSkge1xuICAgICAgaWYgKCFvYmplY3QuaWQgfHwgIW9wdGlvbnMud2FpdCkge1xuICAgICAgICB0cmlnZ2VyRGVzdHJveShvYmplY3QpO1xuICAgICAgfVxuXG4gICAgICBpZiAob2JqZWN0LmlkKSB7XG4gICAgICAgIGJhdGNoLnB1c2gob2JqZWN0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJhdGNoLmxlbmd0aCA9PT0gMjAgfHwgaSsxID09PSBsaXN0Lmxlbmd0aCkge1xuICAgICAgICB2YXIgdGhpc0JhdGNoID0gYmF0Y2g7XG4gICAgICAgIGJhdGNoID0gW107XG5cbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZGVzdHJveUJhdGNoKHRoaXNCYXRjaCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLkFHR1JFR0FURV9FUlJPUixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRXJyb3IgZGVsZXRpbmcgYW4gb2JqZWN0IGluIGRlc3Ryb3lBbGxcIik7XG4gICAgICAgIGVycm9yLmVycm9ycyA9IGVycm9ycztcblxuICAgICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5lcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfSkuX3RoZW5SdW5DYWxsYmFja3Mob3B0aW9ucyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIGdpdmVuIGxpc3Qgb2YgUGFyc2UuT2JqZWN0LlxuICAgKiBJZiBhbnkgZXJyb3IgaXMgZW5jb3VudGVyZWQsIHN0b3BzIGFuZCBjYWxscyB0aGUgZXJyb3IgaGFuZGxlci5cbiAgICpcbiAgICogPHByZT5cbiAgICogICBQYXJzZS5PYmplY3QuZmV0Y2hBbGwoW29iamVjdDEsIG9iamVjdDIsIC4uLl0sIHtcbiAgICogICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICogICAgICAgLy8gQWxsIHRoZSBvYmplY3RzIHdlcmUgZmV0Y2hlZC5cbiAgICogICAgIH0sXG4gICAqICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgICAgLy8gQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgZmV0Y2hpbmcgb25lIG9mIHRoZSBvYmplY3RzLlxuICAgKiAgICAgfSxcbiAgICogICB9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGxpc3QgQSBsaXN0IG9mIDxjb2RlPlBhcnNlLk9iamVjdDwvY29kZT4uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgY2FsbGJhY2sgb2JqZWN0LlxuICAgKiBWYWxpZCBvcHRpb25zIGFyZTo8dWw+XG4gICAqICAgPGxpPnN1Y2Nlc3M6IEEgQmFja2JvbmUtc3R5bGUgc3VjY2VzcyBjYWxsYmFjay5cbiAgICogICA8bGk+ZXJyb3I6IEFuIEJhY2tib25lLXN0eWxlIGVycm9yIGNhbGxiYWNrLlxuICAgKiA8L3VsPlxuICAgKi9cbiAgUGFyc2UuT2JqZWN0LmZldGNoQWxsID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuICAgIHJldHVybiBQYXJzZS5PYmplY3QuX2ZldGNoQWxsKFxuICAgICAgbGlzdCxcbiAgICAgIHRydWVcbiAgICApLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGZXRjaGVzIHRoZSBnaXZlbiBsaXN0IG9mIFBhcnNlLk9iamVjdCBpZiBuZWVkZWQuXG4gICAqIElmIGFueSBlcnJvciBpcyBlbmNvdW50ZXJlZCwgc3RvcHMgYW5kIGNhbGxzIHRoZSBlcnJvciBoYW5kbGVyLlxuICAgKlxuICAgKiA8cHJlPlxuICAgKiAgIFBhcnNlLk9iamVjdC5mZXRjaEFsbElmTmVlZGVkKFtvYmplY3QxLCAuLi5dLCB7XG4gICAqICAgICBzdWNjZXNzOiBmdW5jdGlvbihsaXN0KSB7XG4gICAqICAgICAgIC8vIE9iamVjdHMgd2VyZSBmZXRjaGVkIGFuZCB1cGRhdGVkLlxuICAgKiAgICAgfSxcbiAgICogICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgICAvLyBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBmZXRjaGluZyBvbmUgb2YgdGhlIG9iamVjdHMuXG4gICAqICAgICB9LFxuICAgKiAgIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gbGlzdCBBIGxpc3Qgb2YgPGNvZGU+UGFyc2UuT2JqZWN0PC9jb2RlPi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQSBCYWNrYm9uZS1zdHlsZSBjYWxsYmFjayBvYmplY3QuXG4gICAqIFZhbGlkIG9wdGlvbnMgYXJlOjx1bD5cbiAgICogICA8bGk+c3VjY2VzczogQSBCYWNrYm9uZS1zdHlsZSBzdWNjZXNzIGNhbGxiYWNrLlxuICAgKiAgIDxsaT5lcnJvcjogQW4gQmFja2JvbmUtc3R5bGUgZXJyb3IgY2FsbGJhY2suXG4gICAqIDwvdWw+XG4gICAqL1xuICBQYXJzZS5PYmplY3QuZmV0Y2hBbGxJZk5lZWRlZCA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gUGFyc2UuT2JqZWN0Ll9mZXRjaEFsbChcbiAgICAgIGxpc3QsXG4gICAgICBmYWxzZVxuICAgICkuX3RoZW5SdW5DYWxsYmFja3Mob3B0aW9ucyk7XG4gIH07XG5cbiAgLy8gQXR0YWNoIGFsbCBpbmhlcml0YWJsZSBtZXRob2RzIHRvIHRoZSBQYXJzZS5PYmplY3QgcHJvdG90eXBlLlxuICBfLmV4dGVuZChQYXJzZS5PYmplY3QucHJvdG90eXBlLCBQYXJzZS5FdmVudHMsXG4gICAgICAgICAgIC8qKiBAbGVuZHMgUGFyc2UuT2JqZWN0LnByb3RvdHlwZSAqLyB7XG4gICAgX2V4aXN0ZWQ6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duXG4gICAgICogaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gdmVyc2lvbiBvZiB0aGUgb2JqZWN0IHN1aXRhYmxlIGZvciBzYXZpbmcgdG8gUGFyc2UuXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRvSlNPTjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIganNvbiA9IHRoaXMuX3RvRnVsbEpTT04oKTtcbiAgICAgIFBhcnNlLl9hcnJheUVhY2goW1wiX190eXBlXCIsIFwiY2xhc3NOYW1lXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihrZXkpIHsgZGVsZXRlIGpzb25ba2V5XTsgfSk7XG4gICAgICByZXR1cm4ganNvbjtcbiAgICB9LFxuXG4gICAgX3RvRnVsbEpTT046IGZ1bmN0aW9uKHNlZW5PYmplY3RzKSB7XG4gICAgICB2YXIganNvbiA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICAgIFBhcnNlLl9vYmplY3RFYWNoKGpzb24sIGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gICAgICAgIGpzb25ba2V5XSA9IFBhcnNlLl9lbmNvZGUodmFsLCBzZWVuT2JqZWN0cyk7XG4gICAgICB9KTtcbiAgICAgIFBhcnNlLl9vYmplY3RFYWNoKHRoaXMuX29wZXJhdGlvbnMsIGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gICAgICAgIGpzb25ba2V5XSA9IHZhbDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoXy5oYXModGhpcywgXCJpZFwiKSkge1xuICAgICAgICBqc29uLm9iamVjdElkID0gdGhpcy5pZDtcbiAgICAgIH1cbiAgICAgIGlmIChfLmhhcyh0aGlzLCBcImNyZWF0ZWRBdFwiKSkge1xuICAgICAgICBpZiAoXy5pc0RhdGUodGhpcy5jcmVhdGVkQXQpKSB7XG4gICAgICAgICAganNvbi5jcmVhdGVkQXQgPSB0aGlzLmNyZWF0ZWRBdC50b0pTT04oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBqc29uLmNyZWF0ZWRBdCA9IHRoaXMuY3JlYXRlZEF0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChfLmhhcyh0aGlzLCBcInVwZGF0ZWRBdFwiKSkge1xuICAgICAgICBpZiAoXy5pc0RhdGUodGhpcy51cGRhdGVkQXQpKSB7XG4gICAgICAgICAganNvbi51cGRhdGVkQXQgPSB0aGlzLnVwZGF0ZWRBdC50b0pTT04oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBqc29uLnVwZGF0ZWRBdCA9IHRoaXMudXBkYXRlZEF0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBqc29uLl9fdHlwZSA9IFwiT2JqZWN0XCI7XG4gICAgICBqc29uLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lO1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgX2hhc2hlZEpTT04gdG8gcmVmbGVjdCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGlzIG9iamVjdC5cbiAgICAgKiBBZGRzIGFueSBjaGFuZ2VkIGhhc2ggdmFsdWVzIHRvIHRoZSBzZXQgb2YgcGVuZGluZyBjaGFuZ2VzLlxuICAgICAqL1xuICAgIF9yZWZyZXNoQ2FjaGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKHNlbGYuX3JlZnJlc2hpbmdDYWNoZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWxmLl9yZWZyZXNoaW5nQ2FjaGUgPSB0cnVlO1xuICAgICAgUGFyc2UuX29iamVjdEVhY2godGhpcy5hdHRyaWJ1dGVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFBhcnNlLk9iamVjdCkge1xuICAgICAgICAgIHZhbHVlLl9yZWZyZXNoQ2FjaGUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgIHZhciBvYmplY3RBcnJheSA9IGZhbHNlO1xuICAgICAgICAgIGlmIChfLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAvLyBXZSBkb24ndCBjYWNoZSBhcnJheXMgb2YgUGFyc2UuT2JqZWN0c1xuICAgICAgICAgICAgXy5lYWNoKHZhbHVlLCBmdW5jdGlvbihhcnJWYWwpIHtcbiAgICAgICAgICAgICAgaWYgKGFyclZhbCBpbnN0YW5jZW9mIFBhcnNlLk9iamVjdCkge1xuICAgICAgICAgICAgICAgIG9iamVjdEFycmF5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhcnJWYWwuX3JlZnJlc2hDYWNoZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFvYmplY3RBcnJheSAmJiBzZWxmLl9yZXNldENhY2hlRm9yS2V5KGtleSkpIHtcbiAgICAgICAgICAgIHNlbGYuc2V0KGtleSwgbmV3IFBhcnNlLk9wLlNldCh2YWx1ZSksIHsgc2lsZW50OiB0cnVlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBkZWxldGUgc2VsZi5fcmVmcmVzaGluZ0NhY2hlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBvYmplY3QgaGFzIGJlZW4gbW9kaWZpZWQgc2luY2UgaXRzIGxhc3RcbiAgICAgKiBzYXZlL3JlZnJlc2guICBJZiBhbiBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCBpdCByZXR1cm5zIHRydWUgb25seSBpZiB0aGF0XG4gICAgICogcGFydGljdWxhciBhdHRyaWJ1dGUgaGFzIGJlZW4gbW9kaWZpZWQgc2luY2UgdGhlIGxhc3Qgc2F2ZS9yZWZyZXNoLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyIEFuIGF0dHJpYnV0ZSBuYW1lIChvcHRpb25hbCkuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBkaXJ0eTogZnVuY3Rpb24oYXR0cikge1xuICAgICAgdGhpcy5fcmVmcmVzaENhY2hlKCk7XG5cbiAgICAgIHZhciBjdXJyZW50Q2hhbmdlcyA9IF8ubGFzdCh0aGlzLl9vcFNldFF1ZXVlKTtcblxuICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgcmV0dXJuIChjdXJyZW50Q2hhbmdlc1thdHRyXSA/IHRydWUgOiBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoXy5rZXlzKGN1cnJlbnRDaGFuZ2VzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGtleXMgdGhhdCBoYXZlIGJlZW4gbW9kaWZpZWQgc2luY2UgbGFzdCBzYXZlL3JlZnJlc2hcbiAgICAgKiBAcmV0dXJuIHtBcnJheSBvZiBzdHJpbmd9XG4gICAgICovXG4gICAgZGlydHlLZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfLmtleXMoXy5sYXN0KHRoaXMuX29wU2V0UXVldWUpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIFBvaW50ZXIgcmVmZXJlbmNpbmcgdGhpcyBPYmplY3QuXG4gICAgICovXG4gICAgX3RvUG9pbnRlcjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc2VyaWFsaXplIGFuIHVuc2F2ZWQgUGFyc2UuT2JqZWN0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgX190eXBlOiBcIlBvaW50ZXJcIixcbiAgICAgICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5jbGFzc05hbWUsXG4gICAgICAgICAgICAgICBvYmplY3RJZDogdGhpcy5pZCB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHIgVGhlIHN0cmluZyBuYW1lIG9mIGFuIGF0dHJpYnV0ZS5cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYXR0cl07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByZWxhdGlvbiBvbiB0aGUgZ2l2ZW4gY2xhc3MgZm9yIHRoZSBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIFN0cmluZyBhdHRyIFRoZSBhdHRyaWJ1dGUgdG8gZ2V0IHRoZSByZWxhdGlvbiBmb3IuXG4gICAgICovXG4gICAgcmVsYXRpb246IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KGF0dHIpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgUGFyc2UuUmVsYXRpb24pKSB7XG4gICAgICAgICAgdGhyb3cgXCJDYWxsZWQgcmVsYXRpb24oKSBvbiBub24tcmVsYXRpb24gZmllbGQgXCIgKyBhdHRyO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlLl9lbnN1cmVQYXJlbnRBbmRLZXkodGhpcywgYXR0cik7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2UuUmVsYXRpb24odGhpcywgYXR0cik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIEhUTUwtZXNjYXBlZCB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUuXG4gICAgICovXG4gICAgZXNjYXBlOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICB2YXIgaHRtbCA9IHRoaXMuX2VzY2FwZWRBdHRyaWJ1dGVzW2F0dHJdO1xuICAgICAgaWYgKGh0bWwpIHtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgICB9XG4gICAgICB2YXIgdmFsID0gdGhpcy5hdHRyaWJ1dGVzW2F0dHJdO1xuICAgICAgdmFyIGVzY2FwZWQ7XG4gICAgICBpZiAoUGFyc2UuX2lzTnVsbE9yVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgZXNjYXBlZCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXNjYXBlZCA9IF8uZXNjYXBlKHZhbC50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2VzY2FwZWRBdHRyaWJ1dGVzW2F0dHJdID0gZXNjYXBlZDtcbiAgICAgIHJldHVybiBlc2NhcGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBhdHRyaWJ1dGUgY29udGFpbnMgYSB2YWx1ZSB0aGF0IGlzIG5vdFxuICAgICAqIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyIFRoZSBzdHJpbmcgbmFtZSBvZiB0aGUgYXR0cmlidXRlLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaGFzOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICByZXR1cm4gIVBhcnNlLl9pc051bGxPclVuZGVmaW5lZCh0aGlzLmF0dHJpYnV0ZXNbYXR0cl0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQdWxscyBcInNwZWNpYWxcIiBmaWVsZHMgbGlrZSBvYmplY3RJZCwgY3JlYXRlZEF0LCBldGMuIG91dCBvZiBhdHRyc1xuICAgICAqIGFuZCBwdXRzIHRoZW0gb24gXCJ0aGlzXCIgZGlyZWN0bHkuICBSZW1vdmVzIHRoZW0gZnJvbSBhdHRycy5cbiAgICAgKiBAcGFyYW0gYXR0cnMgLSBBIGRpY3Rpb25hcnkgd2l0aCB0aGUgZGF0YSBmb3IgdGhpcyBQYXJzZS5PYmplY3QuXG4gICAgICovXG4gICAgX21lcmdlTWFnaWNGaWVsZHM6IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyBvZiBtYWdpYyBmaWVsZHMuXG4gICAgICB2YXIgbW9kZWwgPSB0aGlzO1xuICAgICAgdmFyIHNwZWNpYWxGaWVsZHMgPSBbXCJpZFwiLCBcIm9iamVjdElkXCIsIFwiY3JlYXRlZEF0XCIsIFwidXBkYXRlZEF0XCJdO1xuICAgICAgUGFyc2UuX2FycmF5RWFjaChzcGVjaWFsRmllbGRzLCBmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgIGlmIChhdHRyc1thdHRyXSkge1xuICAgICAgICAgIGlmIChhdHRyID09PSBcIm9iamVjdElkXCIpIHtcbiAgICAgICAgICAgIG1vZGVsLmlkID0gYXR0cnNbYXR0cl07XG4gICAgICAgICAgfSBlbHNlIGlmICgoYXR0ciA9PT0gXCJjcmVhdGVkQXRcIiB8fCBhdHRyID09PSBcInVwZGF0ZWRBdFwiKSAmJlxuICAgICAgICAgICAgICAgICAgICAgIV8uaXNEYXRlKGF0dHJzW2F0dHJdKSkge1xuICAgICAgICAgICAgbW9kZWxbYXR0cl0gPSBQYXJzZS5fcGFyc2VEYXRlKGF0dHJzW2F0dHJdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kZWxbYXR0cl0gPSBhdHRyc1thdHRyXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIGF0dHJzW2F0dHJdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiBzZXJ2ZXJEYXRhIHRvIFwidGhpc1wiLCByZWZyZXNoZXMgYXR0cmlidXRlcywgYW5kXG4gICAgICogY2xlYXJzIHBlbmRpbmcgY2hhbmdlcztcbiAgICAgKi9cbiAgICBfY29weVNlcnZlckRhdGE6IGZ1bmN0aW9uKHNlcnZlckRhdGEpIHtcbiAgICAgIC8vIENvcHkgc2VydmVyIGRhdGFcbiAgICAgIHZhciB0ZW1wU2VydmVyRGF0YSA9IHt9O1xuICAgICAgUGFyc2UuX29iamVjdEVhY2goc2VydmVyRGF0YSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICB0ZW1wU2VydmVyRGF0YVtrZXldID0gUGFyc2UuX2RlY29kZShrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fc2VydmVyRGF0YSA9IHRlbXBTZXJ2ZXJEYXRhO1xuXG4gICAgICAvLyBSZWZyZXNoIHRoZSBhdHRyaWJ1dGVzLlxuICAgICAgdGhpcy5fcmVidWlsZEFsbEVzdGltYXRlZERhdGEoKTtcblxuICAgICAgLy8gVE9ETyAoYmtsaW10KTogUmV2aXNpdCBjbGVhcmluZyBvcGVyYXRpb25zLCBwZXJoYXBzIG1vdmUgdG8gcmV2ZXJ0LlxuICAgICAgLy8gQ2xlYXIgb3V0IGFueSBjaGFuZ2VzIHRoZSB1c2VyIG1pZ2h0IGhhdmUgbWFkZSBwcmV2aW91c2x5LlxuICAgICAgdGhpcy5fcmVmcmVzaENhY2hlKCk7XG4gICAgICB0aGlzLl9vcFNldFF1ZXVlID0gW3t9XTtcblxuICAgICAgLy8gUmVmcmVzaCB0aGUgYXR0cmlidXRlcyBhZ2Fpbi5cbiAgICAgIHRoaXMuX3JlYnVpbGRBbGxFc3RpbWF0ZWREYXRhKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyBhbm90aGVyIG9iamVjdCdzIGF0dHJpYnV0ZXMgaW50byB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICBfbWVyZ2VGcm9tT2JqZWN0OiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgaWYgKCFvdGhlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoaXMgZG9lcyB0aGUgaW52ZXJzZSBvZiBfbWVyZ2VNYWdpY0ZpZWxkcy5cbiAgICAgIHRoaXMuaWQgPSBvdGhlci5pZDtcbiAgICAgIHRoaXMuY3JlYXRlZEF0ID0gb3RoZXIuY3JlYXRlZEF0O1xuICAgICAgdGhpcy51cGRhdGVkQXQgPSBvdGhlci51cGRhdGVkQXQ7XG5cbiAgICAgIHRoaXMuX2NvcHlTZXJ2ZXJEYXRhKG90aGVyLl9zZXJ2ZXJEYXRhKTtcblxuICAgICAgdGhpcy5faGFzRGF0YSA9IHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGpzb24gdG8gYmUgc2VudCB0byB0aGUgc2VydmVyLlxuICAgICAqL1xuICAgIF9zdGFydFNhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fb3BTZXRRdWV1ZS5wdXNoKHt9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gYSBzYXZlIGZhaWxzIGJlY2F1c2Ugb2YgYW4gZXJyb3IuIEFueSBjaGFuZ2VzIHRoYXQgd2VyZSBwYXJ0XG4gICAgICogb2YgdGhlIHNhdmUgbmVlZCB0byBiZSBtZXJnZWQgd2l0aCBjaGFuZ2VzIG1hZGUgYWZ0ZXIgdGhlIHNhdmUuIFRoaXNcbiAgICAgKiBtaWdodCB0aHJvdyBhbiBleGNlcHRpb24gaXMgeW91IGRvIGNvbmZsaWN0aW5nIG9wZXJhdGlvbnMuIEZvciBleGFtcGxlLFxuICAgICAqIGlmIHlvdSBkbzpcbiAgICAgKiAgIG9iamVjdC5zZXQoXCJmb29cIiwgXCJiYXJcIik7XG4gICAgICogICBvYmplY3Quc2V0KFwiaW52YWxpZCBmaWVsZCBuYW1lXCIsIFwiYmF6XCIpO1xuICAgICAqICAgb2JqZWN0LnNhdmUoKTtcbiAgICAgKiAgIG9iamVjdC5pbmNyZW1lbnQoXCJmb29cIik7XG4gICAgICogdGhlbiB0aGlzIHdpbGwgdGhyb3cgd2hlbiB0aGUgc2F2ZSBmYWlscyBhbmQgdGhlIGNsaWVudCB0cmllcyB0byBtZXJnZVxuICAgICAqIFwiYmFyXCIgd2l0aCB0aGUgKzEuXG4gICAgICovXG4gICAgX2NhbmNlbFNhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGZhaWxlZENoYW5nZXMgPSBfLmZpcnN0KHRoaXMuX29wU2V0UXVldWUpO1xuICAgICAgdGhpcy5fb3BTZXRRdWV1ZSA9IF8ucmVzdCh0aGlzLl9vcFNldFF1ZXVlKTtcbiAgICAgIHZhciBuZXh0Q2hhbmdlcyA9IF8uZmlyc3QodGhpcy5fb3BTZXRRdWV1ZSk7XG4gICAgICBQYXJzZS5fb2JqZWN0RWFjaChmYWlsZWRDaGFuZ2VzLCBmdW5jdGlvbihvcCwga2V5KSB7XG4gICAgICAgIHZhciBvcDEgPSBmYWlsZWRDaGFuZ2VzW2tleV07XG4gICAgICAgIHZhciBvcDIgPSBuZXh0Q2hhbmdlc1trZXldO1xuICAgICAgICBpZiAob3AxICYmIG9wMikge1xuICAgICAgICAgIG5leHRDaGFuZ2VzW2tleV0gPSBvcDIuX21lcmdlV2l0aFByZXZpb3VzKG9wMSk7XG4gICAgICAgIH0gZWxzZSBpZiAob3AxKSB7XG4gICAgICAgICAgbmV4dENoYW5nZXNba2V5XSA9IG9wMTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9zYXZpbmcgPSB0aGlzLl9zYXZpbmcgLSAxO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBhIHNhdmUgY29tcGxldGVzIHN1Y2Nlc3NmdWxseS4gVGhpcyBtZXJnZXMgdGhlIGNoYW5nZXMgdGhhdFxuICAgICAqIHdlcmUgc2F2ZWQgaW50byB0aGUga25vd24gc2VydmVyIGRhdGEsIGFuZCBvdmVycmlkZXMgaXQgd2l0aCBhbnkgZGF0YVxuICAgICAqIHNlbnQgZGlyZWN0bHkgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqL1xuICAgIF9maW5pc2hTYXZlOiBmdW5jdGlvbihzZXJ2ZXJEYXRhKSB7XG4gICAgICAvLyBHcmFiIGEgY29weSBvZiBhbnkgb2JqZWN0IHJlZmVyZW5jZWQgYnkgdGhpcyBvYmplY3QuIFRoZXNlIGluc3RhbmNlc1xuICAgICAgLy8gbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGZldGNoZWQsIGFuZCB3ZSBkb24ndCB3YW50IHRvIGxvc2UgdGhlaXIgZGF0YS5cbiAgICAgIC8vIE5vdGUgdGhhdCBkb2luZyBpdCBsaWtlIHRoaXMgbWVhbnMgd2Ugd2lsbCB1bmlmeSBzZXBhcmF0ZSBjb3BpZXMgb2YgdGhlXG4gICAgICAvLyBzYW1lIG9iamVjdCwgYnV0IHRoYXQncyBhIHJpc2sgd2UgaGF2ZSB0byB0YWtlLlxuICAgICAgdmFyIGZldGNoZWRPYmplY3RzID0ge307XG4gICAgICBQYXJzZS5fdHJhdmVyc2UodGhpcy5hdHRyaWJ1dGVzLCBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFBhcnNlLk9iamVjdCAmJiBvYmplY3QuaWQgJiYgb2JqZWN0Ll9oYXNEYXRhKSB7XG4gICAgICAgICAgZmV0Y2hlZE9iamVjdHNbb2JqZWN0LmlkXSA9IG9iamVjdDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBzYXZlZENoYW5nZXMgPSBfLmZpcnN0KHRoaXMuX29wU2V0UXVldWUpO1xuICAgICAgdGhpcy5fb3BTZXRRdWV1ZSA9IF8ucmVzdCh0aGlzLl9vcFNldFF1ZXVlKTtcbiAgICAgIHRoaXMuX2FwcGx5T3BTZXQoc2F2ZWRDaGFuZ2VzLCB0aGlzLl9zZXJ2ZXJEYXRhKTtcbiAgICAgIHRoaXMuX21lcmdlTWFnaWNGaWVsZHMoc2VydmVyRGF0YSk7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBQYXJzZS5fb2JqZWN0RWFjaChzZXJ2ZXJEYXRhLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHNlbGYuX3NlcnZlckRhdGFba2V5XSA9IFBhcnNlLl9kZWNvZGUoa2V5LCB2YWx1ZSk7XG5cbiAgICAgICAgLy8gTG9vayBmb3IgYW55IG9iamVjdHMgdGhhdCBtaWdodCBoYXZlIGJlY29tZSB1bmZldGNoZWQgYW5kIGZpeCB0aGVtXG4gICAgICAgIC8vIGJ5IHJlcGxhY2luZyB0aGVpciB2YWx1ZXMgd2l0aCB0aGUgcHJldmlvdXNseSBvYnNlcnZlZCB2YWx1ZXMuXG4gICAgICAgIHZhciBmZXRjaGVkID0gUGFyc2UuX3RyYXZlcnNlKHNlbGYuX3NlcnZlckRhdGFba2V5XSwgZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFBhcnNlLk9iamVjdCAmJiBmZXRjaGVkT2JqZWN0c1tvYmplY3QuaWRdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmV0Y2hlZE9iamVjdHNbb2JqZWN0LmlkXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZmV0Y2hlZCkge1xuICAgICAgICAgIHNlbGYuX3NlcnZlckRhdGFba2V5XSA9IGZldGNoZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5fcmVidWlsZEFsbEVzdGltYXRlZERhdGEoKTtcbiAgICAgIHRoaXMuX3NhdmluZyA9IHRoaXMuX3NhdmluZyAtIDE7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGEgZmV0Y2ggb3IgbG9naW4gaXMgY29tcGxldGUgdG8gc2V0IHRoZSBrbm93biBzZXJ2ZXIgZGF0YSB0b1xuICAgICAqIHRoZSBnaXZlbiBvYmplY3QuXG4gICAgICovXG4gICAgX2ZpbmlzaEZldGNoOiBmdW5jdGlvbihzZXJ2ZXJEYXRhLCBoYXNEYXRhKSB7XG4gICAgICAvLyBUT0RPIChia2xpbXQpOiBSZXZpc2l0IGNsZWFyaW5nIG9wZXJhdGlvbnMsIHBlcmhhcHMgbW92ZSB0byByZXZlcnQuXG4gICAgICB0aGlzLl9vcFNldFF1ZXVlID0gW3t9XTtcblxuICAgICAgLy8gQnJpbmcgaW4gYWxsIHRoZSBuZXcgc2VydmVyIGRhdGEuXG4gICAgICB0aGlzLl9tZXJnZU1hZ2ljRmllbGRzKHNlcnZlckRhdGEpO1xuICAgICAgdGhpcy5fY29weVNlcnZlckRhdGEoc2VydmVyRGF0YSk7XG5cbiAgICAgIHRoaXMuX2hhc0RhdGEgPSBoYXNEYXRhO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBzZXQgb2YgUGFyc2UuT3AgaW4gb3BTZXQgdG8gdGhlIG9iamVjdCB0YXJnZXQuXG4gICAgICovXG4gICAgX2FwcGx5T3BTZXQ6IGZ1bmN0aW9uKG9wU2V0LCB0YXJnZXQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIFBhcnNlLl9vYmplY3RFYWNoKG9wU2V0LCBmdW5jdGlvbihjaGFuZ2UsIGtleSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IGNoYW5nZS5fZXN0aW1hdGUodGFyZ2V0W2tleV0sIHNlbGYsIGtleSk7XG4gICAgICAgIGlmICh0YXJnZXRba2V5XSA9PT0gUGFyc2UuT3AuX1VOU0VUKSB7XG4gICAgICAgICAgZGVsZXRlIHRhcmdldFtrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgdGhlIGNhY2hlZCB2YWx1ZSBmb3Iga2V5IHdpdGggdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBuZXcgdmFsdWUgaXMgZGlmZmVyZW50IHRoYW4gdGhlIG9sZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBfcmVzZXRDYWNoZUZvcktleTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLmF0dHJpYnV0ZXNba2V5XTtcbiAgICAgIGlmIChfLmlzT2JqZWN0KHZhbHVlKSAmJlxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBQYXJzZS5PYmplY3QpICYmXG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIFBhcnNlLkZpbGUpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUudG9KU09OID8gdmFsdWUudG9KU09OKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLl9oYXNoZWRKU09OW2tleV0gIT09IGpzb24pIHtcbiAgICAgICAgICB2YXIgd2FzU2V0ID0gISF0aGlzLl9oYXNoZWRKU09OW2tleV07XG4gICAgICAgICAgdGhpcy5faGFzaGVkSlNPTltrZXldID0ganNvbjtcbiAgICAgICAgICByZXR1cm4gd2FzU2V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBvcHVsYXRlcyBhdHRyaWJ1dGVzW2tleV0gYnkgc3RhcnRpbmcgd2l0aCB0aGUgbGFzdCBrbm93biBkYXRhIGZyb20gdGhlXG4gICAgICogc2VydmVyLCBhbmQgYXBwbHlpbmcgYWxsIG9mIHRoZSBsb2NhbCBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIG1hZGUgdG8gdGhhdFxuICAgICAqIGtleSBzaW5jZSB0aGVuLlxuICAgICAqL1xuICAgIF9yZWJ1aWxkRXN0aW1hdGVkRGF0YUZvcktleTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2tleV07XG4gICAgICBpZiAodGhpcy5fc2VydmVyRGF0YVtrZXldKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlc1trZXldID0gdGhpcy5fc2VydmVyRGF0YVtrZXldO1xuICAgICAgfVxuICAgICAgUGFyc2UuX2FycmF5RWFjaCh0aGlzLl9vcFNldFF1ZXVlLCBmdW5jdGlvbihvcFNldCkge1xuICAgICAgICB2YXIgb3AgPSBvcFNldFtrZXldO1xuICAgICAgICBpZiAob3ApIHtcbiAgICAgICAgICBzZWxmLmF0dHJpYnV0ZXNba2V5XSA9IG9wLl9lc3RpbWF0ZShzZWxmLmF0dHJpYnV0ZXNba2V5XSwgc2VsZiwga2V5KTtcbiAgICAgICAgICBpZiAoc2VsZi5hdHRyaWJ1dGVzW2tleV0gPT09IFBhcnNlLk9wLl9VTlNFVCkge1xuICAgICAgICAgICAgZGVsZXRlIHNlbGYuYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLl9yZXNldENhY2hlRm9yS2V5KGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUG9wdWxhdGVzIGF0dHJpYnV0ZXMgYnkgc3RhcnRpbmcgd2l0aCB0aGUgbGFzdCBrbm93biBkYXRhIGZyb20gdGhlXG4gICAgICogc2VydmVyLCBhbmQgYXBwbHlpbmcgYWxsIG9mIHRoZSBsb2NhbCBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIG1hZGUgc2luY2VcbiAgICAgKiB0aGVuLlxuICAgICAqL1xuICAgIF9yZWJ1aWxkQWxsRXN0aW1hdGVkRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHZhciBwcmV2aW91c0F0dHJpYnV0ZXMgPSBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7XG5cbiAgICAgIHRoaXMuYXR0cmlidXRlcyA9IF8uY2xvbmUodGhpcy5fc2VydmVyRGF0YSk7XG4gICAgICBQYXJzZS5fYXJyYXlFYWNoKHRoaXMuX29wU2V0UXVldWUsIGZ1bmN0aW9uKG9wU2V0KSB7XG4gICAgICAgIHNlbGYuX2FwcGx5T3BTZXQob3BTZXQsIHNlbGYuYXR0cmlidXRlcyk7XG4gICAgICAgIFBhcnNlLl9vYmplY3RFYWNoKG9wU2V0LCBmdW5jdGlvbihvcCwga2V5KSB7XG4gICAgICAgICAgc2VsZi5fcmVzZXRDYWNoZUZvcktleShrZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUcmlnZ2VyIGNoYW5nZSBldmVudHMgZm9yIGFueXRoaW5nIHRoYXQgY2hhbmdlZCBiZWNhdXNlIG9mIHRoZSBmZXRjaC5cbiAgICAgIFBhcnNlLl9vYmplY3RFYWNoKHByZXZpb3VzQXR0cmlidXRlcywgZnVuY3Rpb24ob2xkVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoc2VsZi5hdHRyaWJ1dGVzW2tleV0gIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdjaGFuZ2U6JyArIGtleSwgc2VsZiwgc2VsZi5hdHRyaWJ1dGVzW2tleV0sIHt9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBQYXJzZS5fb2JqZWN0RWFjaCh0aGlzLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKCFfLmhhcyhwcmV2aW91c0F0dHJpYnV0ZXMsIGtleSkpIHtcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ2NoYW5nZTonICsga2V5LCBzZWxmLCBuZXdWYWx1ZSwge30pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIGhhc2ggb2YgbW9kZWwgYXR0cmlidXRlcyBvbiB0aGUgb2JqZWN0LCBmaXJpbmdcbiAgICAgKiA8Y29kZT5cImNoYW5nZVwiPC9jb2RlPiB1bmxlc3MgeW91IGNob29zZSB0byBzaWxlbmNlIGl0LlxuICAgICAqXG4gICAgICogPHA+WW91IGNhbiBjYWxsIGl0IHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcga2V5cyBhbmQgdmFsdWVzLCBvciB3aXRoIG9uZVxuICAgICAqIGtleSBhbmQgdmFsdWUuICBGb3IgZXhhbXBsZTo8cHJlPlxuICAgICAqICAgZ2FtZVR1cm4uc2V0KHtcbiAgICAgKiAgICAgcGxheWVyOiBwbGF5ZXIxLFxuICAgICAqICAgICBkaWNlUm9sbDogMlxuICAgICAqICAgfSwge1xuICAgICAqICAgICBlcnJvcjogZnVuY3Rpb24oZ2FtZVR1cm5BZ2FpbiwgZXJyb3IpIHtcbiAgICAgKiAgICAgICAvLyBUaGUgc2V0IGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgICAqICAgICB9XG4gICAgICogICB9KTtcbiAgICAgKlxuICAgICAqICAgZ2FtZS5zZXQoXCJjdXJyZW50UGxheWVyXCIsIHBsYXllcjIsIHtcbiAgICAgKiAgICAgZXJyb3I6IGZ1bmN0aW9uKGdhbWVUdXJuQWdhaW4sIGVycm9yKSB7XG4gICAgICogICAgICAgLy8gVGhlIHNldCBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICAgKiAgICAgfVxuICAgICAqICAgfSk7XG4gICAgICpcbiAgICAgKiAgIGdhbWUuc2V0KFwiZmluaXNoZWRcIiwgdHJ1ZSk7PC9wcmU+PC9wPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge30gdmFsdWUgVGhlIHZhbHVlIHRvIGdpdmUgaXQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQSBzZXQgb2YgQmFja2JvbmUtbGlrZSBvcHRpb25zIGZvciB0aGUgc2V0LlxuICAgICAqICAgICBUaGUgb25seSBzdXBwb3J0ZWQgb3B0aW9ucyBhcmUgPGNvZGU+c2lsZW50PC9jb2RlPixcbiAgICAgKiAgICAgPGNvZGU+ZXJyb3I8L2NvZGU+LCBhbmQgPGNvZGU+cHJvbWlzZTwvY29kZT4uXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgc2V0IHN1Y2NlZWRlZC5cbiAgICAgKiBAc2VlIFBhcnNlLk9iamVjdCN2YWxpZGF0ZVxuICAgICAqIEBzZWUgUGFyc2UuRXJyb3JcbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBhdHRycywgYXR0cjtcbiAgICAgIGlmIChfLmlzT2JqZWN0KGtleSkgfHwgUGFyc2UuX2lzTnVsbE9yVW5kZWZpbmVkKGtleSkpIHtcbiAgICAgICAgYXR0cnMgPSBrZXk7XG4gICAgICAgIFBhcnNlLl9vYmplY3RFYWNoKGF0dHJzLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICAgICAgYXR0cnNba10gPSBQYXJzZS5fZGVjb2RlKGssIHYpO1xuICAgICAgICB9KTtcbiAgICAgICAgb3B0aW9ucyA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXR0cnMgPSB7fTtcbiAgICAgICAgYXR0cnNba2V5XSA9IFBhcnNlLl9kZWNvZGUoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEV4dHJhY3QgYXR0cmlidXRlcyBhbmQgb3B0aW9ucy5cbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgaWYgKCFhdHRycykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmIChhdHRycyBpbnN0YW5jZW9mIFBhcnNlLk9iamVjdCkge1xuICAgICAgICBhdHRycyA9IGF0dHJzLmF0dHJpYnV0ZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIFBhcnNlLl9vYmplY3RFYWNoKGF0dHJzLCBmdW5jdGlvbih1bnVzZWRfdmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoc2VsZi5jb25zdHJ1Y3Rvci5yZWFkT25seUF0dHJpYnV0ZXMgJiZcbiAgICAgICAgICBzZWxmLmNvbnN0cnVjdG9yLnJlYWRPbmx5QXR0cmlidXRlc1trZXldKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbW9kaWZ5IHJlYWRvbmx5IGtleTogJyArIGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBJZiB0aGUgdW5zZXQgb3B0aW9uIGlzIHVzZWQsIGV2ZXJ5IGF0dHJpYnV0ZSBzaG91bGQgYmUgYSBVbnNldC5cbiAgICAgIGlmIChvcHRpb25zLnVuc2V0KSB7XG4gICAgICAgIFBhcnNlLl9vYmplY3RFYWNoKGF0dHJzLCBmdW5jdGlvbih1bnVzZWRfdmFsdWUsIGtleSkge1xuICAgICAgICAgIGF0dHJzW2tleV0gPSBuZXcgUGFyc2UuT3AuVW5zZXQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFwcGx5IGFsbCB0aGUgYXR0cmlidXRlcyB0byBnZXQgdGhlIGVzdGltYXRlZCB2YWx1ZXMuXG4gICAgICB2YXIgZGF0YVRvVmFsaWRhdGUgPSBfLmNsb25lKGF0dHJzKTtcbiAgICAgIFBhcnNlLl9vYmplY3RFYWNoKGRhdGFUb1ZhbGlkYXRlLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFBhcnNlLk9wKSB7XG4gICAgICAgICAgZGF0YVRvVmFsaWRhdGVba2V5XSA9IHZhbHVlLl9lc3RpbWF0ZShzZWxmLmF0dHJpYnV0ZXNba2V5XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYsIGtleSk7XG4gICAgICAgICAgaWYgKGRhdGFUb1ZhbGlkYXRlW2tleV0gPT09IFBhcnNlLk9wLl9VTlNFVCkge1xuICAgICAgICAgICAgZGVsZXRlIGRhdGFUb1ZhbGlkYXRlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gUnVuIHZhbGlkYXRpb24uXG4gICAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX21lcmdlTWFnaWNGaWVsZHMoYXR0cnMpO1xuXG4gICAgICBvcHRpb25zLmNoYW5nZXMgPSB7fTtcbiAgICAgIHZhciBlc2NhcGVkID0gdGhpcy5fZXNjYXBlZEF0dHJpYnV0ZXM7XG4gICAgICB2YXIgcHJldiA9IHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyB8fCB7fTtcblxuICAgICAgLy8gVXBkYXRlIGF0dHJpYnV0ZXMuXG4gICAgICBQYXJzZS5fYXJyYXlFYWNoKF8ua2V5cyhhdHRycyksIGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGF0dHJzW2F0dHJdO1xuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSByZWxhdGlvbiBvYmplY3Qgd2UgbmVlZCB0byBzZXQgdGhlIHBhcmVudCBjb3JyZWN0bHksXG4gICAgICAgIC8vIHNpbmNlIHRoZSBsb2NhdGlvbiB3aGVyZSBpdCB3YXMgcGFyc2VkIGRvZXMgbm90IGhhdmUgYWNjZXNzIHRvXG4gICAgICAgIC8vIHRoaXMgb2JqZWN0LlxuICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgUGFyc2UuUmVsYXRpb24pIHtcbiAgICAgICAgICB2YWwucGFyZW50ID0gc2VsZjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKHZhbCBpbnN0YW5jZW9mIFBhcnNlLk9wKSkge1xuICAgICAgICAgIHZhbCA9IG5ldyBQYXJzZS5PcC5TZXQodmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlZSBpZiB0aGlzIGNoYW5nZSB3aWxsIGFjdHVhbGx5IGhhdmUgYW55IGVmZmVjdC5cbiAgICAgICAgdmFyIGlzUmVhbENoYW5nZSA9IHRydWU7XG4gICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBQYXJzZS5PcC5TZXQgJiZcbiAgICAgICAgICAgIF8uaXNFcXVhbChzZWxmLmF0dHJpYnV0ZXNbYXR0cl0sIHZhbC52YWx1ZSkpIHtcbiAgICAgICAgICBpc1JlYWxDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1JlYWxDaGFuZ2UpIHtcbiAgICAgICAgICBkZWxldGUgZXNjYXBlZFthdHRyXTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICAgIHNlbGYuX3NpbGVudFthdHRyXSA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMuY2hhbmdlc1thdHRyXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJlbnRDaGFuZ2VzID0gXy5sYXN0KHNlbGYuX29wU2V0UXVldWUpO1xuICAgICAgICBjdXJyZW50Q2hhbmdlc1thdHRyXSA9IHZhbC5fbWVyZ2VXaXRoUHJldmlvdXMoY3VycmVudENoYW5nZXNbYXR0cl0pO1xuICAgICAgICBzZWxmLl9yZWJ1aWxkRXN0aW1hdGVkRGF0YUZvcktleShhdHRyKTtcblxuICAgICAgICBpZiAoaXNSZWFsQ2hhbmdlKSB7XG4gICAgICAgICAgc2VsZi5jaGFuZ2VkW2F0dHJdID0gc2VsZi5hdHRyaWJ1dGVzW2F0dHJdO1xuICAgICAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICAgIHNlbGYuX3BlbmRpbmdbYXR0cl0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgc2VsZi5jaGFuZ2VkW2F0dHJdO1xuICAgICAgICAgIGRlbGV0ZSBzZWxmLl9wZW5kaW5nW2F0dHJdO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkge1xuICAgICAgICB0aGlzLmNoYW5nZShvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gYXR0cmlidXRlIGZyb20gdGhlIG1vZGVsLCBmaXJpbmcgPGNvZGU+XCJjaGFuZ2VcIjwvY29kZT4gdW5sZXNzXG4gICAgICogeW91IGNob29zZSB0byBzaWxlbmNlIGl0LiBUaGlzIGlzIGEgbm9vcCBpZiB0aGUgYXR0cmlidXRlIGRvZXNuJ3RcbiAgICAgKiBleGlzdC5cbiAgICAgKi9cbiAgICB1bnNldDogZnVuY3Rpb24oYXR0ciwgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBvcHRpb25zLnVuc2V0ID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLnNldChhdHRyLCBudWxsLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXRvbWljYWxseSBpbmNyZW1lbnRzIHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gYXR0cmlidXRlIHRoZSBuZXh0IHRpbWUgdGhlXG4gICAgICogb2JqZWN0IGlzIHNhdmVkLiBJZiBubyBhbW91bnQgaXMgc3BlY2lmaWVkLCAxIGlzIHVzZWQgYnkgZGVmYXVsdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdHRyIHtTdHJpbmd9IFRoZSBrZXkuXG4gICAgICogQHBhcmFtIGFtb3VudCB7TnVtYmVyfSBUaGUgYW1vdW50IHRvIGluY3JlbWVudCBieS5cbiAgICAgKi9cbiAgICBpbmNyZW1lbnQ6IGZ1bmN0aW9uKGF0dHIsIGFtb3VudCkge1xuICAgICAgaWYgKF8uaXNVbmRlZmluZWQoYW1vdW50KSB8fCBfLmlzTnVsbChhbW91bnQpKSB7XG4gICAgICAgIGFtb3VudCA9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zZXQoYXR0ciwgbmV3IFBhcnNlLk9wLkluY3JlbWVudChhbW91bnQpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXRvbWljYWxseSBhZGQgYW4gb2JqZWN0IHRvIHRoZSBlbmQgb2YgdGhlIGFycmF5IGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuXG4gICAgICoga2V5LlxuICAgICAqIEBwYXJhbSBhdHRyIHtTdHJpbmd9IFRoZSBrZXkuXG4gICAgICogQHBhcmFtIGl0ZW0ge30gVGhlIGl0ZW0gdG8gYWRkLlxuICAgICAqL1xuICAgIGFkZDogZnVuY3Rpb24oYXR0ciwgaXRlbSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHIsIG5ldyBQYXJzZS5PcC5BZGQoW2l0ZW1dKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEF0b21pY2FsbHkgYWRkIGFuIG9iamVjdCB0byB0aGUgYXJyYXkgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4ga2V5LCBvbmx5XG4gICAgICogaWYgaXQgaXMgbm90IGFscmVhZHkgcHJlc2VudCBpbiB0aGUgYXJyYXkuIFRoZSBwb3NpdGlvbiBvZiB0aGUgaW5zZXJ0IGlzXG4gICAgICogbm90IGd1YXJhbnRlZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0ciB7U3RyaW5nfSBUaGUga2V5LlxuICAgICAqIEBwYXJhbSBpdGVtIHt9IFRoZSBvYmplY3QgdG8gYWRkLlxuICAgICAqL1xuICAgIGFkZFVuaXF1ZTogZnVuY3Rpb24oYXR0ciwgaXRlbSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHIsIG5ldyBQYXJzZS5PcC5BZGRVbmlxdWUoW2l0ZW1dKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEF0b21pY2FsbHkgcmVtb3ZlIGFsbCBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IGZyb20gdGhlIGFycmF5IGFzc29jaWF0ZWRcbiAgICAgKiB3aXRoIGEgZ2l2ZW4ga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHIge1N0cmluZ30gVGhlIGtleS5cbiAgICAgKiBAcGFyYW0gaXRlbSB7fSBUaGUgb2JqZWN0IHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICByZW1vdmU6IGZ1bmN0aW9uKGF0dHIsIGl0ZW0pIHtcbiAgICAgIHJldHVybiB0aGlzLnNldChhdHRyLCBuZXcgUGFyc2UuT3AuUmVtb3ZlKFtpdGVtXSkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIGEgc3ViY2xhc3Mgb2YgUGFyc2UuT3AgZGVzY3JpYmluZyB3aGF0IGtpbmQgb2ZcbiAgICAgKiBtb2RpZmljYXRpb24gaGFzIGJlZW4gcGVyZm9ybWVkIG9uIHRoaXMgZmllbGQgc2luY2UgdGhlIGxhc3QgdGltZSBpdCB3YXNcbiAgICAgKiBzYXZlZC4gRm9yIGV4YW1wbGUsIGFmdGVyIGNhbGxpbmcgb2JqZWN0LmluY3JlbWVudChcInhcIiksIGNhbGxpbmdcbiAgICAgKiBvYmplY3Qub3AoXCJ4XCIpIHdvdWxkIHJldHVybiBhbiBpbnN0YW5jZSBvZiBQYXJzZS5PcC5JbmNyZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0ciB7U3RyaW5nfSBUaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtQYXJzZS5PcH0gVGhlIG9wZXJhdGlvbiwgb3IgdW5kZWZpbmVkIGlmIG5vbmUuXG4gICAgICovXG4gICAgb3A6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHJldHVybiBfLmxhc3QodGhpcy5fb3BTZXRRdWV1ZSlbYXR0cl07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFyIGFsbCBhdHRyaWJ1dGVzIG9uIHRoZSBtb2RlbCwgZmlyaW5nIDxjb2RlPlwiY2hhbmdlXCI8L2NvZGU+IHVubGVzc1xuICAgICAqIHlvdSBjaG9vc2UgdG8gc2lsZW5jZSBpdC5cbiAgICAgKi9cbiAgICBjbGVhcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBvcHRpb25zLnVuc2V0ID0gdHJ1ZTtcbiAgICAgIHZhciBrZXlzVG9DbGVhciA9IF8uZXh0ZW5kKHRoaXMuYXR0cmlidXRlcywgdGhpcy5fb3BlcmF0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoa2V5c1RvQ2xlYXIsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgSlNPTi1lbmNvZGVkIHNldCBvZiBvcGVyYXRpb25zIHRvIGJlIHNlbnQgd2l0aCB0aGUgbmV4dCBzYXZlXG4gICAgICogcmVxdWVzdC5cbiAgICAgKi9cbiAgICBfZ2V0U2F2ZUpTT046IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGpzb24gPSBfLmNsb25lKF8uZmlyc3QodGhpcy5fb3BTZXRRdWV1ZSkpO1xuICAgICAgUGFyc2UuX29iamVjdEVhY2goanNvbiwgZnVuY3Rpb24ob3AsIGtleSkge1xuICAgICAgICBqc29uW2tleV0gPSBvcC50b0pTT04oKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIG9iamVjdCBjYW4gYmUgc2VyaWFsaXplZCBmb3Igc2F2aW5nLlxuICAgICAqL1xuICAgIF9jYW5CZVNlcmlhbGl6ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFBhcnNlLk9iamVjdC5fY2FuQmVTZXJpYWxpemVkQXNWYWx1ZSh0aGlzLmF0dHJpYnV0ZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGZXRjaCB0aGUgbW9kZWwgZnJvbSB0aGUgc2VydmVyLiBJZiB0aGUgc2VydmVyJ3MgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gICAgICogbW9kZWwgZGlmZmVycyBmcm9tIGl0cyBjdXJyZW50IGF0dHJpYnV0ZXMsIHRoZXkgd2lsbCBiZSBvdmVycmlkZW4sXG4gICAgICogdHJpZ2dlcmluZyBhIDxjb2RlPlwiY2hhbmdlXCI8L2NvZGU+IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQSBCYWNrYm9uZS1zdHlsZSBjYWxsYmFjayBvYmplY3QuXG4gICAgICogVmFsaWQgb3B0aW9ucyBhcmU6PHVsPlxuICAgICAqICAgPGxpPnN1Y2Nlc3M6IEEgQmFja2JvbmUtc3R5bGUgc3VjY2VzcyBjYWxsYmFjay5cbiAgICAgKiAgIDxsaT5lcnJvcjogQW4gQmFja2JvbmUtc3R5bGUgZXJyb3IgY2FsbGJhY2suXG4gICAgICogICA8bGk+dXNlTWFzdGVyS2V5OiBJbiBDbG91ZCBDb2RlIGFuZCBOb2RlIG9ubHksIGNhdXNlcyB0aGUgTWFzdGVyIEtleSB0b1xuICAgICAqICAgICBiZSB1c2VkIGZvciB0aGlzIHJlcXVlc3QuXG4gICAgICogICA8bGk+c2Vzc2lvblRva2VuOiBBIHZhbGlkIHNlc3Npb24gdG9rZW4sIHVzZWQgZm9yIG1ha2luZyBhIHJlcXVlc3Qgb25cbiAgICAgKiAgICAgICBiZWhhbGYgb2YgYSBzcGVjaWZpYyB1c2VyLlxuICAgICAqIDwvdWw+XG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gdGhlIGZldGNoXG4gICAgICogICAgIGNvbXBsZXRlcy5cbiAgICAgKi9cbiAgICBmZXRjaDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB2YXIgcmVxdWVzdCA9IFBhcnNlLl9yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcm91dGU6IFwiY2xhc3Nlc1wiLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMuY2xhc3NOYW1lLFxuICAgICAgICBvYmplY3RJZDogdGhpcy5pZCxcbiAgICAgICAgdXNlTWFzdGVyS2V5OiBvcHRpb25zLnVzZU1hc3RlcktleSxcbiAgICAgICAgc2Vzc2lvblRva2VuOiBvcHRpb25zLnNlc3Npb25Ub2tlblxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVxdWVzdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlLCBzdGF0dXMsIHhocikge1xuICAgICAgICBzZWxmLl9maW5pc2hGZXRjaChzZWxmLnBhcnNlKHJlc3BvbnNlLCBzdGF0dXMsIHhociksIHRydWUpO1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH0pLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMsIHRoaXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgYSBoYXNoIG9mIG1vZGVsIGF0dHJpYnV0ZXMsIGFuZCBzYXZlIHRoZSBtb2RlbCB0byB0aGUgc2VydmVyLlxuICAgICAqIHVwZGF0ZWRBdCB3aWxsIGJlIHVwZGF0ZWQgd2hlbiB0aGUgcmVxdWVzdCByZXR1cm5zLlxuICAgICAqIFlvdSBjYW4gZWl0aGVyIGNhbGwgaXQgYXM6PHByZT5cbiAgICAgKiAgIG9iamVjdC5zYXZlKCk7PC9wcmU+XG4gICAgICogb3I8cHJlPlxuICAgICAqICAgb2JqZWN0LnNhdmUobnVsbCwgb3B0aW9ucyk7PC9wcmU+XG4gICAgICogb3I8cHJlPlxuICAgICAqICAgb2JqZWN0LnNhdmUoYXR0cnMsIG9wdGlvbnMpOzwvcHJlPlxuICAgICAqIG9yPHByZT5cbiAgICAgKiAgIG9iamVjdC5zYXZlKGtleSwgdmFsdWUsIG9wdGlvbnMpOzwvcHJlPlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGUsIDxwcmU+XG4gICAgICogICBnYW1lVHVybi5zYXZlKHtcbiAgICAgKiAgICAgcGxheWVyOiBcIkpha2UgQ3V0dGVyXCIsXG4gICAgICogICAgIGRpY2VSb2xsOiAyXG4gICAgICogICB9LCB7XG4gICAgICogICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGdhbWVUdXJuQWdhaW4pIHtcbiAgICAgKiAgICAgICAvLyBUaGUgc2F2ZSB3YXMgc3VjY2Vzc2Z1bC5cbiAgICAgKiAgICAgfSxcbiAgICAgKiAgICAgZXJyb3I6IGZ1bmN0aW9uKGdhbWVUdXJuQWdhaW4sIGVycm9yKSB7XG4gICAgICogICAgICAgLy8gVGhlIHNhdmUgZmFpbGVkLiAgRXJyb3IgaXMgYW4gaW5zdGFuY2Ugb2YgUGFyc2UuRXJyb3IuXG4gICAgICogICAgIH1cbiAgICAgKiAgIH0pOzwvcHJlPlxuICAgICAqIG9yIHdpdGggcHJvbWlzZXM6PHByZT5cbiAgICAgKiAgIGdhbWVUdXJuLnNhdmUoe1xuICAgICAqICAgICBwbGF5ZXI6IFwiSmFrZSBDdXR0ZXJcIixcbiAgICAgKiAgICAgZGljZVJvbGw6IDJcbiAgICAgKiAgIH0pLnRoZW4oZnVuY3Rpb24oZ2FtZVR1cm5BZ2Fpbikge1xuICAgICAqICAgICAvLyBUaGUgc2F2ZSB3YXMgc3VjY2Vzc2Z1bC5cbiAgICAgKiAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICogICAgIC8vIFRoZSBzYXZlIGZhaWxlZC4gIEVycm9yIGlzIGFuIGluc3RhbmNlIG9mIFBhcnNlLkVycm9yLlxuICAgICAqICAgfSk7PC9wcmU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBIEJhY2tib25lLXN0eWxlIGNhbGxiYWNrIG9iamVjdC5cbiAgICAgKiBWYWxpZCBvcHRpb25zIGFyZTo8dWw+XG4gICAgICogICA8bGk+d2FpdDogU2V0IHRvIHRydWUgdG8gd2FpdCBmb3IgdGhlIHNlcnZlciB0byBjb25maXJtIGEgc3VjY2Vzc2Z1bFxuICAgICAqICAgc2F2ZSBiZWZvcmUgbW9kaWZ5aW5nIHRoZSBhdHRyaWJ1dGVzIG9uIHRoZSBvYmplY3QuXG4gICAgICogICA8bGk+c2lsZW50OiBTZXQgdG8gdHJ1ZSB0byBhdm9pZCBmaXJpbmcgdGhlIGBzZXRgIGV2ZW50LlxuICAgICAqICAgPGxpPnN1Y2Nlc3M6IEEgQmFja2JvbmUtc3R5bGUgc3VjY2VzcyBjYWxsYmFjay5cbiAgICAgKiAgIDxsaT5lcnJvcjogQW4gQmFja2JvbmUtc3R5bGUgZXJyb3IgY2FsbGJhY2suXG4gICAgICogICA8bGk+dXNlTWFzdGVyS2V5OiBJbiBDbG91ZCBDb2RlIGFuZCBOb2RlIG9ubHksIGNhdXNlcyB0aGUgTWFzdGVyIEtleSB0b1xuICAgICAqICAgICBiZSB1c2VkIGZvciB0aGlzIHJlcXVlc3QuXG4gICAgICogICA8bGk+c2Vzc2lvblRva2VuOiBBIHZhbGlkIHNlc3Npb24gdG9rZW4sIHVzZWQgZm9yIG1ha2luZyBhIHJlcXVlc3Qgb25cbiAgICAgKiAgICAgICBiZWhhbGYgb2YgYSBzcGVjaWZpYyB1c2VyLlxuICAgICAqIDwvdWw+XG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gdGhlIHNhdmVcbiAgICAgKiAgICAgY29tcGxldGVzLlxuICAgICAqIEBzZWUgUGFyc2UuRXJyb3JcbiAgICAgKi9cbiAgICBzYXZlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICB2YXIgaSwgYXR0cnMsIGN1cnJlbnQsIG9wdGlvbnMsIHNhdmVkO1xuICAgICAgaWYgKF8uaXNPYmplY3QoYXJnMSkgfHwgUGFyc2UuX2lzTnVsbE9yVW5kZWZpbmVkKGFyZzEpKSB7XG4gICAgICAgIGF0dHJzID0gYXJnMTtcbiAgICAgICAgb3B0aW9ucyA9IGFyZzI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdHRycyA9IHt9O1xuICAgICAgICBhdHRyc1thcmcxXSA9IGFyZzI7XG4gICAgICAgIG9wdGlvbnMgPSBhcmczO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHNhdmUoeyBzdWNjZXNzOiBmdW5jdGlvbigpIHt9IH0pIHdvcmsuXG4gICAgICBpZiAoIW9wdGlvbnMgJiYgYXR0cnMpIHtcbiAgICAgICAgdmFyIGV4dHJhX2tleXMgPSBfLnJlamVjdChhdHRycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgIHJldHVybiBfLmluY2x1ZGUoW1wic3VjY2Vzc1wiLCBcImVycm9yXCIsIFwid2FpdFwiXSwga2V5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChleHRyYV9rZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHZhciBhbGxfZnVuY3Rpb25zID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoXy5oYXMoYXR0cnMsIFwic3VjY2Vzc1wiKSAmJiAhXy5pc0Z1bmN0aW9uKGF0dHJzLnN1Y2Nlc3MpKSB7XG4gICAgICAgICAgICBhbGxfZnVuY3Rpb25zID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChfLmhhcyhhdHRycywgXCJlcnJvclwiKSAmJiAhXy5pc0Z1bmN0aW9uKGF0dHJzLmVycm9yKSkge1xuICAgICAgICAgICAgYWxsX2Z1bmN0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYWxsX2Z1bmN0aW9ucykge1xuICAgICAgICAgICAgLy8gVGhpcyBhdHRycyBvYmplY3QgbG9va3MgbGlrZSBpdCdzIHJlYWxseSBhbiBvcHRpb25zIG9iamVjdCxcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSdzIG5vIG90aGVyIG9wdGlvbnMgb2JqZWN0LCBzbyBsZXQncyBqdXN0IHVzZSBpdC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNhdmUobnVsbCwgYXR0cnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvcHRpb25zID0gXy5jbG9uZShvcHRpb25zKSB8fCB7fTtcbiAgICAgIGlmIChvcHRpb25zLndhaXQpIHtcbiAgICAgICAgY3VycmVudCA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNldE9wdGlvbnMgPSBfLmNsb25lKG9wdGlvbnMpIHx8IHt9O1xuICAgICAgaWYgKHNldE9wdGlvbnMud2FpdCkge1xuICAgICAgICBzZXRPcHRpb25zLnNpbGVudCA9IHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgc2V0RXJyb3I7XG4gICAgICBzZXRPcHRpb25zLmVycm9yID0gZnVuY3Rpb24obW9kZWwsIGVycm9yKSB7XG4gICAgICAgIHNldEVycm9yID0gZXJyb3I7XG4gICAgICB9O1xuICAgICAgaWYgKGF0dHJzICYmICF0aGlzLnNldChhdHRycywgc2V0T3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3Ioc2V0RXJyb3IpLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbW9kZWwgPSB0aGlzO1xuXG4gICAgICAvLyBJZiB0aGVyZSBpcyBhbnkgdW5zYXZlZCBjaGlsZCwgc2F2ZSBpdCBmaXJzdC5cbiAgICAgIG1vZGVsLl9yZWZyZXNoQ2FjaGUoKTtcblxuICAgICAgLy8gVE9ETyhrbGltdCk6IFJlZmFjdG9yIHRoaXMgc28gdGhhdCB0aGUgc2F2ZSBzdGFydHMgbm93LCBub3QgbGF0ZXIuXG5cbiAgICAgIHZhciB1bnNhdmVkQ2hpbGRyZW4gPSBbXTtcbiAgICAgIHZhciB1bnNhdmVkRmlsZXMgPSBbXTtcbiAgICAgIFBhcnNlLk9iamVjdC5fZmluZFVuc2F2ZWRDaGlsZHJlbihtb2RlbC5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRDaGlsZHJlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNhdmVkRmlsZXMpO1xuICAgICAgaWYgKHVuc2F2ZWRDaGlsZHJlbi5sZW5ndGggKyB1bnNhdmVkRmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gUGFyc2UuT2JqZWN0Ll9kZWVwU2F2ZUFzeW5jKHRoaXMuYXR0cmlidXRlcywge1xuICAgICAgICAgIHVzZU1hc3RlcktleTogb3B0aW9ucy51c2VNYXN0ZXJLZXksXG4gICAgICAgICAgc2Vzc2lvblRva2VuOiBvcHRpb25zLnNlc3Npb25Ub2tlblxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBtb2RlbC5zYXZlKG51bGwsIG9wdGlvbnMpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmVycm9yKGVycm9yKS5fdGhlblJ1bkNhbGxiYWNrcyhvcHRpb25zLCBtb2RlbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdGFydFNhdmUoKTtcbiAgICAgIHRoaXMuX3NhdmluZyA9ICh0aGlzLl9zYXZpbmcgfHwgMCkgKyAxO1xuXG4gICAgICB0aGlzLl9hbGxQcmV2aW91c1NhdmVzID0gdGhpcy5fYWxsUHJldmlvdXNTYXZlcyB8fCBQYXJzZS5Qcm9taXNlLmFzKCk7XG4gICAgICB0aGlzLl9hbGxQcmV2aW91c1NhdmVzID0gdGhpcy5fYWxsUHJldmlvdXNTYXZlcy5fY29udGludWVXaXRoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbWV0aG9kID0gbW9kZWwuaWQgPyAnUFVUJyA6ICdQT1NUJztcblxuICAgICAgICB2YXIganNvbiA9IG1vZGVsLl9nZXRTYXZlSlNPTigpO1xuXG4gICAgICAgIHZhciByb3V0ZSA9IFwiY2xhc3Nlc1wiO1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gbW9kZWwuY2xhc3NOYW1lO1xuICAgICAgICBpZiAobW9kZWwuY2xhc3NOYW1lID09PSBcIl9Vc2VyXCIgJiYgIW1vZGVsLmlkKSB7XG4gICAgICAgICAgLy8gU3BlY2lhbC1jYXNlIHVzZXIgc2lnbi11cC5cbiAgICAgICAgICByb3V0ZSA9IFwidXNlcnNcIjtcbiAgICAgICAgICBjbGFzc05hbWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXF1ZXN0ID0gUGFyc2UuX3JlcXVlc3Qoe1xuICAgICAgICAgIHJvdXRlOiByb3V0ZSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICBvYmplY3RJZDogbW9kZWwuaWQsXG4gICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgdXNlTWFzdGVyS2V5OiBvcHRpb25zLnVzZU1hc3RlcktleSxcbiAgICAgICAgICBzZXNzaW9uVG9rZW46IG9wdGlvbnMuc2Vzc2lvblRva2VuLFxuICAgICAgICAgIGRhdGE6IGpzb25cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3QudGhlbihmdW5jdGlvbihyZXNwLCBzdGF0dXMsIHhocikge1xuICAgICAgICAgIHZhciBzZXJ2ZXJBdHRycyA9IG1vZGVsLnBhcnNlKHJlc3AsIHN0YXR1cywgeGhyKTtcbiAgICAgICAgICBpZiAob3B0aW9ucy53YWl0KSB7XG4gICAgICAgICAgICBzZXJ2ZXJBdHRycyA9IF8uZXh0ZW5kKGF0dHJzIHx8IHt9LCBzZXJ2ZXJBdHRycyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1vZGVsLl9maW5pc2hTYXZlKHNlcnZlckF0dHJzKTtcbiAgICAgICAgICBpZiAob3B0aW9ucy53YWl0KSB7XG4gICAgICAgICAgICBtb2RlbC5zZXQoY3VycmVudCwgc2V0T3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtb2RlbDtcblxuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIG1vZGVsLl9jYW5jZWxTYXZlKCk7XG4gICAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3IoZXJyb3IpO1xuXG4gICAgICAgIH0pLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMsIG1vZGVsKTtcblxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMuX2FsbFByZXZpb3VzU2F2ZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhpcyBtb2RlbCBvbiB0aGUgc2VydmVyIGlmIGl0IHdhcyBhbHJlYWR5IHBlcnNpc3RlZC5cbiAgICAgKiBPcHRpbWlzdGljYWxseSByZW1vdmVzIHRoZSBtb2RlbCBmcm9tIGl0cyBjb2xsZWN0aW9uLCBpZiBpdCBoYXMgb25lLlxuICAgICAqIElmIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIHdhaXRzIGZvciB0aGUgc2VydmVyIHRvIHJlc3BvbmRcbiAgICAgKiBiZWZvcmUgcmVtb3ZhbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgY2FsbGJhY2sgb2JqZWN0LlxuICAgICAqIFZhbGlkIG9wdGlvbnMgYXJlOjx1bD5cbiAgICAgKiAgIDxsaT53YWl0OiBTZXQgdG8gdHJ1ZSB0byB3YWl0IGZvciB0aGUgc2VydmVyIHRvIGNvbmZpcm0gc3VjY2Vzc2Z1bFxuICAgICAqICAgZGVsZXRpb24gb2YgdGhlIG9iamVjdCBiZWZvcmUgdHJpZ2dlcmluZyB0aGUgYGRlc3Ryb3lgIGV2ZW50LlxuICAgICAqICAgPGxpPnN1Y2Nlc3M6IEEgQmFja2JvbmUtc3R5bGUgc3VjY2VzcyBjYWxsYmFja1xuICAgICAqICAgPGxpPmVycm9yOiBBbiBCYWNrYm9uZS1zdHlsZSBlcnJvciBjYWxsYmFjay5cbiAgICAgKiAgIDxsaT51c2VNYXN0ZXJLZXk6IEluIENsb3VkIENvZGUgYW5kIE5vZGUgb25seSwgY2F1c2VzIHRoZSBNYXN0ZXIgS2V5IHRvXG4gICAgICogICAgIGJlIHVzZWQgZm9yIHRoaXMgcmVxdWVzdC5cbiAgICAgKiAgIDxsaT5zZXNzaW9uVG9rZW46IEEgdmFsaWQgc2Vzc2lvbiB0b2tlbiwgdXNlZCBmb3IgbWFraW5nIGEgcmVxdWVzdCBvblxuICAgICAqICAgICAgIGJlaGFsZiBvZiBhIHNwZWNpZmljIHVzZXIuXG4gICAgICogPC91bD5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5Qcm9taXNlfSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiB0aGUgZGVzdHJveVxuICAgICAqICAgICBjb21wbGV0ZXMuXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB2YXIgbW9kZWwgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJpZ2dlckRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbW9kZWwudHJpZ2dlcignZGVzdHJveScsIG1vZGVsLCBtb2RlbC5jb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICByZXR1cm4gdHJpZ2dlckRlc3Ryb3koKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLndhaXQpIHtcbiAgICAgICAgdHJpZ2dlckRlc3Ryb3koKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlcXVlc3QgPSBQYXJzZS5fcmVxdWVzdCh7XG4gICAgICAgIHJvdXRlOiBcImNsYXNzZXNcIixcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmNsYXNzTmFtZSxcbiAgICAgICAgb2JqZWN0SWQ6IHRoaXMuaWQsXG4gICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgIHVzZU1hc3RlcktleTogb3B0aW9ucy51c2VNYXN0ZXJLZXksXG4gICAgICAgIHNlc3Npb25Ub2tlbjogb3B0aW9ucy5zZXNzaW9uVG9rZW5cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlcXVlc3QudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCkge1xuICAgICAgICAgIHRyaWdnZXJEZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgICAgfSkuX3RoZW5SdW5DYWxsYmFja3Mob3B0aW9ucywgdGhpcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgcmVzcG9uc2UgaW50byB0aGUgaGFzaCBvZiBhdHRyaWJ1dGVzIHRvIGJlIHNldCBvbiB0aGUgbW9kZWwuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHBhcnNlOiBmdW5jdGlvbihyZXNwLCBzdGF0dXMsIHhocikge1xuICAgICAgdmFyIG91dHB1dCA9IF8uY2xvbmUocmVzcCk7XG4gICAgICBfKFtcImNyZWF0ZWRBdFwiLCBcInVwZGF0ZWRBdFwiXSkuZWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKG91dHB1dFtrZXldKSB7XG4gICAgICAgICAgb3V0cHV0W2tleV0gPSBQYXJzZS5fcGFyc2VEYXRlKG91dHB1dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIW91dHB1dC51cGRhdGVkQXQpIHtcbiAgICAgICAgb3V0cHV0LnVwZGF0ZWRBdCA9IG91dHB1dC5jcmVhdGVkQXQ7XG4gICAgICB9XG4gICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuX2V4aXN0ZWQgPSAoc3RhdHVzICE9PSAyMDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtb2RlbCB3aXRoIGlkZW50aWNhbCBhdHRyaWJ1dGVzIHRvIHRoaXMgb25lLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLk9iamVjdH1cbiAgICAgKi9cbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgb2JqZWN0IGhhcyBuZXZlciBiZWVuIHNhdmVkIHRvIFBhcnNlLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNOZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICF0aGlzLmlkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIG1hbnVhbGx5IGZpcmUgYSBgXCJjaGFuZ2VcImAgZXZlbnQgZm9yIHRoaXMgbW9kZWwgYW5kXG4gICAgICogYSBgXCJjaGFuZ2U6YXR0cmlidXRlXCJgIGV2ZW50IGZvciBlYWNoIGNoYW5nZWQgYXR0cmlidXRlLlxuICAgICAqIENhbGxpbmcgdGhpcyB3aWxsIGNhdXNlIGFsbCBvYmplY3RzIG9ic2VydmluZyB0aGUgbW9kZWwgdG8gdXBkYXRlLlxuICAgICAqL1xuICAgIGNoYW5nZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB2YXIgY2hhbmdpbmcgPSB0aGlzLl9jaGFuZ2luZztcbiAgICAgIHRoaXMuX2NoYW5naW5nID0gdHJ1ZTtcblxuICAgICAgLy8gU2lsZW50IGNoYW5nZXMgYmVjb21lIHBlbmRpbmcgY2hhbmdlcy5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIFBhcnNlLl9vYmplY3RFYWNoKHRoaXMuX3NpbGVudCwgZnVuY3Rpb24oYXR0cikge1xuICAgICAgICBzZWxmLl9wZW5kaW5nW2F0dHJdID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTaWxlbnQgY2hhbmdlcyBhcmUgdHJpZ2dlcmVkLlxuICAgICAgdmFyIGNoYW5nZXMgPSBfLmV4dGVuZCh7fSwgb3B0aW9ucy5jaGFuZ2VzLCB0aGlzLl9zaWxlbnQpO1xuICAgICAgdGhpcy5fc2lsZW50ID0ge307XG4gICAgICBQYXJzZS5fb2JqZWN0RWFjaChjaGFuZ2VzLCBmdW5jdGlvbih1bnVzZWRfdmFsdWUsIGF0dHIpIHtcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdjaGFuZ2U6JyArIGF0dHIsIHNlbGYsIHNlbGYuZ2V0KGF0dHIpLCBvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGNoYW5naW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGlzIGlzIHRvIGdldCBhcm91bmQgbGludCBub3QgbGV0dGluZyB1cyBtYWtlIGEgZnVuY3Rpb24gaW4gYSBsb29wLlxuICAgICAgdmFyIGRlbGV0ZUNoYW5nZWQgPSBmdW5jdGlvbih2YWx1ZSwgYXR0cikge1xuICAgICAgICBpZiAoIXNlbGYuX3BlbmRpbmdbYXR0cl0gJiYgIXNlbGYuX3NpbGVudFthdHRyXSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmLmNoYW5nZWRbYXR0cl07XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIENvbnRpbnVlIGZpcmluZyBgXCJjaGFuZ2VcImAgZXZlbnRzIHdoaWxlIHRoZXJlIGFyZSBwZW5kaW5nIGNoYW5nZXMuXG4gICAgICB3aGlsZSAoIV8uaXNFbXB0eSh0aGlzLl9wZW5kaW5nKSkge1xuICAgICAgICB0aGlzLl9wZW5kaW5nID0ge307XG4gICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgdGhpcywgb3B0aW9ucyk7XG4gICAgICAgIC8vIFBlbmRpbmcgYW5kIHNpbGVudCBjaGFuZ2VzIHN0aWxsIHJlbWFpbi5cbiAgICAgICAgUGFyc2UuX29iamVjdEVhY2godGhpcy5jaGFuZ2VkLCBkZWxldGVDaGFuZ2VkKTtcbiAgICAgICAgc2VsZi5fcHJldmlvdXNBdHRyaWJ1dGVzID0gXy5jbG9uZSh0aGlzLmF0dHJpYnV0ZXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jaGFuZ2luZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIG9iamVjdCB3YXMgY3JlYXRlZCBieSB0aGUgUGFyc2Ugc2VydmVyIHdoZW4gdGhlXG4gICAgICogb2JqZWN0IG1pZ2h0IGhhdmUgYWxyZWFkeSBiZWVuIHRoZXJlIChlLmcuIGluIHRoZSBjYXNlIG9mIGEgRmFjZWJvb2tcbiAgICAgKiBsb2dpbilcbiAgICAgKi9cbiAgICBleGlzdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9leGlzdGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlIG1vZGVsIGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IDxjb2RlPlwiY2hhbmdlXCI8L2NvZGU+XG4gICAgICogZXZlbnQuICBJZiB5b3Ugc3BlY2lmeSBhbiBhdHRyaWJ1dGUgbmFtZSwgZGV0ZXJtaW5lIGlmIHRoYXQgYXR0cmlidXRlXG4gICAgICogaGFzIGNoYW5nZWQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHIgT3B0aW9uYWwgYXR0cmlidXRlIG5hbWVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGhhc0NoYW5nZWQ6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gIV8uaXNFbXB0eSh0aGlzLmNoYW5nZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlZCAmJiBfLmhhcyh0aGlzLmNoYW5nZWQsIGF0dHIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgYXR0cmlidXRlcyB0aGF0IGhhdmUgY2hhbmdlZCwgb3JcbiAgICAgKiBmYWxzZSBpZiB0aGVyZSBhcmUgbm8gY2hhbmdlZCBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIGRldGVybWluaW5nIHdoYXRcbiAgICAgKiBwYXJ0cyBvZiBhIHZpZXcgbmVlZCB0byBiZSB1cGRhdGVkIGFuZC9vciB3aGF0IGF0dHJpYnV0ZXMgbmVlZCB0byBiZVxuICAgICAqIHBlcnNpc3RlZCB0byB0aGUgc2VydmVyLiBVbnNldCBhdHRyaWJ1dGVzIHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAgICAgKiBZb3UgY2FuIGFsc28gcGFzcyBhbiBhdHRyaWJ1dGVzIG9iamVjdCB0byBkaWZmIGFnYWluc3QgdGhlIG1vZGVsLFxuICAgICAqIGRldGVybWluaW5nIGlmIHRoZXJlICp3b3VsZCBiZSogYSBjaGFuZ2UuXG4gICAgICovXG4gICAgY2hhbmdlZEF0dHJpYnV0ZXM6IGZ1bmN0aW9uKGRpZmYpIHtcbiAgICAgIGlmICghZGlmZikge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNDaGFuZ2VkKCkgPyBfLmNsb25lKHRoaXMuY2hhbmdlZCkgOiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFuZ2VkID0ge307XG4gICAgICB2YXIgb2xkID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzO1xuICAgICAgUGFyc2UuX29iamVjdEVhY2goZGlmZiwgZnVuY3Rpb24oZGlmZlZhbCwgYXR0cikge1xuICAgICAgICBpZiAoIV8uaXNFcXVhbChvbGRbYXR0cl0sIGRpZmZWYWwpKSB7XG4gICAgICAgICAgY2hhbmdlZFthdHRyXSA9IGRpZmZWYWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByZXZpb3VzIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZSwgcmVjb3JkZWQgYXQgdGhlIHRpbWUgdGhlIGxhc3RcbiAgICAgKiA8Y29kZT5cImNoYW5nZVwiPC9jb2RlPiBldmVudCB3YXMgZmlyZWQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHIgTmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIGdldC5cbiAgICAgKi9cbiAgICBwcmV2aW91czogZnVuY3Rpb24oYXR0cikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoIHx8ICF0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzW2F0dHJdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBvZiB0aGUgYXR0cmlidXRlcyBvZiB0aGUgbW9kZWwgYXQgdGhlIHRpbWUgb2YgdGhlIHByZXZpb3VzXG4gICAgICogPGNvZGU+XCJjaGFuZ2VcIjwvY29kZT4gZXZlbnQuXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIHByZXZpb3VzQXR0cmlidXRlczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXy5jbG9uZSh0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIG1vZGVsIGlzIGN1cnJlbnRseSBpbiBhIHZhbGlkIHN0YXRlLiBJdCdzIG9ubHkgcG9zc2libGUgdG9cbiAgICAgKiBnZXQgaW50byBhbiAqaW52YWxpZCogc3RhdGUgaWYgeW91J3JlIHVzaW5nIHNpbGVudCBjaGFuZ2VzLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNWYWxpZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXRoaXMudmFsaWRhdGUodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogWW91IHNob3VsZCBub3QgY2FsbCB0aGlzIGZ1bmN0aW9uIGRpcmVjdGx5IHVubGVzcyB5b3Ugc3ViY2xhc3NcbiAgICAgKiA8Y29kZT5QYXJzZS5PYmplY3Q8L2NvZGU+LCBpbiB3aGljaCBjYXNlIHlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBtZXRob2RcbiAgICAgKiB0byBwcm92aWRlIGFkZGl0aW9uYWwgdmFsaWRhdGlvbiBvbiA8Y29kZT5zZXQ8L2NvZGU+IGFuZFxuICAgICAqIDxjb2RlPnNhdmU8L2NvZGU+LiAgWW91ciBpbXBsZW1lbnRhdGlvbiBzaG91bGQgcmV0dXJuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXR0cnMgVGhlIGN1cnJlbnQgZGF0YSB0byB2YWxpZGF0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBIEJhY2tib25lLWxpa2Ugb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHJldHVybiB7fSBGYWxzZSBpZiB0aGUgZGF0YSBpcyB2YWxpZC4gIEFuIGVycm9yIG9iamVjdCBvdGhlcndpc2UuXG4gICAgICogQHNlZSBQYXJzZS5PYmplY3Qjc2V0XG4gICAgICovXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7XG4gICAgICBpZiAoXy5oYXMoYXR0cnMsIFwiQUNMXCIpICYmICEoYXR0cnMuQUNMIGluc3RhbmNlb2YgUGFyc2UuQUNMKSkge1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9USEVSX0NBVVNFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQUNMIG11c3QgYmUgYSBQYXJzZS5BQ0wuXCIpO1xuICAgICAgfVxuICAgICAgdmFyIGNvcnJlY3QgPSB0cnVlO1xuICAgICAgUGFyc2UuX29iamVjdEVhY2goYXR0cnMsIGZ1bmN0aW9uKHVudXNlZF92YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICghKC9eW0EtWmEtel1bMC05QS1aYS16X10qJC8pLnRlc3Qoa2V5KSkge1xuICAgICAgICAgIGNvcnJlY3QgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIWNvcnJlY3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX0tFWV9OQU1FKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUnVuIHZhbGlkYXRpb24gYWdhaW5zdCBhIHNldCBvZiBpbmNvbWluZyBhdHRyaWJ1dGVzLCByZXR1cm5pbmcgYHRydWVgXG4gICAgICogaWYgYWxsIGlzIHdlbGwuIElmIGEgc3BlY2lmaWMgYGVycm9yYCBjYWxsYmFjayBoYXMgYmVlbiBwYXNzZWQsXG4gICAgICogY2FsbCB0aGF0IGluc3RlYWQgb2YgZmlyaW5nIHRoZSBnZW5lcmFsIGBcImVycm9yXCJgIGV2ZW50LlxuICAgICAqL1xuICAgIF92YWxpZGF0ZTogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLnNpbGVudCB8fCAhdGhpcy52YWxpZGF0ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGF0dHJzID0gXy5leHRlbmQoe30sIHRoaXMuYXR0cmlidXRlcywgYXR0cnMpO1xuICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZShhdHRycywgb3B0aW9ucyk7XG4gICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5lcnJvcikge1xuICAgICAgICBvcHRpb25zLmVycm9yKHRoaXMsIGVycm9yLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZXJyb3InLCB0aGlzLCBlcnJvciwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIEFDTCBmb3IgdGhpcyBvYmplY3QuXG4gICAgICogQHJldHVybnMge1BhcnNlLkFDTH0gQW4gaW5zdGFuY2Ugb2YgUGFyc2UuQUNMLlxuICAgICAqIEBzZWUgUGFyc2UuT2JqZWN0I2dldFxuICAgICAqL1xuICAgIGdldEFDTDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoXCJBQ0xcIik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIEFDTCB0byBiZSB1c2VkIGZvciB0aGlzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1BhcnNlLkFDTH0gYWNsIEFuIGluc3RhbmNlIG9mIFBhcnNlLkFDTC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25hbCBCYWNrYm9uZS1saWtlIG9wdGlvbnMgb2JqZWN0IHRvIGJlXG4gICAgICogICAgIHBhc3NlZCBpbiB0byBzZXQuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gV2hldGhlciB0aGUgc2V0IHBhc3NlZCB2YWxpZGF0aW9uLlxuICAgICAqIEBzZWUgUGFyc2UuT2JqZWN0I3NldFxuICAgICAqL1xuICAgIHNldEFDTDogZnVuY3Rpb24oYWNsLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoXCJBQ0xcIiwgYWNsLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFwcHJvcHJpYXRlIHN1YmNsYXNzIGZvciBtYWtpbmcgbmV3IGluc3RhbmNlcyBvZiB0aGUgZ2l2ZW5cbiAgICogY2xhc3NOYW1lIHN0cmluZy5cbiAgICovXG4gIFBhcnNlLk9iamVjdC5fZ2V0U3ViY2xhc3MgPSBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICBpZiAoIV8uaXNTdHJpbmcoY2xhc3NOYW1lKSkge1xuICAgICAgdGhyb3cgXCJQYXJzZS5PYmplY3QuX2dldFN1YmNsYXNzIHJlcXVpcmVzIGEgc3RyaW5nIGFyZ3VtZW50LlwiO1xuICAgIH1cbiAgICB2YXIgT2JqZWN0Q2xhc3MgPSBQYXJzZS5PYmplY3QuX2NsYXNzTWFwW2NsYXNzTmFtZV07XG4gICAgaWYgKCFPYmplY3RDbGFzcykge1xuICAgICAgT2JqZWN0Q2xhc3MgPSBQYXJzZS5PYmplY3QuZXh0ZW5kKGNsYXNzTmFtZSk7XG4gICAgICBQYXJzZS5PYmplY3QuX2NsYXNzTWFwW2NsYXNzTmFtZV0gPSBPYmplY3RDbGFzcztcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdENsYXNzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGEgc3ViY2xhc3Mgb2YgUGFyc2UuT2JqZWN0IGZvciB0aGUgZ2l2ZW4gY2xhc3NuYW1lLlxuICAgKi9cbiAgUGFyc2UuT2JqZWN0Ll9jcmVhdGUgPSBmdW5jdGlvbihjbGFzc05hbWUsIGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgT2JqZWN0Q2xhc3MgPSBQYXJzZS5PYmplY3QuX2dldFN1YmNsYXNzKGNsYXNzTmFtZSk7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RDbGFzcyhhdHRyaWJ1dGVzLCBvcHRpb25zKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2Ygb2JqZWN0IGlkcyBnaXZlbiBhIGxpc3Qgb2Ygb2JqZWN0cy5cbiAgICovXG4gIFBhcnNlLk9iamVjdC5fdG9PYmplY3RJZEFycmF5ID0gZnVuY3Rpb24obGlzdCwgb21pdE9iamVjdHNXaXRoRGF0YSkge1xuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuYXMobGlzdCk7XG4gICAgfVxuXG4gICAgdmFyIGVycm9yO1xuICAgIHZhciBjbGFzc05hbWUgPSBsaXN0WzBdLmNsYXNzTmFtZTtcbiAgICB2YXIgb2JqZWN0SWRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gbGlzdFtpXTtcbiAgICAgIGlmIChjbGFzc05hbWUgIT09IG9iamVjdC5jbGFzc05hbWUpIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9DTEFTU19OQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFsbCBvYmplY3RzIHNob3VsZCBiZSBvZiB0aGUgc2FtZSBjbGFzc1wiKTtcbiAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3IoZXJyb3IpO1xuICAgICAgfSBlbHNlIGlmICghb2JqZWN0LmlkKSB7XG4gICAgICAgIGVycm9yID0gbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk1JU1NJTkdfT0JKRUNUX0lELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFsbCBvYmplY3RzIG11c3QgaGF2ZSBhbiBJRFwiKTtcbiAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3IoZXJyb3IpO1xuICAgICAgfSBlbHNlIGlmIChvbWl0T2JqZWN0c1dpdGhEYXRhICYmIG9iamVjdC5faGFzRGF0YSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdElkcy5wdXNoKG9iamVjdC5pZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFBhcnNlLlByb21pc2UuYXMob2JqZWN0SWRzKTtcbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGxpc3Qgb2Ygb2JqZWN0cyB3aXRoIGZldGNoZWQgcmVzdWx0cy5cbiAgICovXG4gIFBhcnNlLk9iamVjdC5fdXBkYXRlV2l0aEZldGNoZWRSZXN1bHRzID0gZnVuY3Rpb24obGlzdCwgZmV0Y2hlZCwgZm9yY2VGZXRjaCkge1xuICAgIHZhciBmZXRjaGVkT2JqZWN0c0J5SWQgPSB7fTtcbiAgICBQYXJzZS5fYXJyYXlFYWNoKGZldGNoZWQsIGZ1bmN0aW9uKG9iamVjdCwgaSkge1xuICAgICAgZmV0Y2hlZE9iamVjdHNCeUlkW29iamVjdC5pZF0gPSBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBvYmplY3QgPSBsaXN0W2ldO1xuICAgICAgdmFyIGZldGNoZWRPYmplY3QgPSBmZXRjaGVkT2JqZWN0c0J5SWRbb2JqZWN0LmlkXTtcbiAgICAgIGlmICghZmV0Y2hlZE9iamVjdCAmJiBmb3JjZUZldGNoKSB7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFsbCBvYmplY3RzIG11c3QgZXhpc3Qgb24gdGhlIHNlcnZlclwiKTtcbiAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3IoZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICBvYmplY3QuX21lcmdlRnJvbU9iamVjdChmZXRjaGVkT2JqZWN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5hcyhsaXN0KTtcbiAgfTtcblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgb2JqZWN0cyBnaXZlbiBpbiBsaXN0LiAgVGhlIGZvcmNlRmV0Y2ggb3B0aW9uIHdpbGwgZmV0Y2ggYWxsXG4gICAqIG9iamVjdHMgaWYgdHJ1ZSBhbmQgaWdub3JlIG9iamVjdHMgd2l0aCBkYXRhIGlmIGZhbHNlLlxuICAgKi9cbiAgUGFyc2UuT2JqZWN0Ll9mZXRjaEFsbCA9IGZ1bmN0aW9uKGxpc3QsIGZvcmNlRmV0Y2gpIHtcbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmFzKGxpc3QpO1xuICAgIH1cblxuICAgIHZhciBvbWl0T2JqZWN0c1dpdGhEYXRhID0gIWZvcmNlRmV0Y2g7XG4gICAgcmV0dXJuIFBhcnNlLk9iamVjdC5fdG9PYmplY3RJZEFycmF5KFxuICAgICAgbGlzdCxcbiAgICAgIG9taXRPYmplY3RzV2l0aERhdGFcbiAgICApLnRoZW4oZnVuY3Rpb24ob2JqZWN0SWRzKSB7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gbGlzdFswXS5jbGFzc05hbWU7XG4gICAgICB2YXIgcXVlcnkgPSBuZXcgUGFyc2UuUXVlcnkoY2xhc3NOYW1lKTtcbiAgICAgIHF1ZXJ5LmNvbnRhaW5lZEluKFwib2JqZWN0SWRcIiwgb2JqZWN0SWRzKTtcbiAgICAgIHF1ZXJ5LmxpbWl0ID0gb2JqZWN0SWRzLmxlbmd0aDtcbiAgICAgIHJldHVybiBxdWVyeS5maW5kKCk7XG4gICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAgICByZXR1cm4gUGFyc2UuT2JqZWN0Ll91cGRhdGVXaXRoRmV0Y2hlZFJlc3VsdHMoXG4gICAgICAgIGxpc3QsXG4gICAgICAgIHJlc3VsdHMsXG4gICAgICAgIGZvcmNlRmV0Y2hcbiAgICAgICk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gU2V0IHVwIGEgbWFwIG9mIGNsYXNzTmFtZSB0byBjbGFzcyBzbyB0aGF0IHdlIGNhbiBjcmVhdGUgbmV3IGluc3RhbmNlcyBvZlxuICAvLyBQYXJzZSBPYmplY3RzIGZyb20gSlNPTiBhdXRvbWF0aWNhbGx5LlxuICBQYXJzZS5PYmplY3QuX2NsYXNzTWFwID0ge307XG5cbiAgUGFyc2UuT2JqZWN0Ll9leHRlbmQgPSBQYXJzZS5fZXh0ZW5kO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHN1YmNsYXNzIG9mIFBhcnNlLk9iamVjdCBmb3IgdGhlIGdpdmVuIFBhcnNlIGNsYXNzIG5hbWUuXG4gICAqXG4gICAqIDxwPkV2ZXJ5IGV4dGVuc2lvbiBvZiBhIFBhcnNlIGNsYXNzIHdpbGwgaW5oZXJpdCBmcm9tIHRoZSBtb3N0IHJlY2VudFxuICAgKiBwcmV2aW91cyBleHRlbnNpb24gb2YgdGhhdCBjbGFzcy4gV2hlbiBhIFBhcnNlLk9iamVjdCBpcyBhdXRvbWF0aWNhbGx5XG4gICAqIGNyZWF0ZWQgYnkgcGFyc2luZyBKU09OLCBpdCB3aWxsIHVzZSB0aGUgbW9zdCByZWNlbnQgZXh0ZW5zaW9uIG9mIHRoYXRcbiAgICogY2xhc3MuPC9wPlxuICAgKlxuICAgKiA8cD5Zb3Ugc2hvdWxkIGNhbGwgZWl0aGVyOjxwcmU+XG4gICAqICAgICB2YXIgTXlDbGFzcyA9IFBhcnNlLk9iamVjdC5leHRlbmQoXCJNeUNsYXNzXCIsIHtcbiAgICogICAgICAgICA8aT5JbnN0YW5jZSBtZXRob2RzPC9pPixcbiAgICogICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihhdHRycywgb3B0aW9ucykge1xuICAgKiAgICAgICAgICAgICB0aGlzLnNvbWVJbnN0YW5jZVByb3BlcnR5ID0gW10sXG4gICAqICAgICAgICAgICAgIDxpPk90aGVyIGluc3RhbmNlIHByb3BlcnRpZXM8L2k+XG4gICAqICAgICAgICAgfVxuICAgKiAgICAgfSwge1xuICAgKiAgICAgICAgIDxpPkNsYXNzIHByb3BlcnRpZXM8L2k+XG4gICAqICAgICB9KTs8L3ByZT5cbiAgICogb3IsIGZvciBCYWNrYm9uZSBjb21wYXRpYmlsaXR5OjxwcmU+XG4gICAqICAgICB2YXIgTXlDbGFzcyA9IFBhcnNlLk9iamVjdC5leHRlbmQoe1xuICAgKiAgICAgICAgIGNsYXNzTmFtZTogXCJNeUNsYXNzXCIsXG4gICAqICAgICAgICAgPGk+SW5zdGFuY2UgbWV0aG9kczwvaT4sXG4gICAqICAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHtcbiAgICogICAgICAgICAgICAgdGhpcy5zb21lSW5zdGFuY2VQcm9wZXJ0eSA9IFtdLFxuICAgKiAgICAgICAgICAgICA8aT5PdGhlciBpbnN0YW5jZSBwcm9wZXJ0aWVzPC9pPlxuICAgKiAgICAgICAgIH1cbiAgICogICAgIH0sIHtcbiAgICogICAgICAgICA8aT5DbGFzcyBwcm9wZXJ0aWVzPC9pPlxuICAgKiAgICAgfSk7PC9wcmU+PC9wPlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lIFRoZSBuYW1lIG9mIHRoZSBQYXJzZSBjbGFzcyBiYWNraW5nIHRoaXMgbW9kZWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b1Byb3BzIEluc3RhbmNlIHByb3BlcnRpZXMgdG8gYWRkIHRvIGluc3RhbmNlcyBvZiB0aGVcbiAgICogICAgIGNsYXNzIHJldHVybmVkIGZyb20gdGhpcyBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjbGFzc1Byb3BzIENsYXNzIHByb3BlcnRpZXMgdG8gYWRkIHRoZSBjbGFzcyByZXR1cm5lZCBmcm9tXG4gICAqICAgICB0aGlzIG1ldGhvZC5cbiAgICogQHJldHVybiB7Q2xhc3N9IEEgbmV3IHN1YmNsYXNzIG9mIFBhcnNlLk9iamVjdC5cbiAgICovXG4gIFBhcnNlLk9iamVjdC5leHRlbmQgPSBmdW5jdGlvbihjbGFzc05hbWUsIHByb3RvUHJvcHMsIGNsYXNzUHJvcHMpIHtcbiAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2l0aCBvbmx5IHR3byBhcmdzLlxuICAgIGlmICghXy5pc1N0cmluZyhjbGFzc05hbWUpKSB7XG4gICAgICBpZiAoY2xhc3NOYW1lICYmIF8uaGFzKGNsYXNzTmFtZSwgXCJjbGFzc05hbWVcIikpIHtcbiAgICAgICAgcmV0dXJuIFBhcnNlLk9iamVjdC5leHRlbmQoY2xhc3NOYW1lLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBwcm90b1Byb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiUGFyc2UuT2JqZWN0LmV4dGVuZCdzIGZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSB0aGUgY2xhc3NOYW1lLlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBzb21lb25lIHRyaWVzIHRvIHN1YmNsYXNzIFwiVXNlclwiLCBjb2VyY2UgaXQgdG8gdGhlIHJpZ2h0IHR5cGUuXG4gICAgaWYgKGNsYXNzTmFtZSA9PT0gXCJVc2VyXCIgJiYgUGFyc2UuVXNlci5fcGVyZm9ybVVzZXJSZXdyaXRlKSB7XG4gICAgICBjbGFzc05hbWUgPSBcIl9Vc2VyXCI7XG4gICAgfVxuICAgIHByb3RvUHJvcHMgPSBwcm90b1Byb3BzIHx8IHt9O1xuICAgIHByb3RvUHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuXG4gICAgdmFyIE5ld0NsYXNzT2JqZWN0ID0gbnVsbDtcbiAgICBpZiAoXy5oYXMoUGFyc2UuT2JqZWN0Ll9jbGFzc01hcCwgY2xhc3NOYW1lKSkge1xuICAgICAgdmFyIE9sZENsYXNzT2JqZWN0ID0gUGFyc2UuT2JqZWN0Ll9jbGFzc01hcFtjbGFzc05hbWVdO1xuICAgICAgLy8gVGhpcyBuZXcgc3ViY2xhc3MgaGFzIGJlZW4gdG9sZCB0byBleHRlbmQgYm90aCBmcm9tIFwidGhpc1wiIGFuZCBmcm9tXG4gICAgICAvLyBPbGRDbGFzc09iamVjdC4gVGhpcyBpcyBtdWx0aXBsZSBpbmhlcml0YW5jZSwgd2hpY2ggaXNuJ3Qgc3VwcG9ydGVkLlxuICAgICAgLy8gRm9yIG5vdywgbGV0J3MganVzdCBwaWNrIG9uZS5cbiAgICAgIE5ld0NsYXNzT2JqZWN0ID0gT2xkQ2xhc3NPYmplY3QuX2V4dGVuZChwcm90b1Byb3BzLCBjbGFzc1Byb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTmV3Q2xhc3NPYmplY3QgPSB0aGlzLl9leHRlbmQocHJvdG9Qcm9wcywgY2xhc3NQcm9wcyk7XG4gICAgfVxuICAgIC8vIEV4dGVuZGluZyBhIHN1YmNsYXNzIHNob3VsZCByZXVzZSB0aGUgY2xhc3NuYW1lIGF1dG9tYXRpY2FsbHkuXG4gICAgTmV3Q2xhc3NPYmplY3QuZXh0ZW5kID0gZnVuY3Rpb24oYXJnMCkge1xuICAgICAgaWYgKF8uaXNTdHJpbmcoYXJnMCkgfHwgKGFyZzAgJiYgXy5oYXMoYXJnMCwgXCJjbGFzc05hbWVcIikpKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5PYmplY3QuZXh0ZW5kLmFwcGx5KE5ld0NsYXNzT2JqZWN0LCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0FyZ3VtZW50cyA9IFtjbGFzc05hbWVdLmNvbmNhdChQYXJzZS5fLnRvQXJyYXkoYXJndW1lbnRzKSk7XG4gICAgICByZXR1cm4gUGFyc2UuT2JqZWN0LmV4dGVuZC5hcHBseShOZXdDbGFzc09iamVjdCwgbmV3QXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJlZmVyZW5jZSB0byBhIHN1YmNsYXNzIG9mIFBhcnNlLk9iamVjdCB3aXRoIHRoZSBnaXZlbiBpZC4gVGhpc1xuICAgICAqIGRvZXMgbm90IGV4aXN0IG9uIFBhcnNlLk9iamVjdCwgb25seSBvbiBzdWJjbGFzc2VzLlxuICAgICAqXG4gICAgICogPHA+QSBzaG9ydGN1dCBmb3I6IDxwcmU+XG4gICAgICogIHZhciBGb28gPSBQYXJzZS5PYmplY3QuZXh0ZW5kKFwiRm9vXCIpO1xuICAgICAqICB2YXIgcG9pbnRlclRvRm9vID0gbmV3IEZvbygpO1xuICAgICAqICBwb2ludGVyVG9Gb28uaWQgPSBcIm15T2JqZWN0SWRcIjtcbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNyZWF0ZVdpdGhvdXREYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBJRCBvZiB0aGUgb2JqZWN0IHRvIGNyZWF0ZSBhIHJlZmVyZW5jZSB0by5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5PYmplY3R9IEEgUGFyc2UuT2JqZWN0IHJlZmVyZW5jZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgUGFyc2UuT2JqZWN0XG4gICAgICovXG4gICAgTmV3Q2xhc3NPYmplY3QuY3JlYXRlV2l0aG91dERhdGEgPSBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIG9iaiA9IG5ldyBOZXdDbGFzc09iamVjdCgpO1xuICAgICAgb2JqLmlkID0gaWQ7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH07XG5cbiAgICBQYXJzZS5PYmplY3QuX2NsYXNzTWFwW2NsYXNzTmFtZV0gPSBOZXdDbGFzc09iamVjdDtcbiAgICByZXR1cm4gTmV3Q2xhc3NPYmplY3Q7XG4gIH07XG5cbiAgUGFyc2UuT2JqZWN0Ll9maW5kVW5zYXZlZENoaWxkcmVuID0gZnVuY3Rpb24ob2JqZWN0LCBjaGlsZHJlbiwgZmlsZXMpIHtcbiAgICBQYXJzZS5fdHJhdmVyc2Uob2JqZWN0LCBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBQYXJzZS5PYmplY3QpIHtcbiAgICAgICAgb2JqZWN0Ll9yZWZyZXNoQ2FjaGUoKTtcbiAgICAgICAgaWYgKG9iamVjdC5kaXJ0eSgpKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFBhcnNlLkZpbGUpIHtcbiAgICAgICAgaWYgKCFvYmplY3QudXJsKCkpIHtcbiAgICAgICAgICBmaWxlcy5wdXNoKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFBhcnNlLk9iamVjdC5fY2FuQmVTZXJpYWxpemVkQXNWYWx1ZSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIC8vIFRPRE8oa2xpbXQpOiBXZSBzaG91bGQgcmV3cml0ZSBfdHJhdmVyc2Ugc28gdGhhdCBpdCBjYW4gYmUgdXNlZCBoZXJlLlxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBQYXJzZS5PYmplY3QpIHtcbiAgICAgIHJldHVybiAhIW9iamVjdC5pZDtcbiAgICB9XG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFBhcnNlLkZpbGUpIHtcbiAgICAgIC8vIERvbid0IHJlY3Vyc2UgaW5kZWZpbml0ZWx5IGludG8gZmlsZXMuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgY2FuQmVTZXJpYWxpemVkQXNWYWx1ZSA9IHRydWU7XG5cbiAgICBpZiAoXy5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgIFBhcnNlLl9hcnJheUVhY2gob2JqZWN0LCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBpZiAoIVBhcnNlLk9iamVjdC5fY2FuQmVTZXJpYWxpemVkQXNWYWx1ZShjaGlsZCkpIHtcbiAgICAgICAgICBjYW5CZVNlcmlhbGl6ZWRBc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoXy5pc09iamVjdChvYmplY3QpKSB7XG4gICAgICBQYXJzZS5fb2JqZWN0RWFjaChvYmplY3QsIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIGlmICghUGFyc2UuT2JqZWN0Ll9jYW5CZVNlcmlhbGl6ZWRBc1ZhbHVlKGNoaWxkKSkge1xuICAgICAgICAgIGNhbkJlU2VyaWFsaXplZEFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjYW5CZVNlcmlhbGl6ZWRBc1ZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSByb290IG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnM6IFRoZSBvbmx5IHZhbGlkIG9wdGlvbiBpcyB1c2VNYXN0ZXJLZXkuXG4gICAqL1xuICBQYXJzZS5PYmplY3QuX2RlZXBTYXZlQXN5bmMgPSBmdW5jdGlvbihvYmplY3QsIG9wdGlvbnMpIHtcbiAgICB2YXIgdW5zYXZlZENoaWxkcmVuID0gW107XG4gICAgdmFyIHVuc2F2ZWRGaWxlcyA9IFtdO1xuICAgIFBhcnNlLk9iamVjdC5fZmluZFVuc2F2ZWRDaGlsZHJlbihvYmplY3QsIHVuc2F2ZWRDaGlsZHJlbiwgdW5zYXZlZEZpbGVzKTtcblxuICAgIHZhciBwcm9taXNlID0gUGFyc2UuUHJvbWlzZS5hcygpO1xuICAgIF8uZWFjaCh1bnNhdmVkRmlsZXMsIGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmaWxlLnNhdmUob3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBvYmplY3RzID0gXy51bmlxKHVuc2F2ZWRDaGlsZHJlbik7XG4gICAgdmFyIHJlbWFpbmluZyA9IF8udW5pcShvYmplY3RzKTtcblxuICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5fY29udGludWVXaGlsZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlbWFpbmluZy5sZW5ndGggPiAwO1xuICAgICAgfSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLy8gR2F0aGVyIHVwIGFsbCB0aGUgb2JqZWN0cyB0aGF0IGNhbiBiZSBzYXZlZCBpbiB0aGlzIGJhdGNoLlxuICAgICAgICB2YXIgYmF0Y2ggPSBbXTtcbiAgICAgICAgdmFyIG5ld1JlbWFpbmluZyA9IFtdO1xuICAgICAgICBQYXJzZS5fYXJyYXlFYWNoKHJlbWFpbmluZywgZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgLy8gTGltaXQgYmF0Y2hlcyB0byAyMCBvYmplY3RzLlxuICAgICAgICAgIGlmIChiYXRjaC5sZW5ndGggPiAyMCkge1xuICAgICAgICAgICAgbmV3UmVtYWluaW5nLnB1c2gob2JqZWN0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob2JqZWN0Ll9jYW5CZVNlcmlhbGl6ZWQoKSkge1xuICAgICAgICAgICAgYmF0Y2gucHVzaChvYmplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdSZW1haW5pbmcucHVzaChvYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlbWFpbmluZyA9IG5ld1JlbWFpbmluZztcblxuICAgICAgICAvLyBJZiB3ZSBjYW4ndCBzYXZlIGFueSBvYmplY3RzLCB0aGVyZSBtdXN0IGJlIGEgY2lyY3VsYXIgcmVmZXJlbmNlLlxuICAgICAgICBpZiAoYmF0Y2gubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3IoXG4gICAgICAgICAgICBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT1RIRVJfQ0FVU0UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUcmllZCB0byBzYXZlIGEgYmF0Y2ggd2l0aCBhIGN5Y2xlLlwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNlcnZlIGEgc3BvdCBpbiBldmVyeSBvYmplY3QncyBzYXZlIHF1ZXVlLlxuICAgICAgICB2YXIgcmVhZHlUb1N0YXJ0ID0gUGFyc2UuUHJvbWlzZS53aGVuKF8ubWFwKGJhdGNoLCBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Ll9hbGxQcmV2aW91c1NhdmVzIHx8IFBhcnNlLlByb21pc2UuYXMoKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgYmF0Y2hGaW5pc2hlZCA9IG5ldyBQYXJzZS5Qcm9taXNlKCk7XG4gICAgICAgIFBhcnNlLl9hcnJheUVhY2goYmF0Y2gsIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgIG9iamVjdC5fYWxsUHJldmlvdXNTYXZlcyA9IGJhdGNoRmluaXNoZWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNhdmUgYSBzaW5nbGUgYmF0Y2gsIHdoZXRoZXIgcHJldmlvdXMgc2F2ZXMgc3VjY2VlZGVkIG9yIGZhaWxlZC5cbiAgICAgICAgcmV0dXJuIHJlYWR5VG9TdGFydC5fY29udGludWVXaXRoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBQYXJzZS5fcmVxdWVzdCh7XG4gICAgICAgICAgICByb3V0ZTogXCJiYXRjaFwiLFxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIHVzZU1hc3RlcktleTogb3B0aW9ucy51c2VNYXN0ZXJLZXksXG4gICAgICAgICAgICBzZXNzaW9uVG9rZW46IG9wdGlvbnMuc2Vzc2lvblRva2VuLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICByZXF1ZXN0czogXy5tYXAoYmF0Y2gsIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBqc29uID0gb2JqZWN0Ll9nZXRTYXZlSlNPTigpO1xuICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSBcIlBPU1RcIjtcblxuICAgICAgICAgICAgICAgIHZhciBwYXRoID0gXCIvMS9jbGFzc2VzL1wiICsgb2JqZWN0LmNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LmlkKSB7XG4gICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aCArIFwiL1wiICsgb2JqZWN0LmlkO1xuICAgICAgICAgICAgICAgICAgbWV0aG9kID0gXCJQVVRcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvYmplY3QuX3N0YXJ0U2F2ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgICAgIGJvZHk6IGpzb25cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UsIHN0YXR1cywgeGhyKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgICAgICBQYXJzZS5fYXJyYXlFYWNoKGJhdGNoLCBmdW5jdGlvbihvYmplY3QsIGkpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlW2ldLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QuX2ZpbmlzaFNhdmUoXG4gICAgICAgICAgICAgICAgICBvYmplY3QucGFyc2UocmVzcG9uc2VbaV0uc3VjY2Vzcywgc3RhdHVzLCB4aHIpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IGVycm9yIHx8IHJlc3BvbnNlW2ldLmVycm9yO1xuICAgICAgICAgICAgICAgIG9iamVjdC5fY2FuY2VsU2F2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5lcnJvcihcbiAgICAgICAgICAgICAgICBuZXcgUGFyc2UuRXJyb3IoZXJyb3IuY29kZSwgZXJyb3IuZXJyb3IpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICAgICAgYmF0Y2hGaW5pc2hlZC5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIGJhdGNoRmluaXNoZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcbiAgfTtcblxufSh0aGlzKSk7XG5cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICB2YXIgUGFyc2UgPSByb290LlBhcnNlO1xuICB2YXIgXyA9IFBhcnNlLl87XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgYSBSb2xlIG9uIHRoZSBQYXJzZSBzZXJ2ZXIuIFJvbGVzIHJlcHJlc2VudCBncm91cGluZ3Mgb2ZcbiAgICogVXNlcnMgZm9yIHRoZSBwdXJwb3NlcyBvZiBncmFudGluZyBwZXJtaXNzaW9ucyAoZS5nLiBzcGVjaWZ5aW5nIGFuIEFDTFxuICAgKiBmb3IgYW4gT2JqZWN0KS4gUm9sZXMgYXJlIHNwZWNpZmllZCBieSB0aGVpciBzZXRzIG9mIGNoaWxkIHVzZXJzIGFuZFxuICAgKiBjaGlsZCByb2xlcywgYWxsIG9mIHdoaWNoIGFyZSBncmFudGVkIGFueSBwZXJtaXNzaW9ucyB0aGF0IHRoZSBwYXJlbnRcbiAgICogcm9sZSBoYXMuXG4gICAqXG4gICAqIDxwPlJvbGVzIG11c3QgaGF2ZSBhIG5hbWUgKHdoaWNoIGNhbm5vdCBiZSBjaGFuZ2VkIGFmdGVyIGNyZWF0aW9uIG9mIHRoZVxuICAgKiByb2xlKSwgYW5kIG11c3Qgc3BlY2lmeSBhbiBBQ0wuPC9wPlxuICAgKiBAY2xhc3NcbiAgICogQSBQYXJzZS5Sb2xlIGlzIGEgbG9jYWwgcmVwcmVzZW50YXRpb24gb2YgYSByb2xlIHBlcnNpc3RlZCB0byB0aGUgUGFyc2VcbiAgICogY2xvdWQuXG4gICAqL1xuICBQYXJzZS5Sb2xlID0gUGFyc2UuT2JqZWN0LmV4dGVuZChcIl9Sb2xlXCIsIC8qKiBAbGVuZHMgUGFyc2UuUm9sZS5wcm90b3R5cGUgKi8ge1xuICAgIC8vIEluc3RhbmNlIE1ldGhvZHNcbiAgICBcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFBhcnNlUm9sZSB3aXRoIHRoZSBnaXZlbiBuYW1lIGFuZCBBQ0wuXG4gICAgICogXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIFJvbGUgdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSB7UGFyc2UuQUNMfSBhY2wgVGhlIEFDTCBmb3IgdGhpcyByb2xlLiBSb2xlcyBtdXN0IGhhdmUgYW4gQUNMLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbihuYW1lLCBhY2wpIHtcbiAgICAgIGlmIChfLmlzU3RyaW5nKG5hbWUpICYmIChhY2wgaW5zdGFuY2VvZiBQYXJzZS5BQ0wpKSB7XG4gICAgICAgIFBhcnNlLk9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBudWxsLCBudWxsKTtcbiAgICAgICAgdGhpcy5zZXROYW1lKG5hbWUpO1xuICAgICAgICB0aGlzLnNldEFDTChhY2wpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUGFyc2UuT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG5hbWUsIGFjbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIHRoZSByb2xlLiAgWW91IGNhbiBhbHRlcm5hdGl2ZWx5IGNhbGwgcm9sZS5nZXQoXCJuYW1lXCIpXG4gICAgICogXG4gICAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgbmFtZSBvZiB0aGUgcm9sZS5cbiAgICAgKi9cbiAgICBnZXROYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChcIm5hbWVcIik7XG4gICAgfSxcbiAgICBcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBuYW1lIGZvciBhIHJvbGUuIFRoaXMgdmFsdWUgbXVzdCBiZSBzZXQgYmVmb3JlIHRoZSByb2xlIGhhc1xuICAgICAqIGJlZW4gc2F2ZWQgdG8gdGhlIHNlcnZlciwgYW5kIGNhbm5vdCBiZSBzZXQgb25jZSB0aGUgcm9sZSBoYXMgYmVlblxuICAgICAqIHNhdmVkLlxuICAgICAqIFxuICAgICAqIDxwPlxuICAgICAqICAgQSByb2xlJ3MgbmFtZSBjYW4gb25seSBjb250YWluIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBfLCAtLCBhbmRcbiAgICAgKiAgIHNwYWNlcy5cbiAgICAgKiA8L3A+XG4gICAgICpcbiAgICAgKiA8cD5UaGlzIGlzIGVxdWl2YWxlbnQgdG8gY2FsbGluZyByb2xlLnNldChcIm5hbWVcIiwgbmFtZSk8L3A+XG4gICAgICogXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHJvbGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgU3RhbmRhcmQgb3B0aW9ucyBvYmplY3Qgd2l0aCBzdWNjZXNzIGFuZCBlcnJvclxuICAgICAqICAgICBjYWxsYmFja3MuXG4gICAgICovXG4gICAgc2V0TmFtZTogZnVuY3Rpb24obmFtZSwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KFwibmFtZVwiLCBuYW1lLCBvcHRpb25zKTtcbiAgICB9LFxuICAgIFxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIFBhcnNlLlJlbGF0aW9uIGZvciB0aGUgUGFyc2UuVXNlcnMgdGhhdCBhcmUgZGlyZWN0XG4gICAgICogY2hpbGRyZW4gb2YgdGhpcyByb2xlLiBUaGVzZSB1c2VycyBhcmUgZ3JhbnRlZCBhbnkgcHJpdmlsZWdlcyB0aGF0IHRoaXNcbiAgICAgKiByb2xlIGhhcyBiZWVuIGdyYW50ZWQgKGUuZy4gcmVhZCBvciB3cml0ZSBhY2Nlc3MgdGhyb3VnaCBBQ0xzKS4gWW91IGNhblxuICAgICAqIGFkZCBvciByZW1vdmUgdXNlcnMgZnJvbSB0aGUgcm9sZSB0aHJvdWdoIHRoaXMgcmVsYXRpb24uXG4gICAgICogXG4gICAgICogPHA+VGhpcyBpcyBlcXVpdmFsZW50IHRvIGNhbGxpbmcgcm9sZS5yZWxhdGlvbihcInVzZXJzXCIpPC9wPlxuICAgICAqIFxuICAgICAqIEByZXR1cm4ge1BhcnNlLlJlbGF0aW9ufSB0aGUgcmVsYXRpb24gZm9yIHRoZSB1c2VycyBiZWxvbmdpbmcgdG8gdGhpc1xuICAgICAqICAgICByb2xlLlxuICAgICAqL1xuICAgIGdldFVzZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbGF0aW9uKFwidXNlcnNcIik7XG4gICAgfSxcbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBQYXJzZS5SZWxhdGlvbiBmb3IgdGhlIFBhcnNlLlJvbGVzIHRoYXQgYXJlIGRpcmVjdFxuICAgICAqIGNoaWxkcmVuIG9mIHRoaXMgcm9sZS4gVGhlc2Ugcm9sZXMnIHVzZXJzIGFyZSBncmFudGVkIGFueSBwcml2aWxlZ2VzIHRoYXRcbiAgICAgKiB0aGlzIHJvbGUgaGFzIGJlZW4gZ3JhbnRlZCAoZS5nLiByZWFkIG9yIHdyaXRlIGFjY2VzcyB0aHJvdWdoIEFDTHMpLiBZb3VcbiAgICAgKiBjYW4gYWRkIG9yIHJlbW92ZSBjaGlsZCByb2xlcyBmcm9tIHRoaXMgcm9sZSB0aHJvdWdoIHRoaXMgcmVsYXRpb24uXG4gICAgICogXG4gICAgICogPHA+VGhpcyBpcyBlcXVpdmFsZW50IHRvIGNhbGxpbmcgcm9sZS5yZWxhdGlvbihcInJvbGVzXCIpPC9wPlxuICAgICAqIFxuICAgICAqIEByZXR1cm4ge1BhcnNlLlJlbGF0aW9ufSB0aGUgcmVsYXRpb24gZm9yIHRoZSByb2xlcyBiZWxvbmdpbmcgdG8gdGhpc1xuICAgICAqICAgICByb2xlLlxuICAgICAqL1xuICAgIGdldFJvbGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbGF0aW9uKFwicm9sZXNcIik7XG4gICAgfSxcbiAgICBcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7XG4gICAgICBpZiAoXCJuYW1lXCIgaW4gYXR0cnMgJiYgYXR0cnMubmFtZSAhPT0gdGhpcy5nZXROYW1lKCkpIHtcbiAgICAgICAgdmFyIG5ld05hbWUgPSBhdHRycy5uYW1lO1xuICAgICAgICBpZiAodGhpcy5pZCAmJiB0aGlzLmlkICE9PSBhdHRycy5vYmplY3RJZCkge1xuICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgb2JqZWN0SWQgYmVpbmcgc2V0IG1hdGNoZXMgdGhpcy5pZC5cbiAgICAgICAgICAvLyBUaGlzIGhhcHBlbnMgZHVyaW5nIGEgZmV0Y2ggLS0gdGhlIGlkIGlzIHNldCBiZWZvcmUgY2FsbGluZyBmZXRjaC5cbiAgICAgICAgICAvLyBMZXQgdGhlIG5hbWUgYmUgc2V0IGluIHRoaXMgY2FzZS5cbiAgICAgICAgICByZXR1cm4gbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9USEVSX0NBVVNFLFxuICAgICAgICAgICAgICBcIkEgcm9sZSdzIG5hbWUgY2FuIG9ubHkgYmUgc2V0IGJlZm9yZSBpdCBoYXMgYmVlbiBzYXZlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfLmlzU3RyaW5nKG5ld05hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PVEhFUl9DQVVTRSxcbiAgICAgICAgICAgICAgXCJBIHJvbGUncyBuYW1lIG11c3QgYmUgYSBTdHJpbmcuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKC9eWzAtOWEtekEtWlxcLV8gXSskLykudGVzdChuZXdOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT1RIRVJfQ0FVU0UsXG4gICAgICAgICAgICAgIFwiQSByb2xlJ3MgbmFtZSBjYW4gb25seSBjb250YWluIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBfLFwiICtcbiAgICAgICAgICAgICAgXCIgLSwgYW5kIHNwYWNlcy5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChQYXJzZS5PYmplY3QucHJvdG90eXBlLnZhbGlkYXRlKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5PYmplY3QucHJvdG90eXBlLnZhbGlkYXRlLmNhbGwodGhpcywgYXR0cnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG59KHRoaXMpKTtcblxuXG4vKmdsb2JhbCBfOiBmYWxzZSAqL1xuKGZ1bmN0aW9uKHJvb3QpIHtcbiAgcm9vdC5QYXJzZSA9IHJvb3QuUGFyc2UgfHwge307XG4gIHZhciBQYXJzZSA9IHJvb3QuUGFyc2U7XG4gIHZhciBfID0gUGFyc2UuXztcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSB3aXRoIHRoZSBnaXZlbiBtb2RlbHMgYW5kIG9wdGlvbnMuICBUeXBpY2FsbHksIHlvdVxuICAgKiB3aWxsIG5vdCBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LCBidXQgd2lsbCBpbnN0ZWFkIG1ha2UgYSBzdWJjbGFzcyB1c2luZ1xuICAgKiA8Y29kZT5QYXJzZS5Db2xsZWN0aW9uLmV4dGVuZDwvY29kZT4uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IG1vZGVscyBBbiBhcnJheSBvZiBpbnN0YW5jZXMgb2YgPGNvZGU+UGFyc2UuT2JqZWN0PC9jb2RlPi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gb3B0aW9uYWwgb2JqZWN0IHdpdGggQmFja2JvbmUtc3R5bGUgb3B0aW9ucy5cbiAgICogVmFsaWQgb3B0aW9ucyBhcmU6PHVsPlxuICAgKiAgIDxsaT5tb2RlbDogVGhlIFBhcnNlLk9iamVjdCBzdWJjbGFzcyB0aGF0IHRoaXMgY29sbGVjdGlvbiBjb250YWlucy5cbiAgICogICA8bGk+cXVlcnk6IEFuIGluc3RhbmNlIG9mIFBhcnNlLlF1ZXJ5IHRvIHVzZSB3aGVuIGZldGNoaW5nIGl0ZW1zLlxuICAgKiAgIDxsaT5jb21wYXJhdG9yOiBBIHN0cmluZyBwcm9wZXJ0eSBuYW1lIG9yIGZ1bmN0aW9uIHRvIHNvcnQgYnkuXG4gICAqIDwvdWw+XG4gICAqXG4gICAqIEBzZWUgUGFyc2UuQ29sbGVjdGlvbi5leHRlbmRcbiAgICpcbiAgICogQGNsYXNzXG4gICAqXG4gICAqIDxwPlByb3ZpZGVzIGEgc3RhbmRhcmQgY29sbGVjdGlvbiBjbGFzcyBmb3Igb3VyIHNldHMgb2YgbW9kZWxzLCBvcmRlcmVkXG4gICAqIG9yIHVub3JkZXJlZC4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlXG4gICAqIDxhIGhyZWY9XCJodHRwOi8vZG9jdW1lbnRjbG91ZC5naXRodWIuY29tL2JhY2tib25lLyNDb2xsZWN0aW9uXCI+QmFja2JvbmVcbiAgICogZG9jdW1lbnRhdGlvbjwvYT4uPC9wPlxuICAgKi9cbiAgUGFyc2UuQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmF0b3IpIHtcbiAgICAgIHRoaXMuY29tcGFyYXRvciA9IG9wdGlvbnMuY29tcGFyYXRvcjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubW9kZWwpIHtcbiAgICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5xdWVyeSkge1xuICAgICAgdGhpcy5xdWVyeSA9IG9wdGlvbnMucXVlcnk7XG4gICAgfVxuICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKG1vZGVscykge1xuICAgICAgdGhpcy5yZXNldChtb2RlbHMsIHtzaWxlbnQ6IHRydWUsIHBhcnNlOiBvcHRpb25zLnBhcnNlfSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIERlZmluZSB0aGUgQ29sbGVjdGlvbidzIGluaGVyaXRhYmxlIG1ldGhvZHMuXG4gIF8uZXh0ZW5kKFBhcnNlLkNvbGxlY3Rpb24ucHJvdG90eXBlLCBQYXJzZS5FdmVudHMsXG4gICAgICAvKiogQGxlbmRzIFBhcnNlLkNvbGxlY3Rpb24ucHJvdG90eXBlICovIHtcblxuICAgIC8vIFRoZSBkZWZhdWx0IG1vZGVsIGZvciBhIGNvbGxlY3Rpb24gaXMganVzdCBhIFBhcnNlLk9iamVjdC5cbiAgICAvLyBUaGlzIHNob3VsZCBiZSBvdmVycmlkZGVuIGluIG1vc3QgY2FzZXMuXG4gICAgLy8gVE9ETzogdGhpbmsgaGFyZGVyLiB0aGlzIGlzIGxpa2VseSB0byBiZSB3ZWlyZC5cbiAgICBtb2RlbDogUGFyc2UuT2JqZWN0LFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duXG4gICAgICogaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYSBDb2xsZWN0aW9uIGlzIGFuIGFycmF5IG9mIHRoZVxuICAgICAqIG1vZGVscycgYXR0cmlidXRlcy5cbiAgICAgKi9cbiAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKG1vZGVsKXsgcmV0dXJuIG1vZGVsLnRvSlNPTigpOyB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgbW9kZWwsIG9yIGxpc3Qgb2YgbW9kZWxzIHRvIHRoZSBzZXQuIFBhc3MgKipzaWxlbnQqKiB0byBhdm9pZFxuICAgICAqIGZpcmluZyB0aGUgYGFkZGAgZXZlbnQgZm9yIGV2ZXJ5IG5ldyBtb2RlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1vZGVscyBBbiBhcnJheSBvZiBpbnN0YW5jZXMgb2YgPGNvZGU+UGFyc2UuT2JqZWN0PC9jb2RlPi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9wdGlvbmFsIG9iamVjdCB3aXRoIEJhY2tib25lLXN0eWxlIG9wdGlvbnMuXG4gICAgICogVmFsaWQgb3B0aW9ucyBhcmU6PHVsPlxuICAgICAqICAgPGxpPmF0OiBUaGUgaW5kZXggYXQgd2hpY2ggdG8gYWRkIHRoZSBtb2RlbHMuXG4gICAgICogICA8bGk+c2lsZW50OiBTZXQgdG8gdHJ1ZSB0byBhdm9pZCBmaXJpbmcgdGhlIGBhZGRgIGV2ZW50IGZvciBldmVyeSBuZXdcbiAgICAgKiAgIG1vZGVsLlxuICAgICAqIDwvdWw+XG4gICAgICovXG4gICAgYWRkOiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBpLCBpbmRleCwgbGVuZ3RoLCBtb2RlbCwgY2lkLCBpZCwgY2lkcyA9IHt9LCBpZHMgPSB7fTtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgbW9kZWxzID0gXy5pc0FycmF5KG1vZGVscykgPyBtb2RlbHMuc2xpY2UoKSA6IFttb2RlbHNdO1xuXG4gICAgICAvLyBCZWdpbiBieSB0dXJuaW5nIGJhcmUgb2JqZWN0cyBpbnRvIG1vZGVsIHJlZmVyZW5jZXMsIGFuZCBwcmV2ZW50aW5nXG4gICAgICAvLyBpbnZhbGlkIG1vZGVscyBvciBkdXBsaWNhdGUgbW9kZWxzIGZyb20gYmVpbmcgYWRkZWQuXG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBtb2RlbHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbW9kZWxzW2ldID0gdGhpcy5fcHJlcGFyZU1vZGVsKG1vZGVsc1tpXSwgb3B0aW9ucyk7XG4gICAgICAgIG1vZGVsID0gbW9kZWxzW2ldO1xuICAgICAgICBpZiAoIW1vZGVsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgYWRkIGFuIGludmFsaWQgbW9kZWwgdG8gYSBjb2xsZWN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNpZCA9IG1vZGVsLmNpZDtcbiAgICAgICAgaWYgKGNpZHNbY2lkXSB8fCB0aGlzLl9ieUNpZFtjaWRdKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRHVwbGljYXRlIGNpZDogY2FuJ3QgYWRkIHRoZSBzYW1lIG1vZGVsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0byBhIGNvbGxlY3Rpb24gdHdpY2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWQgPSBtb2RlbC5pZDtcbiAgICAgICAgaWYgKCFQYXJzZS5faXNOdWxsT3JVbmRlZmluZWQoaWQpICYmIChpZHNbaWRdIHx8IHRoaXMuX2J5SWRbaWRdKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkR1cGxpY2F0ZSBpZDogY2FuJ3QgYWRkIHRoZSBzYW1lIG1vZGVsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0byBhIGNvbGxlY3Rpb24gdHdpY2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWRzW2lkXSA9IG1vZGVsO1xuICAgICAgICBjaWRzW2NpZF0gPSBtb2RlbDtcbiAgICAgIH1cblxuICAgICAgLy8gTGlzdGVuIHRvIGFkZGVkIG1vZGVscycgZXZlbnRzLCBhbmQgaW5kZXggbW9kZWxzIGZvciBsb29rdXAgYnlcbiAgICAgIC8vIGBpZGAgYW5kIGJ5IGBjaWRgLlxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIChtb2RlbCA9IG1vZGVsc1tpXSkub24oJ2FsbCcsIHRoaXMuX29uTW9kZWxFdmVudCwgdGhpcyk7XG4gICAgICAgIHRoaXMuX2J5Q2lkW21vZGVsLmNpZF0gPSBtb2RlbDtcbiAgICAgICAgaWYgKG1vZGVsLmlkKSB7XG4gICAgICAgICAgdGhpcy5fYnlJZFttb2RlbC5pZF0gPSBtb2RlbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJbnNlcnQgbW9kZWxzIGludG8gdGhlIGNvbGxlY3Rpb24sIHJlLXNvcnRpbmcgaWYgbmVlZGVkLCBhbmQgdHJpZ2dlcmluZ1xuICAgICAgLy8gYGFkZGAgZXZlbnRzIHVubGVzcyBzaWxlbmNlZC5cbiAgICAgIHRoaXMubGVuZ3RoICs9IGxlbmd0aDtcbiAgICAgIGluZGV4ID0gUGFyc2UuX2lzTnVsbE9yVW5kZWZpbmVkKG9wdGlvbnMuYXQpID8gXG4gICAgICAgICAgdGhpcy5tb2RlbHMubGVuZ3RoIDogb3B0aW9ucy5hdDtcbiAgICAgIHRoaXMubW9kZWxzLnNwbGljZS5hcHBseSh0aGlzLm1vZGVscywgW2luZGV4LCAwXS5jb25jYXQobW9kZWxzKSk7XG4gICAgICBpZiAodGhpcy5jb21wYXJhdG9yKSB7XG4gICAgICAgIHRoaXMuc29ydCh7c2lsZW50OiB0cnVlfSk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0aGlzLm1vZGVscy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBtb2RlbCA9IHRoaXMubW9kZWxzW2ldO1xuICAgICAgICBpZiAoY2lkc1ttb2RlbC5jaWRdKSB7XG4gICAgICAgICAgb3B0aW9ucy5pbmRleCA9IGk7XG4gICAgICAgICAgbW9kZWwudHJpZ2dlcignYWRkJywgbW9kZWwsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgbW9kZWwsIG9yIGEgbGlzdCBvZiBtb2RlbHMgZnJvbSB0aGUgc2V0LiBQYXNzIHNpbGVudCB0byBhdm9pZFxuICAgICAqIGZpcmluZyB0aGUgPGNvZGU+cmVtb3ZlPC9jb2RlPiBldmVudCBmb3IgZXZlcnkgbW9kZWwgcmVtb3ZlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1vZGVscyBUaGUgbW9kZWwgb3IgbGlzdCBvZiBtb2RlbHMgdG8gcmVtb3ZlIGZyb20gdGhlXG4gICAgICogICBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9wdGlvbmFsIG9iamVjdCB3aXRoIEJhY2tib25lLXN0eWxlIG9wdGlvbnMuXG4gICAgICogVmFsaWQgb3B0aW9ucyBhcmU6IDx1bD5cbiAgICAgKiAgIDxsaT5zaWxlbnQ6IFNldCB0byB0cnVlIHRvIGF2b2lkIGZpcmluZyB0aGUgYHJlbW92ZWAgZXZlbnQuXG4gICAgICogPC91bD5cbiAgICAgKi9cbiAgICByZW1vdmU6IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykge1xuICAgICAgdmFyIGksIGwsIGluZGV4LCBtb2RlbDtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgbW9kZWxzID0gXy5pc0FycmF5KG1vZGVscykgPyBtb2RlbHMuc2xpY2UoKSA6IFttb2RlbHNdO1xuICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbW9kZWwgPSB0aGlzLmdldEJ5Q2lkKG1vZGVsc1tpXSkgfHwgdGhpcy5nZXQobW9kZWxzW2ldKTtcbiAgICAgICAgaWYgKCFtb2RlbCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLmlkXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2J5Q2lkW21vZGVsLmNpZF07XG4gICAgICAgIGluZGV4ID0gdGhpcy5pbmRleE9mKG1vZGVsKTtcbiAgICAgICAgdGhpcy5tb2RlbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgIG9wdGlvbnMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtb2RlbC50cmlnZ2VyKCdyZW1vdmUnLCBtb2RlbCwgdGhpcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVtb3ZlUmVmZXJlbmNlKG1vZGVsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbW9kZWwgZnJvbSB0aGUgc2V0IGJ5IGlkLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgUGFyc2Ugb2JqZWN0SWQgaWRlbnRpZnlpbmcgdGhlIFBhcnNlLk9iamVjdCB0b1xuICAgICAqIGZldGNoIGZyb20gdGhpcyBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiBpZCAmJiB0aGlzLl9ieUlkW2lkLmlkIHx8IGlkXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIG1vZGVsIGZyb20gdGhlIHNldCBieSBjbGllbnQgaWQuXG4gICAgICogQHBhcmFtIHt9IGNpZCBUaGUgQmFja2JvbmUgY29sbGVjdGlvbiBpZCBpZGVudGlmeWluZyB0aGUgUGFyc2UuT2JqZWN0IHRvXG4gICAgICogZmV0Y2ggZnJvbSB0aGlzIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgZ2V0QnlDaWQ6IGZ1bmN0aW9uKGNpZCkge1xuICAgICAgcmV0dXJuIGNpZCAmJiB0aGlzLl9ieUNpZFtjaWQuY2lkIHx8IGNpZF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1vZGVsIGF0IHRoZSBnaXZlbiBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIG1vZGVsIHRvIHJldHVybi5cbiAgICAgKi9cbiAgICBhdDogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1vZGVsc1tpbmRleF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZvcmNlcyB0aGUgY29sbGVjdGlvbiB0byByZS1zb3J0IGl0c2VsZi4gWW91IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzXG4gICAgICogdW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIGFzIHRoZSBzZXQgd2lsbCBtYWludGFpbiBzb3J0IG9yZGVyIGFzIGVhY2hcbiAgICAgKiBpdGVtIGlzIGFkZGVkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9wdGlvbmFsIG9iamVjdCB3aXRoIEJhY2tib25lLXN0eWxlIG9wdGlvbnMuXG4gICAgICogVmFsaWQgb3B0aW9ucyBhcmU6IDx1bD5cbiAgICAgKiAgIDxsaT5zaWxlbnQ6IFNldCB0byB0cnVlIHRvIGF2b2lkIGZpcmluZyB0aGUgYHJlc2V0YCBldmVudC5cbiAgICAgKiA8L3VsPlxuICAgICAqL1xuICAgIHNvcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgaWYgKCF0aGlzLmNvbXBhcmF0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc29ydCBhIHNldCB3aXRob3V0IGEgY29tcGFyYXRvcicpO1xuICAgICAgfVxuICAgICAgdmFyIGJvdW5kQ29tcGFyYXRvciA9IF8uYmluZCh0aGlzLmNvbXBhcmF0b3IsIHRoaXMpO1xuICAgICAgaWYgKHRoaXMuY29tcGFyYXRvci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5tb2RlbHMgPSB0aGlzLnNvcnRCeShib3VuZENvbXBhcmF0b3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tb2RlbHMuc29ydChib3VuZENvbXBhcmF0b3IpO1xuICAgICAgfVxuICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Jlc2V0JywgdGhpcywgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGx1Y2tzIGFuIGF0dHJpYnV0ZSBmcm9tIGVhY2ggbW9kZWwgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHIgVGhlIGF0dHJpYnV0ZSB0byByZXR1cm4gZnJvbSBlYWNoIG1vZGVsIGluIHRoZVxuICAgICAqIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgcGx1Y2s6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHJldHVybiBfLm1hcCh0aGlzLm1vZGVscywgZnVuY3Rpb24obW9kZWwpeyByZXR1cm4gbW9kZWwuZ2V0KGF0dHIpOyB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB5b3UgaGF2ZSBtb3JlIGl0ZW1zIHRoYW4geW91IHdhbnQgdG8gYWRkIG9yIHJlbW92ZSBpbmRpdmlkdWFsbHksXG4gICAgICogeW91IGNhbiByZXNldCB0aGUgZW50aXJlIHNldCB3aXRoIGEgbmV3IGxpc3Qgb2YgbW9kZWxzLCB3aXRob3V0IGZpcmluZ1xuICAgICAqIGFueSBgYWRkYCBvciBgcmVtb3ZlYCBldmVudHMuIEZpcmVzIGByZXNldGAgd2hlbiBmaW5pc2hlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1vZGVscyBUaGUgbW9kZWwgb3IgbGlzdCBvZiBtb2RlbHMgdG8gcmVtb3ZlIGZyb20gdGhlXG4gICAgICogICBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9wdGlvbmFsIG9iamVjdCB3aXRoIEJhY2tib25lLXN0eWxlIG9wdGlvbnMuXG4gICAgICogVmFsaWQgb3B0aW9ucyBhcmU6IDx1bD5cbiAgICAgKiAgIDxsaT5zaWxlbnQ6IFNldCB0byB0cnVlIHRvIGF2b2lkIGZpcmluZyB0aGUgYHJlc2V0YCBldmVudC5cbiAgICAgKiA8L3VsPlxuICAgICAqL1xuICAgIHJlc2V0OiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIG1vZGVscyA9IG1vZGVscyB8fCBbXTtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgUGFyc2UuX2FycmF5RWFjaCh0aGlzLm1vZGVscywgZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgc2VsZi5fcmVtb3ZlUmVmZXJlbmNlKG1vZGVsKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fcmVzZXQoKTtcbiAgICAgIHRoaXMuYWRkKG1vZGVscywge3NpbGVudDogdHJ1ZSwgcGFyc2U6IG9wdGlvbnMucGFyc2V9KTtcbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNldCcsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIGRlZmF1bHQgc2V0IG9mIG1vZGVscyBmb3IgdGhpcyBjb2xsZWN0aW9uLCByZXNldHRpbmcgdGhlXG4gICAgICogY29sbGVjdGlvbiB3aGVuIHRoZXkgYXJyaXZlLiBJZiBgYWRkOiB0cnVlYCBpcyBwYXNzZWQsIGFwcGVuZHMgdGhlXG4gICAgICogbW9kZWxzIHRvIHRoZSBjb2xsZWN0aW9uIGluc3RlYWQgb2YgcmVzZXR0aW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gb3B0aW9uYWwgb2JqZWN0IHdpdGggQmFja2JvbmUtc3R5bGUgb3B0aW9ucy5cbiAgICAgKiBWYWxpZCBvcHRpb25zIGFyZTo8dWw+XG4gICAgICogICA8bGk+c2lsZW50OiBTZXQgdG8gdHJ1ZSB0byBhdm9pZCBmaXJpbmcgYGFkZGAgb3IgYHJlc2V0YCBldmVudHMgZm9yXG4gICAgICogICBtb2RlbHMgZmV0Y2hlZCBieSB0aGlzIGZldGNoLlxuICAgICAqICAgPGxpPnN1Y2Nlc3M6IEEgQmFja2JvbmUtc3R5bGUgc3VjY2VzcyBjYWxsYmFjay5cbiAgICAgKiAgIDxsaT5lcnJvcjogQW4gQmFja2JvbmUtc3R5bGUgZXJyb3IgY2FsbGJhY2suXG4gICAgICogICA8bGk+dXNlTWFzdGVyS2V5OiBJbiBDbG91ZCBDb2RlIGFuZCBOb2RlIG9ubHksIHVzZXMgdGhlIE1hc3RlciBLZXkgZm9yXG4gICAgICogICAgICAgdGhpcyByZXF1ZXN0LlxuICAgICAqICAgPGxpPnNlc3Npb25Ub2tlbjogQSB2YWxpZCBzZXNzaW9uIHRva2VuLCB1c2VkIGZvciBtYWtpbmcgYSByZXF1ZXN0IG9uXG4gICAgICogICAgICAgYmVoYWxmIG9mIGEgc3BlY2lmaWMgdXNlci5cbiAgICAgKiA8L3VsPlxuICAgICAqL1xuICAgIGZldGNoOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gXy5jbG9uZShvcHRpb25zKSB8fCB7fTtcbiAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0aW9ucy5wYXJzZSA9IHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IG5ldyBQYXJzZS5RdWVyeSh0aGlzLm1vZGVsKTtcbiAgICAgIHJldHVybiBxdWVyeS5maW5kKHtcbiAgICAgICAgdXNlTWFzdGVyS2V5OiBvcHRpb25zLnVzZU1hc3RlcktleSxcbiAgICAgICAgc2Vzc2lvblRva2VuOiBvcHRpb25zLnNlc3Npb25Ub2tlblxuICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmFkZCkge1xuICAgICAgICAgIGNvbGxlY3Rpb24uYWRkKHJlc3VsdHMsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbGxlY3Rpb24ucmVzZXQocmVzdWx0cywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9KS5fdGhlblJ1bkNhbGxiYWNrcyhvcHRpb25zLCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIG1vZGVsIGluIHRoaXMgY29sbGVjdGlvbi4gQWRkIHRoZSBtb2RlbCB0b1xuICAgICAqIHRoZSBjb2xsZWN0aW9uIGltbWVkaWF0ZWx5LCB1bmxlc3MgYHdhaXQ6IHRydWVgIGlzIHBhc3NlZCwgaW4gd2hpY2ggY2FzZVxuICAgICAqIHdlIHdhaXQgZm9yIHRoZSBzZXJ2ZXIgdG8gYWdyZWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BhcnNlLk9iamVjdH0gbW9kZWwgVGhlIG5ldyBtb2RlbCB0byBjcmVhdGUgYW5kIGFkZCB0byB0aGVcbiAgICAgKiAgIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gb3B0aW9uYWwgb2JqZWN0IHdpdGggQmFja2JvbmUtc3R5bGUgb3B0aW9ucy5cbiAgICAgKiBWYWxpZCBvcHRpb25zIGFyZTo8dWw+XG4gICAgICogICA8bGk+d2FpdDogU2V0IHRvIHRydWUgdG8gd2FpdCBmb3IgdGhlIHNlcnZlciB0byBjb25maXJtIGNyZWF0aW9uIG9mIHRoZVxuICAgICAqICAgICAgIG1vZGVsIGJlZm9yZSBhZGRpbmcgaXQgdG8gdGhlIGNvbGxlY3Rpb24uXG4gICAgICogICA8bGk+c2lsZW50OiBTZXQgdG8gdHJ1ZSB0byBhdm9pZCBmaXJpbmcgYW4gYGFkZGAgZXZlbnQuXG4gICAgICogICA8bGk+c3VjY2VzczogQSBCYWNrYm9uZS1zdHlsZSBzdWNjZXNzIGNhbGxiYWNrLlxuICAgICAqICAgPGxpPmVycm9yOiBBbiBCYWNrYm9uZS1zdHlsZSBlcnJvciBjYWxsYmFjay5cbiAgICAgKiAgIDxsaT51c2VNYXN0ZXJLZXk6IEluIENsb3VkIENvZGUgYW5kIE5vZGUgb25seSwgdXNlcyB0aGUgTWFzdGVyIEtleSBmb3JcbiAgICAgKiAgICAgICB0aGlzIHJlcXVlc3QuXG4gICAgICogICA8bGk+c2Vzc2lvblRva2VuOiBBIHZhbGlkIHNlc3Npb24gdG9rZW4sIHVzZWQgZm9yIG1ha2luZyBhIHJlcXVlc3Qgb25cbiAgICAgKiAgICAgICBiZWhhbGYgb2YgYSBzcGVjaWZpYyB1c2VyLlxuICAgICAqIDwvdWw+XG4gICAgICovXG4gICAgY3JlYXRlOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgICAgdmFyIGNvbGwgPSB0aGlzO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307XG4gICAgICBtb2RlbCA9IHRoaXMuX3ByZXBhcmVNb2RlbChtb2RlbCwgb3B0aW9ucyk7XG4gICAgICBpZiAoIW1vZGVsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghb3B0aW9ucy53YWl0KSB7XG4gICAgICAgIGNvbGwuYWRkKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24obmV4dE1vZGVsLCByZXNwLCB4aHIpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCkge1xuICAgICAgICAgIGNvbGwuYWRkKG5leHRNb2RlbCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICBzdWNjZXNzKG5leHRNb2RlbCwgcmVzcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dE1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBtb2RlbC5zYXZlKG51bGwsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gYSBsaXN0IG9mIG1vZGVscyB0byBiZSBhZGRlZCB0byB0aGUgY29sbGVjdGlvbi5cbiAgICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgaXQgdGhyb3VnaC5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIHhocikge1xuICAgICAgcmV0dXJuIHJlc3A7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb3h5IHRvIF8ncyBjaGFpbi4gQ2FuJ3QgYmUgcHJveGllZCB0aGUgc2FtZSB3YXkgdGhlIHJlc3Qgb2YgdGhlXG4gICAgICogdW5kZXJzY29yZSBtZXRob2RzIGFyZSBwcm94aWVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIHRoZSB1bmRlcnNjb3JlXG4gICAgICogY29uc3RydWN0b3IuXG4gICAgICovXG4gICAgY2hhaW46IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF8odGhpcy5tb2RlbHMpLmNoYWluKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc2V0IGFsbCBpbnRlcm5hbCBzdGF0ZS4gQ2FsbGVkIHdoZW4gdGhlIGNvbGxlY3Rpb24gaXMgcmVzZXQuXG4gICAgICovXG4gICAgX3Jlc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLm1vZGVscyA9IFtdO1xuICAgICAgdGhpcy5fYnlJZCAgPSB7fTtcbiAgICAgIHRoaXMuX2J5Q2lkID0ge307XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByZXBhcmUgYSBtb2RlbCBvciBoYXNoIG9mIGF0dHJpYnV0ZXMgdG8gYmUgYWRkZWQgdG8gdGhpcyBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIF9wcmVwYXJlTW9kZWw6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIShtb2RlbCBpbnN0YW5jZW9mIFBhcnNlLk9iamVjdCkpIHtcbiAgICAgICAgdmFyIGF0dHJzID0gbW9kZWw7XG4gICAgICAgIG9wdGlvbnMuY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICAgIG1vZGVsID0gbmV3IHRoaXMubW9kZWwoYXR0cnMsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoIW1vZGVsLl92YWxpZGF0ZShtb2RlbC5hdHRyaWJ1dGVzLCBvcHRpb25zKSkge1xuICAgICAgICAgIG1vZGVsID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIW1vZGVsLmNvbGxlY3Rpb24pIHtcbiAgICAgICAgbW9kZWwuY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbW9kZWw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIG1ldGhvZCB0byByZW1vdmUgYSBtb2RlbCdzIHRpZXMgdG8gYSBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIF9yZW1vdmVSZWZlcmVuY2U6IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICBpZiAodGhpcyA9PT0gbW9kZWwuY29sbGVjdGlvbikge1xuICAgICAgICBkZWxldGUgbW9kZWwuY29sbGVjdGlvbjtcbiAgICAgIH1cbiAgICAgIG1vZGVsLm9mZignYWxsJywgdGhpcy5fb25Nb2RlbEV2ZW50LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgbWV0aG9kIGNhbGxlZCBldmVyeSB0aW1lIGEgbW9kZWwgaW4gdGhlIHNldCBmaXJlcyBhbiBldmVudC5cbiAgICAgKiBTZXRzIG5lZWQgdG8gdXBkYXRlIHRoZWlyIGluZGV4ZXMgd2hlbiBtb2RlbHMgY2hhbmdlIGlkcy4gQWxsIG90aGVyXG4gICAgICogZXZlbnRzIHNpbXBseSBwcm94eSB0aHJvdWdoLiBcImFkZFwiIGFuZCBcInJlbW92ZVwiIGV2ZW50cyB0aGF0IG9yaWdpbmF0ZVxuICAgICAqIGluIG90aGVyIGNvbGxlY3Rpb25zIGFyZSBpZ25vcmVkLlxuICAgICAqL1xuICAgIF9vbk1vZGVsRXZlbnQ6IGZ1bmN0aW9uKGV2LCBtb2RlbCwgY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgaWYgKChldiA9PT0gJ2FkZCcgfHwgZXYgPT09ICdyZW1vdmUnKSAmJiBjb2xsZWN0aW9uICE9PSB0aGlzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChldiA9PT0gJ2Rlc3Ryb3knKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGlmIChtb2RlbCAmJiBldiA9PT0gJ2NoYW5nZTpvYmplY3RJZCcpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2J5SWRbbW9kZWwucHJldmlvdXMoXCJvYmplY3RJZFwiKV07XG4gICAgICAgIHRoaXMuX2J5SWRbbW9kZWwuaWRdID0gbW9kZWw7XG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gVW5kZXJzY29yZSBtZXRob2RzIHRoYXQgd2Ugd2FudCB0byBpbXBsZW1lbnQgb24gdGhlIENvbGxlY3Rpb24uXG4gIHZhciBtZXRob2RzID0gWydmb3JFYWNoJywgJ2VhY2gnLCAnbWFwJywgJ3JlZHVjZScsICdyZWR1Y2VSaWdodCcsICdmaW5kJyxcbiAgICAnZGV0ZWN0JywgJ2ZpbHRlcicsICdzZWxlY3QnLCAncmVqZWN0JywgJ2V2ZXJ5JywgJ2FsbCcsICdzb21lJywgJ2FueScsXG4gICAgJ2luY2x1ZGUnLCAnY29udGFpbnMnLCAnaW52b2tlJywgJ21heCcsICdtaW4nLCAnc29ydEJ5JywgJ3NvcnRlZEluZGV4JyxcbiAgICAndG9BcnJheScsICdzaXplJywgJ2ZpcnN0JywgJ2luaXRpYWwnLCAncmVzdCcsICdsYXN0JywgJ3dpdGhvdXQnLCAnaW5kZXhPZicsXG4gICAgJ3NodWZmbGUnLCAnbGFzdEluZGV4T2YnLCAnaXNFbXB0eScsICdncm91cEJ5J107XG5cbiAgLy8gTWl4IGluIGVhY2ggVW5kZXJzY29yZSBtZXRob2QgYXMgYSBwcm94eSB0byBgQ29sbGVjdGlvbiNtb2RlbHNgLlxuICBQYXJzZS5fYXJyYXlFYWNoKG1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIFBhcnNlLkNvbGxlY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfW21ldGhvZF0uYXBwbHkoXywgW3RoaXMubW9kZWxzXS5jb25jYXQoXy50b0FycmF5KGFyZ3VtZW50cykpKTtcbiAgICB9O1xuICB9KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBzdWJjbGFzcyBvZiA8Y29kZT5QYXJzZS5Db2xsZWN0aW9uPC9jb2RlPi4gIEZvciBleGFtcGxlLDxwcmU+XG4gICAqICAgdmFyIE15Q29sbGVjdGlvbiA9IFBhcnNlLkNvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgICogICAgIC8vIEluc3RhbmNlIHByb3BlcnRpZXNcbiAgICpcbiAgICogICAgIG1vZGVsOiBNeUNsYXNzLFxuICAgKiAgICAgcXVlcnk6IE15UXVlcnksXG4gICAqXG4gICAqICAgICBnZXRGaXJzdDogZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIHJldHVybiB0aGlzLmF0KDApO1xuICAgKiAgICAgfVxuICAgKiAgIH0sIHtcbiAgICogICAgIC8vIENsYXNzIHByb3BlcnRpZXNcbiAgICpcbiAgICogICAgIG1ha2VPbmU6IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICByZXR1cm4gbmV3IE15Q29sbGVjdGlvbigpO1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIHZhciBjb2xsZWN0aW9uID0gbmV3IE15Q29sbGVjdGlvbigpO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZVByb3BzIEluc3RhbmNlIHByb3BlcnRpZXMgZm9yIHRoZSBjb2xsZWN0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gY2xhc3NQcm9wcyBDbGFzcyBwcm9wZXJpZXMgZm9yIHRoZSBjb2xsZWN0aW9uLlxuICAgKiBAcmV0dXJuIHtDbGFzc30gQSBuZXcgc3ViY2xhc3Mgb2YgPGNvZGU+UGFyc2UuQ29sbGVjdGlvbjwvY29kZT4uXG4gICAqL1xuICBQYXJzZS5Db2xsZWN0aW9uLmV4dGVuZCA9IFBhcnNlLl9leHRlbmQ7XG5cbn0odGhpcykpO1xuXG4vKmdsb2JhbCBfOiBmYWxzZSwgZG9jdW1lbnQ6IGZhbHNlICovXG4oZnVuY3Rpb24ocm9vdCkge1xuICByb290LlBhcnNlID0gcm9vdC5QYXJzZSB8fCB7fTtcbiAgdmFyIFBhcnNlID0gcm9vdC5QYXJzZTtcbiAgdmFyIF8gPSBQYXJzZS5fO1xuXG4gIC8qKlxuICAgKiBDcmVhdGluZyBhIFBhcnNlLlZpZXcgY3JlYXRlcyBpdHMgaW5pdGlhbCBlbGVtZW50IG91dHNpZGUgb2YgdGhlIERPTSxcbiAgICogaWYgYW4gZXhpc3RpbmcgZWxlbWVudCBpcyBub3QgcHJvdmlkZWQuLi5cbiAgICogQGNsYXNzXG4gICAqXG4gICAqIDxwPkEgZm9yayBvZiBCYWNrYm9uZS5WaWV3LCBwcm92aWRlZCBmb3IgeW91ciBjb252ZW5pZW5jZS4gIElmIHlvdSB1c2UgdGhpc1xuICAgKiBjbGFzcywgeW91IG11c3QgYWxzbyBpbmNsdWRlIGpRdWVyeSwgb3IgYW5vdGhlciBsaWJyYXJ5IHRoYXQgcHJvdmlkZXMgYVxuICAgKiBqUXVlcnktY29tcGF0aWJsZSAkIGZ1bmN0aW9uLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGVcbiAgICogPGEgaHJlZj1cImh0dHA6Ly9kb2N1bWVudGNsb3VkLmdpdGh1Yi5jb20vYmFja2JvbmUvI1ZpZXdcIj5CYWNrYm9uZVxuICAgKiBkb2N1bWVudGF0aW9uPC9hPi48L3A+XG4gICAqIDxwPjxzdHJvbmc+PGVtPkF2YWlsYWJsZSBpbiB0aGUgY2xpZW50IFNESyBvbmx5LjwvZW0+PC9zdHJvbmc+PC9wPlxuICAgKi9cbiAgUGFyc2UuVmlldyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ3ZpZXcnKTtcbiAgICB0aGlzLl9jb25maWd1cmUob3B0aW9ucyB8fCB7fSk7XG4gICAgdGhpcy5fZW5zdXJlRWxlbWVudCgpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgfTtcblxuICAvLyBDYWNoZWQgcmVnZXggdG8gc3BsaXQga2V5cyBmb3IgYGRlbGVnYXRlYC5cbiAgdmFyIGV2ZW50U3BsaXR0ZXIgPSAvXihcXFMrKVxccyooLiopJC87XG5cbiAgLy8gTGlzdCBvZiB2aWV3IG9wdGlvbnMgdG8gYmUgbWVyZ2VkIGFzIHByb3BlcnRpZXMuXG4gIC8vIFRPRE86IGluY2x1ZGUgb2JqZWN0SWQsIGNyZWF0ZWRBdCwgdXBkYXRlZEF0P1xuICB2YXIgdmlld09wdGlvbnMgPSBbJ21vZGVsJywgJ2NvbGxlY3Rpb24nLCAnZWwnLCAnaWQnLCAnYXR0cmlidXRlcycsXG4gICAgICAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJywgJ3RhZ05hbWUnXTtcblxuICAvLyBTZXQgdXAgYWxsIGluaGVyaXRhYmxlICoqUGFyc2UuVmlldyoqIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuXG4gIF8uZXh0ZW5kKFBhcnNlLlZpZXcucHJvdG90eXBlLCBQYXJzZS5FdmVudHMsXG4gICAgICAgICAgIC8qKiBAbGVuZHMgUGFyc2UuVmlldy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLy8gVGhlIGRlZmF1bHQgYHRhZ05hbWVgIG9mIGEgVmlldydzIGVsZW1lbnQgaXMgYFwiZGl2XCJgLlxuICAgIHRhZ05hbWU6ICdkaXYnLFxuXG4gICAgLyoqXG4gICAgICogalF1ZXJ5IGRlbGVnYXRlIGZvciBlbGVtZW50IGxvb2t1cCwgc2NvcGVkIHRvIERPTSBlbGVtZW50cyB3aXRoaW4gdGhlXG4gICAgICogY3VycmVudCB2aWV3LiBUaGlzIHNob3VsZCBiZSBwcmVmZXJlZCB0byBnbG9iYWwgbG9va3VwcyB3aGVyZSBwb3NzaWJsZS5cbiAgICAgKi9cbiAgICAkOiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoc2VsZWN0b3IpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd25cbiAgICAgKiBpbml0aWFsaXphdGlvbiBsb2dpYy5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29yZSBmdW5jdGlvbiB0aGF0IHlvdXIgdmlldyBzaG91bGQgb3ZlcnJpZGUsIGluIG9yZGVyXG4gICAgICogdG8gcG9wdWxhdGUgaXRzIGVsZW1lbnQgKGB0aGlzLmVsYCksIHdpdGggdGhlIGFwcHJvcHJpYXRlIEhUTUwuIFRoZVxuICAgICAqIGNvbnZlbnRpb24gaXMgZm9yICoqcmVuZGVyKiogdG8gYWx3YXlzIHJldHVybiBgdGhpc2AuXG4gICAgICovXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhpcyB2aWV3IGZyb20gdGhlIERPTS4gTm90ZSB0aGF0IHRoZSB2aWV3IGlzbid0IHByZXNlbnQgaW4gdGhlXG4gICAgICogRE9NIGJ5IGRlZmF1bHQsIHNvIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IGJlIGEgbm8tb3AuXG4gICAgICovXG4gICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZSgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZvciBzbWFsbCBhbW91bnRzIG9mIERPTSBFbGVtZW50cywgd2hlcmUgYSBmdWxsLWJsb3duIHRlbXBsYXRlIGlzbid0XG4gICAgICogbmVlZGVkLCB1c2UgKiptYWtlKiogdG8gbWFudWZhY3R1cmUgZWxlbWVudHMsIG9uZSBhdCBhIHRpbWUuXG4gICAgICogPHByZT5cbiAgICAgKiAgICAgdmFyIGVsID0gdGhpcy5tYWtlKCdsaScsIHsnY2xhc3MnOiAncm93J30sXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmVzY2FwZSgndGl0bGUnKSk7PC9wcmU+XG4gICAgICovXG4gICAgbWFrZTogZnVuY3Rpb24odGFnTmFtZSwgYXR0cmlidXRlcywgY29udGVudCkge1xuICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgICAgIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgIFBhcnNlLiQoZWwpLmF0dHIoYXR0cmlidXRlcyk7XG4gICAgICB9XG4gICAgICBpZiAoY29udGVudCkge1xuICAgICAgICBQYXJzZS4kKGVsKS5odG1sKGNvbnRlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSB2aWV3J3MgZWxlbWVudCAoYHRoaXMuZWxgIHByb3BlcnR5KSwgaW5jbHVkaW5nIGV2ZW50XG4gICAgICogcmUtZGVsZWdhdGlvbi5cbiAgICAgKi9cbiAgICBzZXRFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBkZWxlZ2F0ZSkge1xuICAgICAgdGhpcy4kZWwgPSBQYXJzZS4kKGVsZW1lbnQpO1xuICAgICAgdGhpcy5lbCA9IHRoaXMuJGVsWzBdO1xuICAgICAgaWYgKGRlbGVnYXRlICE9PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IGNhbGxiYWNrcy4gIDxjb2RlPnRoaXMuZXZlbnRzPC9jb2RlPiBpcyBhIGhhc2ggb2ZcbiAgICAgKiA8cHJlPlxuICAgICAqICp7XCJldmVudCBzZWxlY3RvclwiOiBcImNhbGxiYWNrXCJ9KlxuICAgICAqXG4gICAgICogICAgIHtcbiAgICAgKiAgICAgICAnbW91c2Vkb3duIC50aXRsZSc6ICAnZWRpdCcsXG4gICAgICogICAgICAgJ2NsaWNrIC5idXR0b24nOiAgICAgJ3NhdmUnXG4gICAgICogICAgICAgJ2NsaWNrIC5vcGVuJzogICAgICAgZnVuY3Rpb24oZSkgeyAuLi4gfVxuICAgICAqICAgICB9XG4gICAgICogPC9wcmU+XG4gICAgICogcGFpcnMuIENhbGxiYWNrcyB3aWxsIGJlIGJvdW5kIHRvIHRoZSB2aWV3LCB3aXRoIGB0aGlzYCBzZXQgcHJvcGVybHkuXG4gICAgICogVXNlcyBldmVudCBkZWxlZ2F0aW9uIGZvciBlZmZpY2llbmN5LlxuICAgICAqIE9taXR0aW5nIHRoZSBzZWxlY3RvciBiaW5kcyB0aGUgZXZlbnQgdG8gYHRoaXMuZWxgLlxuICAgICAqIFRoaXMgb25seSB3b3JrcyBmb3IgZGVsZWdhdGUtYWJsZSBldmVudHM6IG5vdCBgZm9jdXNgLCBgYmx1cmAsIGFuZFxuICAgICAqIG5vdCBgY2hhbmdlYCwgYHN1Ym1pdGAsIGFuZCBgcmVzZXRgIGluIEludGVybmV0IEV4cGxvcmVyLlxuICAgICAqL1xuICAgIGRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbihldmVudHMpIHtcbiAgICAgIGV2ZW50cyA9IGV2ZW50cyB8fCBQYXJzZS5fZ2V0VmFsdWUodGhpcywgJ2V2ZW50cycpO1xuICAgICAgaWYgKCFldmVudHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBQYXJzZS5fb2JqZWN0RWFjaChldmVudHMsIGZ1bmN0aW9uKG1ldGhvZCwga2V5KSB7XG4gICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKG1ldGhvZCkpIHtcbiAgICAgICAgICBtZXRob2QgPSBzZWxmW2V2ZW50c1trZXldXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgXCInICsgZXZlbnRzW2tleV0gKyAnXCIgZG9lcyBub3QgZXhpc3QnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF0Y2ggPSBrZXkubWF0Y2goZXZlbnRTcGxpdHRlcik7XG4gICAgICAgIHZhciBldmVudE5hbWUgPSBtYXRjaFsxXSwgc2VsZWN0b3IgPSBtYXRjaFsyXTtcbiAgICAgICAgbWV0aG9kID0gXy5iaW5kKG1ldGhvZCwgc2VsZik7XG4gICAgICAgIGV2ZW50TmFtZSArPSAnLmRlbGVnYXRlRXZlbnRzJyArIHNlbGYuY2lkO1xuICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICcnKSB7XG4gICAgICAgICAgc2VsZi4kZWwuYmluZChldmVudE5hbWUsIG1ldGhvZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi4kZWwuZGVsZWdhdGUoc2VsZWN0b3IsIGV2ZW50TmFtZSwgbWV0aG9kKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgY2FsbGJhY2tzIHByZXZpb3VzbHkgYm91bmQgdG8gdGhlIHZpZXcgd2l0aCBgZGVsZWdhdGVFdmVudHNgLlxuICAgICAqIFlvdSB1c3VhbGx5IGRvbid0IG5lZWQgdG8gdXNlIHRoaXMsIGJ1dCBtYXkgd2lzaCB0byBpZiB5b3UgaGF2ZSBtdWx0aXBsZVxuICAgICAqIEJhY2tib25lIHZpZXdzIGF0dGFjaGVkIHRvIHRoZSBzYW1lIERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIHVuZGVsZWdhdGVFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kZWwudW5iaW5kKCcuZGVsZWdhdGVFdmVudHMnICsgdGhpcy5jaWQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uIG9mIGEgVmlldyB3aXRoIGEgc2V0IG9mIG9wdGlvbnMuXG4gICAgICogS2V5cyB3aXRoIHNwZWNpYWwgbWVhbmluZyAqKG1vZGVsLCBjb2xsZWN0aW9uLCBpZCwgY2xhc3NOYW1lKSosIGFyZVxuICAgICAqIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIF9jb25maWd1cmU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgXy5lYWNoKHZpZXdPcHRpb25zLCBmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgIGlmIChvcHRpb25zW2F0dHJdKSB7XG4gICAgICAgICAgc2VsZlthdHRyXSA9IG9wdGlvbnNbYXR0cl07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRW5zdXJlIHRoYXQgdGhlIFZpZXcgaGFzIGEgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uXG4gICAgICogSWYgYHRoaXMuZWxgIGlzIGEgc3RyaW5nLCBwYXNzIGl0IHRocm91Z2ggYCQoKWAsIHRha2UgdGhlIGZpcnN0XG4gICAgICogbWF0Y2hpbmcgZWxlbWVudCwgYW5kIHJlLWFzc2lnbiBpdCB0byBgZWxgLiBPdGhlcndpc2UsIGNyZWF0ZVxuICAgICAqIGFuIGVsZW1lbnQgZnJvbSB0aGUgYGlkYCwgYGNsYXNzTmFtZWAgYW5kIGB0YWdOYW1lYCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIF9lbnN1cmVFbGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5lbCkge1xuICAgICAgICB2YXIgYXR0cnMgPSBQYXJzZS5fZ2V0VmFsdWUodGhpcywgJ2F0dHJpYnV0ZXMnKSB8fCB7fTtcbiAgICAgICAgaWYgKHRoaXMuaWQpIHtcbiAgICAgICAgICBhdHRycy5pZCA9IHRoaXMuaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgYXR0cnNbJ2NsYXNzJ10gPSB0aGlzLmNsYXNzTmFtZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEVsZW1lbnQodGhpcy5tYWtlKHRoaXMudGFnTmFtZSwgYXR0cnMpLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQodGhpcy5lbCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICB9KTtcblxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZVByb3BzIEluc3RhbmNlIHByb3BlcnRpZXMgZm9yIHRoZSB2aWV3LlxuICAgKiBAcGFyYW0ge09iamVjdH0gY2xhc3NQcm9wcyBDbGFzcyBwcm9wZXJpZXMgZm9yIHRoZSB2aWV3LlxuICAgKiBAcmV0dXJuIHtDbGFzc30gQSBuZXcgc3ViY2xhc3Mgb2YgPGNvZGU+UGFyc2UuVmlldzwvY29kZT4uXG4gICAqL1xuICBQYXJzZS5WaWV3LmV4dGVuZCA9IFBhcnNlLl9leHRlbmQ7XG5cbn0odGhpcykpO1xuXG4oZnVuY3Rpb24ocm9vdCkge1xuICByb290LlBhcnNlID0gcm9vdC5QYXJzZSB8fCB7fTtcbiAgdmFyIFBhcnNlID0gcm9vdC5QYXJzZTtcbiAgdmFyIF8gPSBQYXJzZS5fO1xuXG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICpcbiAgICogPHA+QSBQYXJzZS5Vc2VyIG9iamVjdCBpcyBhIGxvY2FsIHJlcHJlc2VudGF0aW9uIG9mIGEgdXNlciBwZXJzaXN0ZWQgdG8gdGhlXG4gICAqIFBhcnNlIGNsb3VkLiBUaGlzIGNsYXNzIGlzIGEgc3ViY2xhc3Mgb2YgYSBQYXJzZS5PYmplY3QsIGFuZCByZXRhaW5zIHRoZVxuICAgKiBzYW1lIGZ1bmN0aW9uYWxpdHkgb2YgYSBQYXJzZS5PYmplY3QsIGJ1dCBhbHNvIGV4dGVuZHMgaXQgd2l0aCB2YXJpb3VzXG4gICAqIHVzZXIgc3BlY2lmaWMgbWV0aG9kcywgbGlrZSBhdXRoZW50aWNhdGlvbiwgc2lnbmluZyB1cCwgYW5kIHZhbGlkYXRpb24gb2ZcbiAgICogdW5pcXVlbmVzcy48L3A+XG4gICAqL1xuICBQYXJzZS5Vc2VyID0gUGFyc2UuT2JqZWN0LmV4dGVuZChcIl9Vc2VyXCIsIC8qKiBAbGVuZHMgUGFyc2UuVXNlci5wcm90b3R5cGUgKi8ge1xuICAgIC8vIEluc3RhbmNlIFZhcmlhYmxlc1xuICAgIF9pc0N1cnJlbnRVc2VyOiBmYWxzZSxcblxuXG4gICAgLy8gSW5zdGFuY2UgTWV0aG9kc1xuICAgIFxuICAgIC8qKlxuICAgICAqIE1lcmdlcyBhbm90aGVyIG9iamVjdCdzIGF0dHJpYnV0ZXMgaW50byB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICBfbWVyZ2VGcm9tT2JqZWN0OiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgaWYgKG90aGVyLmdldFNlc3Npb25Ub2tlbigpKSB7XG4gICAgICAgIHRoaXMuX3Nlc3Npb25Ub2tlbiA9IG90aGVyLmdldFNlc3Npb25Ub2tlbigpOyAgICAgIFxuICAgICAgfSAgICBcbiAgICAgIFBhcnNlLlVzZXIuX19zdXBlcl9fLl9tZXJnZUZyb21PYmplY3QuY2FsbCh0aGlzLCBvdGhlcik7XG4gICAgfSwgICAgXG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBtZXRob2QgdG8gaGFuZGxlIHNwZWNpYWwgZmllbGRzIGluIGEgX1VzZXIgcmVzcG9uc2UuXG4gICAgICovXG4gICAgX21lcmdlTWFnaWNGaWVsZHM6IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgICBpZiAoYXR0cnMuc2Vzc2lvblRva2VuKSB7XG4gICAgICAgIHRoaXMuX3Nlc3Npb25Ub2tlbiA9IGF0dHJzLnNlc3Npb25Ub2tlbjtcbiAgICAgICAgZGVsZXRlIGF0dHJzLnNlc3Npb25Ub2tlbjtcbiAgICAgIH1cbiAgICAgIFBhcnNlLlVzZXIuX19zdXBlcl9fLl9tZXJnZU1hZ2ljRmllbGRzLmNhbGwodGhpcywgYXR0cnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIG51bGwgdmFsdWVzIGZyb20gYXV0aERhdGEgKHdoaWNoIGV4aXN0IHRlbXBvcmFyaWx5IGZvclxuICAgICAqIHVubGlua2luZylcbiAgICAgKi9cbiAgICBfY2xlYW51cEF1dGhEYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5pc0N1cnJlbnQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYXV0aERhdGEgPSB0aGlzLmdldCgnYXV0aERhdGEnKTtcbiAgICAgIGlmICghYXV0aERhdGEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgUGFyc2UuX29iamVjdEVhY2godGhpcy5nZXQoJ2F1dGhEYXRhJyksIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKCFhdXRoRGF0YVtrZXldKSB7XG4gICAgICAgICAgZGVsZXRlIGF1dGhEYXRhW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTeW5jaHJvbml6ZXMgYXV0aERhdGEgZm9yIGFsbCBwcm92aWRlcnMuXG4gICAgICovXG4gICAgX3N5bmNocm9uaXplQWxsQXV0aERhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGF1dGhEYXRhID0gdGhpcy5nZXQoJ2F1dGhEYXRhJyk7XG4gICAgICBpZiAoIWF1dGhEYXRhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgUGFyc2UuX29iamVjdEVhY2godGhpcy5nZXQoJ2F1dGhEYXRhJyksIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgc2VsZi5fc3luY2hyb25pemVBdXRoRGF0YShrZXkpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN5bmNocm9uaXplcyBhdXRoIGRhdGEgZm9yIGEgcHJvdmlkZXIgKGUuZy4gcHV0cyB0aGUgYWNjZXNzIHRva2VuIGluIHRoZVxuICAgICAqIHJpZ2h0IHBsYWNlIHRvIGJlIHVzZWQgYnkgdGhlIEZhY2Vib29rIFNESykuXG4gICAgICovXG4gICAgX3N5bmNocm9uaXplQXV0aERhdGE6IGZ1bmN0aW9uKHByb3ZpZGVyKSB7XG4gICAgICBpZiAoIXRoaXMuaXNDdXJyZW50KCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGF1dGhUeXBlO1xuICAgICAgaWYgKF8uaXNTdHJpbmcocHJvdmlkZXIpKSB7XG4gICAgICAgIGF1dGhUeXBlID0gcHJvdmlkZXI7XG4gICAgICAgIHByb3ZpZGVyID0gUGFyc2UuVXNlci5fYXV0aFByb3ZpZGVyc1thdXRoVHlwZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdXRoVHlwZSA9IHByb3ZpZGVyLmdldEF1dGhUeXBlKCk7XG4gICAgICB9XG4gICAgICB2YXIgYXV0aERhdGEgPSB0aGlzLmdldCgnYXV0aERhdGEnKTtcbiAgICAgIGlmICghYXV0aERhdGEgfHwgIXByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBzdWNjZXNzID0gcHJvdmlkZXIucmVzdG9yZUF1dGhlbnRpY2F0aW9uKGF1dGhEYXRhW2F1dGhUeXBlXSk7XG4gICAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgICAgdGhpcy5fdW5saW5rRnJvbShwcm92aWRlcik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9oYW5kbGVTYXZlUmVzdWx0OiBmdW5jdGlvbihtYWtlQ3VycmVudCkge1xuICAgICAgLy8gQ2xlYW4gdXAgYW5kIHN5bmNocm9uaXplIHRoZSBhdXRoRGF0YSBvYmplY3QsIHJlbW92aW5nIGFueSB1bnNldCB2YWx1ZXNcbiAgICAgIGlmIChtYWtlQ3VycmVudCkge1xuICAgICAgICB0aGlzLl9pc0N1cnJlbnRVc2VyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NsZWFudXBBdXRoRGF0YSgpO1xuICAgICAgdGhpcy5fc3luY2hyb25pemVBbGxBdXRoRGF0YSgpO1xuICAgICAgLy8gRG9uJ3Qga2VlcCB0aGUgcGFzc3dvcmQgYXJvdW5kLlxuICAgICAgZGVsZXRlIHRoaXMuX3NlcnZlckRhdGEucGFzc3dvcmQ7XG4gICAgICB0aGlzLl9yZWJ1aWxkRXN0aW1hdGVkRGF0YUZvcktleShcInBhc3N3b3JkXCIpO1xuICAgICAgdGhpcy5fcmVmcmVzaENhY2hlKCk7XG4gICAgICBpZiAobWFrZUN1cnJlbnQgfHwgdGhpcy5pc0N1cnJlbnQoKSkge1xuICAgICAgICBQYXJzZS5Vc2VyLl9zYXZlQ3VycmVudFVzZXIodGhpcyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubGlrZSBpbiB0aGUgQW5kcm9pZC9pT1MgU0RLcywgbG9nSW5XaXRoIGlzIHVubmVjZXNzYXJ5LCBzaW5jZSB5b3UgY2FuXG4gICAgICogY2FsbCBsaW5rV2l0aCBvbiB0aGUgdXNlciAoZXZlbiBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldCBvbiB0aGUgc2VydmVyKS5cbiAgICAgKi9cbiAgICBfbGlua1dpdGg6IGZ1bmN0aW9uKHByb3ZpZGVyLCBvcHRpb25zKSB7XG4gICAgICB2YXIgYXV0aFR5cGU7XG4gICAgICBpZiAoXy5pc1N0cmluZyhwcm92aWRlcikpIHtcbiAgICAgICAgYXV0aFR5cGUgPSBwcm92aWRlcjtcbiAgICAgICAgcHJvdmlkZXIgPSBQYXJzZS5Vc2VyLl9hdXRoUHJvdmlkZXJzW3Byb3ZpZGVyXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF1dGhUeXBlID0gcHJvdmlkZXIuZ2V0QXV0aFR5cGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChfLmhhcyhvcHRpb25zLCAnYXV0aERhdGEnKSkge1xuICAgICAgICB2YXIgYXV0aERhdGEgPSB0aGlzLmdldCgnYXV0aERhdGEnKSB8fCB7fTtcbiAgICAgICAgYXV0aERhdGFbYXV0aFR5cGVdID0gb3B0aW9ucy5hdXRoRGF0YTtcbiAgICAgICAgdGhpcy5zZXQoJ2F1dGhEYXRhJywgYXV0aERhdGEpO1xuXG4gICAgICAgIC8vIE92ZXJyaWRkZW4gc28gdGhhdCB0aGUgdXNlciBjYW4gYmUgbWFkZSB0aGUgY3VycmVudCB1c2VyLlxuICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IF8uY2xvbmUob3B0aW9ucykgfHwge307XG4gICAgICAgIG5ld09wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICAgICAgbW9kZWwuX2hhbmRsZVNhdmVSZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuc3VjY2Vzcykge1xuICAgICAgICAgICAgb3B0aW9ucy5zdWNjZXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5zYXZlKHsnYXV0aERhdGEnOiBhdXRoRGF0YX0sIG5ld09wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQYXJzZS5Qcm9taXNlKCk7XG4gICAgICAgIHByb3ZpZGVyLmF1dGhlbnRpY2F0ZSh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocHJvdmlkZXIsIHJlc3VsdCkge1xuICAgICAgICAgICAgc2VsZi5fbGlua1dpdGgocHJvdmlkZXIsIHtcbiAgICAgICAgICAgICAgYXV0aERhdGE6IHJlc3VsdCxcbiAgICAgICAgICAgICAgc3VjY2Vzczogb3B0aW9ucy5zdWNjZXNzLFxuICAgICAgICAgICAgICBlcnJvcjogb3B0aW9ucy5lcnJvclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHNlbGYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24ocHJvdmlkZXIsIGVycm9yKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5lcnJvcikge1xuICAgICAgICAgICAgICBvcHRpb25zLmVycm9yKHNlbGYsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5saW5rcyBhIHVzZXIgZnJvbSBhIHNlcnZpY2UuXG4gICAgICovXG4gICAgX3VubGlua0Zyb206IGZ1bmN0aW9uKHByb3ZpZGVyLCBvcHRpb25zKSB7XG4gICAgICB2YXIgYXV0aFR5cGU7XG4gICAgICBpZiAoXy5pc1N0cmluZyhwcm92aWRlcikpIHtcbiAgICAgICAgYXV0aFR5cGUgPSBwcm92aWRlcjtcbiAgICAgICAgcHJvdmlkZXIgPSBQYXJzZS5Vc2VyLl9hdXRoUHJvdmlkZXJzW3Byb3ZpZGVyXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF1dGhUeXBlID0gcHJvdmlkZXIuZ2V0QXV0aFR5cGUoKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdPcHRpb25zID0gXy5jbG9uZShvcHRpb25zKTtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIG5ld09wdGlvbnMuYXV0aERhdGEgPSBudWxsO1xuICAgICAgbmV3T3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgc2VsZi5fc3luY2hyb25pemVBdXRoRGF0YShwcm92aWRlcik7XG4gICAgICAgIGlmIChvcHRpb25zLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiB0aGlzLl9saW5rV2l0aChwcm92aWRlciwgbmV3T3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIGEgdXNlciBpcyBsaW5rZWQgdG8gYSBzZXJ2aWNlLlxuICAgICAqL1xuICAgIF9pc0xpbmtlZDogZnVuY3Rpb24ocHJvdmlkZXIpIHtcbiAgICAgIHZhciBhdXRoVHlwZTtcbiAgICAgIGlmIChfLmlzU3RyaW5nKHByb3ZpZGVyKSkge1xuICAgICAgICBhdXRoVHlwZSA9IHByb3ZpZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXV0aFR5cGUgPSBwcm92aWRlci5nZXRBdXRoVHlwZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGF1dGhEYXRhID0gdGhpcy5nZXQoJ2F1dGhEYXRhJykgfHwge307XG4gICAgICByZXR1cm4gISFhdXRoRGF0YVthdXRoVHlwZV07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlYXV0aGVudGljYXRlcyBhbGwgcHJvdmlkZXJzLlxuICAgICAqL1xuICAgIF9sb2dPdXRXaXRoQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhdXRoRGF0YSA9IHRoaXMuZ2V0KCdhdXRoRGF0YScpO1xuICAgICAgaWYgKCFhdXRoRGF0YSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBQYXJzZS5fb2JqZWN0RWFjaCh0aGlzLmdldCgnYXV0aERhdGEnKSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBzZWxmLl9sb2dPdXRXaXRoKGtleSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVhdXRoZW50aWNhdGVzIGEgc2luZ2xlIHByb3ZpZGVyIChlLmcuIHJlbW92aW5nIGFjY2VzcyB0b2tlbnMgZnJvbSB0aGVcbiAgICAgKiBGYWNlYm9vayBTREspLlxuICAgICAqL1xuICAgIF9sb2dPdXRXaXRoOiBmdW5jdGlvbihwcm92aWRlcikge1xuICAgICAgaWYgKCF0aGlzLmlzQ3VycmVudCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChfLmlzU3RyaW5nKHByb3ZpZGVyKSkge1xuICAgICAgICBwcm92aWRlciA9IFBhcnNlLlVzZXIuX2F1dGhQcm92aWRlcnNbcHJvdmlkZXJdO1xuICAgICAgfVxuICAgICAgaWYgKHByb3ZpZGVyICYmIHByb3ZpZGVyLmRlYXV0aGVudGljYXRlKSB7XG4gICAgICAgIHByb3ZpZGVyLmRlYXV0aGVudGljYXRlKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNpZ25zIHVwIGEgbmV3IHVzZXIuIFlvdSBzaG91bGQgY2FsbCB0aGlzIGluc3RlYWQgb2Ygc2F2ZSBmb3JcbiAgICAgKiBuZXcgUGFyc2UuVXNlcnMuIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgUGFyc2UuVXNlciBvbiB0aGUgc2VydmVyLCBhbmRcbiAgICAgKiBhbHNvIHBlcnNpc3QgdGhlIHNlc3Npb24gb24gZGlzayBzbyB0aGF0IHlvdSBjYW4gYWNjZXNzIHRoZSB1c2VyIHVzaW5nXG4gICAgICogPGNvZGU+Y3VycmVudDwvY29kZT4uXG4gICAgICpcbiAgICAgKiA8cD5BIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBtdXN0IGJlIHNldCBiZWZvcmUgY2FsbGluZyBzaWduVXAuPC9wPlxuICAgICAqXG4gICAgICogPHA+Q2FsbHMgb3B0aW9ucy5zdWNjZXNzIG9yIG9wdGlvbnMuZXJyb3Igb24gY29tcGxldGlvbi48L3A+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXR0cnMgRXh0cmEgZmllbGRzIHRvIHNldCBvbiB0aGUgbmV3IHVzZXIsIG9yIG51bGwuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQSBCYWNrYm9uZS1zdHlsZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5Qcm9taXNlfSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiB0aGUgc2lnbnVwXG4gICAgICogICAgIGZpbmlzaGVzLlxuICAgICAqIEBzZWUgUGFyc2UuVXNlci5zaWduVXBcbiAgICAgKi9cbiAgICBzaWduVXA6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7XG4gICAgICB2YXIgZXJyb3I7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgdmFyIHVzZXJuYW1lID0gKGF0dHJzICYmIGF0dHJzLnVzZXJuYW1lKSB8fCB0aGlzLmdldChcInVzZXJuYW1lXCIpO1xuICAgICAgaWYgKCF1c2VybmFtZSB8fCAodXNlcm5hbWUgPT09IFwiXCIpKSB7XG4gICAgICAgIGVycm9yID0gbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICAgICAgUGFyc2UuRXJyb3IuT1RIRVJfQ0FVU0UsXG4gICAgICAgICAgICBcIkNhbm5vdCBzaWduIHVwIHVzZXIgd2l0aCBhbiBlbXB0eSBuYW1lLlwiKTtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5lcnJvcikge1xuICAgICAgICAgIG9wdGlvbnMuZXJyb3IodGhpcywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhc3N3b3JkID0gKGF0dHJzICYmIGF0dHJzLnBhc3N3b3JkKSB8fCB0aGlzLmdldChcInBhc3N3b3JkXCIpO1xuICAgICAgaWYgKCFwYXNzd29yZCB8fCAocGFzc3dvcmQgPT09IFwiXCIpKSB7XG4gICAgICAgIGVycm9yID0gbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICAgICAgUGFyc2UuRXJyb3IuT1RIRVJfQ0FVU0UsXG4gICAgICAgICAgICBcIkNhbm5vdCBzaWduIHVwIHVzZXIgd2l0aCBhbiBlbXB0eSBwYXNzd29yZC5cIik7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZXJyb3IpIHtcbiAgICAgICAgICBvcHRpb25zLmVycm9yKHRoaXMsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5lcnJvcihlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIE92ZXJyaWRkZW4gc28gdGhhdCB0aGUgdXNlciBjYW4gYmUgbWFkZSB0aGUgY3VycmVudCB1c2VyLlxuICAgICAgdmFyIG5ld09wdGlvbnMgPSBfLmNsb25lKG9wdGlvbnMpO1xuICAgICAgbmV3T3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgbW9kZWwuX2hhbmRsZVNhdmVSZXN1bHQoUGFyc2UuVXNlci5fY2FuVXNlQ3VycmVudFVzZXIoKSk7XG4gICAgICAgIGlmIChvcHRpb25zLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiB0aGlzLnNhdmUoYXR0cnMsIG5ld09wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGluIGEgUGFyc2UuVXNlci4gT24gc3VjY2VzcywgdGhpcyBzYXZlcyB0aGUgc2Vzc2lvbiB0byBsb2NhbFN0b3JhZ2UsXG4gICAgICogc28geW91IGNhbiByZXRyaWV2ZSB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyIHVzaW5nXG4gICAgICogPGNvZGU+Y3VycmVudDwvY29kZT4uXG4gICAgICpcbiAgICAgKiA8cD5BIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBtdXN0IGJlIHNldCBiZWZvcmUgY2FsbGluZyBsb2dJbi48L3A+XG4gICAgICpcbiAgICAgKiA8cD5DYWxscyBvcHRpb25zLnN1Y2Nlc3Mgb3Igb3B0aW9ucy5lcnJvciBvbiBjb21wbGV0aW9uLjwvcD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHNlZSBQYXJzZS5Vc2VyLmxvZ0luXG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggdGhlIHVzZXIgd2hlblxuICAgICAqICAgICB0aGUgbG9naW4gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgbG9nSW46IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICghUGFyc2UuVXNlci5fY2FuVXNlQ3VycmVudFVzZXIoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0l0IGlzIG5vdCBwb3NzaWJsZSB0byBsb2cgaW4gb24gYSBzZXJ2ZXIgZW52aXJvbm1lbnQuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdmFyIG1vZGVsID0gdGhpcztcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdmFyIHJlcXVlc3QgPSBQYXJzZS5fcmVxdWVzdCh7XG4gICAgICAgIHJvdXRlOiBcImxvZ2luXCIsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgdXNlTWFzdGVyS2V5OiBvcHRpb25zLnVzZU1hc3RlcktleSxcbiAgICAgICAgZGF0YTogdGhpcy50b0pTT04oKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVxdWVzdC50aGVuKGZ1bmN0aW9uKHJlc3AsIHN0YXR1cywgeGhyKSB7XG4gICAgICAgIHZhciBzZXJ2ZXJBdHRycyA9IG1vZGVsLnBhcnNlKHJlc3AsIHN0YXR1cywgeGhyKTtcbiAgICAgICAgbW9kZWwuX2ZpbmlzaEZldGNoKHNlcnZlckF0dHJzKTtcbiAgICAgICAgbW9kZWwuX2hhbmRsZVNhdmVSZXN1bHQodHJ1ZSk7XG4gICAgICAgIHJldHVybiBtb2RlbDtcbiAgICAgIH0pLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMsIHRoaXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAc2VlIFBhcnNlLk9iamVjdCNzYXZlXG4gICAgICovXG4gICAgc2F2ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgdmFyIGksIGF0dHJzLCBjdXJyZW50LCBvcHRpb25zLCBzYXZlZDtcbiAgICAgIGlmIChfLmlzT2JqZWN0KGFyZzEpIHx8IF8uaXNOdWxsKGFyZzEpIHx8IF8uaXNVbmRlZmluZWQoYXJnMSkpIHtcbiAgICAgICAgYXR0cnMgPSBhcmcxO1xuICAgICAgICBvcHRpb25zID0gYXJnMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJzID0ge307XG4gICAgICAgIGF0dHJzW2FyZzFdID0gYXJnMjtcbiAgICAgICAgb3B0aW9ucyA9IGFyZzM7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgdmFyIG5ld09wdGlvbnMgPSBfLmNsb25lKG9wdGlvbnMpO1xuICAgICAgbmV3T3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgbW9kZWwuX2hhbmRsZVNhdmVSZXN1bHQoZmFsc2UpO1xuICAgICAgICBpZiAob3B0aW9ucy5zdWNjZXNzKSB7XG4gICAgICAgICAgb3B0aW9ucy5zdWNjZXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gUGFyc2UuT2JqZWN0LnByb3RvdHlwZS5zYXZlLmNhbGwodGhpcywgYXR0cnMsIG5ld09wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAc2VlIFBhcnNlLk9iamVjdCNmZXRjaFxuICAgICAqL1xuICAgIGZldGNoOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307XG4gICAgICBuZXdPcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICBtb2RlbC5faGFuZGxlU2F2ZVJlc3VsdChmYWxzZSk7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc3VjY2Vzcykge1xuICAgICAgICAgIG9wdGlvbnMuc3VjY2Vzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFBhcnNlLk9iamVjdC5wcm90b3R5cGUuZmV0Y2guY2FsbCh0aGlzLCBuZXdPcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIDxjb2RlPmN1cnJlbnQ8L2NvZGU+IHdvdWxkIHJldHVybiB0aGlzIHVzZXIuXG4gICAgICogQHNlZSBQYXJzZS5Vc2VyI2N1cnJlbnRcbiAgICAgKi9cbiAgICBpc0N1cnJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzQ3VycmVudFVzZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgZ2V0KFwidXNlcm5hbWVcIikuXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqIEBzZWUgUGFyc2UuT2JqZWN0I2dldFxuICAgICAqL1xuICAgIGdldFVzZXJuYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChcInVzZXJuYW1lXCIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxscyBzZXQoXCJ1c2VybmFtZVwiLCB1c2VybmFtZSwgb3B0aW9ucykgYW5kIHJldHVybnMgdGhlIHJlc3VsdC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXNlcm5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBIEJhY2tib25lLXN0eWxlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICogQHNlZSBQYXJzZS5PYmplY3Quc2V0XG4gICAgICovXG4gICAgc2V0VXNlcm5hbWU6IGZ1bmN0aW9uKHVzZXJuYW1lLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoXCJ1c2VybmFtZVwiLCB1c2VybmFtZSwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGxzIHNldChcInBhc3N3b3JkXCIsIHBhc3N3b3JkLCBvcHRpb25zKSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXNzd29yZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKiBAc2VlIFBhcnNlLk9iamVjdC5zZXRcbiAgICAgKi9cbiAgICBzZXRQYXNzd29yZDogZnVuY3Rpb24ocGFzc3dvcmQsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldChcInBhc3N3b3JkXCIsIHBhc3N3b3JkLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBnZXQoXCJlbWFpbFwiKS5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICogQHNlZSBQYXJzZS5PYmplY3QjZ2V0XG4gICAgICovXG4gICAgZ2V0RW1haWw6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KFwiZW1haWxcIik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGxzIHNldChcImVtYWlsXCIsIGVtYWlsLCBvcHRpb25zKSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBlbWFpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKiBAc2VlIFBhcnNlLk9iamVjdC5zZXRcbiAgICAgKi9cbiAgICBzZXRFbWFpbDogZnVuY3Rpb24oZW1haWwsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldChcImVtYWlsXCIsIGVtYWlsLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhpcyB1c2VyIGlzIHRoZSBjdXJyZW50IHVzZXIgYW5kIGhhcyBiZWVuIGF1dGhlbnRpY2F0ZWQuXG4gICAgICogQHJldHVybiAoQm9vbGVhbikgd2hldGhlciB0aGlzIHVzZXIgaXMgdGhlIGN1cnJlbnQgdXNlciBhbmQgaXMgbG9nZ2VkIGluLlxuICAgICAqL1xuICAgIGF1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5fc2Vzc2lvblRva2VuICYmXG4gICAgICAgICAgKFBhcnNlLlVzZXIuY3VycmVudCgpICYmIFBhcnNlLlVzZXIuY3VycmVudCgpLmlkID09PSB0aGlzLmlkKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2Vzc2lvbiB0b2tlbiBmb3IgdGhpcyB1c2VyLCBpZiB0aGUgdXNlciBoYXMgYmVlbiBsb2dnZWQgaW4sXG4gICAgICogb3IgaWYgaXQgaXMgdGhlIHJlc3VsdCBvZiBhIHF1ZXJ5IHdpdGggdGhlIG1hc3RlciBrZXkuIE90aGVyd2lzZSwgcmV0dXJuc1xuICAgICAqIHVuZGVmaW5lZC5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBzZXNzaW9uIHRva2VuLCBvciB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBnZXRTZXNzaW9uVG9rZW46IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb25Ub2tlbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBhIHJldm9jYWJsZSBzZXNzaW9uIHRva2VuIHRvIHJlcGxhY2UgdGhlIG9sZGVyIHN0eWxlIG9mIHRva2VuLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5Qcm9taXNlfSBBIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIHRoZSByZXBsYWNlbWVudFxuICAgICAqICAgdG9rZW4gaGFzIGJlZW4gZmV0Y2hlZC5cbiAgICAgKi9cbiAgICBfdXBncmFkZVRvUmV2b2NhYmxlU2Vzc2lvbjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBpZiAoIVBhcnNlLlVzZXIuY3VycmVudCgpKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmFzKCkuX3RoZW5SdW5DYWxsYmFja3Mob3B0aW9ucyk7XG4gICAgICB9XG4gICAgICB2YXIgY3VycmVudFNlc3Npb24gPSBQYXJzZS5Vc2VyLmN1cnJlbnQoKS5nZXRTZXNzaW9uVG9rZW4oKTtcbiAgICAgIGlmIChQYXJzZS5TZXNzaW9uLl9pc1Jldm9jYWJsZShjdXJyZW50U2Vzc2lvbikpIHtcbiAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuYXMoKS5fdGhlblJ1bkNhbGxiYWNrcyhvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQYXJzZS5fcmVxdWVzdCh7XG4gICAgICAgIHJvdXRlOiAndXBncmFkZVRvUmV2b2NhYmxlU2Vzc2lvbicsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICB1c2VNYXN0ZXJLZXk6IG9wdGlvbnMudXNlTWFzdGVyS2V5LFxuICAgICAgICBzZXNzaW9uVG9rZW46IGN1cnJlbnRTZXNzaW9uXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICB2YXIgc2Vzc2lvbiA9IG5ldyBQYXJzZS5TZXNzaW9uKCk7XG4gICAgICAgIHNlc3Npb24uX2ZpbmlzaEZldGNoKHJlc3VsdCk7XG4gICAgICAgIHZhciBjdXJyZW50VXNlciA9IFBhcnNlLlVzZXIuY3VycmVudCgpO1xuICAgICAgICBjdXJyZW50VXNlci5fc2Vzc2lvblRva2VuID0gc2Vzc2lvbi5nZXRTZXNzaW9uVG9rZW4oKTtcbiAgICAgICAgUGFyc2UuVXNlci5fc2F2ZUN1cnJlbnRVc2VyKGN1cnJlbnRVc2VyKTtcbiAgICAgIH0pLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgfSwgLyoqIEBsZW5kcyBQYXJzZS5Vc2VyICovIHtcbiAgICAvLyBDbGFzcyBWYXJpYWJsZXNcblxuICAgIC8vIFRoZSBjdXJyZW50bHkgbG9nZ2VkLWluIHVzZXIuXG4gICAgX2N1cnJlbnRVc2VyOiBudWxsLFxuXG4gICAgLy8gV2hldGhlciBjdXJyZW50VXNlciBpcyBrbm93biB0byBtYXRjaCB0aGUgc2VyaWFsaXplZCB2ZXJzaW9uIG9uIGRpc2suXG4gICAgLy8gVGhpcyBpcyB1c2VmdWwgZm9yIHNhdmluZyBhIGxvY2Fsc3RvcmFnZSBjaGVjayBpZiB5b3UgdHJ5IHRvIGxvYWRcbiAgICAvLyBfY3VycmVudFVzZXIgZnJlcXVlbnRseSB3aGlsZSB0aGVyZSBpcyBub25lIHN0b3JlZC5cbiAgICBfY3VycmVudFVzZXJNYXRjaGVzRGlzazogZmFsc2UsXG5cbiAgICAvLyBUaGUgbG9jYWxTdG9yYWdlIGtleSBzdWZmaXggdGhhdCB0aGUgY3VycmVudCB1c2VyIGlzIHN0b3JlZCB1bmRlci5cbiAgICBfQ1VSUkVOVF9VU0VSX0tFWTogXCJjdXJyZW50VXNlclwiLFxuXG4gICAgLy8gVGhlIG1hcHBpbmcgb2YgYXV0aCBwcm92aWRlciBuYW1lcyB0byBhY3R1YWwgcHJvdmlkZXJzXG4gICAgX2F1dGhQcm92aWRlcnM6IHt9LFxuXG4gICAgLy8gV2hldGhlciB0byByZXdyaXRlIGNsYXNzTmFtZSBVc2VyIHRvIF9Vc2VyXG4gICAgX3BlcmZvcm1Vc2VyUmV3cml0ZTogdHJ1ZSxcblxuICAgIC8vIFdoZXRoZXIgdG8gc2VuZCBhIFJldm9jYWJsZSBTZXNzaW9uIGhlYWRlclxuICAgIF9pc1Jldm9jYWJsZVNlc3Npb25FbmFibGVkOiBmYWxzZSxcblxuICAgIC8vIFdoZXRoZXIgdG8gZW5hYmxlIGEgbWVtb3J5LXVuc2FmZSBjdXJyZW50IHVzZXIgaW4gbm9kZS5qc1xuICAgIF9lbmFibGVVbnNhZmVDdXJyZW50VXNlcjogZmFsc2UsXG5cblxuICAgIC8vIENsYXNzIE1ldGhvZHNcblxuICAgIC8qKlxuICAgICAqIFNpZ25zIHVwIGEgbmV3IHVzZXIgd2l0aCBhIHVzZXJuYW1lIChvciBlbWFpbCkgYW5kIHBhc3N3b3JkLlxuICAgICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgUGFyc2UuVXNlciBvbiB0aGUgc2VydmVyLCBhbmQgYWxzbyBwZXJzaXN0IHRoZVxuICAgICAqIHNlc3Npb24gaW4gbG9jYWxTdG9yYWdlIHNvIHRoYXQgeW91IGNhbiBhY2Nlc3MgdGhlIHVzZXIgdXNpbmdcbiAgICAgKiB7QGxpbmsgI2N1cnJlbnR9LlxuICAgICAqXG4gICAgICogPHA+Q2FsbHMgb3B0aW9ucy5zdWNjZXNzIG9yIG9wdGlvbnMuZXJyb3Igb24gY29tcGxldGlvbi48L3A+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXNlcm5hbWUgVGhlIHVzZXJuYW1lIChvciBlbWFpbCkgdG8gc2lnbiB1cCB3aXRoLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgdG8gc2lnbiB1cCB3aXRoLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhdHRycyBFeHRyYSBmaWVsZHMgdG8gc2V0IG9uIHRoZSBuZXcgdXNlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBIEJhY2tib25lLXN0eWxlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlByb21pc2V9IEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIHRoZSB1c2VyIHdoZW5cbiAgICAgKiAgICAgdGhlIHNpZ251cCBjb21wbGV0ZXMuXG4gICAgICogQHNlZSBQYXJzZS5Vc2VyI3NpZ25VcFxuICAgICAqL1xuICAgIHNpZ25VcDogZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkLCBhdHRycywgb3B0aW9ucykge1xuICAgICAgYXR0cnMgPSBhdHRycyB8fCB7fTtcbiAgICAgIGF0dHJzLnVzZXJuYW1lID0gdXNlcm5hbWU7XG4gICAgICBhdHRycy5wYXNzd29yZCA9IHBhc3N3b3JkO1xuICAgICAgdmFyIHVzZXIgPSBQYXJzZS5PYmplY3QuX2NyZWF0ZShcIl9Vc2VyXCIpO1xuICAgICAgcmV0dXJuIHVzZXIuc2lnblVwKGF0dHJzLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTG9ncyBpbiBhIHVzZXIgd2l0aCBhIHVzZXJuYW1lIChvciBlbWFpbCkgYW5kIHBhc3N3b3JkLiBPbiBzdWNjZXNzLCB0aGlzXG4gICAgICogc2F2ZXMgdGhlIHNlc3Npb24gdG8gZGlzaywgc28geW91IGNhbiByZXRyaWV2ZSB0aGUgY3VycmVudGx5IGxvZ2dlZCBpblxuICAgICAqIHVzZXIgdXNpbmcgPGNvZGU+Y3VycmVudDwvY29kZT4uXG4gICAgICpcbiAgICAgKiA8cD5DYWxscyBvcHRpb25zLnN1Y2Nlc3Mgb3Igb3B0aW9ucy5lcnJvciBvbiBjb21wbGV0aW9uLjwvcD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VybmFtZSBUaGUgdXNlcm5hbWUgKG9yIGVtYWlsKSB0byBsb2cgaW4gd2l0aC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkIHRvIGxvZyBpbiB3aXRoLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggdGhlIHVzZXIgd2hlblxuICAgICAqICAgICB0aGUgbG9naW4gY29tcGxldGVzLlxuICAgICAqIEBzZWUgUGFyc2UuVXNlciNsb2dJblxuICAgICAqL1xuICAgIGxvZ0luOiBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB1c2VyID0gUGFyc2UuT2JqZWN0Ll9jcmVhdGUoXCJfVXNlclwiKTtcbiAgICAgIHVzZXIuX2ZpbmlzaEZldGNoKHsgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmQgfSk7XG4gICAgICByZXR1cm4gdXNlci5sb2dJbihvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTG9ncyBpbiBhIHVzZXIgd2l0aCBhIHNlc3Npb24gdG9rZW4uIE9uIHN1Y2Nlc3MsIHRoaXMgc2F2ZXMgdGhlIHNlc3Npb25cbiAgICAgKiB0byBkaXNrLCBzbyB5b3UgY2FuIHJldHJpZXZlIHRoZSBjdXJyZW50bHkgbG9nZ2VkIGluIHVzZXIgdXNpbmdcbiAgICAgKiA8Y29kZT5jdXJyZW50PC9jb2RlPi5cbiAgICAgKlxuICAgICAqIDxwPkNhbGxzIG9wdGlvbnMuc3VjY2VzcyBvciBvcHRpb25zLmVycm9yIG9uIGNvbXBsZXRpb24uPC9wPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNlc3Npb25Ub2tlbiBUaGUgc2Vzc2lvblRva2VuIHRvIGxvZyBpbiB3aXRoLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggdGhlIHVzZXIgd2hlblxuICAgICAqICAgICB0aGUgbG9naW4gY29tcGxldGVzLlxuICAgICAqL1xuICAgIGJlY29tZTogZnVuY3Rpb24oc2Vzc2lvblRva2VuLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIVBhcnNlLlVzZXIuX2NhblVzZUN1cnJlbnRVc2VyKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdJdCBpcyBub3Qgc2VjdXJlIHRvIGJlY29tZSBhIHVzZXIgb24gYSBub2RlLmpzIHNlcnZlciBlbnZpcm9ubWVudC4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgdmFyIHVzZXIgPSBQYXJzZS5PYmplY3QuX2NyZWF0ZShcIl9Vc2VyXCIpO1xuICAgICAgcmV0dXJuIFBhcnNlLl9yZXF1ZXN0KHtcbiAgICAgICAgcm91dGU6IFwidXNlcnNcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIm1lXCIsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgdXNlTWFzdGVyS2V5OiBvcHRpb25zLnVzZU1hc3RlcktleSxcbiAgICAgICAgc2Vzc2lvblRva2VuOiBzZXNzaW9uVG9rZW5cbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcCwgc3RhdHVzLCB4aHIpIHtcbiAgICAgICAgdmFyIHNlcnZlckF0dHJzID0gdXNlci5wYXJzZShyZXNwLCBzdGF0dXMsIHhocik7XG4gICAgICAgIHVzZXIuX2ZpbmlzaEZldGNoKHNlcnZlckF0dHJzKTtcbiAgICAgICAgdXNlci5faGFuZGxlU2F2ZVJlc3VsdCh0cnVlKTtcbiAgICAgICAgcmV0dXJuIHVzZXI7XG5cbiAgICAgIH0pLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMsIHVzZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMb2dzIG91dCB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyIHNlc3Npb24uIFRoaXMgd2lsbCByZW1vdmUgdGhlXG4gICAgICogc2Vzc2lvbiBmcm9tIGRpc2ssIGxvZyBvdXQgb2YgbGlua2VkIHNlcnZpY2VzLCBhbmQgZnV0dXJlIGNhbGxzIHRvXG4gICAgICogPGNvZGU+Y3VycmVudDwvY29kZT4gd2lsbCByZXR1cm4gPGNvZGU+bnVsbDwvY29kZT4uXG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgc2Vzc2lvbiBpc1xuICAgICAqICAgZGVzdHJveWVkIG9uIHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgbG9nT3V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghUGFyc2UuVXNlci5fY2FuVXNlQ3VycmVudFVzZXIoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1RoZXJlIGlzIG5vIGN1cnJlbnQgdXNlciB1c2VyIG9uIGEgbm9kZS5qcyBzZXJ2ZXIgZW52aXJvbm1lbnQuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFBhcnNlLlVzZXIuX2N1cnJlbnRBc3luYygpLnRoZW4oZnVuY3Rpb24oY3VycmVudFVzZXIpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBQYXJzZS5TdG9yYWdlLnJlbW92ZUl0ZW1Bc3luYyhcbiAgICAgICAgICBQYXJzZS5fZ2V0UGFyc2VQYXRoKFBhcnNlLlVzZXIuX0NVUlJFTlRfVVNFUl9LRVkpKTtcblxuICAgICAgICBpZiAoY3VycmVudFVzZXIgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgY3VycmVudFNlc3Npb24gPSBjdXJyZW50VXNlci5nZXRTZXNzaW9uVG9rZW4oKTtcbiAgICAgICAgICBpZiAoUGFyc2UuU2Vzc2lvbi5faXNSZXZvY2FibGUoY3VycmVudFNlc3Npb24pKSB7XG4gICAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBQYXJzZS5fcmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgcm91dGU6ICdsb2dvdXQnLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIHNlc3Npb25Ub2tlbjogY3VycmVudFNlc3Npb25cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFVzZXIuX2xvZ091dFdpdGhBbGwoKTtcbiAgICAgICAgICBjdXJyZW50VXNlci5faXNDdXJyZW50VXNlciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyTWF0Y2hlc0Rpc2sgPSB0cnVlO1xuICAgICAgICBQYXJzZS5Vc2VyLl9jdXJyZW50VXNlciA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdHMgYSBwYXNzd29yZCByZXNldCBlbWFpbCB0byBiZSBzZW50IHRvIHRoZSBzcGVjaWZpZWQgZW1haWwgYWRkcmVzc1xuICAgICAqIGFzc29jaWF0ZWQgd2l0aCB0aGUgdXNlciBhY2NvdW50LiBUaGlzIGVtYWlsIGFsbG93cyB0aGUgdXNlciB0byBzZWN1cmVseVxuICAgICAqIHJlc2V0IHRoZWlyIHBhc3N3b3JkIG9uIHRoZSBQYXJzZSBzaXRlLlxuICAgICAqXG4gICAgICogPHA+Q2FsbHMgb3B0aW9ucy5zdWNjZXNzIG9yIG9wdGlvbnMuZXJyb3Igb24gY29tcGxldGlvbi48L3A+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZW1haWwgVGhlIGVtYWlsIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSB1c2VyIHRoYXRcbiAgICAgKiAgICAgZm9yZ290IHRoZWlyIHBhc3N3b3JkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICovXG4gICAgcmVxdWVzdFBhc3N3b3JkUmVzZXQ6IGZ1bmN0aW9uKGVtYWlsLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHZhciByZXF1ZXN0ID0gUGFyc2UuX3JlcXVlc3Qoe1xuICAgICAgICByb3V0ZTogXCJyZXF1ZXN0UGFzc3dvcmRSZXNldFwiLFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICB1c2VNYXN0ZXJLZXk6IG9wdGlvbnMudXNlTWFzdGVyS2V5LFxuICAgICAgICBkYXRhOiB7IGVtYWlsOiBlbWFpbCB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXF1ZXN0Ll90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGN1cnJlbnRseSBsb2dnZWQgaW4gUGFyc2VVc2VyIHdpdGggYSB2YWxpZCBzZXNzaW9uLFxuICAgICAqIGVpdGhlciBmcm9tIG1lbW9yeSBvciBsb2NhbFN0b3JhZ2UsIGlmIG5lY2Vzc2FyeS5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5PYmplY3R9IFRoZSBjdXJyZW50bHkgbG9nZ2VkIGluIFBhcnNlLlVzZXIuXG4gICAgICovXG4gICAgY3VycmVudDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIVBhcnNlLlVzZXIuX2NhblVzZUN1cnJlbnRVc2VyKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdUaGVyZSBpcyBubyBjdXJyZW50IHVzZXIgdXNlciBvbiBhIG5vZGUuanMgc2VydmVyIGVudmlyb25tZW50LidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChQYXJzZS5TdG9yYWdlLmFzeW5jKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IHJldHVybiB0aGUgY3VycmVudCB1c2VyIHN5bmNocm9ub3VzbHlcbiAgICAgICAgUGFyc2UuVXNlci5fY3VycmVudEFzeW5jKCk7XG4gICAgICAgIHJldHVybiBQYXJzZS5Vc2VyLl9jdXJyZW50VXNlcjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5Vc2VyLl9jdXJyZW50VXNlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyTWF0Y2hlc0Rpc2spIHtcbiAgICAgICAgLy8gVE9ETzogTGF6aWx5IGxvZyBpbiBhbm9ueW1vdXMgdXNlci5cbiAgICAgICAgcmV0dXJuIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyO1xuICAgICAgfVxuXG4gICAgICAvLyBMb2FkIHRoZSB1c2VyIGZyb20gbG9jYWwgc3RvcmFnZS5cbiAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyTWF0Y2hlc0Rpc2sgPSB0cnVlO1xuXG4gICAgICB2YXIgdXNlckRhdGEgPSBQYXJzZS5TdG9yYWdlLmdldEl0ZW0oUGFyc2UuX2dldFBhcnNlUGF0aChcbiAgICAgICAgICBQYXJzZS5Vc2VyLl9DVVJSRU5UX1VTRVJfS0VZKSk7XG4gICAgICBpZiAoIXVzZXJEYXRhKSB7XG4gICAgICAgIC8vIFRPRE86IExhemlseSBsb2cgaW4gYW5vbnltb3VzIHVzZXIuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgUGFyc2UuVXNlci5fY3VycmVudFVzZXIgPSBQYXJzZS5PYmplY3QuX2NyZWF0ZShcIl9Vc2VyXCIpO1xuICAgICAgUGFyc2UuVXNlci5fY3VycmVudFVzZXIuX2lzQ3VycmVudFVzZXIgPSB0cnVlO1xuXG4gICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UodXNlckRhdGEpO1xuICAgICAgUGFyc2UuVXNlci5fY3VycmVudFVzZXIuaWQgPSBqc29uLl9pZDtcbiAgICAgIGRlbGV0ZSBqc29uLl9pZDtcbiAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyLl9zZXNzaW9uVG9rZW4gPSBqc29uLl9zZXNzaW9uVG9rZW47XG4gICAgICBkZWxldGUganNvbi5fc2Vzc2lvblRva2VuO1xuICAgICAgUGFyc2UuVXNlci5fY3VycmVudFVzZXIuX2ZpbmlzaEZldGNoKGpzb24pO1xuXG4gICAgICBQYXJzZS5Vc2VyLl9jdXJyZW50VXNlci5fc3luY2hyb25pemVBbGxBdXRoRGF0YSgpO1xuICAgICAgUGFyc2UuVXNlci5fY3VycmVudFVzZXIuX3JlZnJlc2hDYWNoZSgpO1xuICAgICAgUGFyc2UuVXNlci5fY3VycmVudFVzZXIuX29wU2V0UXVldWUgPSBbe31dO1xuICAgICAgcmV0dXJuIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGN1cnJlbnRseSBsb2dnZWQgaW4gUGFyc2VVc2VyIGZyb20gYXN5bmNocm9ub3VzIFN0b3JhZ2UuXG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgY3VycmVudGx5XG4gICAgICogICBsb2dnZWQgaW4gUGFyc2UgVXNlclxuICAgICAqL1xuICAgIF9jdXJyZW50QXN5bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmFzKFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyTWF0Y2hlc0Rpc2spIHtcbiAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuYXMoUGFyc2UuVXNlci5fY3VycmVudFVzZXIpO1xuICAgICAgfVxuXG4gICAgICAvLyBMb2FkIHRoZSB1c2VyIGZyb20gU3RvcmFnZVxuICAgICAgcmV0dXJuIFBhcnNlLlN0b3JhZ2UuZ2V0SXRlbUFzeW5jKFBhcnNlLl9nZXRQYXJzZVBhdGgoXG4gICAgICAgIFBhcnNlLlVzZXIuX0NVUlJFTlRfVVNFUl9LRVkpKS50aGVuKGZ1bmN0aW9uKHVzZXJEYXRhKSB7XG4gICAgICAgIGlmICghdXNlckRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBQYXJzZS5Vc2VyLl9jdXJyZW50VXNlciA9IFBhcnNlLk9iamVjdC5fY3JlYXRlKFwiX1VzZXJcIik7XG4gICAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyLl9pc0N1cnJlbnRVc2VyID0gdHJ1ZTtcblxuICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UodXNlckRhdGEpO1xuICAgICAgICBQYXJzZS5Vc2VyLl9jdXJyZW50VXNlci5pZCA9IGpzb24uX2lkO1xuICAgICAgICBkZWxldGUganNvbi5faWQ7XG4gICAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyLl9zZXNzaW9uVG9rZW4gPSBqc29uLl9zZXNzaW9uVG9rZW47XG4gICAgICAgIGRlbGV0ZSBqc29uLl9zZXNzaW9uVG9rZW47XG4gICAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyLl9maW5pc2hGZXRjaChqc29uKTtcblxuICAgICAgICBQYXJzZS5Vc2VyLl9jdXJyZW50VXNlci5fc3luY2hyb25pemVBbGxBdXRoRGF0YSgpO1xuICAgICAgICBQYXJzZS5Vc2VyLl9jdXJyZW50VXNlci5fcmVmcmVzaENhY2hlKCk7XG4gICAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyLl9vcFNldFF1ZXVlID0gW3t9XTtcbiAgICAgICAgcmV0dXJuIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFsbG93IHNvbWVvbmUgdG8gZGVmaW5lIGEgY3VzdG9tIFVzZXIgY2xhc3Mgd2l0aG91dCBjbGFzc05hbWVcbiAgICAgKiBiZWluZyByZXdyaXR0ZW4gdG8gX1VzZXIuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHJld3JpdGVcbiAgICAgKiBVc2VyIHRvIF9Vc2VyIGZvciBsZWdhY3kgcmVhc29ucy4gVGhpcyBhbGxvd3MgZGV2ZWxvcGVycyB0b1xuICAgICAqIG92ZXJyaWRlIHRoYXQgYmVoYXZpb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWxsb3dlZCBXaGV0aGVyIG9yIG5vdCB0byBhbGxvdyBjdXN0b20gVXNlciBjbGFzc1xuICAgICAqL1xuICAgIGFsbG93Q3VzdG9tVXNlckNsYXNzOiBmdW5jdGlvbihpc0FsbG93ZWQpIHtcbiAgICAgIHRoaXMuX3BlcmZvcm1Vc2VyUmV3cml0ZSA9ICFpc0FsbG93ZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFsbG93IGEgbGVnYWN5IGFwcGxpY2F0aW9uIHRvIHN0YXJ0IHVzaW5nIHJldm9jYWJsZSBzZXNzaW9ucy4gSWYgdGhlXG4gICAgICogY3VycmVudCBzZXNzaW9uIHRva2VuIGlzIG5vdCByZXZvY2FibGUsIGEgcmVxdWVzdCB3aWxsIGJlIG1hZGUgZm9yIGEgbmV3LFxuICAgICAqIHJldm9jYWJsZSBzZXNzaW9uLlxuICAgICAqIEl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gY2FsbCB0aGlzIG1ldGhvZCBmcm9tIGNsb3VkIGNvZGUgdW5sZXNzIHlvdSBhcmVcbiAgICAgKiBoYW5kbGluZyB1c2VyIHNpZ251cCBvciBsb2dpbiBmcm9tIHRoZSBzZXJ2ZXIgc2lkZS4gSW4gYSBjbG91ZCBjb2RlIGNhbGwsXG4gICAgICogdGhpcyBmdW5jdGlvbiB3aWxsIG5vdCBhdHRlbXB0IHRvIHVwZ3JhZGUgdGhlIGN1cnJlbnQgdG9rZW4uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQSBCYWNrYm9uZS1zdHlsZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlByb21pc2V9IEEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdoZW4gdGhlIHByb2Nlc3MgaGFzXG4gICAgICogICBjb21wbGV0ZWQuIElmIGEgcmVwbGFjZW1lbnQgc2Vzc2lvbiB0b2tlbiBpcyByZXF1ZXN0ZWQsIHRoZSBwcm9taXNlXG4gICAgICogICB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIGEgbmV3IHRva2VuIGhhcyBiZWVuIGZldGNoZWQuXG4gICAgICovXG4gICAgZW5hYmxlUmV2b2NhYmxlU2Vzc2lvbjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBQYXJzZS5Vc2VyLl9pc1Jldm9jYWJsZVNlc3Npb25FbmFibGVkID0gdHJ1ZTtcbiAgICAgIGlmIChQYXJzZS5Vc2VyLl9jYW5Vc2VDdXJyZW50VXNlcigpICYmIFBhcnNlLlVzZXIuY3VycmVudCgpKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5Vc2VyLmN1cnJlbnQoKS5fdXBncmFkZVRvUmV2b2NhYmxlU2Vzc2lvbihvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmFzKCkuX3RoZW5SdW5DYWxsYmFja3Mob3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgZW5hYmxlVW5zYWZlQ3VycmVudFVzZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgUGFyc2UuVXNlci5fZW5hYmxlVW5zYWZlQ3VycmVudFVzZXIgPSB0cnVlO1xuICAgIH0sXG5cbiAgICBfY2FuVXNlQ3VycmVudFVzZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFQYXJzZS5faXNOb2RlIHx8IFBhcnNlLlVzZXIuX2VuYWJsZVVuc2FmZUN1cnJlbnRVc2VyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQZXJzaXN0cyBhIHVzZXIgYXMgY3VycmVudFVzZXIgdG8gbG9jYWxTdG9yYWdlLCBhbmQgaW50byB0aGUgc2luZ2xldG9uLlxuICAgICAqL1xuICAgIF9zYXZlQ3VycmVudFVzZXI6IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgIGlmIChQYXJzZS5Vc2VyLl9jdXJyZW50VXNlciAhPT0gbnVsbCAmJlxuICAgICAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyICE9PSB1c2VyKSB7XG4gICAgICAgIFBhcnNlLlVzZXIubG9nT3V0KCk7XG4gICAgICB9XG4gICAgICB1c2VyLl9pc0N1cnJlbnRVc2VyID0gdHJ1ZTtcbiAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyID0gdXNlcjtcbiAgICAgIFBhcnNlLlVzZXIuX2N1cnJlbnRVc2VyTWF0Y2hlc0Rpc2sgPSB0cnVlO1xuXG4gICAgICB2YXIganNvbiA9IHVzZXIudG9KU09OKCk7XG4gICAgICBqc29uLl9pZCA9IHVzZXIuaWQ7XG4gICAgICBqc29uLl9zZXNzaW9uVG9rZW4gPSB1c2VyLl9zZXNzaW9uVG9rZW47XG4gICAgICBpZiAoUGFyc2UuU3RvcmFnZS5hc3luYykge1xuICAgICAgICBQYXJzZS5TdG9yYWdlLnNldEl0ZW1Bc3luYyhcbiAgICAgICAgICBQYXJzZS5fZ2V0UGFyc2VQYXRoKFBhcnNlLlVzZXIuX0NVUlJFTlRfVVNFUl9LRVkpLFxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGpzb24pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFBhcnNlLlN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgICBQYXJzZS5fZ2V0UGFyc2VQYXRoKFBhcnNlLlVzZXIuX0NVUlJFTlRfVVNFUl9LRVkpLFxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGpzb24pKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX3JlZ2lzdGVyQXV0aGVudGljYXRpb25Qcm92aWRlcjogZnVuY3Rpb24ocHJvdmlkZXIpIHtcbiAgICAgIFBhcnNlLlVzZXIuX2F1dGhQcm92aWRlcnNbcHJvdmlkZXIuZ2V0QXV0aFR5cGUoKV0gPSBwcm92aWRlcjtcbiAgICAgIC8vIFN5bmNocm9uaXplIHRoZSBjdXJyZW50IHVzZXIgd2l0aCB0aGUgYXV0aCBwcm92aWRlci5cbiAgICAgIGlmIChQYXJzZS5Vc2VyLmN1cnJlbnQoKSkge1xuICAgICAgICBQYXJzZS5Vc2VyLmN1cnJlbnQoKS5fc3luY2hyb25pemVBdXRoRGF0YShwcm92aWRlci5nZXRBdXRoVHlwZSgpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2xvZ0luV2l0aDogZnVuY3Rpb24ocHJvdmlkZXIsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB1c2VyID0gUGFyc2UuT2JqZWN0Ll9jcmVhdGUoXCJfVXNlclwiKTtcbiAgICAgIHJldHVybiB1c2VyLl9saW5rV2l0aChwcm92aWRlciwgb3B0aW9ucyk7XG4gICAgfVxuXG4gIH0pO1xufSh0aGlzKSk7XG5cblxuKGZ1bmN0aW9uKHJvb3QpIHtcbiAgcm9vdC5QYXJzZSA9IHJvb3QuUGFyc2UgfHwge307XG4gIHZhciBQYXJzZSA9IHJvb3QuUGFyc2U7XG5cbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKlxuICAgKiA8cD5BIFBhcnNlLlNlc3Npb24gb2JqZWN0IGlzIGEgbG9jYWwgcmVwcmVzZW50YXRpb24gb2YgYSByZXZvY2FibGUgc2Vzc2lvbi5cbiAgICogVGhpcyBjbGFzcyBpcyBhIHN1YmNsYXNzIG9mIGEgUGFyc2UuT2JqZWN0LCBhbmQgcmV0YWlucyB0aGUgc2FtZVxuICAgKiBmdW5jdGlvbmFsaXR5IG9mIGEgUGFyc2UuT2JqZWN0LjwvcD5cbiAgICovXG4gIFBhcnNlLlNlc3Npb24gPSBQYXJzZS5PYmplY3QuZXh0ZW5kKCdfU2Vzc2lvbicsXG4gIC8qKiBAbGVuZHMgUGFyc2UuU2Vzc2lvbi5wcm90b3R5cGUgKi9cbiAge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNlc3Npb24gdG9rZW4gc3RyaW5nLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRTZXNzaW9uVG9rZW46IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb25Ub2tlbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgbWV0aG9kIHRvIGhhbmRsZSBzcGVjaWFsIGZpZWxkcyBpbiBhIF9TZXNzaW9uIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIF9tZXJnZU1hZ2ljRmllbGRzOiBmdW5jdGlvbihhdHRycykge1xuICAgICAgaWYgKGF0dHJzLnNlc3Npb25Ub2tlbikge1xuICAgICAgICB0aGlzLl9zZXNzaW9uVG9rZW4gPSBhdHRycy5zZXNzaW9uVG9rZW47XG4gICAgICAgIGRlbGV0ZSBhdHRycy5zZXNzaW9uVG9rZW47XG4gICAgICB9XG4gICAgICBQYXJzZS5TZXNzaW9uLl9fc3VwZXJfXy5fbWVyZ2VNYWdpY0ZpZWxkcy5jYWxsKHRoaXMsIGF0dHJzKTtcbiAgICB9LFxuICB9LCAvKiogQGxlbmRzIFBhcnNlLlNlc3Npb24gKi8ge1xuXG4gICAgLy8gVGhyb3cgYW4gZXJyb3Igd2hlbiBtb2RpZnlpbmcgdGhlc2UgcmVhZC1vbmx5IGZpZWxkc1xuICAgIHJlYWRPbmx5QXR0cmlidXRlczoge1xuICAgICAgY3JlYXRlZFdpdGg6IHRydWUsXG4gICAgICBleHBpcmVzQXQ6IHRydWUsXG4gICAgICBpbnN0YWxsYXRpb25JZDogdHJ1ZSxcbiAgICAgIHJlc3RyaWN0ZWQ6IHRydWUsXG4gICAgICBzZXNzaW9uVG9rZW46IHRydWUsXG4gICAgICB1c2VyOiB0cnVlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgU2Vzc2lvbiBvYmplY3QgZm9yIHRoZSBjdXJyZW50bHkgbG9nZ2VkIGluIHNlc3Npb24uXG4gICAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgUGFyc2UuU2Vzc2lvblxuICAgICAqICAgb2JqZWN0IGFmdGVyIGl0IGhhcyBiZWVuIGZldGNoZWQuXG4gICAgICovXG4gICAgY3VycmVudDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIHZhciBzZXNzaW9uID0gUGFyc2UuT2JqZWN0Ll9jcmVhdGUoJ19TZXNzaW9uJyk7XG4gICAgICB2YXIgY3VycmVudFRva2VuID0gUGFyc2UuVXNlci5jdXJyZW50KCkuZ2V0U2Vzc2lvblRva2VuKCk7XG4gICAgICByZXR1cm4gUGFyc2UuX3JlcXVlc3Qoe1xuICAgICAgICByb3V0ZTogJ3Nlc3Npb25zJyxcbiAgICAgICAgY2xhc3NOYW1lOiAnbWUnLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICB1c2VNYXN0ZXJLZXk6IG9wdGlvbnMudXNlTWFzdGVyS2V5LFxuICAgICAgICBzZXNzaW9uVG9rZW46IGN1cnJlbnRUb2tlblxuICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwLCBzdGF0dXMsIHhocikge1xuICAgICAgICB2YXIgc2VydmVyQXR0cnMgPSBzZXNzaW9uLnBhcnNlKHJlc3AsIHN0YXR1cywgeGhyKTtcbiAgICAgICAgc2Vzc2lvbi5fZmluaXNoRmV0Y2goc2VydmVyQXR0cnMpO1xuICAgICAgICByZXR1cm4gc2Vzc2lvbjtcbiAgICAgIH0pLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMsIHNlc3Npb24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzZXNzaW9uIHRva2VuIGlzIHJldm9jYWJsZS5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIF9pc1Jldm9jYWJsZTogZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgIHJldHVybiB0b2tlbi5pbmRleE9mKCdyOicpID4gLTE7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgY3VycmVudCBzZXNzaW9uIHRva2VuIGlzIHJldm9jYWJsZS5cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwgZm9yIG1pZ3JhdGluZyBFeHByZXNzLmpzIG9yIE5vZGUuanMgd2ViIGFwcHMgdG9cbiAgICAgKiB1c2UgcmV2b2NhYmxlIHNlc3Npb25zLiBJZiB5b3UgYXJlIG1pZ3JhdGluZyBhbiBhcHAgdGhhdCB1c2VzIHRoZSBQYXJzZVxuICAgICAqIFNESyBpbiB0aGUgYnJvd3NlciBvbmx5LCBwbGVhc2UgdXNlIFBhcnNlLlVzZXIuZW5hYmxlUmV2b2NhYmxlU2Vzc2lvbigpXG4gICAgICogaW5zdGVhZCwgc28gdGhhdCBzZXNzaW9ucyBjYW4gYmUgYXV0b21hdGljYWxseSB1cGdyYWRlZC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzQ3VycmVudFNlc3Npb25SZXZvY2FibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKFBhcnNlLlVzZXIuY3VycmVudCgpICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBQYXJzZS5TZXNzaW9uLl9pc1Jldm9jYWJsZShcbiAgICAgICAgICBQYXJzZS5Vc2VyLmN1cnJlbnQoKS5nZXRTZXNzaW9uVG9rZW4oKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59KSh0aGlzKTtcblxuLy8gUGFyc2UuUXVlcnkgaXMgYSB3YXkgdG8gY3JlYXRlIGEgbGlzdCBvZiBQYXJzZS5PYmplY3RzLlxuKGZ1bmN0aW9uKHJvb3QpIHtcbiAgcm9vdC5QYXJzZSA9IHJvb3QuUGFyc2UgfHwge307XG4gIHZhciBQYXJzZSA9IHJvb3QuUGFyc2U7XG4gIHZhciBfID0gUGFyc2UuXztcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBwYXJzZSBQYXJzZS5RdWVyeSBmb3IgdGhlIGdpdmVuIFBhcnNlLk9iamVjdCBzdWJjbGFzcy5cbiAgICogQHBhcmFtIG9iamVjdENsYXNzIC1cbiAgICogICBBbiBpbnN0YW5jZSBvZiBhIHN1YmNsYXNzIG9mIFBhcnNlLk9iamVjdCwgb3IgYSBQYXJzZSBjbGFzc05hbWUgc3RyaW5nLlxuICAgKiBAY2xhc3NcbiAgICpcbiAgICogPHA+UGFyc2UuUXVlcnkgZGVmaW5lcyBhIHF1ZXJ5IHRoYXQgaXMgdXNlZCB0byBmZXRjaCBQYXJzZS5PYmplY3RzLiBUaGVcbiAgICogbW9zdCBjb21tb24gdXNlIGNhc2UgaXMgZmluZGluZyBhbGwgb2JqZWN0cyB0aGF0IG1hdGNoIGEgcXVlcnkgdGhyb3VnaCB0aGVcbiAgICogPGNvZGU+ZmluZDwvY29kZT4gbWV0aG9kLiBGb3IgZXhhbXBsZSwgdGhpcyBzYW1wbGUgY29kZSBmZXRjaGVzIGFsbCBvYmplY3RzXG4gICAqIG9mIGNsYXNzIDxjb2RlPk15Q2xhc3M8L2NvZGU+LiBJdCBjYWxscyBhIGRpZmZlcmVudCBmdW5jdGlvbiBkZXBlbmRpbmcgb25cbiAgICogd2hldGhlciB0aGUgZmV0Y2ggc3VjY2VlZGVkIG9yIG5vdC5cbiAgICogXG4gICAqIDxwcmU+XG4gICAqIHZhciBxdWVyeSA9IG5ldyBQYXJzZS5RdWVyeShNeUNsYXNzKTtcbiAgICogcXVlcnkuZmluZCh7XG4gICAqICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0cykge1xuICAgKiAgICAgLy8gcmVzdWx0cyBpcyBhbiBhcnJheSBvZiBQYXJzZS5PYmplY3QuXG4gICAqICAgfSxcbiAgICpcbiAgICogICBlcnJvcjogZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIGVycm9yIGlzIGFuIGluc3RhbmNlIG9mIFBhcnNlLkVycm9yLlxuICAgKiAgIH1cbiAgICogfSk7PC9wcmU+PC9wPlxuICAgKiBcbiAgICogPHA+QSBQYXJzZS5RdWVyeSBjYW4gYWxzbyBiZSB1c2VkIHRvIHJldHJpZXZlIGEgc2luZ2xlIG9iamVjdCB3aG9zZSBpZCBpc1xuICAgKiBrbm93biwgdGhyb3VnaCB0aGUgZ2V0IG1ldGhvZC4gRm9yIGV4YW1wbGUsIHRoaXMgc2FtcGxlIGNvZGUgZmV0Y2hlcyBhblxuICAgKiBvYmplY3Qgb2YgY2xhc3MgPGNvZGU+TXlDbGFzczwvY29kZT4gYW5kIGlkIDxjb2RlPm15SWQ8L2NvZGU+LiBJdCBjYWxscyBhXG4gICAqIGRpZmZlcmVudCBmdW5jdGlvbiBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgZmV0Y2ggc3VjY2VlZGVkIG9yIG5vdC5cbiAgICogXG4gICAqIDxwcmU+XG4gICAqIHZhciBxdWVyeSA9IG5ldyBQYXJzZS5RdWVyeShNeUNsYXNzKTtcbiAgICogcXVlcnkuZ2V0KG15SWQsIHtcbiAgICogICBzdWNjZXNzOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICogICAgIC8vIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZiBQYXJzZS5PYmplY3QuXG4gICAqICAgfSxcbiAgICpcbiAgICogICBlcnJvcjogZnVuY3Rpb24ob2JqZWN0LCBlcnJvcikge1xuICAgKiAgICAgLy8gZXJyb3IgaXMgYW4gaW5zdGFuY2Ugb2YgUGFyc2UuRXJyb3IuXG4gICAqICAgfVxuICAgKiB9KTs8L3ByZT48L3A+XG4gICAqIFxuICAgKiA8cD5BIFBhcnNlLlF1ZXJ5IGNhbiBhbHNvIGJlIHVzZWQgdG8gY291bnQgdGhlIG51bWJlciBvZiBvYmplY3RzIHRoYXQgbWF0Y2hcbiAgICogdGhlIHF1ZXJ5IHdpdGhvdXQgcmV0cmlldmluZyBhbGwgb2YgdGhvc2Ugb2JqZWN0cy4gRm9yIGV4YW1wbGUsIHRoaXNcbiAgICogc2FtcGxlIGNvZGUgY291bnRzIHRoZSBudW1iZXIgb2Ygb2JqZWN0cyBvZiB0aGUgY2xhc3MgPGNvZGU+TXlDbGFzczwvY29kZT5cbiAgICogPHByZT5cbiAgICogdmFyIHF1ZXJ5ID0gbmV3IFBhcnNlLlF1ZXJ5KE15Q2xhc3MpO1xuICAgKiBxdWVyeS5jb3VudCh7XG4gICAqICAgc3VjY2VzczogZnVuY3Rpb24obnVtYmVyKSB7XG4gICAqICAgICAvLyBUaGVyZSBhcmUgbnVtYmVyIGluc3RhbmNlcyBvZiBNeUNsYXNzLlxuICAgKiAgIH0sXG4gICAqXG4gICAqICAgZXJyb3I6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBlcnJvciBpcyBhbiBpbnN0YW5jZSBvZiBQYXJzZS5FcnJvci5cbiAgICogICB9XG4gICAqIH0pOzwvcHJlPjwvcD5cbiAgICovXG4gIFBhcnNlLlF1ZXJ5ID0gZnVuY3Rpb24ob2JqZWN0Q2xhc3MpIHtcbiAgICBpZiAoXy5pc1N0cmluZyhvYmplY3RDbGFzcykpIHtcbiAgICAgIG9iamVjdENsYXNzID0gUGFyc2UuT2JqZWN0Ll9nZXRTdWJjbGFzcyhvYmplY3RDbGFzcyk7XG4gICAgfVxuXG4gICAgdGhpcy5vYmplY3RDbGFzcyA9IG9iamVjdENsYXNzO1xuXG4gICAgdGhpcy5jbGFzc05hbWUgPSBvYmplY3RDbGFzcy5wcm90b3R5cGUuY2xhc3NOYW1lO1xuXG4gICAgdGhpcy5fd2hlcmUgPSB7fTtcbiAgICB0aGlzLl9pbmNsdWRlID0gW107XG4gICAgdGhpcy5fbGltaXQgPSAtMTsgLy8gbmVnYXRpdmUgbGltaXQgbWVhbnMsIGRvIG5vdCBzZW5kIGEgbGltaXRcbiAgICB0aGlzLl9za2lwID0gMDtcbiAgICB0aGlzLl9leHRyYU9wdGlvbnMgPSB7fTtcbiAgfTtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFBhcnNlLlF1ZXJ5IHRoYXQgaXMgdGhlIE9SIG9mIHRoZSBwYXNzZWQgaW4gcXVlcmllcy4gIEZvclxuICAgKiBleGFtcGxlOlxuICAgKiA8cHJlPnZhciBjb21wb3VuZFF1ZXJ5ID0gUGFyc2UuUXVlcnkub3IocXVlcnkxLCBxdWVyeTIsIHF1ZXJ5Myk7PC9wcmU+XG4gICAqXG4gICAqIHdpbGwgY3JlYXRlIGEgY29tcG91bmRRdWVyeSB0aGF0IGlzIGFuIG9yIG9mIHRoZSBxdWVyeTEsIHF1ZXJ5MiwgYW5kXG4gICAqIHF1ZXJ5My5cbiAgICogQHBhcmFtIHsuLi5QYXJzZS5RdWVyeX0gdmFyX2FyZ3MgVGhlIGxpc3Qgb2YgcXVlcmllcyB0byBPUi5cbiAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFRoZSBxdWVyeSB0aGF0IGlzIHRoZSBPUiBvZiB0aGUgcGFzc2VkIGluIHF1ZXJpZXMuXG4gICAqL1xuICBQYXJzZS5RdWVyeS5vciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBxdWVyaWVzID0gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IG51bGw7XG4gICAgUGFyc2UuX2FycmF5RWFjaChxdWVyaWVzLCBmdW5jdGlvbihxKSB7XG4gICAgICBpZiAoXy5pc051bGwoY2xhc3NOYW1lKSkge1xuICAgICAgICBjbGFzc05hbWUgPSBxLmNsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNsYXNzTmFtZSAhPT0gcS5jbGFzc05hbWUpIHtcbiAgICAgICAgdGhyb3cgXCJBbGwgcXVlcmllcyBtdXN0IGJlIGZvciB0aGUgc2FtZSBjbGFzc1wiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBxdWVyeSA9IG5ldyBQYXJzZS5RdWVyeShjbGFzc05hbWUpO1xuICAgIHF1ZXJ5Ll9vclF1ZXJ5KHF1ZXJpZXMpO1xuICAgIHJldHVybiBxdWVyeTtcbiAgfTtcblxuICBQYXJzZS5RdWVyeS5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIFBhcnNlLk9iamVjdCB3aG9zZSBpZCBpcyBhbHJlYWR5IGtub3duIGJ5IGZldGNoaW5nIGRhdGEgZnJvbVxuICAgICAqIHRoZSBzZXJ2ZXIuICBFaXRoZXIgb3B0aW9ucy5zdWNjZXNzIG9yIG9wdGlvbnMuZXJyb3IgaXMgY2FsbGVkIHdoZW4gdGhlXG4gICAgICogZmluZCBjb21wbGV0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2JqZWN0SWQgVGhlIGlkIG9mIHRoZSBvYmplY3QgdG8gYmUgZmV0Y2hlZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBIEJhY2tib25lLXN0eWxlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIFZhbGlkIG9wdGlvbnMgYXJlOjx1bD5cbiAgICAgKiAgIDxsaT5zdWNjZXNzOiBBIEJhY2tib25lLXN0eWxlIHN1Y2Nlc3MgY2FsbGJhY2tcbiAgICAgKiAgIDxsaT5lcnJvcjogQW4gQmFja2JvbmUtc3R5bGUgZXJyb3IgY2FsbGJhY2suXG4gICAgICogICA8bGk+dXNlTWFzdGVyS2V5OiBJbiBDbG91ZCBDb2RlIGFuZCBOb2RlIG9ubHksIGNhdXNlcyB0aGUgTWFzdGVyIEtleSB0b1xuICAgICAqICAgICBiZSB1c2VkIGZvciB0aGlzIHJlcXVlc3QuXG4gICAgICogICA8bGk+c2Vzc2lvblRva2VuOiBBIHZhbGlkIHNlc3Npb24gdG9rZW4sIHVzZWQgZm9yIG1ha2luZyBhIHJlcXVlc3Qgb25cbiAgICAgKiAgICAgICBiZWhhbGYgb2YgYSBzcGVjaWZpYyB1c2VyLlxuICAgICAqIDwvdWw+XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbihvYmplY3RJZCwgb3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgc2VsZi5lcXVhbFRvKCdvYmplY3RJZCcsIG9iamVjdElkKTtcblxuICAgICAgdmFyIGZpcnN0T3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKG9wdGlvbnMgJiYgXy5oYXMob3B0aW9ucywgJ3VzZU1hc3RlcktleScpKSB7XG4gICAgICAgIGZpcnN0T3B0aW9ucyA9IHsgdXNlTWFzdGVyS2V5OiBvcHRpb25zLnVzZU1hc3RlcktleSB9O1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMgJiYgXy5oYXMob3B0aW9ucywgJ3Nlc3Npb25Ub2tlbicpKSB7XG4gICAgICAgIGZpcnN0T3B0aW9ucy5zZXNzaW9uVG9rZW4gPSBvcHRpb25zLnNlc3Npb25Ub2tlbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuZmlyc3QoZmlyc3RPcHRpb25zKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlcnJvck9iamVjdCA9IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJPYmplY3Qgbm90IGZvdW5kLlwiKTtcbiAgICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3IoZXJyb3JPYmplY3QpO1xuXG4gICAgICB9KS5fdGhlblJ1bkNhbGxiYWNrcyhvcHRpb25zLCBudWxsKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhpcyBxdWVyeS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBxdWVyeS5cbiAgICAgKi9cbiAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgd2hlcmU6IHRoaXMuX3doZXJlXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5faW5jbHVkZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHBhcmFtcy5pbmNsdWRlID0gdGhpcy5faW5jbHVkZS5qb2luKFwiLFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9zZWxlY3QpIHtcbiAgICAgICAgcGFyYW1zLmtleXMgPSB0aGlzLl9zZWxlY3Quam9pbihcIixcIik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbGltaXQgPj0gMCkge1xuICAgICAgICBwYXJhbXMubGltaXQgPSB0aGlzLl9saW1pdDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9za2lwID4gMCkge1xuICAgICAgICBwYXJhbXMuc2tpcCA9IHRoaXMuX3NraXA7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fb3JkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXJhbXMub3JkZXIgPSB0aGlzLl9vcmRlci5qb2luKFwiLFwiKTtcbiAgICAgIH1cblxuICAgICAgUGFyc2UuX29iamVjdEVhY2godGhpcy5fZXh0cmFPcHRpb25zLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICAgIHBhcmFtc1trXSA9IHY7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgbGlzdCBvZiBQYXJzZU9iamVjdHMgdGhhdCBzYXRpc2Z5IHRoaXMgcXVlcnkuXG4gICAgICogRWl0aGVyIG9wdGlvbnMuc3VjY2VzcyBvciBvcHRpb25zLmVycm9yIGlzIGNhbGxlZCB3aGVuIHRoZSBmaW5kXG4gICAgICogY29tcGxldGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQSBCYWNrYm9uZS1zdHlsZSBvcHRpb25zIG9iamVjdC4gVmFsaWQgb3B0aW9uc1xuICAgICAqIGFyZTo8dWw+XG4gICAgICogICA8bGk+c3VjY2VzczogRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBmaW5kIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gICAgICogICA8bGk+ZXJyb3I6IEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZmluZCBmYWlscy5cbiAgICAgKiAgIDxsaT51c2VNYXN0ZXJLZXk6IEluIENsb3VkIENvZGUgYW5kIE5vZGUgb25seSwgY2F1c2VzIHRoZSBNYXN0ZXIgS2V5IHRvXG4gICAgICogICAgIGJlIHVzZWQgZm9yIHRoaXMgcmVxdWVzdC5cbiAgICAgKiAgIDxsaT5zZXNzaW9uVG9rZW46IEEgdmFsaWQgc2Vzc2lvbiB0b2tlbiwgdXNlZCBmb3IgbWFraW5nIGEgcmVxdWVzdCBvblxuICAgICAqICAgICAgIGJlaGFsZiBvZiBhIHNwZWNpZmljIHVzZXIuXG4gICAgICogPC91bD5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlByb21pc2V9IEEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdpdGggdGhlIHJlc3VsdHMgd2hlblxuICAgICAqIHRoZSBxdWVyeSBjb21wbGV0ZXMuXG4gICAgICovXG4gICAgZmluZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIHZhciByZXF1ZXN0ID0gUGFyc2UuX3JlcXVlc3Qoe1xuICAgICAgICByb3V0ZTogXCJjbGFzc2VzXCIsXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5jbGFzc05hbWUsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgdXNlTWFzdGVyS2V5OiBvcHRpb25zLnVzZU1hc3RlcktleSxcbiAgICAgICAgc2Vzc2lvblRva2VuOiBvcHRpb25zLnNlc3Npb25Ub2tlbixcbiAgICAgICAgZGF0YTogdGhpcy50b0pTT04oKVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXF1ZXN0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIF8ubWFwKHJlc3BvbnNlLnJlc3VsdHMsIGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgICAgICB2YXIgb2JqO1xuICAgICAgICAgIGlmIChyZXNwb25zZS5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgIG9iaiA9IG5ldyBQYXJzZS5PYmplY3QocmVzcG9uc2UuY2xhc3NOYW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqID0gbmV3IHNlbGYub2JqZWN0Q2xhc3MoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqLl9maW5pc2hGZXRjaChqc29uLCB0cnVlKTtcbiAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICAgIH0pLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb3VudHMgdGhlIG51bWJlciBvZiBvYmplY3RzIHRoYXQgbWF0Y2ggdGhpcyBxdWVyeS5cbiAgICAgKiBFaXRoZXIgb3B0aW9ucy5zdWNjZXNzIG9yIG9wdGlvbnMuZXJyb3IgaXMgY2FsbGVkIHdoZW4gdGhlIGNvdW50XG4gICAgICogY29tcGxldGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQSBCYWNrYm9uZS1zdHlsZSBvcHRpb25zIG9iamVjdC4gVmFsaWQgb3B0aW9uc1xuICAgICAqIGFyZTo8dWw+XG4gICAgICogICA8bGk+c3VjY2VzczogRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBjb3VudCBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5LlxuICAgICAqICAgPGxpPmVycm9yOiBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGZpbmQgZmFpbHMuXG4gICAgICogICA8bGk+dXNlTWFzdGVyS2V5OiBJbiBDbG91ZCBDb2RlIGFuZCBOb2RlIG9ubHksIGNhdXNlcyB0aGUgTWFzdGVyIEtleSB0b1xuICAgICAqICAgICBiZSB1c2VkIGZvciB0aGlzIHJlcXVlc3QuXG4gICAgICogICA8bGk+c2Vzc2lvblRva2VuOiBBIHZhbGlkIHNlc3Npb24gdG9rZW4sIHVzZWQgZm9yIG1ha2luZyBhIHJlcXVlc3Qgb25cbiAgICAgKiAgICAgICBiZWhhbGYgb2YgYSBzcGVjaWZpYyB1c2VyLlxuICAgICAqIDwvdWw+XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5Qcm9taXNlfSBBIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aXRoIHRoZSBjb3VudCB3aGVuXG4gICAgICogdGhlIHF1ZXJ5IGNvbXBsZXRlcy5cbiAgICAgKi9cbiAgICBjb3VudDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIHZhciBwYXJhbXMgPSB0aGlzLnRvSlNPTigpO1xuICAgICAgcGFyYW1zLmxpbWl0ID0gMDtcbiAgICAgIHBhcmFtcy5jb3VudCA9IDE7XG4gICAgICB2YXIgcmVxdWVzdCA9IFBhcnNlLl9yZXF1ZXN0KHtcbiAgICAgICAgcm91dGU6IFwiY2xhc3Nlc1wiLFxuICAgICAgICBjbGFzc05hbWU6IHNlbGYuY2xhc3NOYW1lLCBcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICB1c2VNYXN0ZXJLZXk6IG9wdGlvbnMudXNlTWFzdGVyS2V5LFxuICAgICAgICBzZXNzaW9uVG9rZW46IG9wdGlvbnMuc2Vzc2lvblRva2VuLFxuICAgICAgICBkYXRhOiBwYXJhbXNcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVxdWVzdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5jb3VudDtcbiAgICAgIH0pLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYXQgbW9zdCBvbmUgUGFyc2UuT2JqZWN0IHRoYXQgc2F0aXNmaWVzIHRoaXMgcXVlcnkuXG4gICAgICpcbiAgICAgKiBFaXRoZXIgb3B0aW9ucy5zdWNjZXNzIG9yIG9wdGlvbnMuZXJyb3IgaXMgY2FsbGVkIHdoZW4gaXQgY29tcGxldGVzLlxuICAgICAqIHN1Y2Nlc3MgaXMgcGFzc2VkIHRoZSBvYmplY3QgaWYgdGhlcmUgaXMgb25lLiBvdGhlcndpc2UsIHVuZGVmaW5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEEgQmFja2JvbmUtc3R5bGUgb3B0aW9ucyBvYmplY3QuIFZhbGlkIG9wdGlvbnNcbiAgICAgKiBhcmU6PHVsPlxuICAgICAqICAgPGxpPnN1Y2Nlc3M6IEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZmluZCBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5LlxuICAgICAqICAgPGxpPmVycm9yOiBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGZpbmQgZmFpbHMuXG4gICAgICogICA8bGk+dXNlTWFzdGVyS2V5OiBJbiBDbG91ZCBDb2RlIGFuZCBOb2RlIG9ubHksIGNhdXNlcyB0aGUgTWFzdGVyIEtleSB0b1xuICAgICAqICAgICBiZSB1c2VkIGZvciB0aGlzIHJlcXVlc3QuXG4gICAgICogICA8bGk+c2Vzc2lvblRva2VuOiBBIHZhbGlkIHNlc3Npb24gdG9rZW4sIHVzZWQgZm9yIG1ha2luZyBhIHJlcXVlc3Qgb25cbiAgICAgKiAgICAgICBiZWhhbGYgb2YgYSBzcGVjaWZpYyB1c2VyLlxuICAgICAqIDwvdWw+XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5Qcm9taXNlfSBBIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aXRoIHRoZSBvYmplY3Qgd2hlblxuICAgICAqIHRoZSBxdWVyeSBjb21wbGV0ZXMuXG4gICAgICovXG4gICAgZmlyc3Q6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICB2YXIgcGFyYW1zID0gdGhpcy50b0pTT04oKTtcbiAgICAgIHBhcmFtcy5saW1pdCA9IDE7XG4gICAgICB2YXIgcmVxdWVzdCA9IFBhcnNlLl9yZXF1ZXN0KHtcbiAgICAgICAgcm91dGU6IFwiY2xhc3Nlc1wiLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMuY2xhc3NOYW1lLCBcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICB1c2VNYXN0ZXJLZXk6IG9wdGlvbnMudXNlTWFzdGVyS2V5LFxuICAgICAgICBzZXNzaW9uVG9rZW46IG9wdGlvbnMuc2Vzc2lvblRva2VuLFxuICAgICAgICBkYXRhOiBwYXJhbXNcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVxdWVzdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBfLm1hcChyZXNwb25zZS5yZXN1bHRzLCBmdW5jdGlvbihqc29uKSB7XG4gICAgICAgICAgdmFyIG9iajtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBvYmogPSBuZXcgUGFyc2UuT2JqZWN0KHJlc3BvbnNlLmNsYXNzTmFtZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iaiA9IG5ldyBzZWxmLm9iamVjdENsYXNzKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iai5fZmluaXNoRmV0Y2goanNvbiwgdHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSlbMF07XG4gICAgICB9KS5fdGhlblJ1bkNhbGxiYWNrcyhvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiBQYXJzZS5Db2xsZWN0aW9uIGJhY2tlZCBieSB0aGlzIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zIEFuIGFycmF5IG9mIGluc3RhbmNlcyBvZiA8Y29kZT5QYXJzZS5PYmplY3Q8L2NvZGU+XG4gICAgICogICAgIHdpdGggd2hpY2ggdG8gc3RhcnQgdGhpcyBDb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9wdGlvbmFsIG9iamVjdCB3aXRoIEJhY2tib25lLXN0eWxlIG9wdGlvbnMuXG4gICAgICogVmFsaWQgb3B0aW9ucyBhcmU6PHVsPlxuICAgICAqICAgPGxpPm1vZGVsOiBUaGUgUGFyc2UuT2JqZWN0IHN1YmNsYXNzIHRoYXQgdGhpcyBjb2xsZWN0aW9uIGNvbnRhaW5zLlxuICAgICAqICAgPGxpPnF1ZXJ5OiBBbiBpbnN0YW5jZSBvZiBQYXJzZS5RdWVyeSB0byB1c2Ugd2hlbiBmZXRjaGluZyBpdGVtcy5cbiAgICAgKiAgIDxsaT5jb21wYXJhdG9yOiBBIHN0cmluZyBwcm9wZXJ0eSBuYW1lIG9yIGZ1bmN0aW9uIHRvIHNvcnQgYnkuXG4gICAgICogPC91bD5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5Db2xsZWN0aW9ufVxuICAgICAqL1xuICAgIGNvbGxlY3Rpb246IGZ1bmN0aW9uKGl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHJldHVybiBuZXcgUGFyc2UuQ29sbGVjdGlvbihpdGVtcywgXy5leHRlbmQob3B0aW9ucywge1xuICAgICAgICBtb2RlbDogdGhpcy5vYmplY3RDbGFzcyxcbiAgICAgICAgcXVlcnk6IHRoaXNcbiAgICAgIH0pKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbnVtYmVyIG9mIHJlc3VsdHMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nIGFueSByZXN1bHRzLlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciBwYWdpbmF0aW9uLlxuICAgICAqIERlZmF1bHQgaXMgdG8gc2tpcCB6ZXJvIHJlc3VsdHMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG4gdGhlIG51bWJlciBvZiByZXN1bHRzIHRvIHNraXAuXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBza2lwOiBmdW5jdGlvbihuKSB7XG4gICAgICB0aGlzLl9za2lwID0gbjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaW1pdCBvZiB0aGUgbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLiBUaGUgZGVmYXVsdCBsaW1pdCBpc1xuICAgICAqIDEwMCwgd2l0aCBhIG1heGltdW0gb2YgMTAwMCByZXN1bHRzIGJlaW5nIHJldHVybmVkIGF0IGEgdGltZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbiB0aGUgbnVtYmVyIG9mIHJlc3VsdHMgdG8gbGltaXQgdG8uXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBsaW1pdDogZnVuY3Rpb24obikge1xuICAgICAgdGhpcy5fbGltaXQgPSBuO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbnN0cmFpbnQgdG8gdGhlIHF1ZXJ5IHRoYXQgcmVxdWlyZXMgYSBwYXJ0aWN1bGFyIGtleSdzIHZhbHVlIHRvXG4gICAgICogYmUgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgdGhlIFBhcnNlLk9iamVjdCBtdXN0IGNvbnRhaW4uXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBlcXVhbFRvOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9lc05vdEV4aXN0KGtleSk7XG4gICAgICB9IFxuXG4gICAgICB0aGlzLl93aGVyZVtrZXldID0gUGFyc2UuX2VuY29kZSh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZvciBjb25kaXRpb24gcXVlcmllc1xuICAgICAqL1xuICAgIF9hZGRDb25kaXRpb246IGZ1bmN0aW9uKGtleSwgY29uZGl0aW9uLCB2YWx1ZSkge1xuICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGEgY29uZGl0aW9uXG4gICAgICBpZiAoIXRoaXMuX3doZXJlW2tleV0pIHtcbiAgICAgICAgdGhpcy5fd2hlcmVba2V5XSA9IHt9O1xuICAgICAgfVxuICAgICAgdGhpcy5fd2hlcmVba2V5XVtjb25kaXRpb25dID0gUGFyc2UuX2VuY29kZSh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY29uc3RyYWludCB0byB0aGUgcXVlcnkgdGhhdCByZXF1aXJlcyBhIHBhcnRpY3VsYXIga2V5J3MgdmFsdWUgdG9cbiAgICAgKiBiZSBub3QgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgbXVzdCBub3QgYmUgZXF1YWxsZWQuXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBub3RFcXVhbFRvOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLl9hZGRDb25kaXRpb24oa2V5LCBcIiRuZVwiLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY29uc3RyYWludCB0byB0aGUgcXVlcnkgdGhhdCByZXF1aXJlcyBhIHBhcnRpY3VsYXIga2V5J3MgdmFsdWUgdG9cbiAgICAgKiBiZSBsZXNzIHRoYW4gdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgcHJvdmlkZXMgYW4gdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBsZXNzVGhhbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdGhpcy5fYWRkQ29uZGl0aW9uKGtleSwgXCIkbHRcIiwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbnN0cmFpbnQgdG8gdGhlIHF1ZXJ5IHRoYXQgcmVxdWlyZXMgYSBwYXJ0aWN1bGFyIGtleSdzIHZhbHVlIHRvXG4gICAgICogYmUgZ3JlYXRlciB0aGFuIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHByb3ZpZGVzIGFuIGxvd2VyIGJvdW5kLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgZ3JlYXRlclRoYW46IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuX2FkZENvbmRpdGlvbihrZXksIFwiJGd0XCIsIHZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBjb25zdHJhaW50IHRvIHRoZSBxdWVyeSB0aGF0IHJlcXVpcmVzIGEgcGFydGljdWxhciBrZXkncyB2YWx1ZSB0b1xuICAgICAqIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCBwcm92aWRlcyBhbiB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIGxlc3NUaGFuT3JFcXVhbFRvOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLl9hZGRDb25kaXRpb24oa2V5LCBcIiRsdGVcIiwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbnN0cmFpbnQgdG8gdGhlIHF1ZXJ5IHRoYXQgcmVxdWlyZXMgYSBwYXJ0aWN1bGFyIGtleSdzIHZhbHVlIHRvXG4gICAgICogYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHByb3ZpZGVzIGFuIGxvd2VyIGJvdW5kLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgZ3JlYXRlclRoYW5PckVxdWFsVG86IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuX2FkZENvbmRpdGlvbihrZXksIFwiJGd0ZVwiLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY29uc3RyYWludCB0byB0aGUgcXVlcnkgdGhhdCByZXF1aXJlcyBhIHBhcnRpY3VsYXIga2V5J3MgdmFsdWUgdG9cbiAgICAgKiBiZSBjb250YWluZWQgaW4gdGhlIHByb3ZpZGVkIGxpc3Qgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0aGF0IHdpbGwgbWF0Y2guXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBjb250YWluZWRJbjogZnVuY3Rpb24oa2V5LCB2YWx1ZXMpIHtcbiAgICAgIHRoaXMuX2FkZENvbmRpdGlvbihrZXksIFwiJGluXCIsIHZhbHVlcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY29uc3RyYWludCB0byB0aGUgcXVlcnkgdGhhdCByZXF1aXJlcyBhIHBhcnRpY3VsYXIga2V5J3MgdmFsdWUgdG9cbiAgICAgKiBub3QgYmUgY29udGFpbmVkIGluIHRoZSBwcm92aWRlZCBsaXN0IG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdGhhdCB3aWxsIG5vdCBtYXRjaC5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIG5vdENvbnRhaW5lZEluOiBmdW5jdGlvbihrZXksIHZhbHVlcykge1xuICAgICAgdGhpcy5fYWRkQ29uZGl0aW9uKGtleSwgXCIkbmluXCIsIHZhbHVlcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY29uc3RyYWludCB0byB0aGUgcXVlcnkgdGhhdCByZXF1aXJlcyBhIHBhcnRpY3VsYXIga2V5J3MgdmFsdWUgdG9cbiAgICAgKiBjb250YWluIGVhY2ggb25lIG9mIHRoZSBwcm92aWRlZCBsaXN0IG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suICBUaGlzIGtleSdzIHZhbHVlIG11c3QgYmUgYW4gYXJyYXkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdGhhdCB3aWxsIG1hdGNoLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgY29udGFpbnNBbGw6IGZ1bmN0aW9uKGtleSwgdmFsdWVzKSB7XG4gICAgICB0aGlzLl9hZGRDb25kaXRpb24oa2V5LCBcIiRhbGxcIiwgdmFsdWVzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbnN0cmFpbnQgZm9yIGZpbmRpbmcgb2JqZWN0cyB0aGF0IGNvbnRhaW4gdGhlIGdpdmVuIGtleS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgdGhhdCBzaG91bGQgZXhpc3QuXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBleGlzdHM6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdGhpcy5fYWRkQ29uZGl0aW9uKGtleSwgXCIkZXhpc3RzXCIsIHRydWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbnN0cmFpbnQgZm9yIGZpbmRpbmcgb2JqZWN0cyB0aGF0IGRvIG5vdCBjb250YWluIGEgZ2l2ZW4ga2V5LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0aGF0IHNob3VsZCBub3QgZXhpc3RcbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIGRvZXNOb3RFeGlzdDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB0aGlzLl9hZGRDb25kaXRpb24oa2V5LCBcIiRleGlzdHNcIiwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50IGZvciBmaW5kaW5nIHN0cmluZyB2YWx1ZXMgdGhhdCBtYXRjaFxuICAgICAqIHRoZSBwcm92aWRlZCByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAgICogVGhpcyBtYXkgYmUgc2xvdyBmb3IgbGFyZ2UgZGF0YXNldHMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IHRoYXQgdGhlIHN0cmluZyB0byBtYXRjaCBpcyBzdG9yZWQgaW4uXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4IFRoZSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybiB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIG1hdGNoZXM6IGZ1bmN0aW9uKGtleSwgcmVnZXgsIG1vZGlmaWVycykge1xuICAgICAgdGhpcy5fYWRkQ29uZGl0aW9uKGtleSwgXCIkcmVnZXhcIiwgcmVnZXgpO1xuICAgICAgaWYgKCFtb2RpZmllcnMpIHsgbW9kaWZpZXJzID0gXCJcIjsgfVxuICAgICAgLy8gSmF2YXNjcmlwdCByZWdleCBvcHRpb25zIHN1cHBvcnQgbWlnIGFzIGlubGluZSBvcHRpb25zIGJ1dCBzdG9yZSB0aGVtIFxuICAgICAgLy8gYXMgcHJvcGVydGllcyBvZiB0aGUgb2JqZWN0LiBXZSBzdXBwb3J0IG1pICYgc2hvdWxkIG1pZ3JhdGUgdGhlbSB0b1xuICAgICAgLy8gbW9kaWZpZXJzXG4gICAgICBpZiAocmVnZXguaWdub3JlQ2FzZSkgeyBtb2RpZmllcnMgKz0gJ2knOyB9XG4gICAgICBpZiAocmVnZXgubXVsdGlsaW5lKSB7IG1vZGlmaWVycyArPSAnbSc7IH1cblxuICAgICAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2FkZENvbmRpdGlvbihrZXksIFwiJG9wdGlvbnNcIiwgbW9kaWZpZXJzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBjb25zdHJhaW50IHRoYXQgcmVxdWlyZXMgdGhhdCBhIGtleSdzIHZhbHVlIG1hdGNoZXMgYSBQYXJzZS5RdWVyeVxuICAgICAqIGNvbnN0cmFpbnQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IHRoYXQgdGhlIGNvbnRhaW5zIHRoZSBvYmplY3QgdG8gbWF0Y2ggdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge1BhcnNlLlF1ZXJ5fSBxdWVyeSBUaGUgcXVlcnkgdGhhdCBzaG91bGQgbWF0Y2guXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBtYXRjaGVzUXVlcnk6IGZ1bmN0aW9uKGtleSwgcXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeUpTT04gPSBxdWVyeS50b0pTT04oKTtcbiAgICAgIHF1ZXJ5SlNPTi5jbGFzc05hbWUgPSBxdWVyeS5jbGFzc05hbWU7XG4gICAgICB0aGlzLl9hZGRDb25kaXRpb24oa2V5LCBcIiRpblF1ZXJ5XCIsIHF1ZXJ5SlNPTik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAvKipcbiAgICAgKiBBZGQgYSBjb25zdHJhaW50IHRoYXQgcmVxdWlyZXMgdGhhdCBhIGtleSdzIHZhbHVlIG5vdCBtYXRjaGVzIGFcbiAgICAgKiBQYXJzZS5RdWVyeSBjb25zdHJhaW50LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0aGF0IHRoZSBjb250YWlucyB0aGUgb2JqZWN0IHRvIG1hdGNoIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgcXVlcnkuXG4gICAgICogQHBhcmFtIHtQYXJzZS5RdWVyeX0gcXVlcnkgVGhlIHF1ZXJ5IHRoYXQgc2hvdWxkIG5vdCBtYXRjaC5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIGRvZXNOb3RNYXRjaFF1ZXJ5OiBmdW5jdGlvbihrZXksIHF1ZXJ5KSB7XG4gICAgICB2YXIgcXVlcnlKU09OID0gcXVlcnkudG9KU09OKCk7XG4gICAgICBxdWVyeUpTT04uY2xhc3NOYW1lID0gcXVlcnkuY2xhc3NOYW1lO1xuICAgICAgdGhpcy5fYWRkQ29uZGl0aW9uKGtleSwgXCIkbm90SW5RdWVyeVwiLCBxdWVyeUpTT04pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY29uc3RyYWludCB0aGF0IHJlcXVpcmVzIHRoYXQgYSBrZXkncyB2YWx1ZSBtYXRjaGVzIGEgdmFsdWUgaW5cbiAgICAgKiBhbiBvYmplY3QgcmV0dXJuZWQgYnkgYSBkaWZmZXJlbnQgUGFyc2UuUXVlcnkuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IHRoYXQgY29udGFpbnMgdGhlIHZhbHVlIHRoYXQgaXMgYmVpbmdcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHF1ZXJ5S2V5IFRoZSBrZXkgaW4gdGhlIG9iamVjdHMgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IHRvXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoIGFnYWluc3QuXG4gICAgICogQHBhcmFtIHtQYXJzZS5RdWVyeX0gcXVlcnkgVGhlIHF1ZXJ5IHRvIHJ1bi5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIG1hdGNoZXNLZXlJblF1ZXJ5OiBmdW5jdGlvbihrZXksIHF1ZXJ5S2V5LCBxdWVyeSkge1xuICAgICAgdmFyIHF1ZXJ5SlNPTiA9IHF1ZXJ5LnRvSlNPTigpO1xuICAgICAgcXVlcnlKU09OLmNsYXNzTmFtZSA9IHF1ZXJ5LmNsYXNzTmFtZTtcbiAgICAgIHRoaXMuX2FkZENvbmRpdGlvbihrZXksIFwiJHNlbGVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHsga2V5OiBxdWVyeUtleSwgcXVlcnk6IHF1ZXJ5SlNPTiB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBjb25zdHJhaW50IHRoYXQgcmVxdWlyZXMgdGhhdCBhIGtleSdzIHZhbHVlIG5vdCBtYXRjaCBhIHZhbHVlIGluXG4gICAgICogYW4gb2JqZWN0IHJldHVybmVkIGJ5IGEgZGlmZmVyZW50IFBhcnNlLlF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0aGF0IGNvbnRhaW5zIHRoZSB2YWx1ZSB0aGF0IGlzIGJlaW5nXG4gICAgICogICAgICAgICAgICAgICAgICAgICBleGNsdWRlZC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlcnlLZXkgVGhlIGtleSBpbiB0aGUgb2JqZWN0cyByZXR1cm5lZCBieSB0aGUgcXVlcnkgdG9cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggYWdhaW5zdC5cbiAgICAgKiBAcGFyYW0ge1BhcnNlLlF1ZXJ5fSBxdWVyeSBUaGUgcXVlcnkgdG8gcnVuLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgZG9lc05vdE1hdGNoS2V5SW5RdWVyeTogZnVuY3Rpb24oa2V5LCBxdWVyeUtleSwgcXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeUpTT04gPSBxdWVyeS50b0pTT04oKTtcbiAgICAgIHF1ZXJ5SlNPTi5jbGFzc05hbWUgPSBxdWVyeS5jbGFzc05hbWU7XG4gICAgICB0aGlzLl9hZGRDb25kaXRpb24oa2V5LCBcIiRkb250U2VsZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgeyBrZXk6IHF1ZXJ5S2V5LCBxdWVyeTogcXVlcnlKU09OIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBjb25zdHJhaW50IHRoYXQgYXQgbGVhc3Qgb25lIG9mIHRoZSBwYXNzZWQgaW4gcXVlcmllcyBtYXRjaGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHF1ZXJpZXNcbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIF9vclF1ZXJ5OiBmdW5jdGlvbihxdWVyaWVzKSB7XG4gICAgICB2YXIgcXVlcnlKU09OID0gXy5tYXAocXVlcmllcywgZnVuY3Rpb24ocSkge1xuICAgICAgICByZXR1cm4gcS50b0pTT04oKS53aGVyZTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl93aGVyZS4kb3IgPSBxdWVyeUpTT047XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBzdHJpbmcgaW50byBhIHJlZ2V4IHRoYXQgbWF0Y2hlcyBpdC5cbiAgICAgKiBTdXJyb3VuZGluZyB3aXRoIFxcUSAuLiBcXEUgZG9lcyB0aGlzLCB3ZSBqdXN0IG5lZWQgdG8gZXNjYXBlIFxcRSdzIGluXG4gICAgICogdGhlIHRleHQgc2VwYXJhdGVseS5cbiAgICAgKi9cbiAgICBfcXVvdGU6IGZ1bmN0aW9uKHMpIHtcbiAgICAgIHJldHVybiBcIlxcXFxRXCIgKyBzLnJlcGxhY2UoXCJcXFxcRVwiLCBcIlxcXFxFXFxcXFxcXFxFXFxcXFFcIikgKyBcIlxcXFxFXCI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbnN0cmFpbnQgZm9yIGZpbmRpbmcgc3RyaW5nIHZhbHVlcyB0aGF0IGNvbnRhaW4gYSBwcm92aWRlZFxuICAgICAqIHN0cmluZy4gIFRoaXMgbWF5IGJlIHNsb3cgZm9yIGxhcmdlIGRhdGFzZXRzLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0aGF0IHRoZSBzdHJpbmcgdG8gbWF0Y2ggaXMgc3RvcmVkIGluLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJzdHJpbmcgVGhlIHN1YnN0cmluZyB0aGF0IHRoZSB2YWx1ZSBtdXN0IGNvbnRhaW4uXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBjb250YWluczogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdGhpcy5fYWRkQ29uZGl0aW9uKGtleSwgXCIkcmVnZXhcIiwgdGhpcy5fcXVvdGUodmFsdWUpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBjb25zdHJhaW50IGZvciBmaW5kaW5nIHN0cmluZyB2YWx1ZXMgdGhhdCBzdGFydCB3aXRoIGEgcHJvdmlkZWRcbiAgICAgKiBzdHJpbmcuICBUaGlzIHF1ZXJ5IHdpbGwgdXNlIHRoZSBiYWNrZW5kIGluZGV4LCBzbyBpdCB3aWxsIGJlIGZhc3QgZXZlblxuICAgICAqIGZvciBsYXJnZSBkYXRhc2V0cy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgdGhhdCB0aGUgc3RyaW5nIHRvIG1hdGNoIGlzIHN0b3JlZCBpbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4IFRoZSBzdWJzdHJpbmcgdGhhdCB0aGUgdmFsdWUgbXVzdCBzdGFydCB3aXRoLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgc3RhcnRzV2l0aDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdGhpcy5fYWRkQ29uZGl0aW9uKGtleSwgXCIkcmVnZXhcIiwgXCJeXCIgKyB0aGlzLl9xdW90ZSh2YWx1ZSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbnN0cmFpbnQgZm9yIGZpbmRpbmcgc3RyaW5nIHZhbHVlcyB0aGF0IGVuZCB3aXRoIGEgcHJvdmlkZWRcbiAgICAgKiBzdHJpbmcuICBUaGlzIHdpbGwgYmUgc2xvdyBmb3IgbGFyZ2UgZGF0YXNldHMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IHRoYXQgdGhlIHN0cmluZyB0byBtYXRjaCBpcyBzdG9yZWQgaW4uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN1ZmZpeCBUaGUgc3Vic3RyaW5nIHRoYXQgdGhlIHZhbHVlIG11c3QgZW5kIHdpdGguXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBlbmRzV2l0aDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdGhpcy5fYWRkQ29uZGl0aW9uKGtleSwgXCIkcmVnZXhcIiwgdGhpcy5fcXVvdGUodmFsdWUpICsgXCIkXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNvcnRzIHRoZSByZXN1bHRzIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgZ2l2ZW4ga2V5LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7KFN0cmluZ3xTdHJpbmdbXXwuLi5TdHJpbmd9IGtleSBUaGUga2V5IHRvIG9yZGVyIGJ5LCB3aGljaCBpcyBhIFxuICAgICAqIHN0cmluZyBvZiBjb21tYSBzZXBhcmF0ZWQgdmFsdWVzLCBvciBhbiBBcnJheSBvZiBrZXlzLCBvciBtdWx0aXBsZSBrZXlzLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgYXNjZW5kaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX29yZGVyID0gW107XG4gICAgICByZXR1cm4gdGhpcy5hZGRBc2NlbmRpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU29ydHMgdGhlIHJlc3VsdHMgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSBnaXZlbiBrZXksIFxuICAgICAqIGJ1dCBjYW4gYWxzbyBhZGQgc2Vjb25kYXJ5IHNvcnQgZGVzY3JpcHRvcnMgd2l0aG91dCBvdmVyd3JpdGluZyBfb3JkZXIuXG4gICAgICogXG4gICAgICogQHBhcmFtIHsoU3RyaW5nfFN0cmluZ1tdfC4uLlN0cmluZ30ga2V5IFRoZSBrZXkgdG8gb3JkZXIgYnksIHdoaWNoIGlzIGFcbiAgICAgKiBzdHJpbmcgb2YgY29tbWEgc2VwYXJhdGVkIHZhbHVlcywgb3IgYW4gQXJyYXkgb2Yga2V5cywgb3IgbXVsdGlwbGUga2V5cy5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIGFkZEFzY2VuZGluZzogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7IFxuICAgICAgaWYgKCF0aGlzLl9vcmRlcikge1xuICAgICAgICB0aGlzLl9vcmRlciA9IFtdO1xuICAgICAgfVxuICAgICAgUGFyc2UuX2FycmF5RWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAga2V5ID0ga2V5LmpvaW4oKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLl9vcmRlciA9IHNlbGYuX29yZGVyLmNvbmNhdChrZXkucmVwbGFjZSgvXFxzL2csIFwiXCIpLnNwbGl0KFwiLFwiKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTb3J0cyB0aGUgcmVzdWx0cyBpbiBkZXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSBnaXZlbiBrZXkuXG4gICAgICogXG4gICAgICogQHBhcmFtIHsoU3RyaW5nfFN0cmluZ1tdfC4uLlN0cmluZ30ga2V5IFRoZSBrZXkgdG8gb3JkZXIgYnksIHdoaWNoIGlzIGFcbiAgICAgKiBzdHJpbmcgb2YgY29tbWEgc2VwYXJhdGVkIHZhbHVlcywgb3IgYW4gQXJyYXkgb2Yga2V5cywgb3IgbXVsdGlwbGUga2V5cy5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIGRlc2NlbmRpbmc6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdGhpcy5fb3JkZXIgPSBbXTtcbiAgICAgIHJldHVybiB0aGlzLmFkZERlc2NlbmRpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU29ydHMgdGhlIHJlc3VsdHMgaW4gZGVzY2VuZGluZyBvcmRlciBieSB0aGUgZ2l2ZW4ga2V5LFxuICAgICAqIGJ1dCBjYW4gYWxzbyBhZGQgc2Vjb25kYXJ5IHNvcnQgZGVzY3JpcHRvcnMgd2l0aG91dCBvdmVyd3JpdGluZyBfb3JkZXIuXG4gICAgICogXG4gICAgICogQHBhcmFtIHsoU3RyaW5nfFN0cmluZ1tdfC4uLlN0cmluZ30ga2V5IFRoZSBrZXkgdG8gb3JkZXIgYnksIHdoaWNoIGlzIGFcbiAgICAgKiBzdHJpbmcgb2YgY29tbWEgc2VwYXJhdGVkIHZhbHVlcywgb3IgYW4gQXJyYXkgb2Yga2V5cywgb3IgbXVsdGlwbGUga2V5cy5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5RdWVyeX0gUmV0dXJucyB0aGUgcXVlcnksIHNvIHlvdSBjYW4gY2hhaW4gdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIGFkZERlc2NlbmRpbmc6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzOyBcbiAgICAgIGlmICghdGhpcy5fb3JkZXIpIHtcbiAgICAgICAgdGhpcy5fb3JkZXIgPSBbXTtcbiAgICAgIH1cbiAgICAgIFBhcnNlLl9hcnJheUVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgIGtleSA9IGtleS5qb2luKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5fb3JkZXIgPSBzZWxmLl9vcmRlci5jb25jYXQoXG4gICAgICAgICAgXy5tYXAoa2V5LnJlcGxhY2UoL1xccy9nLCBcIlwiKS5zcGxpdChcIixcIiksIFxuICAgICAgICAgICAgZnVuY3Rpb24oaykgeyByZXR1cm4gXCItXCIgKyBrOyB9KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwcm94aW1pdHkgYmFzZWQgY29uc3RyYWludCBmb3IgZmluZGluZyBvYmplY3RzIHdpdGgga2V5IHBvaW50XG4gICAgICogdmFsdWVzIG5lYXIgdGhlIHBvaW50IGdpdmVuLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0aGF0IHRoZSBQYXJzZS5HZW9Qb2ludCBpcyBzdG9yZWQgaW4uXG4gICAgICogQHBhcmFtIHtQYXJzZS5HZW9Qb2ludH0gcG9pbnQgVGhlIHJlZmVyZW5jZSBQYXJzZS5HZW9Qb2ludCB0aGF0IGlzIHVzZWQuXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBuZWFyOiBmdW5jdGlvbihrZXksIHBvaW50KSB7XG4gICAgICBpZiAoIShwb2ludCBpbnN0YW5jZW9mIFBhcnNlLkdlb1BvaW50KSkge1xuICAgICAgICAvLyBUcnkgdG8gY2FzdCBpdCB0byBhIEdlb1BvaW50LCBzbyB0aGF0IG5lYXIoXCJsb2NcIiwgWzIwLDMwXSkgd29ya3MuXG4gICAgICAgIHBvaW50ID0gbmV3IFBhcnNlLkdlb1BvaW50KHBvaW50KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FkZENvbmRpdGlvbihrZXksIFwiJG5lYXJTcGhlcmVcIiwgcG9pbnQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHByb3hpbWl0eSBiYXNlZCBjb25zdHJhaW50IGZvciBmaW5kaW5nIG9iamVjdHMgd2l0aCBrZXkgcG9pbnRcbiAgICAgKiB2YWx1ZXMgbmVhciB0aGUgcG9pbnQgZ2l2ZW4gYW5kIHdpdGhpbiB0aGUgbWF4aW11bSBkaXN0YW5jZSBnaXZlbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgdGhhdCB0aGUgUGFyc2UuR2VvUG9pbnQgaXMgc3RvcmVkIGluLlxuICAgICAqIEBwYXJhbSB7UGFyc2UuR2VvUG9pbnR9IHBvaW50IFRoZSByZWZlcmVuY2UgUGFyc2UuR2VvUG9pbnQgdGhhdCBpcyB1c2VkLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEaXN0YW5jZSBNYXhpbXVtIGRpc3RhbmNlIChpbiByYWRpYW5zKSBvZiByZXN1bHRzIHRvXG4gICAgICogICByZXR1cm4uXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICB3aXRoaW5SYWRpYW5zOiBmdW5jdGlvbihrZXksIHBvaW50LCBkaXN0YW5jZSkge1xuICAgICAgdGhpcy5uZWFyKGtleSwgcG9pbnQpO1xuICAgICAgdGhpcy5fYWRkQ29uZGl0aW9uKGtleSwgXCIkbWF4RGlzdGFuY2VcIiwgZGlzdGFuY2UpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHByb3hpbWl0eSBiYXNlZCBjb25zdHJhaW50IGZvciBmaW5kaW5nIG9iamVjdHMgd2l0aCBrZXkgcG9pbnRcbiAgICAgKiB2YWx1ZXMgbmVhciB0aGUgcG9pbnQgZ2l2ZW4gYW5kIHdpdGhpbiB0aGUgbWF4aW11bSBkaXN0YW5jZSBnaXZlbi5cbiAgICAgKiBSYWRpdXMgb2YgZWFydGggdXNlZCBpcyAzOTU4LjggbWlsZXMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IHRoYXQgdGhlIFBhcnNlLkdlb1BvaW50IGlzIHN0b3JlZCBpbi5cbiAgICAgKiBAcGFyYW0ge1BhcnNlLkdlb1BvaW50fSBwb2ludCBUaGUgcmVmZXJlbmNlIFBhcnNlLkdlb1BvaW50IHRoYXQgaXMgdXNlZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbWF4RGlzdGFuY2UgTWF4aW11bSBkaXN0YW5jZSAoaW4gbWlsZXMpIG9mIHJlc3VsdHMgdG9cbiAgICAgKiAgICAgcmV0dXJuLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgd2l0aGluTWlsZXM6IGZ1bmN0aW9uKGtleSwgcG9pbnQsIGRpc3RhbmNlKSB7XG4gICAgICByZXR1cm4gdGhpcy53aXRoaW5SYWRpYW5zKGtleSwgcG9pbnQsIGRpc3RhbmNlIC8gMzk1OC44KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgcHJveGltaXR5IGJhc2VkIGNvbnN0cmFpbnQgZm9yIGZpbmRpbmcgb2JqZWN0cyB3aXRoIGtleSBwb2ludFxuICAgICAqIHZhbHVlcyBuZWFyIHRoZSBwb2ludCBnaXZlbiBhbmQgd2l0aGluIHRoZSBtYXhpbXVtIGRpc3RhbmNlIGdpdmVuLlxuICAgICAqIFJhZGl1cyBvZiBlYXJ0aCB1c2VkIGlzIDYzNzEuMCBraWxvbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0aGF0IHRoZSBQYXJzZS5HZW9Qb2ludCBpcyBzdG9yZWQgaW4uXG4gICAgICogQHBhcmFtIHtQYXJzZS5HZW9Qb2ludH0gcG9pbnQgVGhlIHJlZmVyZW5jZSBQYXJzZS5HZW9Qb2ludCB0aGF0IGlzIHVzZWQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG1heERpc3RhbmNlIE1heGltdW0gZGlzdGFuY2UgKGluIGtpbG9tZXRlcnMpIG9mIHJlc3VsdHNcbiAgICAgKiAgICAgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgd2l0aGluS2lsb21ldGVyczogZnVuY3Rpb24oa2V5LCBwb2ludCwgZGlzdGFuY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLndpdGhpblJhZGlhbnMoa2V5LCBwb2ludCwgZGlzdGFuY2UgLyA2MzcxLjApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBjb25zdHJhaW50IHRvIHRoZSBxdWVyeSB0aGF0IHJlcXVpcmVzIGEgcGFydGljdWxhciBrZXknc1xuICAgICAqIGNvb3JkaW5hdGVzIGJlIGNvbnRhaW5lZCB3aXRoaW4gYSBnaXZlbiByZWN0YW5ndWxhciBnZW9ncmFwaGljIGJvdW5kaW5nXG4gICAgICogYm94LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0byBiZSBjb25zdHJhaW5lZC5cbiAgICAgKiBAcGFyYW0ge1BhcnNlLkdlb1BvaW50fSBzb3V0aHdlc3RcbiAgICAgKiAgICAgVGhlIGxvd2VyLWxlZnQgaW5jbHVzaXZlIGNvcm5lciBvZiB0aGUgYm94LlxuICAgICAqIEBwYXJhbSB7UGFyc2UuR2VvUG9pbnR9IG5vcnRoZWFzdFxuICAgICAqICAgICBUaGUgdXBwZXItcmlnaHQgaW5jbHVzaXZlIGNvcm5lciBvZiB0aGUgYm94LlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgd2l0aGluR2VvQm94OiBmdW5jdGlvbihrZXksIHNvdXRod2VzdCwgbm9ydGhlYXN0KSB7XG4gICAgICBpZiAoIShzb3V0aHdlc3QgaW5zdGFuY2VvZiBQYXJzZS5HZW9Qb2ludCkpIHtcbiAgICAgICAgc291dGh3ZXN0ID0gbmV3IFBhcnNlLkdlb1BvaW50KHNvdXRod2VzdCk7XG4gICAgICB9XG4gICAgICBpZiAoIShub3J0aGVhc3QgaW5zdGFuY2VvZiBQYXJzZS5HZW9Qb2ludCkpIHtcbiAgICAgICAgbm9ydGhlYXN0ID0gbmV3IFBhcnNlLkdlb1BvaW50KG5vcnRoZWFzdCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9hZGRDb25kaXRpb24oa2V5LCAnJHdpdGhpbicsIHsgJyRib3gnOiBbc291dGh3ZXN0LCBub3J0aGVhc3RdIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluY2x1ZGUgbmVzdGVkIFBhcnNlLk9iamVjdHMgZm9yIHRoZSBwcm92aWRlZCBrZXkuICBZb3UgY2FuIHVzZSBkb3RcbiAgICAgKiBub3RhdGlvbiB0byBzcGVjaWZ5IHdoaWNoIGZpZWxkcyBpbiB0aGUgaW5jbHVkZWQgb2JqZWN0IGFyZSBhbHNvIGZldGNoZWQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUgbmFtZSBvZiB0aGUga2V5IHRvIGluY2x1ZGUuXG4gICAgICogQHJldHVybiB7UGFyc2UuUXVlcnl9IFJldHVybnMgdGhlIHF1ZXJ5LCBzbyB5b3UgY2FuIGNoYWluIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBpbmNsdWRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIFBhcnNlLl9hcnJheUVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKF8uaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgc2VsZi5faW5jbHVkZSA9IHNlbGYuX2luY2x1ZGUuY29uY2F0KGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5faW5jbHVkZS5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc3RyaWN0IHRoZSBmaWVsZHMgb2YgdGhlIHJldHVybmVkIFBhcnNlLk9iamVjdHMgdG8gaW5jbHVkZSBvbmx5IHRoZVxuICAgICAqIHByb3ZpZGVkIGtleXMuICBJZiB0aGlzIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcywgdGhlbiBhbGwgb2YgdGhlIGtleXNcbiAgICAgKiBzcGVjaWZpZWQgaW4gZWFjaCBvZiB0aGUgY2FsbHMgd2lsbCBiZSBpbmNsdWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBrZXlzIFRoZSBuYW1lcyBvZiB0aGUga2V5cyB0byBpbmNsdWRlLlxuICAgICAqIEByZXR1cm4ge1BhcnNlLlF1ZXJ5fSBSZXR1cm5zIHRoZSBxdWVyeSwgc28geW91IGNhbiBjaGFpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgc2VsZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuX3NlbGVjdCA9IHRoaXMuX3NlbGVjdCB8fCBbXTtcbiAgICAgIFBhcnNlLl9hcnJheUVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKF8uaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgc2VsZi5fc2VsZWN0ID0gc2VsZi5fc2VsZWN0LmNvbmNhdChrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuX3NlbGVjdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWFjaCByZXN1bHQgb2YgYSBxdWVyeSwgY2FsbGluZyBhIGNhbGxiYWNrIGZvciBlYWNoIG9uZS4gSWZcbiAgICAgKiB0aGUgY2FsbGJhY2sgcmV0dXJucyBhIHByb21pc2UsIHRoZSBpdGVyYXRpb24gd2lsbCBub3QgY29udGludWUgdW50aWxcbiAgICAgKiB0aGF0IHByb21pc2UgaGFzIGJlZW4gZnVsZmlsbGVkLiBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBhIHJlamVjdGVkXG4gICAgICogcHJvbWlzZSwgdGhlbiBpdGVyYXRpb24gd2lsbCBzdG9wIHdpdGggdGhhdCBlcnJvci4gVGhlIGl0ZW1zIGFyZVxuICAgICAqIHByb2Nlc3NlZCBpbiBhbiB1bnNwZWNpZmllZCBvcmRlci4gVGhlIHF1ZXJ5IG1heSBub3QgaGF2ZSBhbnkgc29ydCBvcmRlcixcbiAgICAgKiBhbmQgbWF5IG5vdCB1c2UgbGltaXQgb3Igc2tpcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIHdpdGggZWFjaCByZXN1bHRcbiAgICAgKiAgICAgb2YgdGhlIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9wdGlvbmFsIEJhY2tib25lLWxpa2Ugb3B0aW9ucyBvYmplY3Qgd2l0aFxuICAgICAqICAgICBzdWNjZXNzIGFuZCBlcnJvciBjYWxsYmFja3MgdGhhdCB3aWxsIGJlIGludm9rZWQgb25jZSB0aGUgaXRlcmF0aW9uXG4gICAgICogICAgIGhhcyBmaW5pc2hlZC5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5Qcm9taXNlfSBBIHByb21pc2UgdGhhdCB3aWxsIGJlIGZ1bGZpbGxlZCBvbmNlIHRoZVxuICAgICAqICAgICBpdGVyYXRpb24gaGFzIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBlYWNoOiBmdW5jdGlvbihjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIGlmICh0aGlzLl9vcmRlciB8fCB0aGlzLl9za2lwIHx8ICh0aGlzLl9saW1pdCA+PSAwKSkge1xuICAgICAgICB2YXIgZXJyb3IgPVxuICAgICAgICAgIFwiQ2Fubm90IGl0ZXJhdGUgb24gYSBxdWVyeSB3aXRoIHNvcnQsIHNraXAsIG9yIGxpbWl0LlwiO1xuICAgICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5lcnJvcihlcnJvcikuX3RoZW5SdW5DYWxsYmFja3Mob3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9taXNlID0gbmV3IFBhcnNlLlByb21pc2UoKTtcblxuICAgICAgdmFyIHF1ZXJ5ID0gbmV3IFBhcnNlLlF1ZXJ5KHRoaXMub2JqZWN0Q2xhc3MpO1xuICAgICAgLy8gV2UgY2FuIG92ZXJyaWRlIHRoZSBiYXRjaCBzaXplIGZyb20gdGhlIG9wdGlvbnMuXG4gICAgICAvLyBUaGlzIGlzIHVuZG9jdW1lbnRlZCwgYnV0IHVzZWZ1bCBmb3IgdGVzdGluZy5cbiAgICAgIHF1ZXJ5Ll9saW1pdCA9IG9wdGlvbnMuYmF0Y2hTaXplIHx8IDEwMDtcbiAgICAgIHF1ZXJ5Ll93aGVyZSA9IF8uY2xvbmUodGhpcy5fd2hlcmUpO1xuICAgICAgcXVlcnkuX2luY2x1ZGUgPSBfLmNsb25lKHRoaXMuX2luY2x1ZGUpO1xuICAgICAgaWYgKHRoaXMuX3NlbGVjdCkge1xuICAgICAgICBxdWVyeS5fc2VsZWN0ID0gXy5jbG9uZSh0aGlzLl9zZWxlY3QpO1xuICAgICAgfVxuXG4gICAgICBxdWVyeS5hc2NlbmRpbmcoJ29iamVjdElkJyk7XG5cbiAgICAgIHZhciBmaW5kT3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKF8uaGFzKG9wdGlvbnMsIFwidXNlTWFzdGVyS2V5XCIpKSB7XG4gICAgICAgIGZpbmRPcHRpb25zLnVzZU1hc3RlcktleSA9IG9wdGlvbnMudXNlTWFzdGVyS2V5O1xuICAgICAgfVxuICAgICAgaWYgKF8uaGFzKG9wdGlvbnMsICdzZXNzaW9uVG9rZW4nKSkge1xuICAgICAgICBmaW5kT3B0aW9ucy5zZXNzaW9uVG9rZW4gPSBvcHRpb25zLnNlc3Npb25Ub2tlbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpbmlzaGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5fY29udGludWVXaGlsZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICFmaW5pc2hlZDtcblxuICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBxdWVyeS5maW5kKGZpbmRPcHRpb25zKS50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHtcbiAgICAgICAgICB2YXIgY2FsbGJhY2tzRG9uZSA9IFBhcnNlLlByb21pc2UuYXMoKTtcbiAgICAgICAgICBQYXJzZS5fLmVhY2gocmVzdWx0cywgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBjYWxsYmFja3NEb25lID0gY2FsbGJhY2tzRG9uZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrc0RvbmUudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+PSBxdWVyeS5fbGltaXQpIHtcbiAgICAgICAgICAgICAgcXVlcnkuZ3JlYXRlclRoYW4oXCJvYmplY3RJZFwiLCByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoIC0gMV0uaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pLl90aGVuUnVuQ2FsbGJhY2tzKG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxufSh0aGlzKSk7XG5cbi8qZ2xvYmFsIEZCOiBmYWxzZSAsIGNvbnNvbGU6IGZhbHNlKi9cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICB2YXIgUGFyc2UgPSByb290LlBhcnNlO1xuICB2YXIgXyA9IFBhcnNlLl87XG5cbiAgdmFyIFBVQkxJQ19LRVkgPSBcIipcIjtcblxuICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgdmFyIHJlcXVlc3RlZFBlcm1pc3Npb25zO1xuICB2YXIgaW5pdE9wdGlvbnM7XG4gIHZhciBwcm92aWRlciA9IHtcbiAgICBhdXRoZW50aWNhdGU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIEZCLmxvZ2luKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5hdXRoUmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5zdWNjZXNzKSB7XG4gICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3Moc2VsZiwge1xuICAgICAgICAgICAgICBpZDogcmVzcG9uc2UuYXV0aFJlc3BvbnNlLnVzZXJJRCxcbiAgICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiByZXNwb25zZS5hdXRoUmVzcG9uc2UuYWNjZXNzVG9rZW4sXG4gICAgICAgICAgICAgIGV4cGlyYXRpb25fZGF0ZTogbmV3IERhdGUocmVzcG9uc2UuYXV0aFJlc3BvbnNlLmV4cGlyZXNJbiAqIDEwMDAgK1xuICAgICAgICAgICAgICAgICAgKG5ldyBEYXRlKCkpLmdldFRpbWUoKSkudG9KU09OKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5lcnJvcikge1xuICAgICAgICAgICAgb3B0aW9ucy5lcnJvcihzZWxmLCByZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIHNjb3BlOiByZXF1ZXN0ZWRQZXJtaXNzaW9uc1xuICAgICAgfSk7XG4gICAgfSxcbiAgICByZXN0b3JlQXV0aGVudGljYXRpb246IGZ1bmN0aW9uKGF1dGhEYXRhKSB7XG4gICAgICBpZiAoYXV0aERhdGEpIHtcbiAgICAgICAgdmFyIGF1dGhSZXNwb25zZSA9IHtcbiAgICAgICAgICB1c2VySUQ6IGF1dGhEYXRhLmlkLFxuICAgICAgICAgIGFjY2Vzc1Rva2VuOiBhdXRoRGF0YS5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgZXhwaXJlc0luOiAoUGFyc2UuX3BhcnNlRGF0ZShhdXRoRGF0YS5leHBpcmF0aW9uX2RhdGUpLmdldFRpbWUoKSAtXG4gICAgICAgICAgICAgIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkpIC8gMTAwMFxuICAgICAgICB9O1xuICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IF8uY2xvbmUoaW5pdE9wdGlvbnMpO1xuICAgICAgICBuZXdPcHRpb25zLmF1dGhSZXNwb25zZSA9IGF1dGhSZXNwb25zZTtcblxuICAgICAgICAvLyBTdXBwcmVzcyBjaGVja3MgZm9yIGxvZ2luIHN0YXR1cyBmcm9tIHRoZSBicm93c2VyLlxuICAgICAgICBuZXdPcHRpb25zLnN0YXR1cyA9IGZhbHNlO1xuXG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGRvZXNuJ3QgbWF0Y2ggdGhlIG9uZSBrbm93biBieSB0aGUgRkIgU0RLLCBsb2cgb3V0LlxuICAgICAgICAvLyBNb3N0IG9mIHRoZSB0aW1lLCB0aGUgdXNlcnMgd2lsbCBtYXRjaCAtLSBpdCdzIG9ubHkgaW4gY2FzZXMgd2hlcmVcbiAgICAgICAgLy8gdGhlIEZCIFNESyBrbm93cyBvZiBhIGRpZmZlcmVudCB1c2VyIHRoYW4gdGhlIG9uZSBiZWluZyByZXN0b3JlZFxuICAgICAgICAvLyBmcm9tIGEgUGFyc2UgVXNlciB0aGF0IGxvZ2dlZCBpbiB3aXRoIHVzZXJuYW1lL3Bhc3N3b3JkLlxuICAgICAgICB2YXIgZXhpc3RpbmdSZXNwb25zZSA9IEZCLmdldEF1dGhSZXNwb25zZSgpO1xuICAgICAgICBpZiAoZXhpc3RpbmdSZXNwb25zZSAmJlxuICAgICAgICAgICAgZXhpc3RpbmdSZXNwb25zZS51c2VySUQgIT09IGF1dGhSZXNwb25zZS51c2VySUQpIHtcbiAgICAgICAgICBGQi5sb2dvdXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEZCLmluaXQobmV3T3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGdldEF1dGhUeXBlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBcImZhY2Vib29rXCI7XG4gICAgfSxcbiAgICBkZWF1dGhlbnRpY2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnJlc3RvcmVBdXRoZW50aWNhdGlvbihudWxsKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgc2V0IG9mIHV0aWxpdGllcyBmb3IgdXNpbmcgUGFyc2Ugd2l0aCBGYWNlYm9vay5cbiAgICogQG5hbWVzcGFjZVxuICAgKiBQcm92aWRlcyBhIHNldCBvZiB1dGlsaXRpZXMgZm9yIHVzaW5nIFBhcnNlIHdpdGggRmFjZWJvb2suXG4gICAqL1xuICBQYXJzZS5GYWNlYm9va1V0aWxzID0ge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIFBhcnNlIEZhY2Vib29rIGludGVncmF0aW9uLiAgQ2FsbCB0aGlzIGZ1bmN0aW9uIGFmdGVyIHlvdVxuICAgICAqIGhhdmUgbG9hZGVkIHRoZSBGYWNlYm9vayBKYXZhc2NyaXB0IFNESyB3aXRoIHRoZSBzYW1lIHBhcmFtZXRlcnNcbiAgICAgKiBhcyB5b3Ugd291bGQgcGFzcyB0bzxjb2RlPlxuICAgICAqIDxhIGhyZWY9XG4gICAgICogXCJodHRwczovL2RldmVsb3BlcnMuZmFjZWJvb2suY29tL2RvY3MvcmVmZXJlbmNlL2phdmFzY3JpcHQvRkIuaW5pdC9cIj5cbiAgICAgKiBGQi5pbml0KCk8L2E+PC9jb2RlPi4gIFBhcnNlLkZhY2Vib29rVXRpbHMgd2lsbCBpbnZva2UgRkIuaW5pdCgpIGZvciB5b3VcbiAgICAgKiB3aXRoIHRoZXNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEZhY2Vib29rIG9wdGlvbnMgYXJndW1lbnQgYXMgZGVzY3JpYmVkIGhlcmU6XG4gICAgICogICA8YSBocmVmPVxuICAgICAqICAgXCJodHRwczovL2RldmVsb3BlcnMuZmFjZWJvb2suY29tL2RvY3MvcmVmZXJlbmNlL2phdmFzY3JpcHQvRkIuaW5pdC9cIj5cbiAgICAgKiAgIEZCLmluaXQoKTwvYT4uIFRoZSBzdGF0dXMgZmxhZyB3aWxsIGJlIGNvZXJjZWQgdG8gJ2ZhbHNlJyBiZWNhdXNlIGl0XG4gICAgICogICBpbnRlcmZlcmVzIHdpdGggUGFyc2UgRmFjZWJvb2sgaW50ZWdyYXRpb24uIENhbGwgRkIuZ2V0TG9naW5TdGF0dXMoKVxuICAgICAqICAgZXhwbGljaXRseSBpZiB0aGlzIGJlaGF2aW9yIGlzIHJlcXVpcmVkIGJ5IHlvdXIgYXBwbGljYXRpb24uXG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZihGQikgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IFwiVGhlIEZhY2Vib29rIEphdmFTY3JpcHQgU0RLIG11c3QgYmUgbG9hZGVkIGJlZm9yZSBjYWxsaW5nIGluaXQuXCI7XG4gICAgICB9IFxuICAgICAgaW5pdE9wdGlvbnMgPSBfLmNsb25lKG9wdGlvbnMpIHx8IHt9O1xuICAgICAgaWYgKGluaXRPcHRpb25zLnN0YXR1cyAmJiB0eXBlb2YoY29uc29sZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdmFyIHdhcm4gPSBjb25zb2xlLndhcm4gfHwgY29uc29sZS5sb2cgfHwgZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgd2Fybi5jYWxsKGNvbnNvbGUsIFwiVGhlICdzdGF0dXMnIGZsYWcgcGFzc2VkIGludG9cIiArXG4gICAgICAgICAgXCIgRkIuaW5pdCwgd2hlbiBzZXQgdG8gdHJ1ZSwgY2FuIGludGVyZmVyZSB3aXRoIFBhcnNlIEZhY2Vib29rXCIgK1xuICAgICAgICAgIFwiIGludGVncmF0aW9uLCBzbyBpdCBoYXMgYmVlbiBzdXBwcmVzc2VkLiBQbGVhc2UgY2FsbFwiICtcbiAgICAgICAgICBcIiBGQi5nZXRMb2dpblN0YXR1cygpIGV4cGxpY2l0bHkgaWYgeW91IHJlcXVpcmUgdGhpcyBiZWhhdmlvci5cIik7XG4gICAgICB9XG4gICAgICBpbml0T3B0aW9ucy5zdGF0dXMgPSBmYWxzZTtcbiAgICAgIEZCLmluaXQoaW5pdE9wdGlvbnMpO1xuICAgICAgUGFyc2UuVXNlci5fcmVnaXN0ZXJBdXRoZW50aWNhdGlvblByb3ZpZGVyKHByb3ZpZGVyKTtcbiAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyB3aGV0aGVyIHRoZSB1c2VyIGhhcyB0aGVpciBhY2NvdW50IGxpbmtlZCB0byBGYWNlYm9vay5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge1BhcnNlLlVzZXJ9IHVzZXIgVXNlciB0byBjaGVjayBmb3IgYSBmYWNlYm9vayBsaW5rLlxuICAgICAqICAgICBUaGUgdXNlciBtdXN0IGJlIGxvZ2dlZCBpbiBvbiB0aGlzIGRldmljZS5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgdXNlciBoYXMgdGhlaXIgYWNjb3VudFxuICAgICAqICAgICBsaW5rZWQgdG8gRmFjZWJvb2suXG4gICAgICovXG4gICAgaXNMaW5rZWQ6IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgIHJldHVybiB1c2VyLl9pc0xpbmtlZChcImZhY2Vib29rXCIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGluIGEgdXNlciB1c2luZyBGYWNlYm9vay4gVGhpcyBtZXRob2QgZGVsZWdhdGVzIHRvIHRoZSBGYWNlYm9va1xuICAgICAqIFNESyB0byBhdXRoZW50aWNhdGUgdGhlIHVzZXIsIGFuZCB0aGVuIGF1dG9tYXRpY2FsbHkgbG9ncyBpbiAob3JcbiAgICAgKiBjcmVhdGVzLCBpbiB0aGUgY2FzZSB3aGVyZSBpdCBpcyBhIG5ldyB1c2VyKSBhIFBhcnNlLlVzZXIuXG4gICAgICogXG4gICAgICogQHBhcmFtIHtTdHJpbmcsIE9iamVjdH0gcGVybWlzc2lvbnMgVGhlIHBlcm1pc3Npb25zIHJlcXVpcmVkIGZvciBGYWNlYm9va1xuICAgICAqICAgIGxvZyBpbi4gIFRoaXMgaXMgYSBjb21tYS1zZXBhcmF0ZWQgc3RyaW5nIG9mIHBlcm1pc3Npb25zLlxuICAgICAqICAgIEFsdGVybmF0aXZlbHksIHN1cHBseSBhIEZhY2Vib29rIGF1dGhEYXRhIG9iamVjdCBhcyBkZXNjcmliZWQgaW4gb3VyXG4gICAgICogICAgUkVTVCBBUEkgZG9jcyBpZiB5b3Ugd2FudCB0byBoYW5kbGUgZ2V0dGluZyBmYWNlYm9vayBhdXRoIHRva2Vuc1xuICAgICAqICAgIHlvdXJzZWxmLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFN0YW5kYXJkIG9wdGlvbnMgb2JqZWN0IHdpdGggc3VjY2VzcyBhbmQgZXJyb3JcbiAgICAgKiAgICBjYWxsYmFja3MuXG4gICAgICovXG4gICAgbG9nSW46IGZ1bmN0aW9uKHBlcm1pc3Npb25zLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIXBlcm1pc3Npb25zIHx8IF8uaXNTdHJpbmcocGVybWlzc2lvbnMpKSB7XG4gICAgICAgIGlmICghaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICB0aHJvdyBcIllvdSBtdXN0IGluaXRpYWxpemUgRmFjZWJvb2tVdGlscyBiZWZvcmUgY2FsbGluZyBsb2dJbi5cIjtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0ZWRQZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25zO1xuICAgICAgICByZXR1cm4gUGFyc2UuVXNlci5fbG9nSW5XaXRoKFwiZmFjZWJvb2tcIiwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IF8uY2xvbmUob3B0aW9ucykgfHwge307XG4gICAgICAgIG5ld09wdGlvbnMuYXV0aERhdGEgPSBwZXJtaXNzaW9ucztcbiAgICAgICAgcmV0dXJuIFBhcnNlLlVzZXIuX2xvZ0luV2l0aChcImZhY2Vib29rXCIsIG5ld09wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMaW5rcyBGYWNlYm9vayB0byBhbiBleGlzdGluZyBQRlVzZXIuIFRoaXMgbWV0aG9kIGRlbGVnYXRlcyB0byB0aGVcbiAgICAgKiBGYWNlYm9vayBTREsgdG8gYXV0aGVudGljYXRlIHRoZSB1c2VyLCBhbmQgdGhlbiBhdXRvbWF0aWNhbGx5IGxpbmtzXG4gICAgICogdGhlIGFjY291bnQgdG8gdGhlIFBhcnNlLlVzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BhcnNlLlVzZXJ9IHVzZXIgVXNlciB0byBsaW5rIHRvIEZhY2Vib29rLiBUaGlzIG11c3QgYmUgdGhlXG4gICAgICogICAgIGN1cnJlbnQgdXNlci5cbiAgICAgKiBAcGFyYW0ge1N0cmluZywgT2JqZWN0fSBwZXJtaXNzaW9ucyBUaGUgcGVybWlzc2lvbnMgcmVxdWlyZWQgZm9yIEZhY2Vib29rXG4gICAgICogICAgbG9nIGluLiAgVGhpcyBpcyBhIGNvbW1hLXNlcGFyYXRlZCBzdHJpbmcgb2YgcGVybWlzc2lvbnMuIFxuICAgICAqICAgIEFsdGVybmF0aXZlbHksIHN1cHBseSBhIEZhY2Vib29rIGF1dGhEYXRhIG9iamVjdCBhcyBkZXNjcmliZWQgaW4gb3VyXG4gICAgICogICAgUkVTVCBBUEkgZG9jcyBpZiB5b3Ugd2FudCB0byBoYW5kbGUgZ2V0dGluZyBmYWNlYm9vayBhdXRoIHRva2Vuc1xuICAgICAqICAgIHlvdXJzZWxmLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFN0YW5kYXJkIG9wdGlvbnMgb2JqZWN0IHdpdGggc3VjY2VzcyBhbmQgZXJyb3JcbiAgICAgKiAgICBjYWxsYmFja3MuXG4gICAgICovXG4gICAgbGluazogZnVuY3Rpb24odXNlciwgcGVybWlzc2lvbnMsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghcGVybWlzc2lvbnMgfHwgXy5pc1N0cmluZyhwZXJtaXNzaW9ucykpIHtcbiAgICAgICAgaWYgKCFpbml0aWFsaXplZCkge1xuICAgICAgICAgIHRocm93IFwiWW91IG11c3QgaW5pdGlhbGl6ZSBGYWNlYm9va1V0aWxzIGJlZm9yZSBjYWxsaW5nIGxpbmsuXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdGVkUGVybWlzc2lvbnMgPSBwZXJtaXNzaW9ucztcbiAgICAgICAgcmV0dXJuIHVzZXIuX2xpbmtXaXRoKFwiZmFjZWJvb2tcIiwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IF8uY2xvbmUob3B0aW9ucykgfHwge307XG4gICAgICAgIG5ld09wdGlvbnMuYXV0aERhdGEgPSBwZXJtaXNzaW9ucztcbiAgICAgICAgcmV0dXJuIHVzZXIuX2xpbmtXaXRoKFwiZmFjZWJvb2tcIiwgbmV3T3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubGlua3MgdGhlIFBhcnNlLlVzZXIgZnJvbSBhIEZhY2Vib29rIGFjY291bnQuIFxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7UGFyc2UuVXNlcn0gdXNlciBVc2VyIHRvIHVubGluayBmcm9tIEZhY2Vib29rLiBUaGlzIG11c3QgYmUgdGhlXG4gICAgICogICAgIGN1cnJlbnQgdXNlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBTdGFuZGFyZCBvcHRpb25zIG9iamVjdCB3aXRoIHN1Y2Nlc3MgYW5kIGVycm9yXG4gICAgICogICAgY2FsbGJhY2tzLlxuICAgICAqL1xuICAgIHVubGluazogZnVuY3Rpb24odXNlciwgb3B0aW9ucykge1xuICAgICAgaWYgKCFpbml0aWFsaXplZCkge1xuICAgICAgICB0aHJvdyBcIllvdSBtdXN0IGluaXRpYWxpemUgRmFjZWJvb2tVdGlscyBiZWZvcmUgY2FsbGluZyB1bmxpbmsuXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXNlci5fdW5saW5rRnJvbShcImZhY2Vib29rXCIsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcbiAgXG59KHRoaXMpKTtcblxuLypnbG9iYWwgXzogZmFsc2UsIGRvY3VtZW50OiBmYWxzZSwgd2luZG93OiBmYWxzZSwgbmF2aWdhdG9yOiBmYWxzZSAqL1xuKGZ1bmN0aW9uKHJvb3QpIHtcbiAgcm9vdC5QYXJzZSA9IHJvb3QuUGFyc2UgfHwge307XG4gIHZhciBQYXJzZSA9IHJvb3QuUGFyc2U7XG4gIHZhciBfID0gUGFyc2UuXztcblxuICAvKipcbiAgICogSGlzdG9yeSBzZXJ2ZXMgYXMgYSBnbG9iYWwgcm91dGVyIChwZXIgZnJhbWUpIHRvIGhhbmRsZSBoYXNoY2hhbmdlXG4gICAqIGV2ZW50cyBvciBwdXNoU3RhdGUsIG1hdGNoIHRoZSBhcHByb3ByaWF0ZSByb3V0ZSwgYW5kIHRyaWdnZXJcbiAgICogY2FsbGJhY2tzLiBZb3Ugc2hvdWxkbid0IGV2ZXIgaGF2ZSB0byBjcmVhdGUgb25lIG9mIHRoZXNlIHlvdXJzZWxmXG4gICAqIOKAlCB5b3Ugc2hvdWxkIHVzZSB0aGUgcmVmZXJlbmNlIHRvIDxjb2RlPlBhcnNlLmhpc3Rvcnk8L2NvZGU+XG4gICAqIHRoYXQgd2lsbCBiZSBjcmVhdGVkIGZvciB5b3UgYXV0b21hdGljYWxseSBpZiB5b3UgbWFrZSB1c2Ugb2YgXG4gICAqIFJvdXRlcnMgd2l0aCByb3V0ZXMuXG4gICAqIEBjbGFzc1xuICAgKiAgIFxuICAgKiA8cD5BIGZvcmsgb2YgQmFja2JvbmUuSGlzdG9yeSwgcHJvdmlkZWQgZm9yIHlvdXIgY29udmVuaWVuY2UuICBJZiB5b3UgXG4gICAqIHVzZSB0aGlzIGNsYXNzLCB5b3UgbXVzdCBhbHNvIGluY2x1ZGUgalF1ZXJ5LCBvciBhbm90aGVyIGxpYnJhcnkgXG4gICAqIHRoYXQgcHJvdmlkZXMgYSBqUXVlcnktY29tcGF0aWJsZSAkIGZ1bmN0aW9uLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sXG4gICAqIHNlZSB0aGUgPGEgaHJlZj1cImh0dHA6Ly9kb2N1bWVudGNsb3VkLmdpdGh1Yi5jb20vYmFja2JvbmUvI0hpc3RvcnlcIj5cbiAgICogQmFja2JvbmUgZG9jdW1lbnRhdGlvbjwvYT4uPC9wPlxuICAgKiA8cD48c3Ryb25nPjxlbT5BdmFpbGFibGUgaW4gdGhlIGNsaWVudCBTREsgb25seS48L2VtPjwvc3Ryb25nPjwvcD5cbiAgICovXG4gIFBhcnNlLkhpc3RvcnkgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgXy5iaW5kQWxsKHRoaXMsICdjaGVja1VybCcpO1xuICB9O1xuXG4gIC8vIENhY2hlZCByZWdleCBmb3IgY2xlYW5pbmcgbGVhZGluZyBoYXNoZXMgYW5kIHNsYXNoZXMgLlxuICB2YXIgcm91dGVTdHJpcHBlciA9IC9eWyNcXC9dLztcblxuICAvLyBDYWNoZWQgcmVnZXggZm9yIGRldGVjdGluZyBNU0lFLlxuICB2YXIgaXNFeHBsb3JlciA9IC9tc2llIFtcXHcuXSsvO1xuXG4gIC8vIEhhcyB0aGUgaGlzdG9yeSBoYW5kbGluZyBhbHJlYWR5IGJlZW4gc3RhcnRlZD9cbiAgUGFyc2UuSGlzdG9yeS5zdGFydGVkID0gZmFsc2U7XG5cbiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKlBhcnNlLkhpc3RvcnkqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICBfLmV4dGVuZChQYXJzZS5IaXN0b3J5LnByb3RvdHlwZSwgUGFyc2UuRXZlbnRzLFxuICAgICAgICAgICAvKiogQGxlbmRzIFBhcnNlLkhpc3RvcnkucHJvdG90eXBlICovIHtcblxuICAgIC8vIFRoZSBkZWZhdWx0IGludGVydmFsIHRvIHBvbGwgZm9yIGhhc2ggY2hhbmdlcywgaWYgbmVjZXNzYXJ5LCBpc1xuICAgIC8vIHR3ZW50eSB0aW1lcyBhIHNlY29uZC5cbiAgICBpbnRlcnZhbDogNTAsXG5cbiAgICAvLyBHZXRzIHRoZSB0cnVlIGhhc2ggdmFsdWUuIENhbm5vdCB1c2UgbG9jYXRpb24uaGFzaCBkaXJlY3RseSBkdWUgdG8gYnVnXG4gICAgLy8gaW4gRmlyZWZveCB3aGVyZSBsb2NhdGlvbi5oYXNoIHdpbGwgYWx3YXlzIGJlIGRlY29kZWQuXG4gICAgZ2V0SGFzaDogZnVuY3Rpb24od2luZG93T3ZlcnJpZGUpIHtcbiAgICAgIHZhciBsb2MgPSB3aW5kb3dPdmVycmlkZSA/IHdpbmRvd092ZXJyaWRlLmxvY2F0aW9uIDogd2luZG93LmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gbG9jLmhyZWYubWF0Y2goLyMoLiopJC8pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJztcbiAgICB9LFxuXG4gICAgLy8gR2V0IHRoZSBjcm9zcy1icm93c2VyIG5vcm1hbGl6ZWQgVVJMIGZyYWdtZW50LCBlaXRoZXIgZnJvbSB0aGUgVVJMLFxuICAgIC8vIHRoZSBoYXNoLCBvciB0aGUgb3ZlcnJpZGUuXG4gICAgZ2V0RnJhZ21lbnQ6IGZ1bmN0aW9uKGZyYWdtZW50LCBmb3JjZVB1c2hTdGF0ZSkge1xuICAgICAgaWYgKFBhcnNlLl9pc051bGxPclVuZGVmaW5lZChmcmFnbWVudCkpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSB8fCBmb3JjZVB1c2hTdGF0ZSkge1xuICAgICAgICAgIGZyYWdtZW50ID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgICAgIHZhciBzZWFyY2ggPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoO1xuICAgICAgICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgICAgIGZyYWdtZW50ICs9IHNlYXJjaDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmdldEhhc2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFmcmFnbWVudC5pbmRleE9mKHRoaXMub3B0aW9ucy5yb290KSkge1xuICAgICAgICBmcmFnbWVudCA9IGZyYWdtZW50LnN1YnN0cih0aGlzLm9wdGlvbnMucm9vdC5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZyYWdtZW50LnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgaGFzaCBjaGFuZ2UgaGFuZGxpbmcsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGN1cnJlbnRcbiAgICAgKiBVUkwgbWF0Y2hlcyBhbiBleGlzdGluZyByb3V0ZSwgYW5kIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIHN0YXJ0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAoUGFyc2UuSGlzdG9yeS5zdGFydGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlLmhpc3RvcnkgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkXCIpO1xuICAgICAgfVxuICAgICAgUGFyc2UuSGlzdG9yeS5zdGFydGVkID0gdHJ1ZTtcblxuICAgICAgLy8gRmlndXJlIG91dCB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uLiBEbyB3ZSBuZWVkIGFuIGlmcmFtZT9cbiAgICAgIC8vIElzIHB1c2hTdGF0ZSBkZXNpcmVkIC4uLiBpcyBpdCBhdmFpbGFibGU/XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfLmV4dGVuZCh7fSwge3Jvb3Q6ICcvJ30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICB0aGlzLl93YW50c0hhc2hDaGFuZ2UgPSB0aGlzLm9wdGlvbnMuaGFzaENoYW5nZSAhPT0gZmFsc2U7XG4gICAgICB0aGlzLl93YW50c1B1c2hTdGF0ZSA9ICEhdGhpcy5vcHRpb25zLnB1c2hTdGF0ZTtcbiAgICAgIHRoaXMuX2hhc1B1c2hTdGF0ZSA9ICEhKHRoaXMub3B0aW9ucy5wdXNoU3RhdGUgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKTtcbiAgICAgIHZhciBmcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoKTtcbiAgICAgIHZhciBkb2NNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuICAgICAgdmFyIG9sZElFID0gKGlzRXhwbG9yZXIuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpICYmXG4gICAgICAgICAgICAgICAgICAgKCFkb2NNb2RlIHx8IGRvY01vZGUgPD0gNykpO1xuXG4gICAgICBpZiAob2xkSUUpIHtcbiAgICAgICAgdGhpcy5pZnJhbWUgPSBQYXJzZS4kKCc8aWZyYW1lIHNyYz1cImphdmFzY3JpcHQ6MFwiIHRhYmluZGV4PVwiLTFcIiAvPicpXG4gICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKS5hcHBlbmRUbygnYm9keScpWzBdLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgIHRoaXMubmF2aWdhdGUoZnJhZ21lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBEZXBlbmRpbmcgb24gd2hldGhlciB3ZSdyZSB1c2luZyBwdXNoU3RhdGUgb3IgaGFzaGVzLCBhbmQgd2hldGhlclxuICAgICAgLy8gJ29uaGFzaGNoYW5nZScgaXMgc3VwcG9ydGVkLCBkZXRlcm1pbmUgaG93IHdlIGNoZWNrIHRoZSBVUkwgc3RhdGUuXG4gICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlKSB7XG4gICAgICAgIFBhcnNlLiQod2luZG93KS5iaW5kKCdwb3BzdGF0ZScsIHRoaXMuY2hlY2tVcmwpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiZcbiAgICAgICAgICAgICAgICAgKCdvbmhhc2hjaGFuZ2UnIGluIHdpbmRvdykgJiZcbiAgICAgICAgICAgICAgICAgIW9sZElFKSB7XG4gICAgICAgIFBhcnNlLiQod2luZG93KS5iaW5kKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSkge1xuICAgICAgICB0aGlzLl9jaGVja1VybEludGVydmFsID0gd2luZG93LnNldEludGVydmFsKHRoaXMuY2hlY2tVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVybWluZSBpZiB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgYmFzZSB1cmwsIGZvciBhIHB1c2hTdGF0ZSBsaW5rXG4gICAgICAvLyBvcGVuZWQgYnkgYSBub24tcHVzaFN0YXRlIGJyb3dzZXIuXG4gICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQ7XG4gICAgICB2YXIgbG9jID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgdmFyIGF0Um9vdCAgPSBsb2MucGF0aG5hbWUgPT09IHRoaXMub3B0aW9ucy5yb290O1xuXG4gICAgICAvLyBJZiB3ZSd2ZSBzdGFydGVkIG9mZiB3aXRoIGEgcm91dGUgZnJvbSBhIGBwdXNoU3RhdGVgLWVuYWJsZWQgYnJvd3NlcixcbiAgICAgIC8vIGJ1dCB3ZSdyZSBjdXJyZW50bHkgaW4gYSBicm93c2VyIHRoYXQgZG9lc24ndCBzdXBwb3J0IGl0Li4uXG4gICAgICBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlICYmIFxuICAgICAgICAgIHRoaXMuX3dhbnRzUHVzaFN0YXRlICYmIFxuICAgICAgICAgICF0aGlzLl9oYXNQdXNoU3RhdGUgJiZcbiAgICAgICAgICAhYXRSb290KSB7XG4gICAgICAgIHRoaXMuZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KG51bGwsIHRydWUpO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh0aGlzLm9wdGlvbnMucm9vdCArICcjJyArIHRoaXMuZnJhZ21lbnQpO1xuICAgICAgICAvLyBSZXR1cm4gaW1tZWRpYXRlbHkgYXMgYnJvd3NlciB3aWxsIGRvIHJlZGlyZWN0IHRvIG5ldyB1cmxcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIC8vIE9yIGlmIHdlJ3ZlIHN0YXJ0ZWQgb3V0IHdpdGggYSBoYXNoLWJhc2VkIHJvdXRlLCBidXQgd2UncmUgY3VycmVudGx5XG4gICAgICAvLyBpbiBhIGJyb3dzZXIgd2hlcmUgaXQgY291bGQgYmUgYHB1c2hTdGF0ZWAtYmFzZWQgaW5zdGVhZC4uLlxuICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c1B1c2hTdGF0ZSAmJlxuICAgICAgICAgICAgICAgICB0aGlzLl9oYXNQdXNoU3RhdGUgJiYgXG4gICAgICAgICAgICAgICAgIGF0Um9vdCAmJlxuICAgICAgICAgICAgICAgICBsb2MuaGFzaCkge1xuICAgICAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRIYXNoKCkucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgZG9jdW1lbnQudGl0bGUsXG4gICAgICAgICAgICBsb2MucHJvdG9jb2wgKyAnLy8nICsgbG9jLmhvc3QgKyB0aGlzLm9wdGlvbnMucm9vdCArIHRoaXMuZnJhZ21lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZFVybCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBEaXNhYmxlIFBhcnNlLmhpc3RvcnksIHBlcmhhcHMgdGVtcG9yYXJpbHkuIE5vdCB1c2VmdWwgaW4gYSByZWFsIGFwcCxcbiAgICAvLyBidXQgcG9zc2libHkgdXNlZnVsIGZvciB1bml0IHRlc3RpbmcgUm91dGVycy5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIFBhcnNlLiQod2luZG93KS51bmJpbmQoJ3BvcHN0YXRlJywgdGhpcy5jaGVja1VybClcbiAgICAgICAgICAgICAgICAgICAgIC51bmJpbmQoJ2hhc2hjaGFuZ2UnLCB0aGlzLmNoZWNrVXJsKTtcbiAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2NoZWNrVXJsSW50ZXJ2YWwpO1xuICAgICAgUGFyc2UuSGlzdG9yeS5zdGFydGVkID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIEFkZCBhIHJvdXRlIHRvIGJlIHRlc3RlZCB3aGVuIHRoZSBmcmFnbWVudCBjaGFuZ2VzLiBSb3V0ZXMgYWRkZWQgbGF0ZXJcbiAgICAvLyBtYXkgb3ZlcnJpZGUgcHJldmlvdXMgcm91dGVzLlxuICAgIHJvdXRlOiBmdW5jdGlvbihyb3V0ZSwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMudW5zaGlmdCh7cm91dGU6IHJvdXRlLCBjYWxsYmFjazogY2FsbGJhY2t9KTtcbiAgICB9LFxuXG4gICAgLy8gQ2hlY2tzIHRoZSBjdXJyZW50IFVSTCB0byBzZWUgaWYgaXQgaGFzIGNoYW5nZWQsIGFuZCBpZiBpdCBoYXMsXG4gICAgLy8gY2FsbHMgYGxvYWRVcmxgLCBub3JtYWxpemluZyBhY3Jvc3MgdGhlIGhpZGRlbiBpZnJhbWUuXG4gICAgY2hlY2tVcmw6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5nZXRGcmFnbWVudCgpO1xuICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZnJhZ21lbnQgJiYgdGhpcy5pZnJhbWUpIHtcbiAgICAgICAgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudCA9PT0gdGhpcy5mcmFnbWVudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pZnJhbWUpIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0ZShjdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5sb2FkVXJsKCkpIHtcbiAgICAgICAgdGhpcy5sb2FkVXJsKHRoaXMuZ2V0SGFzaCgpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gQXR0ZW1wdCB0byBsb2FkIHRoZSBjdXJyZW50IFVSTCBmcmFnbWVudC4gSWYgYSByb3V0ZSBzdWNjZWVkcyB3aXRoIGFcbiAgICAvLyBtYXRjaCwgcmV0dXJucyBgdHJ1ZWAuIElmIG5vIGRlZmluZWQgcm91dGVzIG1hdGNoZXMgdGhlIGZyYWdtZW50LFxuICAgIC8vIHJldHVybnMgYGZhbHNlYC5cbiAgICBsb2FkVXJsOiBmdW5jdGlvbihmcmFnbWVudE92ZXJyaWRlKSB7XG4gICAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChmcmFnbWVudE92ZXJyaWRlKTtcbiAgICAgIHZhciBtYXRjaGVkID0gXy5hbnkodGhpcy5oYW5kbGVycywgZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICBpZiAoaGFuZGxlci5yb3V0ZS50ZXN0KGZyYWdtZW50KSkge1xuICAgICAgICAgIGhhbmRsZXIuY2FsbGJhY2soZnJhZ21lbnQpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgIH0sXG5cbiAgICAvLyBTYXZlIGEgZnJhZ21lbnQgaW50byB0aGUgaGFzaCBoaXN0b3J5LCBvciByZXBsYWNlIHRoZSBVUkwgc3RhdGUgaWYgdGhlXG4gICAgLy8gJ3JlcGxhY2UnIG9wdGlvbiBpcyBwYXNzZWQuIFlvdSBhcmUgcmVzcG9uc2libGUgZm9yIHByb3Blcmx5IFVSTC1lbmNvZGluZ1xuICAgIC8vIHRoZSBmcmFnbWVudCBpbiBhZHZhbmNlLlxuICAgIC8vXG4gICAgLy8gVGhlIG9wdGlvbnMgb2JqZWN0IGNhbiBjb250YWluIGB0cmlnZ2VyOiB0cnVlYCBpZiB5b3Ugd2lzaCB0byBoYXZlIHRoZVxuICAgIC8vIHJvdXRlIGNhbGxiYWNrIGJlIGZpcmVkIChub3QgdXN1YWxseSBkZXNpcmFibGUpLCBvciBgcmVwbGFjZTogdHJ1ZWAsIGlmXG4gICAgLy8geW91IHdpc2ggdG8gbW9kaWZ5IHRoZSBjdXJyZW50IFVSTCB3aXRob3V0IGFkZGluZyBhbiBlbnRyeSB0byB0aGVcbiAgICAvLyBoaXN0b3J5LlxuICAgIG5hdmlnYXRlOiBmdW5jdGlvbihmcmFnbWVudCwgb3B0aW9ucykge1xuICAgICAgaWYgKCFQYXJzZS5IaXN0b3J5LnN0YXJ0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt0cmlnZ2VyOiBvcHRpb25zfTtcbiAgICAgIH1cbiAgICAgIHZhciBmcmFnID0gKGZyYWdtZW50IHx8ICcnKS5yZXBsYWNlKHJvdXRlU3RyaXBwZXIsICcnKTtcbiAgICAgIGlmICh0aGlzLmZyYWdtZW50ID09PSBmcmFnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgcHVzaFN0YXRlIGlzIGF2YWlsYWJsZSwgd2UgdXNlIGl0IHRvIHNldCB0aGUgZnJhZ21lbnQgYXMgYSByZWFsIFVSTC5cbiAgICAgIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUpIHtcbiAgICAgICAgaWYgKGZyYWcuaW5kZXhPZih0aGlzLm9wdGlvbnMucm9vdCkgIT09IDApIHtcbiAgICAgICAgICBmcmFnID0gdGhpcy5vcHRpb25zLnJvb3QgKyBmcmFnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnO1xuICAgICAgICB2YXIgcmVwbGFjZU9yUHVzaCA9IG9wdGlvbnMucmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSc7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5W3JlcGxhY2VPclB1c2hdKHt9LCBkb2N1bWVudC50aXRsZSwgZnJhZyk7XG5cbiAgICAgIC8vIElmIGhhc2ggY2hhbmdlcyBoYXZlbid0IGJlZW4gZXhwbGljaXRseSBkaXNhYmxlZCwgdXBkYXRlIHRoZSBoYXNoXG4gICAgICAvLyBmcmFnbWVudCB0byBzdG9yZSBoaXN0b3J5LlxuICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWc7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUhhc2god2luZG93LmxvY2F0aW9uLCBmcmFnLCBvcHRpb25zLnJlcGxhY2UpO1xuICAgICAgICBpZiAodGhpcy5pZnJhbWUgJiZcbiAgICAgICAgICAgIChmcmFnICE9PSB0aGlzLmdldEZyYWdtZW50KHRoaXMuZ2V0SGFzaCh0aGlzLmlmcmFtZSkpKSkge1xuICAgICAgICAgIC8vIE9wZW5pbmcgYW5kIGNsb3NpbmcgdGhlIGlmcmFtZSB0cmlja3MgSUU3IGFuZCBlYXJsaWVyXG4gICAgICAgICAgLy8gdG8gcHVzaCBhIGhpc3RvcnkgZW50cnkgb24gaGFzaC10YWcgY2hhbmdlLlxuICAgICAgICAgIC8vIFdoZW4gcmVwbGFjZSBpcyB0cnVlLCB3ZSBkb24ndCB3YW50IHRoaXMuXG4gICAgICAgICAgaWYgKCFvcHRpb25zLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHRoaXMuaWZyYW1lLmRvY3VtZW50Lm9wZW4oKS5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl91cGRhdGVIYXNoKHRoaXMuaWZyYW1lLmxvY2F0aW9uLCBmcmFnLCBvcHRpb25zLnJlcGxhY2UpO1xuICAgICAgICB9XG5cbiAgICAgIC8vIElmIHlvdSd2ZSB0b2xkIHVzIHRoYXQgeW91IGV4cGxpY2l0bHkgZG9uJ3Qgd2FudCBmYWxsYmFjayBoYXNoY2hhbmdlLVxuICAgICAgLy8gYmFzZWQgaGlzdG9yeSwgdGhlbiBgbmF2aWdhdGVgIGJlY29tZXMgYSBwYWdlIHJlZnJlc2guXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHRoaXMub3B0aW9ucy5yb290ICsgZnJhZ21lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlcikge1xuICAgICAgICB0aGlzLmxvYWRVcmwoZnJhZ21lbnQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBVcGRhdGUgdGhlIGhhc2ggbG9jYXRpb24sIGVpdGhlciByZXBsYWNpbmcgdGhlIGN1cnJlbnQgZW50cnksIG9yIGFkZGluZ1xuICAgIC8vIGEgbmV3IG9uZSB0byB0aGUgYnJvd3NlciBoaXN0b3J5LlxuICAgIF91cGRhdGVIYXNoOiBmdW5jdGlvbihsb2NhdGlvbiwgZnJhZ21lbnQsIHJlcGxhY2UpIHtcbiAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgIHZhciBzID0gbG9jYXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC8oamF2YXNjcmlwdDp8IykuKiQvLCAnJyk7XG4gICAgICAgIGxvY2F0aW9uLnJlcGxhY2UocyArICcjJyArIGZyYWdtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2F0aW9uLmhhc2ggPSBmcmFnbWVudDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufSh0aGlzKSk7XG5cbi8qZ2xvYmFsIF86IGZhbHNlKi9cbihmdW5jdGlvbihyb290KSB7XG4gIHJvb3QuUGFyc2UgPSByb290LlBhcnNlIHx8IHt9O1xuICB2YXIgUGFyc2UgPSByb290LlBhcnNlO1xuICB2YXIgXyA9IFBhcnNlLl87XG5cbiAgLyoqXG4gICAqIFJvdXRlcnMgbWFwIGZhdXgtVVJMcyB0byBhY3Rpb25zLCBhbmQgZmlyZSBldmVudHMgd2hlbiByb3V0ZXMgYXJlXG4gICAqIG1hdGNoZWQuIENyZWF0aW5nIGEgbmV3IG9uZSBzZXRzIGl0cyBgcm91dGVzYCBoYXNoLCBpZiBub3Qgc2V0IHN0YXRpY2FsbHkuXG4gICAqIEBjbGFzc1xuICAgKlxuICAgKiA8cD5BIGZvcmsgb2YgQmFja2JvbmUuUm91dGVyLCBwcm92aWRlZCBmb3IgeW91ciBjb252ZW5pZW5jZS5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGVcbiAgICogPGEgaHJlZj1cImh0dHA6Ly9kb2N1bWVudGNsb3VkLmdpdGh1Yi5jb20vYmFja2JvbmUvI1JvdXRlclwiPkJhY2tib25lXG4gICAqIGRvY3VtZW50YXRpb248L2E+LjwvcD5cbiAgICogPHA+PHN0cm9uZz48ZW0+QXZhaWxhYmxlIGluIHRoZSBjbGllbnQgU0RLIG9ubHkuPC9lbT48L3N0cm9uZz48L3A+XG4gICAqL1xuICBQYXJzZS5Sb3V0ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKG9wdGlvbnMucm91dGVzKSB7XG4gICAgICB0aGlzLnJvdXRlcyA9IG9wdGlvbnMucm91dGVzO1xuICAgIH1cbiAgICB0aGlzLl9iaW5kUm91dGVzKCk7XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm9yIG1hdGNoaW5nIG5hbWVkIHBhcmFtIHBhcnRzIGFuZCBzcGxhdHRlZFxuICAvLyBwYXJ0cyBvZiByb3V0ZSBzdHJpbmdzLlxuICB2YXIgbmFtZWRQYXJhbSAgICA9IC86XFx3Ky9nO1xuICB2YXIgc3BsYXRQYXJhbSAgICA9IC9cXCpcXHcrL2c7XG4gIHZhciBlc2NhcGVSZWdFeHAgID0gL1tcXC1cXFtcXF17fSgpKz8uLFxcXFxcXF5cXCRcXHwjXFxzXS9nO1xuXG4gIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipQYXJzZS5Sb3V0ZXIqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICBfLmV4dGVuZChQYXJzZS5Sb3V0ZXIucHJvdG90eXBlLCBQYXJzZS5FdmVudHMsXG4gICAgICAgICAgIC8qKiBAbGVuZHMgUGFyc2UuUm91dGVyLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd25cbiAgICAgKiBpbml0aWFsaXphdGlvbiBsb2dpYy5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sXG5cbiAgICAvKipcbiAgICAgKiBNYW51YWxseSBiaW5kIGEgc2luZ2xlIG5hbWVkIHJvdXRlIHRvIGEgY2FsbGJhY2suIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogPHByZT50aGlzLnJvdXRlKCdzZWFyY2gvOnF1ZXJ5L3A6bnVtJywgJ3NlYXJjaCcsIGZ1bmN0aW9uKHF1ZXJ5LCBudW0pIHtcbiAgICAgKiAgICAgICAuLi5cbiAgICAgKiAgICAgfSk7PC9wcmU+XG4gICAgICovXG4gICAgcm91dGU6IGZ1bmN0aW9uKHJvdXRlLCBuYW1lLCBjYWxsYmFjaykge1xuICAgICAgUGFyc2UuaGlzdG9yeSA9IFBhcnNlLmhpc3RvcnkgfHwgbmV3IFBhcnNlLkhpc3RvcnkoKTtcbiAgICAgIGlmICghXy5pc1JlZ0V4cChyb3V0ZSkpIHtcbiAgICAgICAgcm91dGUgPSB0aGlzLl9yb3V0ZVRvUmVnRXhwKHJvdXRlKTtcbiAgICAgIH0gXG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gdGhpc1tuYW1lXTtcbiAgICAgIH1cbiAgICAgIFBhcnNlLmhpc3Rvcnkucm91dGUocm91dGUsIF8uYmluZChmdW5jdGlvbihmcmFnbWVudCkge1xuICAgICAgICB2YXIgYXJncyA9IHRoaXMuX2V4dHJhY3RQYXJhbWV0ZXJzKHJvdXRlLCBmcmFnbWVudCk7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJpZ2dlci5hcHBseSh0aGlzLCBbJ3JvdXRlOicgKyBuYW1lXS5jb25jYXQoYXJncykpO1xuICAgICAgICBQYXJzZS5oaXN0b3J5LnRyaWdnZXIoJ3JvdXRlJywgdGhpcywgbmFtZSwgYXJncyk7XG4gICAgICB9LCB0aGlzKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogV2hlbmV2ZXIgeW91IHJlYWNoIGEgcG9pbnQgaW4geW91ciBhcHBsaWNhdGlvbiB0aGF0IHlvdSdkXG4gICAgICogbGlrZSB0byBzYXZlIGFzIGEgVVJMLCBjYWxsIG5hdmlnYXRlIGluIG9yZGVyIHRvIHVwZGF0ZSB0aGVcbiAgICAgKiBVUkwuIElmIHlvdSB3aXNoIHRvIGFsc28gY2FsbCB0aGUgcm91dGUgZnVuY3Rpb24sIHNldCB0aGUgXG4gICAgICogdHJpZ2dlciBvcHRpb24gdG8gdHJ1ZS4gVG8gdXBkYXRlIHRoZSBVUkwgd2l0aG91dCBjcmVhdGluZ1xuICAgICAqIGFuIGVudHJ5IGluIHRoZSBicm93c2VyJ3MgaGlzdG9yeSwgc2V0IHRoZSByZXBsYWNlIG9wdGlvblxuICAgICAqIHRvIHRydWUuXG4gICAgICovXG4gICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7XG4gICAgICBQYXJzZS5oaXN0b3J5Lm5hdmlnYXRlKGZyYWdtZW50LCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLy8gQmluZCBhbGwgZGVmaW5lZCByb3V0ZXMgdG8gYFBhcnNlLmhpc3RvcnlgLiBXZSBoYXZlIHRvIHJldmVyc2UgdGhlXG4gICAgLy8gb3JkZXIgb2YgdGhlIHJvdXRlcyBoZXJlIHRvIHN1cHBvcnQgYmVoYXZpb3Igd2hlcmUgdGhlIG1vc3QgZ2VuZXJhbFxuICAgIC8vIHJvdXRlcyBjYW4gYmUgZGVmaW5lZCBhdCB0aGUgYm90dG9tIG9mIHRoZSByb3V0ZSBtYXAuXG4gICAgX2JpbmRSb3V0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnJvdXRlcykgeyBcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHJvdXRlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgcm91dGUgaW4gdGhpcy5yb3V0ZXMpIHtcbiAgICAgICAgaWYgKHRoaXMucm91dGVzLmhhc093blByb3BlcnR5KHJvdXRlKSkge1xuICAgICAgICAgIHJvdXRlcy51bnNoaWZ0KFtyb3V0ZSwgdGhpcy5yb3V0ZXNbcm91dGVdXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcm91dGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzLnJvdXRlKHJvdXRlc1tpXVswXSwgcm91dGVzW2ldWzFdLCB0aGlzW3JvdXRlc1tpXVsxXV0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgcm91dGUgc3RyaW5nIGludG8gYSByZWd1bGFyIGV4cHJlc3Npb24sIHN1aXRhYmxlIGZvciBtYXRjaGluZ1xuICAgIC8vIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24gaGFzaC5cbiAgICBfcm91dGVUb1JlZ0V4cDogZnVuY3Rpb24ocm91dGUpIHtcbiAgICAgIHJvdXRlID0gcm91dGUucmVwbGFjZShlc2NhcGVSZWdFeHAsICdcXFxcJCYnKVxuICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKG5hbWVkUGFyYW0sICcoW15cXC9dKyknKVxuICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKHNwbGF0UGFyYW0sICcoLio/KScpO1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcm91dGUgKyAnJCcpO1xuICAgIH0sXG5cbiAgICAvLyBHaXZlbiBhIHJvdXRlLCBhbmQgYSBVUkwgZnJhZ21lbnQgdGhhdCBpdCBtYXRjaGVzLCByZXR1cm4gdGhlIGFycmF5IG9mXG4gICAgLy8gZXh0cmFjdGVkIHBhcmFtZXRlcnMuXG4gICAgX2V4dHJhY3RQYXJhbWV0ZXJzOiBmdW5jdGlvbihyb3V0ZSwgZnJhZ21lbnQpIHtcbiAgICAgIHJldHVybiByb3V0ZS5leGVjKGZyYWdtZW50KS5zbGljZSgxKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlUHJvcHMgSW5zdGFuY2UgcHJvcGVydGllcyBmb3IgdGhlIHJvdXRlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IGNsYXNzUHJvcHMgQ2xhc3MgcHJvcGVyaWVzIGZvciB0aGUgcm91dGVyLlxuICAgKiBAcmV0dXJuIHtDbGFzc30gQSBuZXcgc3ViY2xhc3Mgb2YgPGNvZGU+UGFyc2UuUm91dGVyPC9jb2RlPi5cbiAgICovXG4gIFBhcnNlLlJvdXRlci5leHRlbmQgPSBQYXJzZS5fZXh0ZW5kO1xufSh0aGlzKSk7XG4oZnVuY3Rpb24ocm9vdCkge1xuICByb290LlBhcnNlID0gcm9vdC5QYXJzZSB8fCB7fTtcbiAgdmFyIFBhcnNlID0gcm9vdC5QYXJzZTtcbiAgdmFyIF8gPSBQYXJzZS5fO1xuXG4gIC8qKlxuICAgKiBAbmFtZXNwYWNlIENvbnRhaW5zIGZ1bmN0aW9ucyBmb3IgY2FsbGluZyBhbmQgZGVjbGFyaW5nXG4gICAqIDxhIGhyZWY9XCIvZG9jcy9jbG91ZF9jb2RlX2d1aWRlI2Z1bmN0aW9uc1wiPmNsb3VkIGZ1bmN0aW9uczwvYT4uXG4gICAqIDxwPjxzdHJvbmc+PGVtPlxuICAgKiAgIFNvbWUgZnVuY3Rpb25zIGFyZSBvbmx5IGF2YWlsYWJsZSBmcm9tIENsb3VkIENvZGUuXG4gICAqIDwvZW0+PC9zdHJvbmc+PC9wPlxuICAgKi9cbiAgUGFyc2UuQ2xvdWQgPSBQYXJzZS5DbG91ZCB8fCB7fTtcblxuICBfLmV4dGVuZChQYXJzZS5DbG91ZCwgLyoqIEBsZW5kcyBQYXJzZS5DbG91ZCAqLyB7XG4gICAgLyoqXG4gICAgICogTWFrZXMgYSBjYWxsIHRvIGEgY2xvdWQgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIHBhcmFtZXRlcnMgdG8gc2VuZCB0byB0aGUgY2xvdWQgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQSBCYWNrYm9uZS1zdHlsZSBvcHRpb25zIG9iamVjdFxuICAgICAqIG9wdGlvbnMuc3VjY2VzcywgaWYgc2V0LCBzaG91bGQgYmUgYSBmdW5jdGlvbiB0byBoYW5kbGUgYSBzdWNjZXNzZnVsXG4gICAgICogY2FsbCB0byBhIGNsb3VkIGZ1bmN0aW9uLiAgb3B0aW9ucy5lcnJvciBzaG91bGQgYmUgYSBmdW5jdGlvbiB0aGF0XG4gICAgICogaGFuZGxlcyBhbiBlcnJvciBydW5uaW5nIHRoZSBjbG91ZCBmdW5jdGlvbi4gIEJvdGggZnVuY3Rpb25zIGFyZVxuICAgICAqIG9wdGlvbmFsLiAgQm90aCBmdW5jdGlvbnMgdGFrZSBhIHNpbmdsZSBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJuIHtQYXJzZS5Qcm9taXNlfSBBIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdpdGggdGhlIHJlc3VsdFxuICAgICAqIG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBydW46IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICB2YXIgcmVxdWVzdCA9IFBhcnNlLl9yZXF1ZXN0KHtcbiAgICAgICAgcm91dGU6IFwiZnVuY3Rpb25zXCIsXG4gICAgICAgIGNsYXNzTmFtZTogbmFtZSxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHVzZU1hc3RlcktleTogb3B0aW9ucy51c2VNYXN0ZXJLZXksXG4gICAgICAgIHNlc3Npb25Ub2tlbjogb3B0aW9ucy5zZXNzaW9uVG9rZW4sXG4gICAgICAgIGRhdGE6IFBhcnNlLl9lbmNvZGUoZGF0YSwgbnVsbCwgdHJ1ZSlcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVxdWVzdC50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgcmV0dXJuIFBhcnNlLl9kZWNvZGUobnVsbCwgcmVzcCkucmVzdWx0O1xuICAgICAgfSkuX3RoZW5SdW5DYWxsYmFja3Mob3B0aW9ucyk7XG4gICAgfVxuICB9KTtcbn0odGhpcykpO1xuXG4oZnVuY3Rpb24ocm9vdCkge1xuICByb290LlBhcnNlID0gcm9vdC5QYXJzZSB8fCB7fTtcbiAgdmFyIFBhcnNlID0gcm9vdC5QYXJzZTtcblxuICBQYXJzZS5JbnN0YWxsYXRpb24gPSBQYXJzZS5PYmplY3QuZXh0ZW5kKFwiX0luc3RhbGxhdGlvblwiKTtcblxuICAvKipcbiAgICogQ29udGFpbnMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aCBQdXNoIGluIFBhcnNlXG4gICAqIEBuYW1lIFBhcnNlLlB1c2hcbiAgICogQG5hbWVzcGFjZVxuICAgKi9cbiAgUGFyc2UuUHVzaCA9IFBhcnNlLlB1c2ggfHwge307XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgcHVzaCBub3RpZmljYXRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gIFRoZSBkYXRhIG9mIHRoZSBwdXNoIG5vdGlmaWNhdGlvbi4gIFZhbGlkIGZpZWxkc1xuICAgKiBhcmU6XG4gICAqICAgPG9sPlxuICAgKiAgICAgPGxpPmNoYW5uZWxzIC0gQW4gQXJyYXkgb2YgY2hhbm5lbHMgdG8gcHVzaCB0by48L2xpPlxuICAgKiAgICAgPGxpPnB1c2hfdGltZSAtIEEgRGF0ZSBvYmplY3QgZm9yIHdoZW4gdG8gc2VuZCB0aGUgcHVzaC48L2xpPlxuICAgKiAgICAgPGxpPmV4cGlyYXRpb25fdGltZSAtICBBIERhdGUgb2JqZWN0IGZvciB3aGVuIHRvIGV4cGlyZVxuICAgKiAgICAgICAgIHRoZSBwdXNoLjwvbGk+XG4gICAqICAgICA8bGk+ZXhwaXJhdGlvbl9pbnRlcnZhbCAtIFRoZSBzZWNvbmRzIGZyb20gbm93IHRvIGV4cGlyZSB0aGUgcHVzaC48L2xpPlxuICAgKiAgICAgPGxpPndoZXJlIC0gQSBQYXJzZS5RdWVyeSBvdmVyIFBhcnNlLkluc3RhbGxhdGlvbiB0aGF0IGlzIHVzZWQgdG8gbWF0Y2hcbiAgICogICAgICAgICBhIHNldCBvZiBpbnN0YWxsYXRpb25zIHRvIHB1c2ggdG8uPC9saT5cbiAgICogICAgIDxsaT5kYXRhIC0gVGhlIGRhdGEgdG8gc2VuZCBhcyBwYXJ0IG9mIHRoZSBwdXNoPC9saT5cbiAgICogICA8b2w+XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9iamVjdCB0aGF0IGhhcyBhbiBvcHRpb25hbCBzdWNjZXNzIGZ1bmN0aW9uLFxuICAgKiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgd2lsbCBiZSBjYWxsZWQgb24gYSBzdWNjZXNzZnVsIHB1c2gsIGFuZFxuICAgKiBhbiBlcnJvciBmdW5jdGlvbiB0aGF0IHRha2VzIGEgUGFyc2UuRXJyb3IgYW5kIHdpbGwgYmUgY2FsbGVkIGlmIHRoZSBwdXNoXG4gICAqIGZhaWxlZC5cbiAgICogQHJldHVybiB7UGFyc2UuUHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gdGhlIHB1c2ggcmVxdWVzdFxuICAgKiAgICAgY29tcGxldGVzLlxuICAgKi9cbiAgUGFyc2UuUHVzaC5zZW5kID0gZnVuY3Rpb24oZGF0YSwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGRhdGEud2hlcmUpIHtcbiAgICAgIGRhdGEud2hlcmUgPSBkYXRhLndoZXJlLnRvSlNPTigpLndoZXJlO1xuICAgIH1cblxuICAgIGlmIChkYXRhLnB1c2hfdGltZSkge1xuICAgICAgZGF0YS5wdXNoX3RpbWUgPSBkYXRhLnB1c2hfdGltZS50b0pTT04oKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5leHBpcmF0aW9uX3RpbWUpIHtcbiAgICAgIGRhdGEuZXhwaXJhdGlvbl90aW1lID0gZGF0YS5leHBpcmF0aW9uX3RpbWUudG9KU09OKCk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuZXhwaXJhdGlvbl90aW1lICYmIGRhdGEuZXhwaXJhdGlvbl9pbnRlcnZhbCkge1xuICAgICAgdGhyb3cgXCJCb3RoIGV4cGlyYXRpb25fdGltZSBhbmQgZXhwaXJhdGlvbl9pbnRlcnZhbCBjYW4ndCBiZSBzZXRcIjtcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IFBhcnNlLl9yZXF1ZXN0KHtcbiAgICAgIHJvdXRlOiAncHVzaCcsXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICB1c2VNYXN0ZXJLZXk6IG9wdGlvbnMudXNlTWFzdGVyS2V5XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcXVlc3QuX3RoZW5SdW5DYWxsYmFja3Mob3B0aW9ucyk7XG4gIH07XG59KHRoaXMpKTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5d1lYSnpaUzlpZFdsc1pDOXdZWEp6WlMxc1lYUmxjM1F1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9oWEc0Z0tpQlFZWEp6WlNCS1lYWmhVMk55YVhCMElGTkVTMXh1SUNvZ1ZtVnljMmx2YmpvZ01TNDFMakJjYmlBcUlFSjFhV3gwT2lCR2Nta2dTblZzSURFd0lESXdNVFVnTVRjNk1EVTZORFpjYmlBcUlHaDBkSEE2THk5d1lYSnpaUzVqYjIxY2JpQXFYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhOU0JRWVhKelpTd2dURXhEWEc0Z0tseHVJQ29nU1c1amJIVmtaWE02SUZWdVpHVnljMk52Y21VdWFuTmNiaUFxSUVOdmNIbHlhV2RvZENBeU1EQTVMVEl3TVRJZ1NtVnlaVzE1SUVGemFHdGxibUZ6TENCRWIyTjFiV1Z1ZEVOc2IzVmtJRWx1WXk1Y2JpQXFJRkpsYkdWaGMyVmtJSFZ1WkdWeUlIUm9aU0JOU1ZRZ2JHbGpaVzV6WlM1Y2JpQXFMMXh1S0daMWJtTjBhVzl1S0hKdmIzUXBJSHRjYmlBZ2NtOXZkQzVRWVhKelpTQTlJSEp2YjNRdVVHRnljMlVnZkh3Z2UzMDdYRzRnSUhKdmIzUXVVR0Z5YzJVdVZrVlNVMGxQVGlBOUlGd2lhbk14TGpVdU1Gd2lPMXh1ZlNoMGFHbHpLU2s3WEc0dkx5QWdJQ0FnVlc1a1pYSnpZMjl5WlM1cWN5QXhMalF1TkZ4dUx5OGdJQ0FnSUdoMGRIQTZMeTkxYm1SbGNuTmpiM0psYW5NdWIzSm5YRzR2THlBZ0lDQWdLR01wSURJd01Ea3RNakF4TXlCS1pYSmxiWGtnUVhOb2EyVnVZWE1zSUVSdlkzVnRaVzUwUTJ4dmRXUWdTVzVqTGx4dUx5OGdJQ0FnSUZWdVpHVnljMk52Y21VZ2JXRjVJR0psSUdaeVpXVnNlU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RVbFVJR3hwWTJWdWMyVXVYRzVjYmlobWRXNWpkR2x2YmlncElIdGNibHh1SUNBdkx5QkNZWE5sYkdsdVpTQnpaWFIxY0Z4dUlDQXZMeUF0TFMwdExTMHRMUzB0TFMwdExWeHVYRzRnSUM4dklFVnpkR0ZpYkdsemFDQjBhR1VnY205dmRDQnZZbXBsWTNRc0lHQjNhVzVrYjNkZ0lHbHVJSFJvWlNCaWNtOTNjMlZ5TENCdmNpQmdaMnh2WW1Gc1lDQnZiaUIwYUdVZ2MyVnlkbVZ5TGx4dUlDQjJZWElnY205dmRDQTlJSFJvYVhNN1hHNWNiaUFnTHk4Z1UyRjJaU0IwYUdVZ2NISmxkbWx2ZFhNZ2RtRnNkV1VnYjJZZ2RHaGxJR0JmWUNCMllYSnBZV0pzWlM1Y2JpQWdkbUZ5SUhCeVpYWnBiM1Z6Vlc1a1pYSnpZMjl5WlNBOUlISnZiM1F1WHp0Y2JseHVJQ0F2THlCRmMzUmhZbXhwYzJnZ2RHaGxJRzlpYW1WamRDQjBhR0YwSUdkbGRITWdjbVYwZFhKdVpXUWdkRzhnWW5KbFlXc2diM1YwSUc5bUlHRWdiRzl2Y0NCcGRHVnlZWFJwYjI0dVhHNGdJSFpoY2lCaWNtVmhhMlZ5SUQwZ2UzMDdYRzVjYmlBZ0x5OGdVMkYyWlNCaWVYUmxjeUJwYmlCMGFHVWdiV2x1YVdacFpXUWdLR0oxZENCdWIzUWdaM3BwY0hCbFpDa2dkbVZ5YzJsdmJqcGNiaUFnZG1GeUlFRnljbUY1VUhKdmRHOGdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXNJRTlpYWxCeWIzUnZJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaU3dnUm5WdVkxQnliM1J2SUQwZ1JuVnVZM1JwYjI0dWNISnZkRzkwZVhCbE8xeHVYRzRnSUM4dklFTnlaV0YwWlNCeGRXbGpheUJ5WldabGNtVnVZMlVnZG1GeWFXRmliR1Z6SUdadmNpQnpjR1ZsWkNCaFkyTmxjM01nZEc4Z1kyOXlaU0J3Y205MGIzUjVjR1Z6TGx4dUlDQjJZWElnY0hWemFDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUVGeWNtRjVVSEp2ZEc4dWNIVnphQ3hjYmlBZ0lDQWdJSE5zYVdObElDQWdJQ0FnSUNBZ0lDQWdQU0JCY25KaGVWQnliM1J2TG5Oc2FXTmxMRnh1SUNBZ0lDQWdZMjl1WTJGMElDQWdJQ0FnSUNBZ0lDQTlJRUZ5Y21GNVVISnZkRzh1WTI5dVkyRjBMRnh1SUNBZ0lDQWdkRzlUZEhKcGJtY2dJQ0FnSUNBZ0lDQTlJRTlpYWxCeWIzUnZMblJ2VTNSeWFXNW5MRnh1SUNBZ0lDQWdhR0Z6VDNkdVVISnZjR1Z5ZEhrZ0lDQTlJRTlpYWxCeWIzUnZMbWhoYzA5M2JsQnliM0JsY25SNU8xeHVYRzRnSUM4dklFRnNiQ0FxS2tWRFRVRlRZM0pwY0hRZ05Tb3FJRzVoZEdsMlpTQm1kVzVqZEdsdmJpQnBiWEJzWlcxbGJuUmhkR2x2Ym5NZ2RHaGhkQ0IzWlNCb2IzQmxJSFJ2SUhWelpWeHVJQ0F2THlCaGNtVWdaR1ZqYkdGeVpXUWdhR1Z5WlM1Y2JpQWdkbUZ5WEc0Z0lDQWdibUYwYVhabFJtOXlSV0ZqYUNBZ0lDQWdJRDBnUVhKeVlYbFFjbTkwYnk1bWIzSkZZV05vTEZ4dUlDQWdJRzVoZEdsMlpVMWhjQ0FnSUNBZ0lDQWdJQ0E5SUVGeWNtRjVVSEp2ZEc4dWJXRndMRnh1SUNBZ0lHNWhkR2wyWlZKbFpIVmpaU0FnSUNBZ0lDQTlJRUZ5Y21GNVVISnZkRzh1Y21Wa2RXTmxMRnh1SUNBZ0lHNWhkR2wyWlZKbFpIVmpaVkpwWjJoMElDQTlJRUZ5Y21GNVVISnZkRzh1Y21Wa2RXTmxVbWxuYUhRc1hHNGdJQ0FnYm1GMGFYWmxSbWxzZEdWeUlDQWdJQ0FnSUQwZ1FYSnlZWGxRY205MGJ5NW1hV3gwWlhJc1hHNGdJQ0FnYm1GMGFYWmxSWFpsY25rZ0lDQWdJQ0FnSUQwZ1FYSnlZWGxRY205MGJ5NWxkbVZ5ZVN4Y2JpQWdJQ0J1WVhScGRtVlRiMjFsSUNBZ0lDQWdJQ0FnUFNCQmNuSmhlVkJ5YjNSdkxuTnZiV1VzWEc0Z0lDQWdibUYwYVhabFNXNWtaWGhQWmlBZ0lDQWdJRDBnUVhKeVlYbFFjbTkwYnk1cGJtUmxlRTltTEZ4dUlDQWdJRzVoZEdsMlpVeGhjM1JKYm1SbGVFOW1JQ0E5SUVGeWNtRjVVSEp2ZEc4dWJHRnpkRWx1WkdWNFQyWXNYRzRnSUNBZ2JtRjBhWFpsU1hOQmNuSmhlU0FnSUNBZ0lEMGdRWEp5WVhrdWFYTkJjbkpoZVN4Y2JpQWdJQ0J1WVhScGRtVkxaWGx6SUNBZ0lDQWdJQ0FnUFNCUFltcGxZM1F1YTJWNWN5eGNiaUFnSUNCdVlYUnBkbVZDYVc1a0lDQWdJQ0FnSUNBZ1BTQkdkVzVqVUhKdmRHOHVZbWx1WkR0Y2JseHVJQ0F2THlCRGNtVmhkR1VnWVNCellXWmxJSEpsWm1WeVpXNWpaU0IwYnlCMGFHVWdWVzVrWlhKelkyOXlaU0J2WW1wbFkzUWdabTl5SUhWelpTQmlaV3h2ZHk1Y2JpQWdkbUZ5SUY4Z1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0JwWmlBb2IySnFJR2x1YzNSaGJtTmxiMllnWHlrZ2NtVjBkWEp1SUc5aWFqdGNiaUFnSUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdYeWtwSUhKbGRIVnliaUJ1WlhjZ1h5aHZZbW9wTzF4dUlDQWdJSFJvYVhNdVgzZHlZWEJ3WldRZ1BTQnZZbW83WEc0Z0lIMDdYRzVjYmlBZ0x5OGdSWGh3YjNKMElIUm9aU0JWYm1SbGNuTmpiM0psSUc5aWFtVmpkQ0JtYjNJZ0tpcE9iMlJsTG1wektpb3NJSGRwZEdoY2JpQWdMeThnWW1GamEzZGhjbVJ6TFdOdmJYQmhkR2xpYVd4cGRIa2dabTl5SUhSb1pTQnZiR1FnWUhKbGNYVnBjbVVvS1dBZ1FWQkpMaUJKWmlCM1pTZHlaU0JwYmx4dUlDQXZMeUIwYUdVZ1luSnZkM05sY2l3Z1lXUmtJR0JmWUNCaGN5QmhJR2RzYjJKaGJDQnZZbXBsWTNRZ2RtbGhJR0VnYzNSeWFXNW5JR2xrWlc1MGFXWnBaWElzWEc0Z0lDOHZJR1p2Y2lCRGJHOXpkWEpsSUVOdmJYQnBiR1Z5SUZ3aVlXUjJZVzVqWldSY0lpQnRiMlJsTGx4dUlDQnBaaUFvZEhsd1pXOW1JR1Y0Y0c5eWRITWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnRiMlIxYkdVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlHMXZaSFZzWlM1bGVIQnZjblJ6S1NCN1hHNGdJQ0FnSUNCbGVIQnZjblJ6SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZk8xeHVJQ0FnSUgxY2JpQWdJQ0JsZUhCdmNuUnpMbDhnUFNCZk8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISnZiM1F1WHlBOUlGODdYRzRnSUgxY2JseHVJQ0F2THlCRGRYSnlaVzUwSUhabGNuTnBiMjR1WEc0Z0lGOHVWa1ZTVTBsUFRpQTlJQ2N4TGpRdU5DYzdYRzVjYmlBZ0x5OGdRMjlzYkdWamRHbHZiaUJHZFc1amRHbHZibk5jYmlBZ0x5OGdMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmx4dUlDQXZMeUJVYUdVZ1kyOXlibVZ5YzNSdmJtVXNJR0Z1SUdCbFlXTm9ZQ0JwYlhCc1pXMWxiblJoZEdsdmJpd2dZV3RoSUdCbWIzSkZZV05vWUM1Y2JpQWdMeThnU0dGdVpHeGxjeUJ2WW1wbFkzUnpJSGRwZEdnZ2RHaGxJR0oxYVd4MExXbHVJR0JtYjNKRllXTm9ZQ3dnWVhKeVlYbHpMQ0JoYm1RZ2NtRjNJRzlpYW1WamRITXVYRzRnSUM4dklFUmxiR1ZuWVhSbGN5QjBieUFxS2tWRFRVRlRZM0pwY0hRZ05Tb3FKM01nYm1GMGFYWmxJR0JtYjNKRllXTm9ZQ0JwWmlCaGRtRnBiR0ZpYkdVdVhHNGdJSFpoY2lCbFlXTm9JRDBnWHk1bFlXTm9JRDBnWHk1bWIzSkZZV05vSUQwZ1puVnVZM1JwYjI0b2IySnFMQ0JwZEdWeVlYUnZjaXdnWTI5dWRHVjRkQ2tnZTF4dUlDQWdJR2xtSUNodlltb2dQVDBnYm5Wc2JDa2djbVYwZFhKdU8xeHVJQ0FnSUdsbUlDaHVZWFJwZG1WR2IzSkZZV05vSUNZbUlHOWlhaTVtYjNKRllXTm9JRDA5UFNCdVlYUnBkbVZHYjNKRllXTm9LU0I3WEc0Z0lDQWdJQ0J2WW1vdVptOXlSV0ZqYUNocGRHVnlZWFJ2Y2l3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNodlltb3ViR1Z1WjNSb0lEMDlQU0FyYjJKcUxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQnZZbW91YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwZEdWeVlYUnZjaTVqWVd4c0tHTnZiblJsZUhRc0lHOWlhbHRwWFN3Z2FTd2diMkpxS1NBOVBUMGdZbkpsWVd0bGNpa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdiMkpxS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hmTG1oaGN5aHZZbW9zSUd0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hWFJsY21GMGIzSXVZMkZzYkNoamIyNTBaWGgwTENCdlltcGJhMlY1WFN3Z2EyVjVMQ0J2WW1vcElEMDlQU0JpY21WaGEyVnlLU0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnTHk4Z1VtVjBkWEp1SUhSb1pTQnlaWE4xYkhSeklHOW1JR0Z3Y0d4NWFXNW5JSFJvWlNCcGRHVnlZWFJ2Y2lCMGJ5QmxZV05vSUdWc1pXMWxiblF1WEc0Z0lDOHZJRVJsYkdWbllYUmxjeUIwYnlBcUtrVkRUVUZUWTNKcGNIUWdOU29xSjNNZ2JtRjBhWFpsSUdCdFlYQmdJR2xtSUdGMllXbHNZV0pzWlM1Y2JpQWdYeTV0WVhBZ1BTQmZMbU52Ykd4bFkzUWdQU0JtZFc1amRHbHZiaWh2WW1vc0lHbDBaWEpoZEc5eUxDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RtRnlJSEpsYzNWc2RITWdQU0JiWFR0Y2JpQWdJQ0JwWmlBb2IySnFJRDA5SUc1MWJHd3BJSEpsZEhWeWJpQnlaWE4xYkhSek8xeHVJQ0FnSUdsbUlDaHVZWFJwZG1WTllYQWdKaVlnYjJKcUxtMWhjQ0E5UFQwZ2JtRjBhWFpsVFdGd0tTQnlaWFIxY200Z2IySnFMbTFoY0NocGRHVnlZWFJ2Y2l3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnWldGamFDaHZZbW9zSUdaMWJtTjBhVzl1S0haaGJIVmxMQ0JwYm1SbGVDd2diR2x6ZENrZ2UxeHVJQ0FnSUNBZ2NtVnpkV3gwYzF0eVpYTjFiSFJ6TG14bGJtZDBhRjBnUFNCcGRHVnlZWFJ2Y2k1allXeHNLR052Ym5SbGVIUXNJSFpoYkhWbExDQnBibVJsZUN3Z2JHbHpkQ2s3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZEhNN1hHNGdJSDA3WEc1Y2JpQWdkbUZ5SUhKbFpIVmpaVVZ5Y205eUlEMGdKMUpsWkhWalpTQnZaaUJsYlhCMGVTQmhjbkpoZVNCM2FYUm9JRzV2SUdsdWFYUnBZV3dnZG1Gc2RXVW5PMXh1WEc0Z0lDOHZJQ29xVW1Wa2RXTmxLaW9nWW5WcGJHUnpJSFZ3SUdFZ2MybHVaMnhsSUhKbGMzVnNkQ0JtY205dElHRWdiR2x6ZENCdlppQjJZV3gxWlhNc0lHRnJZU0JnYVc1cVpXTjBZQ3hjYmlBZ0x5OGdiM0lnWUdadmJHUnNZQzRnUkdWc1pXZGhkR1Z6SUhSdklDb3FSVU5OUVZOamNtbHdkQ0ExS2lvbmN5QnVZWFJwZG1VZ1lISmxaSFZqWldBZ2FXWWdZWFpoYVd4aFlteGxMbHh1SUNCZkxuSmxaSFZqWlNBOUlGOHVabTlzWkd3Z1BTQmZMbWx1YW1WamRDQTlJR1oxYm1OMGFXOXVLRzlpYWl3Z2FYUmxjbUYwYjNJc0lHMWxiVzhzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0IyWVhJZ2FXNXBkR2xoYkNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXlPMXh1SUNBZ0lHbG1JQ2h2WW1vZ1BUMGdiblZzYkNrZ2IySnFJRDBnVzEwN1hHNGdJQ0FnYVdZZ0tHNWhkR2wyWlZKbFpIVmpaU0FtSmlCdlltb3VjbVZrZFdObElEMDlQU0J1WVhScGRtVlNaV1IxWTJVcElIdGNiaUFnSUNBZ0lHbG1JQ2hqYjI1MFpYaDBLU0JwZEdWeVlYUnZjaUE5SUY4dVltbHVaQ2hwZEdWeVlYUnZjaXdnWTI5dWRHVjRkQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhVzVwZEdsaGJDQS9JRzlpYWk1eVpXUjFZMlVvYVhSbGNtRjBiM0lzSUcxbGJXOHBJRG9nYjJKcUxuSmxaSFZqWlNocGRHVnlZWFJ2Y2lrN1hHNGdJQ0FnZlZ4dUlDQWdJR1ZoWTJnb2IySnFMQ0JtZFc1amRHbHZiaWgyWVd4MVpTd2dhVzVrWlhnc0lHeHBjM1FwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hhVzVwZEdsaGJDa2dlMXh1SUNBZ0lDQWdJQ0J0WlcxdklEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lHbHVhWFJwWVd3Z1BTQjBjblZsTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYldWdGJ5QTlJR2wwWlhKaGRHOXlMbU5oYkd3b1kyOXVkR1Y0ZEN3Z2JXVnRieXdnZG1Gc2RXVXNJR2x1WkdWNExDQnNhWE4wS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0JwWmlBb0lXbHVhWFJwWVd3cElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9jbVZrZFdObFJYSnliM0lwTzF4dUlDQWdJSEpsZEhWeWJpQnRaVzF2TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRlJvWlNCeWFXZG9kQzFoYzNOdlkybGhkR2wyWlNCMlpYSnphVzl1SUc5bUlISmxaSFZqWlN3Z1lXeHpieUJyYm05M2JpQmhjeUJnWm05c1pISmdMbHh1SUNBdkx5QkVaV3hsWjJGMFpYTWdkRzhnS2lwRlEwMUJVMk55YVhCMElEVXFLaWR6SUc1aGRHbDJaU0JnY21Wa2RXTmxVbWxuYUhSZ0lHbG1JR0YyWVdsc1lXSnNaUzVjYmlBZ1h5NXlaV1IxWTJWU2FXZG9kQ0E5SUY4dVptOXNaSElnUFNCbWRXNWpkR2x2Ymlodlltb3NJR2wwWlhKaGRHOXlMQ0J0WlcxdkxDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RtRnlJR2x1YVhScFlXd2dQU0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTWp0Y2JpQWdJQ0JwWmlBb2IySnFJRDA5SUc1MWJHd3BJRzlpYWlBOUlGdGRPMXh1SUNBZ0lHbG1JQ2h1WVhScGRtVlNaV1IxWTJWU2FXZG9kQ0FtSmlCdlltb3VjbVZrZFdObFVtbG5hSFFnUFQwOUlHNWhkR2wyWlZKbFpIVmpaVkpwWjJoMEtTQjdYRzRnSUNBZ0lDQnBaaUFvWTI5dWRHVjRkQ2tnYVhSbGNtRjBiM0lnUFNCZkxtSnBibVFvYVhSbGNtRjBiM0lzSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnY21WMGRYSnVJR2x1YVhScFlXd2dQeUJ2WW1vdWNtVmtkV05sVW1sbmFIUW9hWFJsY21GMGIzSXNJRzFsYlc4cElEb2diMkpxTG5KbFpIVmpaVkpwWjJoMEtHbDBaWEpoZEc5eUtUdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlHeGxibWQwYUNBOUlHOWlhaTVzWlc1bmRHZzdYRzRnSUNBZ2FXWWdLR3hsYm1kMGFDQWhQVDBnSzJ4bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHdGxlWE1nUFNCZkxtdGxlWE1vYjJKcUtUdGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlHdGxlWE11YkdWdVozUm9PMXh1SUNBZ0lIMWNiaUFnSUNCbFlXTm9LRzlpYWl3Z1puVnVZM1JwYjI0b2RtRnNkV1VzSUdsdVpHVjRMQ0JzYVhOMEtTQjdYRzRnSUNBZ0lDQnBibVJsZUNBOUlHdGxlWE1nUHlCclpYbHpXeTB0YkdWdVozUm9YU0E2SUMwdGJHVnVaM1JvTzF4dUlDQWdJQ0FnYVdZZ0tDRnBibWwwYVdGc0tTQjdYRzRnSUNBZ0lDQWdJRzFsYlc4Z1BTQnZZbXBiYVc1a1pYaGRPMXh1SUNBZ0lDQWdJQ0JwYm1sMGFXRnNJRDBnZEhKMVpUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHMWxiVzhnUFNCcGRHVnlZWFJ2Y2k1allXeHNLR052Ym5SbGVIUXNJRzFsYlc4c0lHOWlhbHRwYm1SbGVGMHNJR2x1WkdWNExDQnNhWE4wS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0JwWmlBb0lXbHVhWFJwWVd3cElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9jbVZrZFdObFJYSnliM0lwTzF4dUlDQWdJSEpsZEhWeWJpQnRaVzF2TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkpsZEhWeWJpQjBhR1VnWm1seWMzUWdkbUZzZFdVZ2QyaHBZMmdnY0dGemMyVnpJR0VnZEhKMWRHZ2dkR1Z6ZEM0Z1FXeHBZWE5sWkNCaGN5QmdaR1YwWldOMFlDNWNiaUFnWHk1bWFXNWtJRDBnWHk1a1pYUmxZM1FnUFNCbWRXNWpkR2x2Ymlodlltb3NJR2wwWlhKaGRHOXlMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkRHRjYmlBZ0lDQmhibmtvYjJKcUxDQm1kVzVqZEdsdmJpaDJZV3gxWlN3Z2FXNWtaWGdzSUd4cGMzUXBJSHRjYmlBZ0lDQWdJR2xtSUNocGRHVnlZWFJ2Y2k1allXeHNLR052Ym5SbGVIUXNJSFpoYkhWbExDQnBibVJsZUN3Z2JHbHpkQ2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1VtVjBkWEp1SUdGc2JDQjBhR1VnWld4bGJXVnVkSE1nZEdoaGRDQndZWE56SUdFZ2RISjFkR2dnZEdWemRDNWNiaUFnTHk4Z1JHVnNaV2RoZEdWeklIUnZJQ29xUlVOTlFWTmpjbWx3ZENBMUtpb25jeUJ1WVhScGRtVWdZR1pwYkhSbGNtQWdhV1lnWVhaaGFXeGhZbXhsTGx4dUlDQXZMeUJCYkdsaGMyVmtJR0Z6SUdCelpXeGxZM1JnTGx4dUlDQmZMbVpwYkhSbGNpQTlJRjh1YzJWc1pXTjBJRDBnWm5WdVkzUnBiMjRvYjJKcUxDQnBkR1Z5WVhSdmNpd2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lIWmhjaUJ5WlhOMWJIUnpJRDBnVzEwN1hHNGdJQ0FnYVdZZ0tHOWlhaUE5UFNCdWRXeHNLU0J5WlhSMWNtNGdjbVZ6ZFd4MGN6dGNiaUFnSUNCcFppQW9ibUYwYVhabFJtbHNkR1Z5SUNZbUlHOWlhaTVtYVd4MFpYSWdQVDA5SUc1aGRHbDJaVVpwYkhSbGNpa2djbVYwZFhKdUlHOWlhaTVtYVd4MFpYSW9hWFJsY21GMGIzSXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lHVmhZMmdvYjJKcUxDQm1kVzVqZEdsdmJpaDJZV3gxWlN3Z2FXNWtaWGdzSUd4cGMzUXBJSHRjYmlBZ0lDQWdJR2xtSUNocGRHVnlZWFJ2Y2k1allXeHNLR052Ym5SbGVIUXNJSFpoYkhWbExDQnBibVJsZUN3Z2JHbHpkQ2twSUhKbGMzVnNkSE5iY21WemRXeDBjeTVzWlc1bmRHaGRJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkSE03WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVbVYwZFhKdUlHRnNiQ0IwYUdVZ1pXeGxiV1Z1ZEhNZ1ptOXlJSGRvYVdOb0lHRWdkSEoxZEdnZ2RHVnpkQ0JtWVdsc2N5NWNiaUFnWHk1eVpXcGxZM1FnUFNCbWRXNWpkR2x2Ymlodlltb3NJR2wwWlhKaGRHOXlMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOHVabWxzZEdWeUtHOWlhaXdnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJR2x1WkdWNExDQnNhWE4wS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSVdsMFpYSmhkRzl5TG1OaGJHd29ZMjl1ZEdWNGRDd2dkbUZzZFdVc0lHbHVaR1Y0TENCc2FYTjBLVHRjYmlBZ0lDQjlMQ0JqYjI1MFpYaDBLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkVaWFJsY20xcGJtVWdkMmhsZEdobGNpQmhiR3dnYjJZZ2RHaGxJR1ZzWlcxbGJuUnpJRzFoZEdOb0lHRWdkSEoxZEdnZ2RHVnpkQzVjYmlBZ0x5OGdSR1ZzWldkaGRHVnpJSFJ2SUNvcVJVTk5RVk5qY21sd2RDQTFLaW9uY3lCdVlYUnBkbVVnWUdWMlpYSjVZQ0JwWmlCaGRtRnBiR0ZpYkdVdVhHNGdJQzh2SUVGc2FXRnpaV1FnWVhNZ1lHRnNiR0F1WEc0Z0lGOHVaWFpsY25rZ1BTQmZMbUZzYkNBOUlHWjFibU4wYVc5dUtHOWlhaXdnYVhSbGNtRjBiM0lzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0JwZEdWeVlYUnZjaUI4ZkNBb2FYUmxjbUYwYjNJZ1BTQmZMbWxrWlc1MGFYUjVLVHRjYmlBZ0lDQjJZWElnY21WemRXeDBJRDBnZEhKMVpUdGNiaUFnSUNCcFppQW9iMkpxSUQwOUlHNTFiR3dwSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUNBZ2FXWWdLRzVoZEdsMlpVVjJaWEo1SUNZbUlHOWlhaTVsZG1WeWVTQTlQVDBnYm1GMGFYWmxSWFpsY25rcElISmxkSFZ5YmlCdlltb3VaWFpsY25rb2FYUmxjbUYwYjNJc0lHTnZiblJsZUhRcE8xeHVJQ0FnSUdWaFkyZ29iMkpxTENCbWRXNWpkR2x2YmloMllXeDFaU3dnYVc1a1pYZ3NJR3hwYzNRcElIdGNiaUFnSUNBZ0lHbG1JQ2doS0hKbGMzVnNkQ0E5SUhKbGMzVnNkQ0FtSmlCcGRHVnlZWFJ2Y2k1allXeHNLR052Ym5SbGVIUXNJSFpoYkhWbExDQnBibVJsZUN3Z2JHbHpkQ2twS1NCeVpYUjFjbTRnWW5KbFlXdGxjanRjYmlBZ0lDQjlLVHRjYmlBZ0lDQnlaWFIxY200Z0lTRnlaWE4xYkhRN1hHNGdJSDA3WEc1Y2JpQWdMeThnUkdWMFpYSnRhVzVsSUdsbUlHRjBJR3hsWVhOMElHOXVaU0JsYkdWdFpXNTBJR2x1SUhSb1pTQnZZbXBsWTNRZ2JXRjBZMmhsY3lCaElIUnlkWFJvSUhSbGMzUXVYRzRnSUM4dklFUmxiR1ZuWVhSbGN5QjBieUFxS2tWRFRVRlRZM0pwY0hRZ05Tb3FKM01nYm1GMGFYWmxJR0J6YjIxbFlDQnBaaUJoZG1GcGJHRmliR1V1WEc0Z0lDOHZJRUZzYVdGelpXUWdZWE1nWUdGdWVXQXVYRzRnSUhaaGNpQmhibmtnUFNCZkxuTnZiV1VnUFNCZkxtRnVlU0E5SUdaMWJtTjBhVzl1S0c5aWFpd2dhWFJsY21GMGIzSXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQnBkR1Z5WVhSdmNpQjhmQ0FvYVhSbGNtRjBiM0lnUFNCZkxtbGtaVzUwYVhSNUtUdGNiaUFnSUNCMllYSWdjbVZ6ZFd4MElEMGdabUZzYzJVN1hHNGdJQ0FnYVdZZ0tHOWlhaUE5UFNCdWRXeHNLU0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUdsbUlDaHVZWFJwZG1WVGIyMWxJQ1ltSUc5aWFpNXpiMjFsSUQwOVBTQnVZWFJwZG1WVGIyMWxLU0J5WlhSMWNtNGdiMkpxTG5OdmJXVW9hWFJsY21GMGIzSXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lHVmhZMmdvYjJKcUxDQm1kVzVqZEdsdmJpaDJZV3gxWlN3Z2FXNWtaWGdzSUd4cGMzUXBJSHRjYmlBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnZkh3Z0tISmxjM1ZzZENBOUlHbDBaWEpoZEc5eUxtTmhiR3dvWTI5dWRHVjRkQ3dnZG1Gc2RXVXNJR2x1WkdWNExDQnNhWE4wS1NrcElISmxkSFZ5YmlCaWNtVmhhMlZ5TzF4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQWhJWEpsYzNWc2REdGNiaUFnZlR0Y2JseHVJQ0F2THlCRVpYUmxjbTFwYm1VZ2FXWWdkR2hsSUdGeWNtRjVJRzl5SUc5aWFtVmpkQ0JqYjI1MFlXbHVjeUJoSUdkcGRtVnVJSFpoYkhWbElDaDFjMmx1WnlCZ1BUMDlZQ2t1WEc0Z0lDOHZJRUZzYVdGelpXUWdZWE1nWUdsdVkyeDFaR1ZnTGx4dUlDQmZMbU52Ym5SaGFXNXpJRDBnWHk1cGJtTnNkV1JsSUQwZ1puVnVZM1JwYjI0b2IySnFMQ0IwWVhKblpYUXBJSHRjYmlBZ0lDQnBaaUFvYjJKcUlEMDlJRzUxYkd3cElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvYm1GMGFYWmxTVzVrWlhoUFppQW1KaUJ2WW1vdWFXNWtaWGhQWmlBOVBUMGdibUYwYVhabFNXNWtaWGhQWmlrZ2NtVjBkWEp1SUc5aWFpNXBibVJsZUU5bUtIUmhjbWRsZENrZ0lUMGdMVEU3WEc0Z0lDQWdjbVYwZFhKdUlHRnVlU2h2WW1vc0lHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVWdQVDA5SUhSaGNtZGxkRHRjYmlBZ0lDQjlLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5Qkpiblp2YTJVZ1lTQnRaWFJvYjJRZ0tIZHBkR2dnWVhKbmRXMWxiblJ6S1NCdmJpQmxkbVZ5ZVNCcGRHVnRJR2x1SUdFZ1kyOXNiR1ZqZEdsdmJpNWNiaUFnWHk1cGJuWnZhMlVnUFNCbWRXNWpkR2x2Ymlodlltb3NJRzFsZEdodlpDa2dlMXh1SUNBZ0lIWmhjaUJoY21keklEMGdjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1zSURJcE8xeHVJQ0FnSUhaaGNpQnBjMFoxYm1NZ1BTQmZMbWx6Um5WdVkzUnBiMjRvYldWMGFHOWtLVHRjYmlBZ0lDQnlaWFIxY200Z1h5NXRZWEFvYjJKcUxDQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNocGMwWjFibU1nUHlCdFpYUm9iMlFnT2lCMllXeDFaVnR0WlhSb2IyUmRLUzVoY0hCc2VTaDJZV3gxWlN3Z1lYSm5jeWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRMjl1ZG1WdWFXVnVZMlVnZG1WeWMybHZiaUJ2WmlCaElHTnZiVzF2YmlCMWMyVWdZMkZ6WlNCdlppQmdiV0Z3WURvZ1ptVjBZMmhwYm1jZ1lTQndjbTl3WlhKMGVTNWNiaUFnWHk1d2JIVmpheUE5SUdaMWJtTjBhVzl1S0c5aWFpd2dhMlY1S1NCN1hHNGdJQ0FnY21WMGRYSnVJRjh1YldGd0tHOWlhaXdnWm5WdVkzUnBiMjRvZG1Gc2RXVXBleUJ5WlhSMWNtNGdkbUZzZFdWYmEyVjVYVHNnZlNrN1hHNGdJSDA3WEc1Y2JpQWdMeThnUTI5dWRtVnVhV1Z1WTJVZ2RtVnljMmx2YmlCdlppQmhJR052YlcxdmJpQjFjMlVnWTJGelpTQnZaaUJnWm1sc2RHVnlZRG9nYzJWc1pXTjBhVzVuSUc5dWJIa2diMkpxWldOMGMxeHVJQ0F2THlCamIyNTBZV2x1YVc1bklITndaV05wWm1saklHQnJaWGs2ZG1Gc2RXVmdJSEJoYVhKekxseHVJQ0JmTG5kb1pYSmxJRDBnWm5WdVkzUnBiMjRvYjJKcUxDQmhkSFJ5Y3l3Z1ptbHljM1FwSUh0Y2JpQWdJQ0JwWmlBb1h5NXBjMFZ0Y0hSNUtHRjBkSEp6S1NrZ2NtVjBkWEp1SUdacGNuTjBJRDhnYm5Wc2JDQTZJRnRkTzF4dUlDQWdJSEpsZEhWeWJpQmZXMlpwY25OMElEOGdKMlpwYm1RbklEb2dKMlpwYkhSbGNpZGRLRzlpYWl3Z1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJoZEhSeWN5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1lYUjBjbk5iYTJWNVhTQWhQVDBnZG1Gc2RXVmJhMlY1WFNrZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmU2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRMjl1ZG1WdWFXVnVZMlVnZG1WeWMybHZiaUJ2WmlCaElHTnZiVzF2YmlCMWMyVWdZMkZ6WlNCdlppQmdabWx1WkdBNklHZGxkSFJwYm1jZ2RHaGxJR1pwY25OMElHOWlhbVZqZEZ4dUlDQXZMeUJqYjI1MFlXbHVhVzVuSUhOd1pXTnBabWxqSUdCclpYazZkbUZzZFdWZ0lIQmhhWEp6TGx4dUlDQmZMbVpwYm1SWGFHVnlaU0E5SUdaMWJtTjBhVzl1S0c5aWFpd2dZWFIwY25NcElIdGNiaUFnSUNCeVpYUjFjbTRnWHk1M2FHVnlaU2h2WW1vc0lHRjBkSEp6TENCMGNuVmxLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlNaWFIxY200Z2RHaGxJRzFoZUdsdGRXMGdaV3hsYldWdWRDQnZjaUFvWld4bGJXVnVkQzFpWVhObFpDQmpiMjF3ZFhSaGRHbHZiaWt1WEc0Z0lDOHZJRU5oYmlkMElHOXdkR2x0YVhwbElHRnljbUY1Y3lCdlppQnBiblJsWjJWeWN5QnNiMjVuWlhJZ2RHaGhiaUEyTlN3MU16VWdaV3hsYldWdWRITXVYRzRnSUM4dklGTmxaVG9nYUhSMGNITTZMeTlpZFdkekxuZGxZbXRwZEM1dmNtY3ZjMmh2ZDE5aWRXY3VZMmRwUDJsa1BUZ3dOemszWEc0Z0lGOHViV0Y0SUQwZ1puVnVZM1JwYjI0b2IySnFMQ0JwZEdWeVlYUnZjaXdnWTI5dWRHVjRkQ2tnZTF4dUlDQWdJR2xtSUNnaGFYUmxjbUYwYjNJZ0ppWWdYeTVwYzBGeWNtRjVLRzlpYWlrZ0ppWWdiMkpxV3pCZElEMDlQU0FyYjJKcVd6QmRJQ1ltSUc5aWFpNXNaVzVuZEdnZ1BDQTJOVFV6TlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3ViV0Y0TG1Gd2NHeDVLRTFoZEdnc0lHOWlhaWs3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2doYVhSbGNtRjBiM0lnSmlZZ1h5NXBjMFZ0Y0hSNUtHOWlhaWtwSUhKbGRIVnliaUF0U1c1bWFXNXBkSGs3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUh0amIyMXdkWFJsWkNBNklDMUpibVpwYm1sMGVTd2dkbUZzZFdVNklDMUpibVpwYm1sMGVYMDdYRzRnSUNBZ1pXRmphQ2h2WW1vc0lHWjFibU4wYVc5dUtIWmhiSFZsTENCcGJtUmxlQ3dnYkdsemRDa2dlMXh1SUNBZ0lDQWdkbUZ5SUdOdmJYQjFkR1ZrSUQwZ2FYUmxjbUYwYjNJZ1B5QnBkR1Z5WVhSdmNpNWpZV3hzS0dOdmJuUmxlSFFzSUhaaGJIVmxMQ0JwYm1SbGVDd2diR2x6ZENrZ09pQjJZV3gxWlR0Y2JpQWdJQ0FnSUdOdmJYQjFkR1ZrSUQ0OUlISmxjM1ZzZEM1amIyMXdkWFJsWkNBbUppQW9jbVZ6ZFd4MElEMGdlM1poYkhWbElEb2dkbUZzZFdVc0lHTnZiWEIxZEdWa0lEb2dZMjl0Y0hWMFpXUjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTG5aaGJIVmxPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5YmlCMGFHVWdiV2x1YVcxMWJTQmxiR1Z0Wlc1MElDaHZjaUJsYkdWdFpXNTBMV0poYzJWa0lHTnZiWEIxZEdGMGFXOXVLUzVjYmlBZ1h5NXRhVzRnUFNCbWRXNWpkR2x2Ymlodlltb3NJR2wwWlhKaGRHOXlMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdhV1lnS0NGcGRHVnlZWFJ2Y2lBbUppQmZMbWx6UVhKeVlYa29iMkpxS1NBbUppQnZZbXBiTUYwZ1BUMDlJQ3R2WW1wYk1GMGdKaVlnYjJKcUxteGxibWQwYUNBOElEWTFOVE0xS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNXRhVzR1WVhCd2JIa29UV0YwYUN3Z2IySnFLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQ0ZwZEdWeVlYUnZjaUFtSmlCZkxtbHpSVzF3ZEhrb2IySnFLU2tnY21WMGRYSnVJRWx1Wm1sdWFYUjVPMXh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0I3WTI5dGNIVjBaV1FnT2lCSmJtWnBibWwwZVN3Z2RtRnNkV1U2SUVsdVptbHVhWFI1ZlR0Y2JpQWdJQ0JsWVdOb0tHOWlhaXdnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJR2x1WkdWNExDQnNhWE4wS1NCN1hHNGdJQ0FnSUNCMllYSWdZMjl0Y0hWMFpXUWdQU0JwZEdWeVlYUnZjaUEvSUdsMFpYSmhkRzl5TG1OaGJHd29ZMjl1ZEdWNGRDd2dkbUZzZFdVc0lHbHVaR1Y0TENCc2FYTjBLU0E2SUhaaGJIVmxPMXh1SUNBZ0lDQWdZMjl0Y0hWMFpXUWdQQ0J5WlhOMWJIUXVZMjl0Y0hWMFpXUWdKaVlnS0hKbGMzVnNkQ0E5SUh0MllXeDFaU0E2SUhaaGJIVmxMQ0JqYjIxd2RYUmxaQ0E2SUdOdmJYQjFkR1ZrZlNrN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2RDNTJZV3gxWlR0Y2JpQWdmVHRjYmx4dUlDQXZMeUJUYUhWbVpteGxJR0Z1SUdGeWNtRjVMbHh1SUNCZkxuTm9kV1ptYkdVZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0IyWVhJZ2NtRnVaRHRjYmlBZ0lDQjJZWElnYVc1a1pYZ2dQU0F3TzF4dUlDQWdJSFpoY2lCemFIVm1abXhsWkNBOUlGdGRPMXh1SUNBZ0lHVmhZMmdvYjJKcUxDQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2NtRnVaQ0E5SUY4dWNtRnVaRzl0S0dsdVpHVjRLeXNwTzF4dUlDQWdJQ0FnYzJoMVptWnNaV1JiYVc1a1pYZ2dMU0F4WFNBOUlITm9kV1ptYkdWa1czSmhibVJkTzF4dUlDQWdJQ0FnYzJoMVptWnNaV1JiY21GdVpGMGdQU0IyWVd4MVpUdGNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnYzJoMVptWnNaV1E3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRVzRnYVc1MFpYSnVZV3dnWm5WdVkzUnBiMjRnZEc4Z1oyVnVaWEpoZEdVZ2JHOXZhM1Z3SUdsMFpYSmhkRzl5Y3k1Y2JpQWdkbUZ5SUd4dmIydDFjRWwwWlhKaGRHOXlJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z1h5NXBjMFoxYm1OMGFXOXVLSFpoYkhWbEtTQS9JSFpoYkhWbElEb2dablZ1WTNScGIyNG9iMkpxS1hzZ2NtVjBkWEp1SUc5aWFsdDJZV3gxWlYwN0lIMDdYRzRnSUgwN1hHNWNiaUFnTHk4Z1UyOXlkQ0IwYUdVZ2IySnFaV04wSjNNZ2RtRnNkV1Z6SUdKNUlHRWdZM0pwZEdWeWFXOXVJSEJ5YjJSMVkyVmtJR0o1SUdGdUlHbDBaWEpoZEc5eUxseHVJQ0JmTG5OdmNuUkNlU0E5SUdaMWJtTjBhVzl1S0c5aWFpd2dkbUZzZFdVc0lHTnZiblJsZUhRcElIdGNiaUFnSUNCMllYSWdhWFJsY21GMGIzSWdQU0JzYjI5cmRYQkpkR1Z5WVhSdmNpaDJZV3gxWlNrN1hHNGdJQ0FnY21WMGRYSnVJRjh1Y0d4MVkyc29YeTV0WVhBb2IySnFMQ0JtZFc1amRHbHZiaWgyWVd4MVpTd2dhVzVrWlhnc0lHeHBjM1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRG9nZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJR2x1WkdWNElEb2dhVzVrWlhnc1hHNGdJQ0FnSUNBZ0lHTnlhWFJsY21saElEb2dhWFJsY21GMGIzSXVZMkZzYkNoamIyNTBaWGgwTENCMllXeDFaU3dnYVc1a1pYZ3NJR3hwYzNRcFhHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgwcExuTnZjblFvWm5WdVkzUnBiMjRvYkdWbWRDd2djbWxuYUhRcElIdGNiaUFnSUNBZ0lIWmhjaUJoSUQwZ2JHVm1kQzVqY21sMFpYSnBZVHRjYmlBZ0lDQWdJSFpoY2lCaUlEMGdjbWxuYUhRdVkzSnBkR1Z5YVdFN1hHNGdJQ0FnSUNCcFppQW9ZU0FoUFQwZ1lpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1lTQStJR0lnZkh3Z1lTQTlQVDBnZG05cFpDQXdLU0J5WlhSMWNtNGdNVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHRWdQQ0JpSUh4OElHSWdQVDA5SUhadmFXUWdNQ2tnY21WMGRYSnVJQzB4TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJR3hsWm5RdWFXNWtaWGdnUENCeWFXZG9kQzVwYm1SbGVDQS9JQzB4SURvZ01UdGNiaUFnSUNCOUtTd2dKM1poYkhWbEp5azdYRzRnSUgwN1hHNWNiaUFnTHk4Z1FXNGdhVzUwWlhKdVlXd2dablZ1WTNScGIyNGdkWE5sWkNCbWIzSWdZV2RuY21WbllYUmxJRndpWjNKdmRYQWdZbmxjSWlCdmNHVnlZWFJwYjI1ekxseHVJQ0IyWVhJZ1ozSnZkWEFnUFNCbWRXNWpkR2x2Ymlodlltb3NJSFpoYkhWbExDQmpiMjUwWlhoMExDQmlaV2hoZG1sdmNpa2dlMXh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0I3ZlR0Y2JpQWdJQ0IyWVhJZ2FYUmxjbUYwYjNJZ1BTQnNiMjlyZFhCSmRHVnlZWFJ2Y2loMllXeDFaU0I4ZkNCZkxtbGtaVzUwYVhSNUtUdGNiaUFnSUNCbFlXTm9LRzlpYWl3Z1puVnVZM1JwYjI0b2RtRnNkV1VzSUdsdVpHVjRLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2EyVjVJRDBnYVhSbGNtRjBiM0l1WTJGc2JDaGpiMjUwWlhoMExDQjJZV3gxWlN3Z2FXNWtaWGdzSUc5aWFpazdYRzRnSUNBZ0lDQmlaV2hoZG1sdmNpaHlaWE4xYkhRc0lHdGxlU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdSM0p2ZFhCeklIUm9aU0J2WW1wbFkzUW5jeUIyWVd4MVpYTWdZbmtnWVNCamNtbDBaWEpwYjI0dUlGQmhjM01nWldsMGFHVnlJR0VnYzNSeWFXNW5JR0YwZEhKcFluVjBaVnh1SUNBdkx5QjBieUJuY205MWNDQmllU3dnYjNJZ1lTQm1kVzVqZEdsdmJpQjBhR0YwSUhKbGRIVnlibk1nZEdobElHTnlhWFJsY21sdmJpNWNiaUFnWHk1bmNtOTFjRUo1SUQwZ1puVnVZM1JwYjI0b2IySnFMQ0IyWVd4MVpTd2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbmNtOTFjQ2h2WW1vc0lIWmhiSFZsTENCamIyNTBaWGgwTENCbWRXNWpkR2x2YmloeVpYTjFiSFFzSUd0bGVTd2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lDaGZMbWhoY3loeVpYTjFiSFFzSUd0bGVTa2dQeUJ5WlhOMWJIUmJhMlY1WFNBNklDaHlaWE4xYkhSYmEyVjVYU0E5SUZ0ZEtTa3VjSFZ6YUNoMllXeDFaU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRMjkxYm5SeklHbHVjM1JoYm1ObGN5QnZaaUJoYmlCdlltcGxZM1FnZEdoaGRDQm5jbTkxY0NCaWVTQmhJR05sY25SaGFXNGdZM0pwZEdWeWFXOXVMaUJRWVhOelhHNGdJQzh2SUdWcGRHaGxjaUJoSUhOMGNtbHVaeUJoZEhSeWFXSjFkR1VnZEc4Z1kyOTFiblFnWW5rc0lHOXlJR0VnWm5WdVkzUnBiMjRnZEdoaGRDQnlaWFIxY201eklIUm9aVnh1SUNBdkx5QmpjbWwwWlhKcGIyNHVYRzRnSUY4dVkyOTFiblJDZVNBOUlHWjFibU4wYVc5dUtHOWlhaXdnZG1Gc2RXVXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ozSnZkWEFvYjJKcUxDQjJZV3gxWlN3Z1kyOXVkR1Y0ZEN3Z1puVnVZM1JwYjI0b2NtVnpkV3gwTENCclpYa3BJSHRjYmlBZ0lDQWdJR2xtSUNnaFh5NW9ZWE1vY21WemRXeDBMQ0JyWlhrcEtTQnlaWE4xYkhSYmEyVjVYU0E5SURBN1hHNGdJQ0FnSUNCeVpYTjFiSFJiYTJWNVhTc3JPMXh1SUNBZ0lIMHBPMXh1SUNCOU8xeHVYRzRnSUM4dklGVnpaU0JoSUdOdmJYQmhjbUYwYjNJZ1puVnVZM1JwYjI0Z2RHOGdabWxuZFhKbElHOTFkQ0IwYUdVZ2MyMWhiR3hsYzNRZ2FXNWtaWGdnWVhRZ2QyaHBZMmhjYmlBZ0x5OGdZVzRnYjJKcVpXTjBJSE5vYjNWc1pDQmlaU0JwYm5ObGNuUmxaQ0J6YnlCaGN5QjBieUJ0WVdsdWRHRnBiaUJ2Y21SbGNpNGdWWE5sY3lCaWFXNWhjbmtnYzJWaGNtTm9MbHh1SUNCZkxuTnZjblJsWkVsdVpHVjRJRDBnWm5WdVkzUnBiMjRvWVhKeVlYa3NJRzlpYWl3Z2FYUmxjbUYwYjNJc0lHTnZiblJsZUhRcElIdGNiaUFnSUNCcGRHVnlZWFJ2Y2lBOUlHbDBaWEpoZEc5eUlEMDlJRzUxYkd3Z1B5QmZMbWxrWlc1MGFYUjVJRG9nYkc5dmEzVndTWFJsY21GMGIzSW9hWFJsY21GMGIzSXBPMXh1SUNBZ0lIWmhjaUIyWVd4MVpTQTlJR2wwWlhKaGRHOXlMbU5oYkd3b1kyOXVkR1Y0ZEN3Z2IySnFLVHRjYmlBZ0lDQjJZWElnYkc5M0lEMGdNQ3dnYUdsbmFDQTlJR0Z5Y21GNUxteGxibWQwYUR0Y2JpQWdJQ0IzYUdsc1pTQW9iRzkzSUR3Z2FHbG5hQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHMXBaQ0E5SUNoc2IzY2dLeUJvYVdkb0tTQStQajRnTVR0Y2JpQWdJQ0FnSUdsMFpYSmhkRzl5TG1OaGJHd29ZMjl1ZEdWNGRDd2dZWEp5WVhsYmJXbGtYU2tnUENCMllXeDFaU0EvSUd4dmR5QTlJRzFwWkNBcklERWdPaUJvYVdkb0lEMGdiV2xrTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JHOTNPMXh1SUNCOU8xeHVYRzRnSUM4dklGTmhabVZzZVNCamIyNTJaWEowSUdGdWVYUm9hVzVuSUdsMFpYSmhZbXhsSUdsdWRHOGdZU0J5WldGc0xDQnNhWFpsSUdGeWNtRjVMbHh1SUNCZkxuUnZRWEp5WVhrZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0JwWmlBb0lXOWlhaWtnY21WMGRYSnVJRnRkTzF4dUlDQWdJR2xtSUNoZkxtbHpRWEp5WVhrb2IySnFLU2tnY21WMGRYSnVJSE5zYVdObExtTmhiR3dvYjJKcUtUdGNiaUFnSUNCcFppQW9iMkpxTG14bGJtZDBhQ0E5UFQwZ0syOWlhaTVzWlc1bmRHZ3BJSEpsZEhWeWJpQmZMbTFoY0Nodlltb3NJRjh1YVdSbGJuUnBkSGtwTzF4dUlDQWdJSEpsZEhWeWJpQmZMblpoYkhWbGN5aHZZbW9wTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkpsZEhWeWJpQjBhR1VnYm5WdFltVnlJRzltSUdWc1pXMWxiblJ6SUdsdUlHRnVJRzlpYW1WamRDNWNiaUFnWHk1emFYcGxJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2FXWWdLRzlpYWlBOVBTQnVkV3hzS1NCeVpYUjFjbTRnTUR0Y2JpQWdJQ0J5WlhSMWNtNGdLRzlpYWk1c1pXNW5kR2dnUFQwOUlDdHZZbW91YkdWdVozUm9LU0EvSUc5aWFpNXNaVzVuZEdnZ09pQmZMbXRsZVhNb2IySnFLUzVzWlc1bmRHZzdYRzRnSUgwN1hHNWNiaUFnTHk4Z1FYSnlZWGtnUm5WdVkzUnBiMjV6WEc0Z0lDOHZJQzB0TFMwdExTMHRMUzB0TFMwdExWeHVYRzRnSUM4dklFZGxkQ0IwYUdVZ1ptbHljM1FnWld4bGJXVnVkQ0J2WmlCaGJpQmhjbkpoZVM0Z1VHRnpjMmx1WnlBcUttNHFLaUIzYVd4c0lISmxkSFZ5YmlCMGFHVWdabWx5YzNRZ1RseHVJQ0F2THlCMllXeDFaWE1nYVc0Z2RHaGxJR0Z5Y21GNUxpQkJiR2xoYzJWa0lHRnpJR0JvWldGa1lDQmhibVFnWUhSaGEyVmdMaUJVYUdVZ0tpcG5kV0Z5WkNvcUlHTm9aV05yWEc0Z0lDOHZJR0ZzYkc5M2N5QnBkQ0IwYnlCM2IzSnJJSGRwZEdnZ1lGOHViV0Z3WUM1Y2JpQWdYeTVtYVhKemRDQTlJRjh1YUdWaFpDQTlJRjh1ZEdGclpTQTlJR1oxYm1OMGFXOXVLR0Z5Y21GNUxDQnVMQ0JuZFdGeVpDa2dlMXh1SUNBZ0lHbG1JQ2hoY25KaGVTQTlQU0J1ZFd4c0tTQnlaWFIxY200Z2RtOXBaQ0F3TzF4dUlDQWdJSEpsZEhWeWJpQW9iaUFoUFNCdWRXeHNLU0FtSmlBaFozVmhjbVFnUHlCemJHbGpaUzVqWVd4c0tHRnljbUY1TENBd0xDQnVLU0E2SUdGeWNtRjVXekJkTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkpsZEhWeWJuTWdaWFpsY25sMGFHbHVaeUJpZFhRZ2RHaGxJR3hoYzNRZ1pXNTBjbmtnYjJZZ2RHaGxJR0Z5Y21GNUxpQkZjM0JsWTJsaGJHeDVJSFZ6WldaMWJDQnZibHh1SUNBdkx5QjBhR1VnWVhKbmRXMWxiblJ6SUc5aWFtVmpkQzRnVUdGemMybHVaeUFxS200cUtpQjNhV3hzSUhKbGRIVnliaUJoYkd3Z2RHaGxJSFpoYkhWbGN5QnBibHh1SUNBdkx5QjBhR1VnWVhKeVlYa3NJR1Y0WTJ4MVpHbHVaeUIwYUdVZ2JHRnpkQ0JPTGlCVWFHVWdLaXBuZFdGeVpDb3FJR05vWldOcklHRnNiRzkzY3lCcGRDQjBieUIzYjNKcklIZHBkR2hjYmlBZ0x5OGdZRjh1YldGd1lDNWNiaUFnWHk1cGJtbDBhV0ZzSUQwZ1puVnVZM1JwYjI0b1lYSnlZWGtzSUc0c0lHZDFZWEprS1NCN1hHNGdJQ0FnY21WMGRYSnVJSE5zYVdObExtTmhiR3dvWVhKeVlYa3NJREFzSUdGeWNtRjVMbXhsYm1kMGFDQXRJQ2dvYmlBOVBTQnVkV3hzS1NCOGZDQm5kV0Z5WkNBL0lERWdPaUJ1S1NrN1hHNGdJSDA3WEc1Y2JpQWdMeThnUjJWMElIUm9aU0JzWVhOMElHVnNaVzFsYm5RZ2IyWWdZVzRnWVhKeVlYa3VJRkJoYzNOcGJtY2dLaXB1S2lvZ2QybHNiQ0J5WlhSMWNtNGdkR2hsSUd4aGMzUWdUbHh1SUNBdkx5QjJZV3gxWlhNZ2FXNGdkR2hsSUdGeWNtRjVMaUJVYUdVZ0tpcG5kV0Z5WkNvcUlHTm9aV05ySUdGc2JHOTNjeUJwZENCMGJ5QjNiM0pySUhkcGRHZ2dZRjh1YldGd1lDNWNiaUFnWHk1c1lYTjBJRDBnWm5WdVkzUnBiMjRvWVhKeVlYa3NJRzRzSUdkMVlYSmtLU0I3WEc0Z0lDQWdhV1lnS0dGeWNtRjVJRDA5SUc1MWJHd3BJSEpsZEhWeWJpQjJiMmxrSURBN1hHNGdJQ0FnYVdZZ0tDaHVJQ0U5SUc1MWJHd3BJQ1ltSUNGbmRXRnlaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSE5zYVdObExtTmhiR3dvWVhKeVlYa3NJRTFoZEdndWJXRjRLR0Z5Y21GNUxteGxibWQwYUNBdElHNHNJREFwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnljbUY1VzJGeWNtRjVMbXhsYm1kMGFDQXRJREZkTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdkx5QlNaWFIxY201eklHVjJaWEo1ZEdocGJtY2dZblYwSUhSb1pTQm1hWEp6ZENCbGJuUnllU0J2WmlCMGFHVWdZWEp5WVhrdUlFRnNhV0Z6WldRZ1lYTWdZSFJoYVd4Z0lHRnVaQ0JnWkhKdmNHQXVYRzRnSUM4dklFVnpjR1ZqYVdGc2JIa2dkWE5sWm5Wc0lHOXVJSFJvWlNCaGNtZDFiV1Z1ZEhNZ2IySnFaV04wTGlCUVlYTnphVzVuSUdGdUlDb3FiaW9xSUhkcGJHd2djbVYwZFhKdVhHNGdJQzh2SUhSb1pTQnlaWE4wSUU0Z2RtRnNkV1Z6SUdsdUlIUm9aU0JoY25KaGVTNGdWR2hsSUNvcVozVmhjbVFxS2x4dUlDQXZMeUJqYUdWamF5QmhiR3h2ZDNNZ2FYUWdkRzhnZDI5eWF5QjNhWFJvSUdCZkxtMWhjR0F1WEc0Z0lGOHVjbVZ6ZENBOUlGOHVkR0ZwYkNBOUlGOHVaSEp2Y0NBOUlHWjFibU4wYVc5dUtHRnljbUY1TENCdUxDQm5kV0Z5WkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ6YkdsalpTNWpZV3hzS0dGeWNtRjVMQ0FvYmlBOVBTQnVkV3hzS1NCOGZDQm5kV0Z5WkNBL0lERWdPaUJ1S1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJVY21sdElHOTFkQ0JoYkd3Z1ptRnNjM2tnZG1Gc2RXVnpJR1p5YjIwZ1lXNGdZWEp5WVhrdVhHNGdJRjh1WTI5dGNHRmpkQ0E5SUdaMWJtTjBhVzl1S0dGeWNtRjVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOHVabWxzZEdWeUtHRnljbUY1TENCZkxtbGtaVzUwYVhSNUtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCSmJuUmxjbTVoYkNCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCaElISmxZM1Z5YzJsMlpTQmdabXhoZEhSbGJtQWdablZ1WTNScGIyNHVYRzRnSUhaaGNpQm1iR0YwZEdWdUlEMGdablZ1WTNScGIyNG9hVzV3ZFhRc0lITm9ZV3hzYjNjc0lHOTFkSEIxZENrZ2UxeHVJQ0FnSUdWaFkyZ29hVzV3ZFhRc0lHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0FnSUNCcFppQW9YeTVwYzBGeWNtRjVLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdJQ0J6YUdGc2JHOTNJRDhnY0hWemFDNWhjSEJzZVNodmRYUndkWFFzSUhaaGJIVmxLU0E2SUdac1lYUjBaVzRvZG1Gc2RXVXNJSE5vWVd4c2IzY3NJRzkxZEhCMWRDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnZkWFJ3ZFhRdWNIVnphQ2gyWVd4MVpTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUc5MWRIQjFkRHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlNaWFIxY200Z1lTQmpiMjF3YkdWMFpXeDVJR1pzWVhSMFpXNWxaQ0IyWlhKemFXOXVJRzltSUdGdUlHRnljbUY1TGx4dUlDQmZMbVpzWVhSMFpXNGdQU0JtZFc1amRHbHZiaWhoY25KaGVTd2djMmhoYkd4dmR5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbWJHRjBkR1Z1S0dGeWNtRjVMQ0J6YUdGc2JHOTNMQ0JiWFNrN1hHNGdJSDA3WEc1Y2JpQWdMeThnVW1WMGRYSnVJR0VnZG1WeWMybHZiaUJ2WmlCMGFHVWdZWEp5WVhrZ2RHaGhkQ0JrYjJWeklHNXZkQ0JqYjI1MFlXbHVJSFJvWlNCemNHVmphV1pwWldRZ2RtRnNkV1VvY3lrdVhHNGdJRjh1ZDJsMGFHOTFkQ0E5SUdaMWJtTjBhVzl1S0dGeWNtRjVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOHVaR2xtWm1WeVpXNWpaU2hoY25KaGVTd2djMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1zSURFcEtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCUWNtOWtkV05sSUdFZ1pIVndiR2xqWVhSbExXWnlaV1VnZG1WeWMybHZiaUJ2WmlCMGFHVWdZWEp5WVhrdUlFbG1JSFJvWlNCaGNuSmhlU0JvWVhNZ1lXeHlaV0ZrZVZ4dUlDQXZMeUJpWldWdUlITnZjblJsWkN3Z2VXOTFJR2hoZG1VZ2RHaGxJRzl3ZEdsdmJpQnZaaUIxYzJsdVp5QmhJR1poYzNSbGNpQmhiR2R2Y21sMGFHMHVYRzRnSUM4dklFRnNhV0Z6WldRZ1lYTWdZSFZ1YVhGMVpXQXVYRzRnSUY4dWRXNXBjU0E5SUY4dWRXNXBjWFZsSUQwZ1puVnVZM1JwYjI0b1lYSnlZWGtzSUdselUyOXlkR1ZrTENCcGRHVnlZWFJ2Y2l3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUdsbUlDaGZMbWx6Um5WdVkzUnBiMjRvYVhOVGIzSjBaV1FwS1NCN1hHNGdJQ0FnSUNCamIyNTBaWGgwSUQwZ2FYUmxjbUYwYjNJN1hHNGdJQ0FnSUNCcGRHVnlZWFJ2Y2lBOUlHbHpVMjl5ZEdWa08xeHVJQ0FnSUNBZ2FYTlRiM0owWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUdsdWFYUnBZV3dnUFNCcGRHVnlZWFJ2Y2lBL0lGOHViV0Z3S0dGeWNtRjVMQ0JwZEdWeVlYUnZjaXdnWTI5dWRHVjRkQ2tnT2lCaGNuSmhlVHRjYmlBZ0lDQjJZWElnY21WemRXeDBjeUE5SUZ0ZE8xeHVJQ0FnSUhaaGNpQnpaV1Z1SUQwZ1cxMDdYRzRnSUNBZ1pXRmphQ2hwYm1sMGFXRnNMQ0JtZFc1amRHbHZiaWgyWVd4MVpTd2dhVzVrWlhncElIdGNiaUFnSUNBZ0lHbG1JQ2hwYzFOdmNuUmxaQ0EvSUNnaGFXNWtaWGdnZkh3Z2MyVmxibHR6WldWdUxteGxibWQwYUNBdElERmRJQ0U5UFNCMllXeDFaU2tnT2lBaFh5NWpiMjUwWVdsdWN5aHpaV1Z1TENCMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ2MyVmxiaTV3ZFhOb0tIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwY3k1d2RYTm9LR0Z5Y21GNVcybHVaR1Y0WFNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2RITTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1VISnZaSFZqWlNCaGJpQmhjbkpoZVNCMGFHRjBJR052Ym5SaGFXNXpJSFJvWlNCMWJtbHZiam9nWldGamFDQmthWE4wYVc1amRDQmxiR1Z0Wlc1MElHWnliMjBnWVd4c0lHOW1YRzRnSUM4dklIUm9aU0J3WVhOelpXUXRhVzRnWVhKeVlYbHpMbHh1SUNCZkxuVnVhVzl1SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUY4dWRXNXBjU2hqYjI1allYUXVZWEJ3Ykhrb1FYSnlZWGxRY205MGJ5d2dZWEpuZFcxbGJuUnpLU2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVSEp2WkhWalpTQmhiaUJoY25KaGVTQjBhR0YwSUdOdmJuUmhhVzV6SUdWMlpYSjVJR2wwWlcwZ2MyaGhjbVZrSUdKbGRIZGxaVzRnWVd4c0lIUm9aVnh1SUNBdkx5QndZWE56WldRdGFXNGdZWEp5WVhsekxseHVJQ0JmTG1sdWRHVnljMlZqZEdsdmJpQTlJR1oxYm1OMGFXOXVLR0Z5Y21GNUtTQjdYRzRnSUNBZ2RtRnlJSEpsYzNRZ1BTQnpiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeXdnTVNrN1hHNGdJQ0FnY21WMGRYSnVJRjh1Wm1sc2RHVnlLRjh1ZFc1cGNTaGhjbkpoZVNrc0lHWjFibU4wYVc5dUtHbDBaVzBwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJmTG1WMlpYSjVLSEpsYzNRc0lHWjFibU4wYVc5dUtHOTBhR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZkxtbHVaR1Y0VDJZb2IzUm9aWElzSUdsMFpXMHBJRDQ5SURBN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCVVlXdGxJSFJvWlNCa2FXWm1aWEpsYm1ObElHSmxkSGRsWlc0Z2IyNWxJR0Z5Y21GNUlHRnVaQ0JoSUc1MWJXSmxjaUJ2WmlCdmRHaGxjaUJoY25KaGVYTXVYRzRnSUM4dklFOXViSGtnZEdobElHVnNaVzFsYm5SeklIQnlaWE5sYm5RZ2FXNGdhblZ6ZENCMGFHVWdabWx5YzNRZ1lYSnlZWGtnZDJsc2JDQnlaVzFoYVc0dVhHNGdJRjh1WkdsbVptVnlaVzVqWlNBOUlHWjFibU4wYVc5dUtHRnljbUY1S1NCN1hHNGdJQ0FnZG1GeUlISmxjM1FnUFNCamIyNWpZWFF1WVhCd2JIa29RWEp5WVhsUWNtOTBieXdnYzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc0lERXBLVHRjYmlBZ0lDQnlaWFIxY200Z1h5NW1hV3gwWlhJb1lYSnlZWGtzSUdaMWJtTjBhVzl1S0haaGJIVmxLWHNnY21WMGRYSnVJQ0ZmTG1OdmJuUmhhVzV6S0hKbGMzUXNJSFpoYkhWbEtUc2dmU2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdXbWx3SUhSdloyVjBhR1Z5SUcxMWJIUnBjR3hsSUd4cGMzUnpJR2x1ZEc4Z1lTQnphVzVuYkdVZ1lYSnlZWGtnTFMwZ1pXeGxiV1Z1ZEhNZ2RHaGhkQ0J6YUdGeVpWeHVJQ0F2THlCaGJpQnBibVJsZUNCbmJ5QjBiMmRsZEdobGNpNWNiaUFnWHk1NmFYQWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUhOc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SektUdGNiaUFnSUNCMllYSWdiR1Z1WjNSb0lEMGdYeTV0WVhnb1h5NXdiSFZqYXloaGNtZHpMQ0FuYkdWdVozUm9KeWtwTzF4dUlDQWdJSFpoY2lCeVpYTjFiSFJ6SUQwZ2JtVjNJRUZ5Y21GNUtHeGxibWQwYUNrN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdjbVZ6ZFd4MGMxdHBYU0E5SUY4dWNHeDFZMnNvWVhKbmN5d2dYQ0pjSWlBcklHa3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBjenRjYmlBZ2ZUdGNibHh1SUNBdkx5QkRiMjUyWlhKMGN5QnNhWE4wY3lCcGJuUnZJRzlpYW1WamRITXVJRkJoYzNNZ1pXbDBhR1Z5SUdFZ2MybHVaMnhsSUdGeWNtRjVJRzltSUdCYmEyVjVMQ0IyWVd4MVpWMWdYRzRnSUM4dklIQmhhWEp6TENCdmNpQjBkMjhnY0dGeVlXeHNaV3dnWVhKeVlYbHpJRzltSUhSb1pTQnpZVzFsSUd4bGJtZDBhQ0F0TFNCdmJtVWdiMllnYTJWNWN5d2dZVzVrSUc5dVpTQnZabHh1SUNBdkx5QjBhR1VnWTI5eWNtVnpjRzl1WkdsdVp5QjJZV3gxWlhNdVhHNGdJRjh1YjJKcVpXTjBJRDBnWm5WdVkzUnBiMjRvYkdsemRDd2dkbUZzZFdWektTQjdYRzRnSUNBZ2FXWWdLR3hwYzNRZ1BUMGdiblZzYkNrZ2NtVjBkWEp1SUh0OU8xeHVJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQjdmVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR3hwYzNRdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnBaaUFvZG1Gc2RXVnpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRnRzYVhOMFcybGRYU0E5SUhaaGJIVmxjMXRwWFR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRnRzYVhOMFcybGRXekJkWFNBOUlHeHBjM1JiYVYxYk1WMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1NXWWdkR2hsSUdKeWIzZHpaWElnWkc5bGMyNG5kQ0J6ZFhCd2JIa2dkWE1nZDJsMGFDQnBibVJsZUU5bUlDaEpKMjBnYkc5dmEybHVaeUJoZENCNWIzVXNJQ29xVFZOSlJTb3FLU3hjYmlBZ0x5OGdkMlVnYm1WbFpDQjBhR2x6SUdaMWJtTjBhVzl1TGlCU1pYUjFjbTRnZEdobElIQnZjMmwwYVc5dUlHOW1JSFJvWlNCbWFYSnpkQ0J2WTJOMWNuSmxibU5sSUc5bUlHRnVYRzRnSUM4dklHbDBaVzBnYVc0Z1lXNGdZWEp5WVhrc0lHOXlJQzB4SUdsbUlIUm9aU0JwZEdWdElHbHpJRzV2ZENCcGJtTnNkV1JsWkNCcGJpQjBhR1VnWVhKeVlYa3VYRzRnSUM4dklFUmxiR1ZuWVhSbGN5QjBieUFxS2tWRFRVRlRZM0pwY0hRZ05Tb3FKM01nYm1GMGFYWmxJR0JwYm1SbGVFOW1ZQ0JwWmlCaGRtRnBiR0ZpYkdVdVhHNGdJQzh2SUVsbUlIUm9aU0JoY25KaGVTQnBjeUJzWVhKblpTQmhibVFnWVd4eVpXRmtlU0JwYmlCemIzSjBJRzl5WkdWeUxDQndZWE56SUdCMGNuVmxZRnh1SUNBdkx5Qm1iM0lnS2lwcGMxTnZjblJsWkNvcUlIUnZJSFZ6WlNCaWFXNWhjbmtnYzJWaGNtTm9MbHh1SUNCZkxtbHVaR1Y0VDJZZ1BTQm1kVzVqZEdsdmJpaGhjbkpoZVN3Z2FYUmxiU3dnYVhOVGIzSjBaV1FwSUh0Y2JpQWdJQ0JwWmlBb1lYSnlZWGtnUFQwZ2JuVnNiQ2tnY21WMGRYSnVJQzB4TzF4dUlDQWdJSFpoY2lCcElEMGdNQ3dnYkNBOUlHRnljbUY1TG14bGJtZDBhRHRjYmlBZ0lDQnBaaUFvYVhOVGIzSjBaV1FwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FYTlRiM0owWldRZ1BUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnYVNBOUlDaHBjMU52Y25SbFpDQThJREFnUHlCTllYUm9MbTFoZUNnd0xDQnNJQ3NnYVhOVGIzSjBaV1FwSURvZ2FYTlRiM0owWldRcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2FTQTlJRjh1YzI5eWRHVmtTVzVrWlhnb1lYSnlZWGtzSUdsMFpXMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhsYmFWMGdQVDA5SUdsMFpXMGdQeUJwSURvZ0xURTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHVZWFJwZG1WSmJtUmxlRTltSUNZbUlHRnljbUY1TG1sdVpHVjRUMllnUFQwOUlHNWhkR2wyWlVsdVpHVjRUMllwSUhKbGRIVnliaUJoY25KaGVTNXBibVJsZUU5bUtHbDBaVzBzSUdselUyOXlkR1ZrS1R0Y2JpQWdJQ0JtYjNJZ0tEc2dhU0E4SUd3N0lHa3JLeWtnYVdZZ0tHRnljbUY1VzJsZElEMDlQU0JwZEdWdEtTQnlaWFIxY200Z2FUdGNiaUFnSUNCeVpYUjFjbTRnTFRFN1hHNGdJSDA3WEc1Y2JpQWdMeThnUkdWc1pXZGhkR1Z6SUhSdklDb3FSVU5OUVZOamNtbHdkQ0ExS2lvbmN5QnVZWFJwZG1VZ1lHeGhjM1JKYm1SbGVFOW1ZQ0JwWmlCaGRtRnBiR0ZpYkdVdVhHNGdJRjh1YkdGemRFbHVaR1Y0VDJZZ1BTQm1kVzVqZEdsdmJpaGhjbkpoZVN3Z2FYUmxiU3dnWm5KdmJTa2dlMXh1SUNBZ0lHbG1JQ2hoY25KaGVTQTlQU0J1ZFd4c0tTQnlaWFIxY200Z0xURTdYRzRnSUNBZ2RtRnlJR2hoYzBsdVpHVjRJRDBnWm5KdmJTQWhQU0J1ZFd4c08xeHVJQ0FnSUdsbUlDaHVZWFJwZG1WTVlYTjBTVzVrWlhoUFppQW1KaUJoY25KaGVTNXNZWE4wU1c1a1pYaFBaaUE5UFQwZ2JtRjBhWFpsVEdGemRFbHVaR1Y0VDJZcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCb1lYTkpibVJsZUNBL0lHRnljbUY1TG14aGMzUkpibVJsZUU5bUtHbDBaVzBzSUdaeWIyMHBJRG9nWVhKeVlYa3ViR0Z6ZEVsdVpHVjRUMllvYVhSbGJTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQnBJRDBnS0doaGMwbHVaR1Y0SUQ4Z1puSnZiU0E2SUdGeWNtRjVMbXhsYm1kMGFDazdYRzRnSUNBZ2QyaHBiR1VnS0drdExTa2dhV1lnS0dGeWNtRjVXMmxkSUQwOVBTQnBkR1Z0S1NCeVpYUjFjbTRnYVR0Y2JpQWdJQ0J5WlhSMWNtNGdMVEU3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdSMlZ1WlhKaGRHVWdZVzRnYVc1MFpXZGxjaUJCY25KaGVTQmpiMjUwWVdsdWFXNW5JR0Z1SUdGeWFYUm9iV1YwYVdNZ2NISnZaM0psYzNOcGIyNHVJRUVnY0c5eWRDQnZabHh1SUNBdkx5QjBhR1VnYm1GMGFYWmxJRkI1ZEdodmJpQmdjbUZ1WjJVb0tXQWdablZ1WTNScGIyNHVJRk5sWlZ4dUlDQXZMeUJiZEdobElGQjVkR2h2YmlCa2IyTjFiV1Z1ZEdGMGFXOXVYU2hvZEhSd09pOHZaRzlqY3k1d2VYUm9iMjR1YjNKbkwyeHBZbkpoY25rdlpuVnVZM1JwYjI1ekxtaDBiV3dqY21GdVoyVXBMbHh1SUNCZkxuSmhibWRsSUQwZ1puVnVZM1JwYjI0b2MzUmhjblFzSUhOMGIzQXNJSE4wWlhBcElIdGNiaUFnSUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQThQU0F4S1NCN1hHNGdJQ0FnSUNCemRHOXdJRDBnYzNSaGNuUWdmSHdnTUR0Y2JpQWdJQ0FnSUhOMFlYSjBJRDBnTUR0Y2JpQWdJQ0I5WEc0Z0lDQWdjM1JsY0NBOUlHRnlaM1Z0Wlc1MGMxc3lYU0I4ZkNBeE8xeHVYRzRnSUNBZ2RtRnlJR3hsYmlBOUlFMWhkR2d1YldGNEtFMWhkR2d1WTJWcGJDZ29jM1J2Y0NBdElITjBZWEowS1NBdklITjBaWEFwTENBd0tUdGNiaUFnSUNCMllYSWdhV1I0SUQwZ01EdGNiaUFnSUNCMllYSWdjbUZ1WjJVZ1BTQnVaWGNnUVhKeVlYa29iR1Z1S1R0Y2JseHVJQ0FnSUhkb2FXeGxLR2xrZUNBOElHeGxiaWtnZTF4dUlDQWdJQ0FnY21GdVoyVmJhV1I0S3l0ZElEMGdjM1JoY25RN1hHNGdJQ0FnSUNCemRHRnlkQ0FyUFNCemRHVndPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCeVlXNW5aVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkdkVzVqZEdsdmJpQW9ZV2hsYlNrZ1JuVnVZM1JwYjI1elhHNGdJQzh2SUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dVhHNGdJQzh2SUVOeVpXRjBaU0JoSUdaMWJtTjBhVzl1SUdKdmRXNWtJSFJ2SUdFZ1oybDJaVzRnYjJKcVpXTjBJQ2hoYzNOcFoyNXBibWNnWUhSb2FYTmdMQ0JoYm1RZ1lYSm5kVzFsYm5SekxGeHVJQ0F2THlCdmNIUnBiMjVoYkd4NUtTNGdSR1ZzWldkaGRHVnpJSFJ2SUNvcVJVTk5RVk5qY21sd2RDQTFLaW9uY3lCdVlYUnBkbVVnWUVaMWJtTjBhVzl1TG1KcGJtUmdJR2xtWEc0Z0lDOHZJR0YyWVdsc1lXSnNaUzVjYmlBZ1h5NWlhVzVrSUQwZ1puVnVZM1JwYjI0b1puVnVZeXdnWTI5dWRHVjRkQ2tnZTF4dUlDQWdJR2xtSUNobWRXNWpMbUpwYm1RZ1BUMDlJRzVoZEdsMlpVSnBibVFnSmlZZ2JtRjBhWFpsUW1sdVpDa2djbVYwZFhKdUlHNWhkR2wyWlVKcGJtUXVZWEJ3Ykhrb1puVnVZeXdnYzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc0lERXBLVHRjYmlBZ0lDQjJZWElnWVhKbmN5QTlJSE5zYVdObExtTmhiR3dvWVhKbmRXMWxiblJ6TENBeUtUdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm5WdVl5NWhjSEJzZVNoamIyNTBaWGgwTENCaGNtZHpMbU52Ym1OaGRDaHpiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeWtwS1R0Y2JpQWdJQ0I5TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkJoY25ScFlXeHNlU0JoY0hCc2VTQmhJR1oxYm1OMGFXOXVJR0o1SUdOeVpXRjBhVzVuSUdFZ2RtVnljMmx2YmlCMGFHRjBJR2hoY3lCb1lXUWdjMjl0WlNCdlppQnBkSE5jYmlBZ0x5OGdZWEpuZFcxbGJuUnpJSEJ5WlMxbWFXeHNaV1FzSUhkcGRHaHZkWFFnWTJoaGJtZHBibWNnYVhSeklHUjVibUZ0YVdNZ1lIUm9hWE5nSUdOdmJuUmxlSFF1WEc0Z0lGOHVjR0Z5ZEdsaGJDQTlJR1oxYm1OMGFXOXVLR1oxYm1NcElIdGNiaUFnSUNCMllYSWdZWEpuY3lBOUlITnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F4S1R0Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdablZ1WXk1aGNIQnNlU2gwYUdsekxDQmhjbWR6TG1OdmJtTmhkQ2h6YkdsalpTNWpZV3hzS0dGeVozVnRaVzUwY3lrcEtUdGNiaUFnSUNCOU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVKcGJtUWdZV3hzSUc5bUlHRnVJRzlpYW1WamRDZHpJRzFsZEdodlpITWdkRzhnZEdoaGRDQnZZbXBsWTNRdUlGVnpaV1oxYkNCbWIzSWdaVzV6ZFhKcGJtY2dkR2hoZEZ4dUlDQXZMeUJoYkd3Z1kyRnNiR0poWTJ0eklHUmxabWx1WldRZ2IyNGdZVzRnYjJKcVpXTjBJR0psYkc5dVp5QjBieUJwZEM1Y2JpQWdYeTVpYVc1a1FXeHNJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2RtRnlJR1oxYm1OeklEMGdjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1zSURFcE8xeHVJQ0FnSUdsbUlDaG1kVzVqY3k1c1pXNW5kR2dnUFQwOUlEQXBJR1oxYm1OeklEMGdYeTVtZFc1amRHbHZibk1vYjJKcUtUdGNiaUFnSUNCbFlXTm9LR1oxYm1OekxDQm1kVzVqZEdsdmJpaG1LU0I3SUc5aWFsdG1YU0E5SUY4dVltbHVaQ2h2WW1wYlpsMHNJRzlpYWlrN0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCdlltbzdYRzRnSUgwN1hHNWNiaUFnTHk4Z1RXVnRiMmw2WlNCaGJpQmxlSEJsYm5OcGRtVWdablZ1WTNScGIyNGdZbmtnYzNSdmNtbHVaeUJwZEhNZ2NtVnpkV3gwY3k1Y2JpQWdYeTV0WlcxdmFYcGxJRDBnWm5WdVkzUnBiMjRvWm5WdVl5d2dhR0Z6YUdWeUtTQjdYRzRnSUNBZ2RtRnlJRzFsYlc4Z1BTQjdmVHRjYmlBZ0lDQm9ZWE5vWlhJZ2ZId2dLR2hoYzJobGNpQTlJRjh1YVdSbGJuUnBkSGtwTzF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCclpYa2dQU0JvWVhOb1pYSXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJmTG1oaGN5aHRaVzF2TENCclpYa3BJRDhnYldWdGIxdHJaWGxkSURvZ0tHMWxiVzliYTJWNVhTQTlJR1oxYm1NdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLU2s3WEc0Z0lDQWdmVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkVaV3hoZVhNZ1lTQm1kVzVqZEdsdmJpQm1iM0lnZEdobElHZHBkbVZ1SUc1MWJXSmxjaUJ2WmlCdGFXeHNhWE5sWTI5dVpITXNJR0Z1WkNCMGFHVnVJR05oYkd4elhHNGdJQzh2SUdsMElIZHBkR2dnZEdobElHRnlaM1Z0Wlc1MGN5QnpkWEJ3YkdsbFpDNWNiaUFnWHk1a1pXeGhlU0E5SUdaMWJtTjBhVzl1S0daMWJtTXNJSGRoYVhRcElIdGNiaUFnSUNCMllYSWdZWEpuY3lBOUlITnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnWm5WdVl5NWhjSEJzZVNodWRXeHNMQ0JoY21kektUc2dmU3dnZDJGcGRDazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1JHVm1aWEp6SUdFZ1puVnVZM1JwYjI0c0lITmphR1ZrZFd4cGJtY2dhWFFnZEc4Z2NuVnVJR0ZtZEdWeUlIUm9aU0JqZFhKeVpXNTBJR05oYkd3Z2MzUmhZMnNnYUdGelhHNGdJQzh2SUdOc1pXRnlaV1F1WEc0Z0lGOHVaR1ZtWlhJZ1BTQm1kVzVqZEdsdmJpaG1kVzVqS1NCN1hHNGdJQ0FnY21WMGRYSnVJRjh1WkdWc1lYa3VZWEJ3Ykhrb1h5d2dXMloxYm1Nc0lERmRMbU52Ym1OaGRDaHpiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeXdnTVNrcEtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCU1pYUjFjbTV6SUdFZ1puVnVZM1JwYjI0c0lIUm9ZWFFzSUhkb1pXNGdhVzUyYjJ0bFpDd2dkMmxzYkNCdmJteDVJR0psSUhSeWFXZG5aWEpsWkNCaGRDQnRiM04wSUc5dVkyVmNiaUFnTHk4Z1pIVnlhVzVuSUdFZ1oybDJaVzRnZDJsdVpHOTNJRzltSUhScGJXVXVYRzRnSUY4dWRHaHliM1IwYkdVZ1BTQm1kVzVqZEdsdmJpaG1kVzVqTENCM1lXbDBLU0I3WEc0Z0lDQWdkbUZ5SUdOdmJuUmxlSFFzSUdGeVozTXNJSFJwYldWdmRYUXNJSEpsYzNWc2REdGNiaUFnSUNCMllYSWdjSEpsZG1sdmRYTWdQU0F3TzF4dUlDQWdJSFpoY2lCc1lYUmxjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NISmxkbWx2ZFhNZ1BTQnVaWGNnUkdGMFpUdGNiaUFnSUNBZ0lIUnBiV1Z2ZFhRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnY21WemRXeDBJRDBnWm5WdVl5NWhjSEJzZVNoamIyNTBaWGgwTENCaGNtZHpLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJ1YjNjZ1BTQnVaWGNnUkdGMFpUdGNiaUFnSUNBZ0lIWmhjaUJ5WlcxaGFXNXBibWNnUFNCM1lXbDBJQzBnS0c1dmR5QXRJSEJ5WlhacGIzVnpLVHRjYmlBZ0lDQWdJR052Ym5SbGVIUWdQU0IwYUdsek8xeHVJQ0FnSUNBZ1lYSm5jeUE5SUdGeVozVnRaVzUwY3p0Y2JpQWdJQ0FnSUdsbUlDaHlaVzFoYVc1cGJtY2dQRDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdsdFpXOTFkQ2s3WEc0Z0lDQWdJQ0FnSUhScGJXVnZkWFFnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0J3Y21WMmFXOTFjeUE5SUc1dmR6dGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdablZ1WXk1aGNIQnNlU2hqYjI1MFpYaDBMQ0JoY21kektUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9JWFJwYldWdmRYUXBJSHRjYmlBZ0lDQWdJQ0FnZEdsdFpXOTFkQ0E5SUhObGRGUnBiV1Z2ZFhRb2JHRjBaWElzSUhKbGJXRnBibWx1WnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMDdYRzRnSUgwN1hHNWNiaUFnTHk4Z1VtVjBkWEp1Y3lCaElHWjFibU4wYVc5dUxDQjBhR0YwTENCaGN5QnNiMjVuSUdGeklHbDBJR052Ym5ScGJuVmxjeUIwYnlCaVpTQnBiblp2YTJWa0xDQjNhV3hzSUc1dmRGeHVJQ0F2THlCaVpTQjBjbWxuWjJWeVpXUXVJRlJvWlNCbWRXNWpkR2x2YmlCM2FXeHNJR0psSUdOaGJHeGxaQ0JoWm5SbGNpQnBkQ0J6ZEc5d2N5QmlaV2x1WnlCallXeHNaV1FnWm05eVhHNGdJQzh2SUU0Z2JXbHNiR2x6WldOdmJtUnpMaUJKWmlCZ2FXMXRaV1JwWVhSbFlDQnBjeUJ3WVhOelpXUXNJSFJ5YVdkblpYSWdkR2hsSUdaMWJtTjBhVzl1SUc5dUlIUm9aVnh1SUNBdkx5QnNaV0ZrYVc1bklHVmtaMlVzSUdsdWMzUmxZV1FnYjJZZ2RHaGxJSFJ5WVdsc2FXNW5MbHh1SUNCZkxtUmxZbTkxYm1ObElEMGdablZ1WTNScGIyNG9ablZ1WXl3Z2QyRnBkQ3dnYVcxdFpXUnBZWFJsS1NCN1hHNGdJQ0FnZG1GeUlIUnBiV1Z2ZFhRc0lISmxjM1ZzZER0Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kyOXVkR1Y0ZENBOUlIUm9hWE1zSUdGeVozTWdQU0JoY21kMWJXVnVkSE03WEc0Z0lDQWdJQ0IyWVhJZ2JHRjBaWElnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkR2x0Wlc5MWRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYVcxdFpXUnBZWFJsS1NCeVpYTjFiSFFnUFNCbWRXNWpMbUZ3Y0d4NUtHTnZiblJsZUhRc0lHRnlaM01wTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUhaaGNpQmpZV3hzVG05M0lEMGdhVzF0WldScFlYUmxJQ1ltSUNGMGFXMWxiM1YwTzF4dUlDQWdJQ0FnWTJ4bFlYSlVhVzFsYjNWMEtIUnBiV1Z2ZFhRcE8xeHVJQ0FnSUNBZ2RHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUW9iR0YwWlhJc0lIZGhhWFFwTzF4dUlDQWdJQ0FnYVdZZ0tHTmhiR3hPYjNjcElISmxjM1ZzZENBOUlHWjFibU11WVhCd2JIa29ZMjl1ZEdWNGRDd2dZWEpuY3lrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMDdYRzRnSUgwN1hHNWNiaUFnTHk4Z1VtVjBkWEp1Y3lCaElHWjFibU4wYVc5dUlIUm9ZWFFnZDJsc2JDQmlaU0JsZUdWamRYUmxaQ0JoZENCdGIzTjBJRzl1WlNCMGFXMWxMQ0J1YnlCdFlYUjBaWElnYUc5M1hHNGdJQzh2SUc5bWRHVnVJSGx2ZFNCallXeHNJR2wwTGlCVmMyVm1kV3dnWm05eUlHeGhlbmtnYVc1cGRHbGhiR2w2WVhScGIyNHVYRzRnSUY4dWIyNWpaU0E5SUdaMWJtTjBhVzl1S0daMWJtTXBJSHRjYmlBZ0lDQjJZWElnY21GdUlEMGdabUZzYzJVc0lHMWxiVzg3WEc0Z0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdhV1lnS0hKaGJpa2djbVYwZFhKdUlHMWxiVzg3WEc0Z0lDQWdJQ0J5WVc0Z1BTQjBjblZsTzF4dUlDQWdJQ0FnYldWdGJ5QTlJR1oxYm1NdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJR1oxYm1NZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnY21WMGRYSnVJRzFsYlc4N1hHNGdJQ0FnZlR0Y2JpQWdmVHRjYmx4dUlDQXZMeUJTWlhSMWNtNXpJSFJvWlNCbWFYSnpkQ0JtZFc1amRHbHZiaUJ3WVhOelpXUWdZWE1nWVc0Z1lYSm5kVzFsYm5RZ2RHOGdkR2hsSUhObFkyOXVaQ3hjYmlBZ0x5OGdZV3hzYjNkcGJtY2dlVzkxSUhSdklHRmthblZ6ZENCaGNtZDFiV1Z1ZEhNc0lISjFiaUJqYjJSbElHSmxabTl5WlNCaGJtUWdZV1owWlhJc0lHRnVaRnh1SUNBdkx5QmpiMjVrYVhScGIyNWhiR3g1SUdWNFpXTjFkR1VnZEdobElHOXlhV2RwYm1Gc0lHWjFibU4wYVc5dUxseHVJQ0JmTG5keVlYQWdQU0JtZFc1amRHbHZiaWhtZFc1akxDQjNjbUZ3Y0dWeUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQmJablZ1WTEwN1hHNGdJQ0FnSUNCd2RYTm9MbUZ3Y0d4NUtHRnlaM01zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZDNKaGNIQmxjaTVoY0hCc2VTaDBhR2x6TENCaGNtZHpLVHRjYmlBZ0lDQjlPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5Ym5NZ1lTQm1kVzVqZEdsdmJpQjBhR0YwSUdseklIUm9aU0JqYjIxd2IzTnBkR2x2YmlCdlppQmhJR3hwYzNRZ2IyWWdablZ1WTNScGIyNXpMQ0JsWVdOb1hHNGdJQzh2SUdOdmJuTjFiV2x1WnlCMGFHVWdjbVYwZFhKdUlIWmhiSFZsSUc5bUlIUm9aU0JtZFc1amRHbHZiaUIwYUdGMElHWnZiR3h2ZDNNdVhHNGdJRjh1WTI5dGNHOXpaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhaaGNpQm1kVzVqY3lBOUlHRnlaM1Z0Wlc1MGN6dGNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdZWEpuY3lBOUlHRnlaM1Z0Wlc1MGN6dGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0JtZFc1amN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrZ2UxeHVJQ0FnSUNBZ0lDQmhjbWR6SUQwZ1cyWjFibU56VzJsZExtRndjR3g1S0hSb2FYTXNJR0Z5WjNNcFhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNtZHpXekJkTzF4dUlDQWdJSDA3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVbVYwZFhKdWN5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ2QybHNiQ0J2Ym14NUlHSmxJR1Y0WldOMWRHVmtJR0ZtZEdWeUlHSmxhVzVuSUdOaGJHeGxaQ0JPSUhScGJXVnpMbHh1SUNCZkxtRm1kR1Z5SUQwZ1puVnVZM1JwYjI0b2RHbHRaWE1zSUdaMWJtTXBJSHRjYmlBZ0lDQnBaaUFvZEdsdFpYTWdQRDBnTUNrZ2NtVjBkWEp1SUdaMWJtTW9LVHRjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnBaaUFvTFMxMGFXMWxjeUE4SURFcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU11WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUU5aWFtVmpkQ0JHZFc1amRHbHZibk5jYmlBZ0x5OGdMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVYRzRnSUM4dklGSmxkSEpwWlhabElIUm9aU0J1WVcxbGN5QnZaaUJoYmlCdlltcGxZM1FuY3lCd2NtOXdaWEowYVdWekxseHVJQ0F2THlCRVpXeGxaMkYwWlhNZ2RHOGdLaXBGUTAxQlUyTnlhWEIwSURVcUtpZHpJRzVoZEdsMlpTQmdUMkpxWldOMExtdGxlWE5nWEc0Z0lGOHVhMlY1Y3lBOUlHNWhkR2wyWlV0bGVYTWdmSHdnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2FXWWdLRzlpYWlBaFBUMGdUMkpxWldOMEtHOWlhaWtwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owbHVkbUZzYVdRZ2IySnFaV04wSnlrN1hHNGdJQ0FnZG1GeUlHdGxlWE1nUFNCYlhUdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYjJKcUtTQnBaaUFvWHk1b1lYTW9iMkpxTENCclpYa3BLU0JyWlhselcydGxlWE11YkdWdVozUm9YU0E5SUd0bGVUdGNiaUFnSUNCeVpYUjFjbTRnYTJWNWN6dGNiaUFnZlR0Y2JseHVJQ0F2THlCU1pYUnlhV1YyWlNCMGFHVWdkbUZzZFdWeklHOW1JR0Z1SUc5aWFtVmpkQ2R6SUhCeWIzQmxjblJwWlhNdVhHNGdJRjh1ZG1Gc2RXVnpJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2RtRnlJSFpoYkhWbGN5QTlJRnRkTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQnZZbW9wSUdsbUlDaGZMbWhoY3lodlltb3NJR3RsZVNrcElIWmhiSFZsY3k1d2RYTm9LRzlpYWx0clpYbGRLVHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1Z6TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRU52Ym5abGNuUWdZVzRnYjJKcVpXTjBJR2x1ZEc4Z1lTQnNhWE4wSUc5bUlHQmJhMlY1TENCMllXeDFaVjFnSUhCaGFYSnpMbHh1SUNCZkxuQmhhWEp6SUQwZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdkbUZ5SUhCaGFYSnpJRDBnVzEwN1hHNGdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJRzlpYWlrZ2FXWWdLRjh1YUdGektHOWlhaXdnYTJWNUtTa2djR0ZwY25NdWNIVnphQ2hiYTJWNUxDQnZZbXBiYTJWNVhWMHBPMXh1SUNBZ0lISmxkSFZ5YmlCd1lXbHljenRjYmlBZ2ZUdGNibHh1SUNBdkx5QkpiblpsY25RZ2RHaGxJR3RsZVhNZ1lXNWtJSFpoYkhWbGN5QnZaaUJoYmlCdlltcGxZM1F1SUZSb1pTQjJZV3gxWlhNZ2JYVnpkQ0JpWlNCelpYSnBZV3hwZW1GaWJHVXVYRzRnSUY4dWFXNTJaWEowSUQwZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUh0OU8xeHVJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ2WW1vcElHbG1JQ2hmTG1oaGN5aHZZbW9zSUd0bGVTa3BJSEpsYzNWc2RGdHZZbXBiYTJWNVhWMGdQU0JyWlhrN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlR0Y2JseHVJQ0F2THlCU1pYUjFjbTRnWVNCemIzSjBaV1FnYkdsemRDQnZaaUIwYUdVZ1puVnVZM1JwYjI0Z2JtRnRaWE1nWVhaaGFXeGhZbXhsSUc5dUlIUm9aU0J2WW1wbFkzUXVYRzRnSUM4dklFRnNhV0Z6WldRZ1lYTWdZRzFsZEdodlpITmdYRzRnSUY4dVpuVnVZM1JwYjI1eklEMGdYeTV0WlhSb2IyUnpJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2RtRnlJRzVoYldWeklEMGdXMTA3WEc0Z0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHOWlhaWtnZTF4dUlDQWdJQ0FnYVdZZ0tGOHVhWE5HZFc1amRHbHZiaWh2WW1wYmEyVjVYU2twSUc1aGJXVnpMbkIxYzJnb2EyVjVLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1aGJXVnpMbk52Y25Rb0tUdGNiaUFnZlR0Y2JseHVJQ0F2THlCRmVIUmxibVFnWVNCbmFYWmxiaUJ2WW1wbFkzUWdkMmwwYUNCaGJHd2dkR2hsSUhCeWIzQmxjblJwWlhNZ2FXNGdjR0Z6YzJWa0xXbHVJRzlpYW1WamRDaHpLUzVjYmlBZ1h5NWxlSFJsYm1RZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0JsWVdOb0tITnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F4S1N3Z1puVnVZM1JwYjI0b2MyOTFjbU5sS1NCN1hHNGdJQ0FnSUNCcFppQW9jMjkxY21ObEtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEJ5YjNBZ2FXNGdjMjkxY21ObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYjJKcVczQnliM0JkSUQwZ2MyOTFjbU5sVzNCeWIzQmRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhanRjYmlBZ2ZUdGNibHh1SUNBdkx5QlNaWFIxY200Z1lTQmpiM0I1SUc5bUlIUm9aU0J2WW1wbFkzUWdiMjVzZVNCamIyNTBZV2x1YVc1bklIUm9aU0IzYUdsMFpXeHBjM1JsWkNCd2NtOXdaWEowYVdWekxseHVJQ0JmTG5CcFkyc2dQU0JtZFc1amRHbHZiaWh2WW1vcElIdGNiaUFnSUNCMllYSWdZMjl3ZVNBOUlIdDlPMXh1SUNBZ0lIWmhjaUJyWlhseklEMGdZMjl1WTJGMExtRndjR3g1S0VGeWNtRjVVSEp2ZEc4c0lITnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F4S1NrN1hHNGdJQ0FnWldGamFDaHJaWGx6TENCbWRXNWpkR2x2YmloclpYa3BJSHRjYmlBZ0lDQWdJR2xtSUNoclpYa2dhVzRnYjJKcUtTQmpiM0I1VzJ0bGVWMGdQU0J2WW1wYmEyVjVYVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQnlaWFIxY200Z1kyOXdlVHRjYmlBZ2ZUdGNibHh1SUNBZ0x5OGdVbVYwZFhKdUlHRWdZMjl3ZVNCdlppQjBhR1VnYjJKcVpXTjBJSGRwZEdodmRYUWdkR2hsSUdKc1lXTnJiR2x6ZEdWa0lIQnliM0JsY25ScFpYTXVYRzRnSUY4dWIyMXBkQ0E5SUdaMWJtTjBhVzl1S0c5aWFpa2dlMXh1SUNBZ0lIWmhjaUJqYjNCNUlEMGdlMzA3WEc0Z0lDQWdkbUZ5SUd0bGVYTWdQU0JqYjI1allYUXVZWEJ3Ykhrb1FYSnlZWGxRY205MGJ5d2djMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1zSURFcEtUdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYjJKcUtTQjdYRzRnSUNBZ0lDQnBaaUFvSVY4dVkyOXVkR0ZwYm5Nb2EyVjVjeXdnYTJWNUtTa2dZMjl3ZVZ0clpYbGRJRDBnYjJKcVcydGxlVjA3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCamIzQjVPMXh1SUNCOU8xeHVYRzRnSUM4dklFWnBiR3dnYVc0Z1lTQm5hWFpsYmlCdlltcGxZM1FnZDJsMGFDQmtaV1poZFd4MElIQnliM0JsY25ScFpYTXVYRzRnSUY4dVpHVm1ZWFZzZEhNZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0JsWVdOb0tITnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F4S1N3Z1puVnVZM1JwYjI0b2MyOTFjbU5sS1NCN1hHNGdJQ0FnSUNCcFppQW9jMjkxY21ObEtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEJ5YjNBZ2FXNGdjMjkxY21ObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHOWlhbHR3Y205d1hTQTlQU0J1ZFd4c0tTQnZZbXBiY0hKdmNGMGdQU0J6YjNWeVkyVmJjSEp2Y0YwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnYjJKcU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVOeVpXRjBaU0JoSUNoemFHRnNiRzkzTFdOc2IyNWxaQ2tnWkhWd2JHbGpZWFJsSUc5bUlHRnVJRzlpYW1WamRDNWNiaUFnWHk1amJHOXVaU0E5SUdaMWJtTjBhVzl1S0c5aWFpa2dlMXh1SUNBZ0lHbG1JQ2doWHk1cGMwOWlhbVZqZENodlltb3BLU0J5WlhSMWNtNGdiMkpxTzF4dUlDQWdJSEpsZEhWeWJpQmZMbWx6UVhKeVlYa29iMkpxS1NBL0lHOWlhaTV6YkdsalpTZ3BJRG9nWHk1bGVIUmxibVFvZTMwc0lHOWlhaWs3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdTVzUyYjJ0bGN5QnBiblJsY21ObGNIUnZjaUIzYVhSb0lIUm9aU0J2WW1vc0lHRnVaQ0IwYUdWdUlISmxkSFZ5Ym5NZ2IySnFMbHh1SUNBdkx5QlVhR1VnY0hKcGJXRnllU0J3ZFhKd2IzTmxJRzltSUhSb2FYTWdiV1YwYUc5a0lHbHpJSFJ2SUZ3aWRHRndJR2x1ZEc5Y0lpQmhJRzFsZEdodlpDQmphR0ZwYml3Z2FXNWNiaUFnTHk4Z2IzSmtaWElnZEc4Z2NHVnlabTl5YlNCdmNHVnlZWFJwYjI1eklHOXVJR2x1ZEdWeWJXVmthV0YwWlNCeVpYTjFiSFJ6SUhkcGRHaHBiaUIwYUdVZ1kyaGhhVzR1WEc0Z0lGOHVkR0Z3SUQwZ1puVnVZM1JwYjI0b2IySnFMQ0JwYm5SbGNtTmxjSFJ2Y2lrZ2UxeHVJQ0FnSUdsdWRHVnlZMlZ3ZEc5eUtHOWlhaWs3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhanRjYmlBZ2ZUdGNibHh1SUNBdkx5QkpiblJsY201aGJDQnlaV04xY25OcGRtVWdZMjl0Y0dGeWFYTnZiaUJtZFc1amRHbHZiaUJtYjNJZ1lHbHpSWEYxWVd4Z0xseHVJQ0IyWVhJZ1pYRWdQU0JtZFc1amRHbHZiaWhoTENCaUxDQmhVM1JoWTJzc0lHSlRkR0ZqYXlrZ2UxeHVJQ0FnSUM4dklFbGtaVzUwYVdOaGJDQnZZbXBsWTNSeklHRnlaU0JsY1hWaGJDNGdZREFnUFQwOUlDMHdZQ3dnWW5WMElIUm9aWGtnWVhKbGJpZDBJR2xrWlc1MGFXTmhiQzVjYmlBZ0lDQXZMeUJUWldVZ2RHaGxJRWhoY20xdmJua2dZR1ZuWVd4Z0lIQnliM0J2YzJGc09pQm9kSFJ3T2k4dmQybHJhUzVsWTIxaGMyTnlhWEIwTG05eVp5OWtiMnQxTG5Cb2NEOXBaRDFvWVhKdGIyNTVPbVZuWVd3dVhHNGdJQ0FnYVdZZ0tHRWdQVDA5SUdJcElISmxkSFZ5YmlCaElDRTlQU0F3SUh4OElERWdMeUJoSUQwOUlERWdMeUJpTzF4dUlDQWdJQzh2SUVFZ2MzUnlhV04wSUdOdmJYQmhjbWx6YjI0Z2FYTWdibVZqWlhOellYSjVJR0psWTJGMWMyVWdZRzUxYkd3Z1BUMGdkVzVrWldacGJtVmtZQzVjYmlBZ0lDQnBaaUFvWVNBOVBTQnVkV3hzSUh4OElHSWdQVDBnYm5Wc2JDa2djbVYwZFhKdUlHRWdQVDA5SUdJN1hHNGdJQ0FnTHk4Z1ZXNTNjbUZ3SUdGdWVTQjNjbUZ3Y0dWa0lHOWlhbVZqZEhNdVhHNGdJQ0FnYVdZZ0tHRWdhVzV6ZEdGdVkyVnZaaUJmS1NCaElEMGdZUzVmZDNKaGNIQmxaRHRjYmlBZ0lDQnBaaUFvWWlCcGJuTjBZVzVqWlc5bUlGOHBJR0lnUFNCaUxsOTNjbUZ3Y0dWa08xeHVJQ0FnSUM4dklFTnZiWEJoY21VZ1lGdGJRMnhoYzNOZFhXQWdibUZ0WlhNdVhHNGdJQ0FnZG1GeUlHTnNZWE56VG1GdFpTQTlJSFJ2VTNSeWFXNW5MbU5oYkd3b1lTazdYRzRnSUNBZ2FXWWdLR05zWVhOelRtRnRaU0FoUFNCMGIxTjBjbWx1Wnk1allXeHNLR0lwS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2MzZHBkR05vSUNoamJHRnpjMDVoYldVcElIdGNiaUFnSUNBZ0lDOHZJRk4wY21sdVozTXNJRzUxYldKbGNuTXNJR1JoZEdWekxDQmhibVFnWW05dmJHVmhibk1nWVhKbElHTnZiWEJoY21Wa0lHSjVJSFpoYkhWbExseHVJQ0FnSUNBZ1kyRnpaU0FuVzI5aWFtVmpkQ0JUZEhKcGJtZGRKenBjYmlBZ0lDQWdJQ0FnTHk4Z1VISnBiV2wwYVhabGN5QmhibVFnZEdobGFYSWdZMjl5Y21WemNHOXVaR2x1WnlCdlltcGxZM1FnZDNKaGNIQmxjbk1nWVhKbElHVnhkV2wyWVd4bGJuUTdJSFJvZFhNc0lHQmNJalZjSW1BZ2FYTmNiaUFnSUNBZ0lDQWdMeThnWlhGMWFYWmhiR1Z1ZENCMGJ5QmdibVYzSUZOMGNtbHVaeWhjSWpWY0lpbGdMbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZU0E5UFNCVGRISnBibWNvWWlrN1hHNGdJQ0FnSUNCallYTmxJQ2RiYjJKcVpXTjBJRTUxYldKbGNsMG5PbHh1SUNBZ0lDQWdJQ0F2THlCZ1RtRk9ZSE1nWVhKbElHVnhkV2wyWVd4bGJuUXNJR0oxZENCdWIyNHRjbVZtYkdWNGFYWmxMaUJCYmlCZ1pXZGhiR0FnWTI5dGNHRnlhWE52YmlCcGN5QndaWEptYjNKdFpXUWdabTl5WEc0Z0lDQWdJQ0FnSUM4dklHOTBhR1Z5SUc1MWJXVnlhV01nZG1Gc2RXVnpMbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZU0FoUFNBcllTQS9JR0lnSVQwZ0sySWdPaUFvWVNBOVBTQXdJRDhnTVNBdklHRWdQVDBnTVNBdklHSWdPaUJoSUQwOUlDdGlLVHRjYmlBZ0lDQWdJR05oYzJVZ0oxdHZZbXBsWTNRZ1JHRjBaVjBuT2x4dUlDQWdJQ0FnWTJGelpTQW5XMjlpYW1WamRDQkNiMjlzWldGdVhTYzZYRzRnSUNBZ0lDQWdJQzh2SUVOdlpYSmpaU0JrWVhSbGN5QmhibVFnWW05dmJHVmhibk1nZEc4Z2JuVnRaWEpwWXlCd2NtbHRhWFJwZG1VZ2RtRnNkV1Z6TGlCRVlYUmxjeUJoY21VZ1kyOXRjR0Z5WldRZ1lua2dkR2hsYVhKY2JpQWdJQ0FnSUNBZ0x5OGdiV2xzYkdselpXTnZibVFnY21Wd2NtVnpaVzUwWVhScGIyNXpMaUJPYjNSbElIUm9ZWFFnYVc1MllXeHBaQ0JrWVhSbGN5QjNhWFJvSUcxcGJHeHBjMlZqYjI1a0lISmxjSEpsYzJWdWRHRjBhVzl1YzF4dUlDQWdJQ0FnSUNBdkx5QnZaaUJnVG1GT1lDQmhjbVVnYm05MElHVnhkV2wyWVd4bGJuUXVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQXJZU0E5UFNBcllqdGNiaUFnSUNBZ0lDOHZJRkpsWjBWNGNITWdZWEpsSUdOdmJYQmhjbVZrSUdKNUlIUm9aV2x5SUhOdmRYSmpaU0J3WVhSMFpYSnVjeUJoYm1RZ1pteGhaM011WEc0Z0lDQWdJQ0JqWVhObElDZGJiMkpxWldOMElGSmxaMFY0Y0Ywbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lTNXpiM1Z5WTJVZ1BUMGdZaTV6YjNWeVkyVWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0V1WjJ4dlltRnNJRDA5SUdJdVoyeHZZbUZzSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaExtMTFiSFJwYkdsdVpTQTlQU0JpTG0xMWJIUnBiR2x1WlNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTNXBaMjV2Y21WRFlYTmxJRDA5SUdJdWFXZHViM0psUTJGelpUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaElDRTlJQ2R2WW1wbFkzUW5JSHg4SUhSNWNHVnZaaUJpSUNFOUlDZHZZbXBsWTNRbktTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdMeThnUVhOemRXMWxJR1Z4ZFdGc2FYUjVJR1p2Y2lCamVXTnNhV01nYzNSeWRXTjBkWEpsY3k0Z1ZHaGxJR0ZzWjI5eWFYUm9iU0JtYjNJZ1pHVjBaV04wYVc1bklHTjVZMnhwWTF4dUlDQWdJQzh2SUhOMGNuVmpkSFZ5WlhNZ2FYTWdZV1JoY0hSbFpDQm1jbTl0SUVWVElEVXVNU0J6WldOMGFXOXVJREUxTGpFeUxqTXNJR0ZpYzNSeVlXTjBJRzl3WlhKaGRHbHZiaUJnU2s5Z0xseHVJQ0FnSUhaaGNpQnNaVzVuZEdnZ1BTQmhVM1JoWTJzdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bElDaHNaVzVuZEdndExTa2dlMXh1SUNBZ0lDQWdMeThnVEdsdVpXRnlJSE5sWVhKamFDNGdVR1Z5Wm05eWJXRnVZMlVnYVhNZ2FXNTJaWEp6Wld4NUlIQnliM0J2Y25ScGIyNWhiQ0IwYnlCMGFHVWdiblZ0WW1WeUlHOW1YRzRnSUNBZ0lDQXZMeUIxYm1seGRXVWdibVZ6ZEdWa0lITjBjblZqZEhWeVpYTXVYRzRnSUNBZ0lDQnBaaUFvWVZOMFlXTnJXMnhsYm1kMGFGMGdQVDBnWVNrZ2NtVjBkWEp1SUdKVGRHRmphMXRzWlc1bmRHaGRJRDA5SUdJN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUVGa1pDQjBhR1VnWm1seWMzUWdiMkpxWldOMElIUnZJSFJvWlNCemRHRmpheUJ2WmlCMGNtRjJaWEp6WldRZ2IySnFaV04wY3k1Y2JpQWdJQ0JoVTNSaFkyc3VjSFZ6YUNoaEtUdGNiaUFnSUNCaVUzUmhZMnN1Y0hWemFDaGlLVHRjYmlBZ0lDQjJZWElnYzJsNlpTQTlJREFzSUhKbGMzVnNkQ0E5SUhSeWRXVTdYRzRnSUNBZ0x5OGdVbVZqZFhKemFYWmxiSGtnWTI5dGNHRnlaU0J2WW1wbFkzUnpJR0Z1WkNCaGNuSmhlWE11WEc0Z0lDQWdhV1lnS0dOc1lYTnpUbUZ0WlNBOVBTQW5XMjlpYW1WamRDQkJjbkpoZVYwbktTQjdYRzRnSUNBZ0lDQXZMeUJEYjIxd1lYSmxJR0Z5Y21GNUlHeGxibWQwYUhNZ2RHOGdaR1YwWlhKdGFXNWxJR2xtSUdFZ1pHVmxjQ0JqYjIxd1lYSnBjMjl1SUdseklHNWxZMlZ6YzJGeWVTNWNiaUFnSUNBZ0lITnBlbVVnUFNCaExteGxibWQwYUR0Y2JpQWdJQ0FnSUhKbGMzVnNkQ0E5SUhOcGVtVWdQVDBnWWk1c1pXNW5kR2c3WEc0Z0lDQWdJQ0JwWmlBb2NtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRVJsWlhBZ1kyOXRjR0Z5WlNCMGFHVWdZMjl1ZEdWdWRITXNJR2xuYm05eWFXNW5JRzV2YmkxdWRXMWxjbWxqSUhCeWIzQmxjblJwWlhNdVhHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNoemFYcGxMUzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVNoeVpYTjFiSFFnUFNCbGNTaGhXM05wZW1WZExDQmlXM05wZW1WZExDQmhVM1JoWTJzc0lHSlRkR0ZqYXlrcEtTQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0F2THlCUFltcGxZM1J6SUhkcGRHZ2daR2xtWm1WeVpXNTBJR052Ym5OMGNuVmpkRzl5Y3lCaGNtVWdibTkwSUdWeGRXbDJZV3hsYm5Rc0lHSjFkQ0JnVDJKcVpXTjBZSE5jYmlBZ0lDQWdJQzh2SUdaeWIyMGdaR2xtWm1WeVpXNTBJR1p5WVcxbGN5QmhjbVV1WEc0Z0lDQWdJQ0IyWVhJZ1lVTjBiM0lnUFNCaExtTnZibk4wY25WamRHOXlMQ0JpUTNSdmNpQTlJR0l1WTI5dWMzUnlkV04wYjNJN1hHNGdJQ0FnSUNCcFppQW9ZVU4wYjNJZ0lUMDlJR0pEZEc5eUlDWW1JQ0VvWHk1cGMwWjFibU4wYVc5dUtHRkRkRzl5S1NBbUppQW9ZVU4wYjNJZ2FXNXpkR0Z1WTJWdlppQmhRM1J2Y2lrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZkxtbHpSblZ1WTNScGIyNG9Za04wYjNJcElDWW1JQ2hpUTNSdmNpQnBibk4wWVc1alpXOW1JR0pEZEc5eUtTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0x5OGdSR1ZsY0NCamIyMXdZWEpsSUc5aWFtVmpkSE11WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdZU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9YeTVvWVhNb1lTd2dhMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUVOdmRXNTBJSFJvWlNCbGVIQmxZM1JsWkNCdWRXMWlaWElnYjJZZ2NISnZjR1Z5ZEdsbGN5NWNiaUFnSUNBZ0lDQWdJQ0J6YVhwbEt5czdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JHVmxjQ0JqYjIxd1lYSmxJR1ZoWTJnZ2JXVnRZbVZ5TGx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doS0hKbGMzVnNkQ0E5SUY4dWFHRnpLR0lzSUd0bGVTa2dKaVlnWlhFb1lWdHJaWGxkTENCaVcydGxlVjBzSUdGVGRHRmpheXdnWWxOMFlXTnJLU2twSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCRmJuTjFjbVVnZEdoaGRDQmliM1JvSUc5aWFtVmpkSE1nWTI5dWRHRnBiaUIwYUdVZ2MyRnRaU0J1ZFcxaVpYSWdiMllnY0hKdmNHVnlkR2xsY3k1Y2JpQWdJQ0FnSUdsbUlDaHlaWE4xYkhRcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoclpYa2dhVzRnWWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoZkxtaGhjeWhpTENCclpYa3BJQ1ltSUNFb2MybDZaUzB0S1NrZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ0lYTnBlbVU3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRkpsYlc5MlpTQjBhR1VnWm1seWMzUWdiMkpxWldOMElHWnliMjBnZEdobElITjBZV05ySUc5bUlIUnlZWFpsY25ObFpDQnZZbXBsWTNSekxseHVJQ0FnSUdGVGRHRmpheTV3YjNBb0tUdGNiaUFnSUNCaVUzUmhZMnN1Y0c5d0tDazdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlFaWEptYjNKdElHRWdaR1ZsY0NCamIyMXdZWEpwYzI5dUlIUnZJR05vWldOcklHbG1JSFIzYnlCdlltcGxZM1J6SUdGeVpTQmxjWFZoYkM1Y2JpQWdYeTVwYzBWeGRXRnNJRDBnWm5WdVkzUnBiMjRvWVN3Z1lpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGNTaGhMQ0JpTENCYlhTd2dXMTBwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRWx6SUdFZ1oybDJaVzRnWVhKeVlYa3NJSE4wY21sdVp5d2diM0lnYjJKcVpXTjBJR1Z0Y0hSNVAxeHVJQ0F2THlCQmJpQmNJbVZ0Y0hSNVhDSWdiMkpxWldOMElHaGhjeUJ1YnlCbGJuVnRaWEpoWW14bElHOTNiaTF3Y205d1pYSjBhV1Z6TGx4dUlDQmZMbWx6Ulcxd2RIa2dQU0JtZFc1amRHbHZiaWh2WW1vcElIdGNiaUFnSUNCcFppQW9iMkpxSUQwOUlHNTFiR3dwSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUdsbUlDaGZMbWx6UVhKeVlYa29iMkpxS1NCOGZDQmZMbWx6VTNSeWFXNW5LRzlpYWlrcElISmxkSFZ5YmlCdlltb3ViR1Z1WjNSb0lEMDlQU0F3TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQnZZbW9wSUdsbUlDaGZMbWhoY3lodlltb3NJR3RsZVNrcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkpjeUJoSUdkcGRtVnVJSFpoYkhWbElHRWdSRTlOSUdWc1pXMWxiblEvWEc0Z0lGOHVhWE5GYkdWdFpXNTBJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNFaEtHOWlhaUFtSmlCdlltb3VibTlrWlZSNWNHVWdQVDA5SURFcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVseklHRWdaMmwyWlc0Z2RtRnNkV1VnWVc0Z1lYSnlZWGsvWEc0Z0lDOHZJRVJsYkdWbllYUmxjeUIwYnlCRlEwMUJOU2R6SUc1aGRHbDJaU0JCY25KaGVTNXBjMEZ5Y21GNVhHNGdJRjh1YVhOQmNuSmhlU0E5SUc1aGRHbDJaVWx6UVhKeVlYa2dmSHdnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSdlUzUnlhVzVuTG1OaGJHd29iMkpxS1NBOVBTQW5XMjlpYW1WamRDQkJjbkpoZVYwbk8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVseklHRWdaMmwyWlc0Z2RtRnlhV0ZpYkdVZ1lXNGdiMkpxWldOMFAxeHVJQ0JmTG1selQySnFaV04wSUQwZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhaUE5UFQwZ1QySnFaV04wS0c5aWFpazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1FXUmtJSE52YldVZ2FYTlVlWEJsSUcxbGRHaHZaSE02SUdselFYSm5kVzFsYm5SekxDQnBjMFoxYm1OMGFXOXVMQ0JwYzFOMGNtbHVaeXdnYVhOT2RXMWlaWElzSUdselJHRjBaU3dnYVhOU1pXZEZlSEF1WEc0Z0lHVmhZMmdvV3lkQmNtZDFiV1Z1ZEhNbkxDQW5SblZ1WTNScGIyNG5MQ0FuVTNSeWFXNW5KeXdnSjA1MWJXSmxjaWNzSUNkRVlYUmxKeXdnSjFKbFowVjRjQ2RkTENCbWRXNWpkR2x2YmlodVlXMWxLU0I3WEc0Z0lDQWdYMXNuYVhNbklDc2dibUZ0WlYwZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYjFOMGNtbHVaeTVqWVd4c0tHOWlhaWtnUFQwZ0oxdHZZbXBsWTNRZ0p5QXJJRzVoYldVZ0t5QW5YU2M3WEc0Z0lDQWdmVHRjYmlBZ2ZTazdYRzVjYmlBZ0x5OGdSR1ZtYVc1bElHRWdabUZzYkdKaFkyc2dkbVZ5YzJsdmJpQnZaaUIwYUdVZ2JXVjBhRzlrSUdsdUlHSnliM2R6WlhKeklDaGhhR1Z0TENCSlJTa3NJSGRvWlhKbFhHNGdJQzh2SUhSb1pYSmxJR2x6YmlkMElHRnVlU0JwYm5Od1pXTjBZV0pzWlNCY0lrRnlaM1Z0Wlc1MGMxd2lJSFI1Y0dVdVhHNGdJR2xtSUNnaFh5NXBjMEZ5WjNWdFpXNTBjeWhoY21kMWJXVnVkSE1wS1NCN1hHNGdJQ0FnWHk1cGMwRnlaM1Z0Wlc1MGN5QTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNFaEtHOWlhaUFtSmlCZkxtaGhjeWh2WW1vc0lDZGpZV3hzWldVbktTazdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJQzh2SUU5d2RHbHRhWHBsSUdCcGMwWjFibU4wYVc5dVlDQnBaaUJoY0hCeWIzQnlhV0YwWlM1Y2JpQWdhV1lnS0hSNWNHVnZaaUFvTHk0dktTQWhQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUY4dWFYTkdkVzVqZEdsdmJpQTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJ2WW1vZ1BUMDlJQ2RtZFc1amRHbHZiaWM3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUM4dklFbHpJR0VnWjJsMlpXNGdiMkpxWldOMElHRWdabWx1YVhSbElHNTFiV0psY2o5Y2JpQWdYeTVwYzBacGJtbDBaU0E5SUdaMWJtTjBhVzl1S0c5aWFpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCcGMwWnBibWwwWlNodlltb3BJQ1ltSUNGcGMwNWhUaWh3WVhKelpVWnNiMkYwS0c5aWFpa3BPMXh1SUNCOU8xeHVYRzRnSUM4dklFbHpJSFJvWlNCbmFYWmxiaUIyWVd4MVpTQmdUbUZPWUQ4Z0tFNWhUaUJwY3lCMGFHVWdiMjVzZVNCdWRXMWlaWElnZDJocFkyZ2daRzlsY3lCdWIzUWdaWEYxWVd3Z2FYUnpaV3htS1M1Y2JpQWdYeTVwYzA1aFRpQTlJR1oxYm1OMGFXOXVLRzlpYWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJmTG1selRuVnRZbVZ5S0c5aWFpa2dKaVlnYjJKcUlDRTlJQ3R2WW1vN1hHNGdJSDA3WEc1Y2JpQWdMeThnU1hNZ1lTQm5hWFpsYmlCMllXeDFaU0JoSUdKdmIyeGxZVzQvWEc0Z0lGOHVhWE5DYjI5c1pXRnVJRDBnWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5aWFpQTlQVDBnZEhKMVpTQjhmQ0J2WW1vZ1BUMDlJR1poYkhObElIeDhJSFJ2VTNSeWFXNW5MbU5oYkd3b2IySnFLU0E5UFNBblcyOWlhbVZqZENCQ2IyOXNaV0Z1WFNjN1hHNGdJSDA3WEc1Y2JpQWdMeThnU1hNZ1lTQm5hWFpsYmlCMllXeDFaU0JsY1hWaGJDQjBieUJ1ZFd4c1AxeHVJQ0JmTG1selRuVnNiQ0E5SUdaMWJtTjBhVzl1S0c5aWFpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdlltb2dQVDA5SUc1MWJHdzdYRzRnSUgwN1hHNWNiaUFnTHk4Z1NYTWdZU0JuYVhabGJpQjJZWEpwWVdKc1pTQjFibVJsWm1sdVpXUS9YRzRnSUY4dWFYTlZibVJsWm1sdVpXUWdQU0JtZFc1amRHbHZiaWh2WW1vcElIdGNiaUFnSUNCeVpYUjFjbTRnYjJKcUlEMDlQU0IyYjJsa0lEQTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1UyaHZjblJqZFhRZ1puVnVZM1JwYjI0Z1ptOXlJR05vWldOcmFXNW5JR2xtSUdGdUlHOWlhbVZqZENCb1lYTWdZU0JuYVhabGJpQndjbTl3WlhKMGVTQmthWEpsWTNSc2VWeHVJQ0F2THlCdmJpQnBkSE5sYkdZZ0tHbHVJRzkwYUdWeUlIZHZjbVJ6TENCdWIzUWdiMjRnWVNCd2NtOTBiM1I1Y0dVcExseHVJQ0JmTG1oaGN5QTlJR1oxYm1OMGFXOXVLRzlpYWl3Z2EyVjVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxTENCclpYa3BPMXh1SUNCOU8xeHVYRzRnSUM4dklGVjBhV3hwZEhrZ1JuVnVZM1JwYjI1elhHNGdJQzh2SUMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc1Y2JpQWdMeThnVW5WdUlGVnVaR1Z5YzJOdmNtVXVhbk1nYVc0Z0ttNXZRMjl1Wm14cFkzUXFJRzF2WkdVc0lISmxkSFZ5Ym1sdVp5QjBhR1VnWUY5Z0lIWmhjbWxoWW14bElIUnZJR2wwYzF4dUlDQXZMeUJ3Y21WMmFXOTFjeUJ2ZDI1bGNpNGdVbVYwZFhKdWN5QmhJSEpsWm1WeVpXNWpaU0IwYnlCMGFHVWdWVzVrWlhKelkyOXlaU0J2WW1wbFkzUXVYRzRnSUY4dWJtOURiMjVtYkdsamRDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEp2YjNRdVh5QTlJSEJ5WlhacGIzVnpWVzVrWlhKelkyOXlaVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ2ZUdGNibHh1SUNBdkx5QkxaV1Z3SUhSb1pTQnBaR1Z1ZEdsMGVTQm1kVzVqZEdsdmJpQmhjbTkxYm1RZ1ptOXlJR1JsWm1GMWJIUWdhWFJsY21GMGIzSnpMbHh1SUNCZkxtbGtaVzUwYVhSNUlEMGdablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1VuVnVJR0VnWm5WdVkzUnBiMjRnS2lwdUtpb2dkR2x0WlhNdVhHNGdJRjh1ZEdsdFpYTWdQU0JtZFc1amRHbHZiaWh1TENCcGRHVnlZWFJ2Y2l3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUhaaGNpQmhZMk4xYlNBOUlFRnljbUY1S0c0cE8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2Jqc2dhU3NyS1NCaFkyTjFiVnRwWFNBOUlHbDBaWEpoZEc5eUxtTmhiR3dvWTI5dWRHVjRkQ3dnYVNrN1hHNGdJQ0FnY21WMGRYSnVJR0ZqWTNWdE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZKbGRIVnliaUJoSUhKaGJtUnZiU0JwYm5SbFoyVnlJR0psZEhkbFpXNGdiV2x1SUdGdVpDQnRZWGdnS0dsdVkyeDFjMmwyWlNrdVhHNGdJRjh1Y21GdVpHOXRJRDBnWm5WdVkzUnBiMjRvYldsdUxDQnRZWGdwSUh0Y2JpQWdJQ0JwWmlBb2JXRjRJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJRzFoZUNBOUlHMXBianRjYmlBZ0lDQWdJRzFwYmlBOUlEQTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ0YVc0Z0t5Qk5ZWFJvTG1ac2IyOXlLRTFoZEdndWNtRnVaRzl0S0NrZ0tpQW9iV0Y0SUMwZ2JXbHVJQ3NnTVNrcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUV4cGMzUWdiMllnU0ZSTlRDQmxiblJwZEdsbGN5Qm1iM0lnWlhOallYQnBibWN1WEc0Z0lIWmhjaUJsYm5ScGRIbE5ZWEFnUFNCN1hHNGdJQ0FnWlhOallYQmxPaUI3WEc0Z0lDQWdJQ0FuSmljNklDY21ZVzF3T3ljc1hHNGdJQ0FnSUNBblBDYzZJQ2NtYkhRN0p5eGNiaUFnSUNBZ0lDYytKem9nSnlabmREc25MRnh1SUNBZ0lDQWdKMXdpSnpvZ0p5WnhkVzkwT3ljc1hHNGdJQ0FnSUNCY0lpZGNJam9nSnlZamVESTNPeWNzWEc0Z0lDQWdJQ0FuTHljNklDY21JM2d5UmpzblhHNGdJQ0FnZlZ4dUlDQjlPMXh1SUNCbGJuUnBkSGxOWVhBdWRXNWxjMk5oY0dVZ1BTQmZMbWx1ZG1WeWRDaGxiblJwZEhsTllYQXVaWE5qWVhCbEtUdGNibHh1SUNBdkx5QlNaV2RsZUdWeklHTnZiblJoYVc1cGJtY2dkR2hsSUd0bGVYTWdZVzVrSUhaaGJIVmxjeUJzYVhOMFpXUWdhVzF0WldScFlYUmxiSGtnWVdKdmRtVXVYRzRnSUhaaGNpQmxiblJwZEhsU1pXZGxlR1Z6SUQwZ2UxeHVJQ0FnSUdWelkyRndaVG9nSUNCdVpYY2dVbVZuUlhod0tDZGJKeUFySUY4dWEyVjVjeWhsYm5ScGRIbE5ZWEF1WlhOallYQmxLUzVxYjJsdUtDY25LU0FySUNkZEp5d2dKMmNuS1N4Y2JpQWdJQ0IxYm1WelkyRndaVG9nYm1WM0lGSmxaMFY0Y0NnbktDY2dLeUJmTG10bGVYTW9aVzUwYVhSNVRXRndMblZ1WlhOallYQmxLUzVxYjJsdUtDZDhKeWtnS3lBbktTY3NJQ2RuSnlsY2JpQWdmVHRjYmx4dUlDQXZMeUJHZFc1amRHbHZibk1nWm05eUlHVnpZMkZ3YVc1bklHRnVaQ0IxYm1WelkyRndhVzVuSUhOMGNtbHVaM01nZEc4dlpuSnZiU0JJVkUxTUlHbHVkR1Z5Y0c5c1lYUnBiMjR1WEc0Z0lGOHVaV0ZqYUNoYkoyVnpZMkZ3WlNjc0lDZDFibVZ6WTJGd1pTZGRMQ0JtZFc1amRHbHZiaWh0WlhSb2IyUXBJSHRjYmlBZ0lDQmZXMjFsZEdodlpGMGdQU0JtZFc1amRHbHZiaWh6ZEhKcGJtY3BJSHRjYmlBZ0lDQWdJR2xtSUNoemRISnBibWNnUFQwZ2JuVnNiQ2tnY21WMGRYSnVJQ2NuTzF4dUlDQWdJQ0FnY21WMGRYSnVJQ2duSnlBcklITjBjbWx1WnlrdWNtVndiR0ZqWlNobGJuUnBkSGxTWldkbGVHVnpXMjFsZEdodlpGMHNJR1oxYm1OMGFXOXVLRzFoZEdOb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxiblJwZEhsTllYQmJiV1YwYUc5a1hWdHRZWFJqYUYwN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVJQ0I5S1R0Y2JseHVJQ0F2THlCSlppQjBhR1VnZG1Gc2RXVWdiMllnZEdobElHNWhiV1ZrSUhCeWIzQmxjblI1SUdseklHRWdablZ1WTNScGIyNGdkR2hsYmlCcGJuWnZhMlVnYVhRN1hHNGdJQzh2SUc5MGFHVnlkMmx6WlN3Z2NtVjBkWEp1SUdsMExseHVJQ0JmTG5KbGMzVnNkQ0E5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnY0hKdmNHVnlkSGtwSUh0Y2JpQWdJQ0JwWmlBb2IySnFaV04wSUQwOUlHNTFiR3dwSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUhaaGNpQjJZV3gxWlNBOUlHOWlhbVZqZEZ0d2NtOXdaWEowZVYwN1hHNGdJQ0FnY21WMGRYSnVJRjh1YVhOR2RXNWpkR2x2YmloMllXeDFaU2tnUHlCMllXeDFaUzVqWVd4c0tHOWlhbVZqZENrZ09pQjJZV3gxWlR0Y2JpQWdmVHRjYmx4dUlDQXZMeUJCWkdRZ2VXOTFjaUJ2ZDI0Z1kzVnpkRzl0SUdaMWJtTjBhVzl1Y3lCMGJ5QjBhR1VnVlc1a1pYSnpZMjl5WlNCdlltcGxZM1F1WEc0Z0lGOHViV2w0YVc0Z1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0JsWVdOb0tGOHVablZ1WTNScGIyNXpLRzlpYWlrc0lHWjFibU4wYVc5dUtHNWhiV1VwZTF4dUlDQWdJQ0FnZG1GeUlHWjFibU1nUFNCZlcyNWhiV1ZkSUQwZ2IySnFXMjVoYldWZE8xeHVJQ0FnSUNBZ1h5NXdjbTkwYjNSNWNHVmJibUZ0WlYwZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRnlaM01nUFNCYmRHaHBjeTVmZDNKaGNIQmxaRjA3WEc0Z0lDQWdJQ0FnSUhCMWMyZ3VZWEJ3Ykhrb1lYSm5jeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkQzVqWVd4c0tIUm9hWE1zSUdaMWJtTXVZWEJ3Ykhrb1h5d2dZWEpuY3lrcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCSFpXNWxjbUYwWlNCaElIVnVhWEYxWlNCcGJuUmxaMlZ5SUdsa0lDaDFibWx4ZFdVZ2QybDBhR2x1SUhSb1pTQmxiblJwY21VZ1kyeHBaVzUwSUhObGMzTnBiMjRwTGx4dUlDQXZMeUJWYzJWbWRXd2dabTl5SUhSbGJYQnZjbUZ5ZVNCRVQwMGdhV1J6TGx4dUlDQjJZWElnYVdSRGIzVnVkR1Z5SUQwZ01EdGNiaUFnWHk1MWJtbHhkV1ZKWkNBOUlHWjFibU4wYVc5dUtIQnlaV1pwZUNrZ2UxeHVJQ0FnSUhaaGNpQnBaQ0E5SUNzcmFXUkRiM1Z1ZEdWeUlDc2dKeWM3WEc0Z0lDQWdjbVYwZFhKdUlIQnlaV1pwZUNBL0lIQnlaV1pwZUNBcklHbGtJRG9nYVdRN1hHNGdJSDA3WEc1Y2JpQWdMeThnUW5rZ1pHVm1ZWFZzZEN3Z1ZXNWtaWEp6WTI5eVpTQjFjMlZ6SUVWU1FpMXpkSGxzWlNCMFpXMXdiR0YwWlNCa1pXeHBiV2wwWlhKekxDQmphR0Z1WjJVZ2RHaGxYRzRnSUM4dklHWnZiR3h2ZDJsdVp5QjBaVzF3YkdGMFpTQnpaWFIwYVc1bmN5QjBieUIxYzJVZ1lXeDBaWEp1WVhScGRtVWdaR1ZzYVcxcGRHVnljeTVjYmlBZ1h5NTBaVzF3YkdGMFpWTmxkSFJwYm1keklEMGdlMXh1SUNBZ0lHVjJZV3gxWVhSbElDQWdJRG9nTHp3bEtGdGNYSE5jWEZOZEt6OHBKVDR2Wnl4Y2JpQWdJQ0JwYm5SbGNuQnZiR0YwWlNBNklDODhKVDBvVzF4Y2MxeGNVMTByUHlrbFBpOW5MRnh1SUNBZ0lHVnpZMkZ3WlNBZ0lDQWdJRG9nTHp3bExTaGJYRnh6WEZ4VFhTcy9LU1UrTDJkY2JpQWdmVHRjYmx4dUlDQXZMeUJYYUdWdUlHTjFjM1J2YldsNmFXNW5JR0IwWlcxd2JHRjBaVk5sZEhScGJtZHpZQ3dnYVdZZ2VXOTFJR1J2YmlkMElIZGhiblFnZEc4Z1pHVm1hVzVsSUdGdVhHNGdJQzh2SUdsdWRHVnljRzlzWVhScGIyNHNJR1YyWVd4MVlYUnBiMjRnYjNJZ1pYTmpZWEJwYm1jZ2NtVm5aWGdzSUhkbElHNWxaV1FnYjI1bElIUm9ZWFFnYVhOY2JpQWdMeThnWjNWaGNtRnVkR1ZsWkNCdWIzUWdkRzhnYldGMFkyZ3VYRzRnSUhaaGNpQnViMDFoZEdOb0lEMGdMeWd1S1Y0dk8xeHVYRzRnSUM4dklFTmxjblJoYVc0Z1kyaGhjbUZqZEdWeWN5QnVaV1ZrSUhSdklHSmxJR1Z6WTJGd1pXUWdjMjhnZEdoaGRDQjBhR1Y1SUdOaGJpQmlaU0J3ZFhRZ2FXNTBieUJoWEc0Z0lDOHZJSE4wY21sdVp5QnNhWFJsY21Gc0xseHVJQ0IyWVhJZ1pYTmpZWEJsY3lBOUlIdGNiaUFnSUNCY0lpZGNJam9nSUNBZ0lDQmNJaWRjSWl4Y2JpQWdJQ0FuWEZ4Y1hDYzZJQ0FnSUNBblhGeGNYQ2NzWEc0Z0lDQWdKMXhjY2ljNklDQWdJQ0FuY2ljc1hHNGdJQ0FnSjF4Y2JpYzZJQ0FnSUNBbmJpY3NYRzRnSUNBZ0oxeGNkQ2M2SUNBZ0lDQW5kQ2NzWEc0Z0lDQWdKMXhjZFRJd01qZ25PaUFuZFRJd01qZ25MRnh1SUNBZ0lDZGNYSFV5TURJNUp6b2dKM1V5TURJNUoxeHVJQ0I5TzF4dVhHNGdJSFpoY2lCbGMyTmhjR1Z5SUQwZ0wxeGNYRng4SjN4Y1hISjhYRnh1ZkZ4Y2RIeGNYSFV5TURJNGZGeGNkVEl3TWprdlp6dGNibHh1SUNBdkx5QktZWFpoVTJOeWFYQjBJRzFwWTNKdkxYUmxiWEJzWVhScGJtY3NJSE5wYldsc1lYSWdkRzhnU205b2JpQlNaWE5wWnlkeklHbHRjR3hsYldWdWRHRjBhVzl1TGx4dUlDQXZMeUJWYm1SbGNuTmpiM0psSUhSbGJYQnNZWFJwYm1jZ2FHRnVaR3hsY3lCaGNtSnBkSEpoY25rZ1pHVnNhVzFwZEdWeWN5d2djSEpsYzJWeWRtVnpJSGRvYVhSbGMzQmhZMlVzWEc0Z0lDOHZJR0Z1WkNCamIzSnlaV04wYkhrZ1pYTmpZWEJsY3lCeGRXOTBaWE1nZDJsMGFHbHVJR2x1ZEdWeWNHOXNZWFJsWkNCamIyUmxMbHh1SUNCZkxuUmxiWEJzWVhSbElEMGdablZ1WTNScGIyNG9kR1Y0ZEN3Z1pHRjBZU3dnYzJWMGRHbHVaM01wSUh0Y2JpQWdJQ0IyWVhJZ2NtVnVaR1Z5TzF4dUlDQWdJSE5sZEhScGJtZHpJRDBnWHk1a1pXWmhkV3gwY3loN2ZTd2djMlYwZEdsdVozTXNJRjh1ZEdWdGNHeGhkR1ZUWlhSMGFXNW5jeWs3WEc1Y2JpQWdJQ0F2THlCRGIyMWlhVzVsSUdSbGJHbHRhWFJsY25NZ2FXNTBieUJ2Ym1VZ2NtVm5kV3hoY2lCbGVIQnlaWE56YVc5dUlIWnBZU0JoYkhSbGNtNWhkR2x2Ymk1Y2JpQWdJQ0IyWVhJZ2JXRjBZMmhsY2lBOUlHNWxkeUJTWldkRmVIQW9XMXh1SUNBZ0lDQWdLSE5sZEhScGJtZHpMbVZ6WTJGd1pTQjhmQ0J1YjAxaGRHTm9LUzV6YjNWeVkyVXNYRzRnSUNBZ0lDQW9jMlYwZEdsdVozTXVhVzUwWlhKd2IyeGhkR1VnZkh3Z2JtOU5ZWFJqYUNrdWMyOTFjbU5sTEZ4dUlDQWdJQ0FnS0hObGRIUnBibWR6TG1WMllXeDFZWFJsSUh4OElHNXZUV0YwWTJncExuTnZkWEpqWlZ4dUlDQWdJRjB1YW05cGJpZ25mQ2NwSUNzZ0ozd2tKeXdnSjJjbktUdGNibHh1SUNBZ0lDOHZJRU52YlhCcGJHVWdkR2hsSUhSbGJYQnNZWFJsSUhOdmRYSmpaU3dnWlhOallYQnBibWNnYzNSeWFXNW5JR3hwZEdWeVlXeHpJR0Z3Y0hKdmNISnBZWFJsYkhrdVhHNGdJQ0FnZG1GeUlHbHVaR1Y0SUQwZ01EdGNiaUFnSUNCMllYSWdjMjkxY21ObElEMGdYQ0pmWDNBclBTZGNJanRjYmlBZ0lDQjBaWGgwTG5KbGNHeGhZMlVvYldGMFkyaGxjaXdnWm5WdVkzUnBiMjRvYldGMFkyZ3NJR1Z6WTJGd1pTd2dhVzUwWlhKd2IyeGhkR1VzSUdWMllXeDFZWFJsTENCdlptWnpaWFFwSUh0Y2JpQWdJQ0FnSUhOdmRYSmpaU0FyUFNCMFpYaDBMbk5zYVdObEtHbHVaR1Y0TENCdlptWnpaWFFwWEc0Z0lDQWdJQ0FnSUM1eVpYQnNZV05sS0dWelkyRndaWElzSUdaMWJtTjBhVzl1S0cxaGRHTm9LU0I3SUhKbGRIVnliaUFuWEZ4Y1hDY2dLeUJsYzJOaGNHVnpXMjFoZEdOb1hUc2dmU2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaGxjMk5oY0dVcElIdGNiaUFnSUNBZ0lDQWdjMjkxY21ObElDczlJRndpSnl0Y1hHNG9LRjlmZEQwb1hDSWdLeUJsYzJOaGNHVWdLeUJjSWlrcFBUMXVkV3hzUHljbk9sOHVaWE5qWVhCbEtGOWZkQ2twSzF4Y2JpZGNJanRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNocGJuUmxjbkJ2YkdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0J6YjNWeVkyVWdLejBnWENJbksxeGNiaWdvWDE5MFBTaGNJaUFySUdsdWRHVnljRzlzWVhSbElDc2dYQ0lwS1QwOWJuVnNiRDhuSnpwZlgzUXBLMXhjYmlkY0lqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2hsZG1Gc2RXRjBaU2tnZTF4dUlDQWdJQ0FnSUNCemIzVnlZMlVnS3owZ1hDSW5PMXhjYmx3aUlDc2daWFpoYkhWaGRHVWdLeUJjSWx4Y2JsOWZjQ3M5SjF3aU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXNWtaWGdnUFNCdlptWnpaWFFnS3lCdFlYUmphQzVzWlc1bmRHZzdYRzRnSUNBZ0lDQnlaWFIxY200Z2JXRjBZMmc3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdjMjkxY21ObElDczlJRndpSnp0Y1hHNWNJanRjYmx4dUlDQWdJQzh2SUVsbUlHRWdkbUZ5YVdGaWJHVWdhWE1nYm05MElITndaV05wWm1sbFpDd2djR3hoWTJVZ1pHRjBZU0IyWVd4MVpYTWdhVzRnYkc5allXd2djMk52Y0dVdVhHNGdJQ0FnYVdZZ0tDRnpaWFIwYVc1bmN5NTJZWEpwWVdKc1pTa2djMjkxY21ObElEMGdKM2RwZEdnb2IySnFmSHg3ZlNsN1hGeHVKeUFySUhOdmRYSmpaU0FySUNkOVhGeHVKenRjYmx4dUlDQWdJSE52ZFhKalpTQTlJRndpZG1GeUlGOWZkQ3hmWDNBOUp5Y3NYMTlxUFVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVxYjJsdUxGd2lJQ3RjYmlBZ0lDQWdJRndpY0hKcGJuUTlablZ1WTNScGIyNG9LWHRmWDNBclBWOWZhaTVqWVd4c0tHRnlaM1Z0Wlc1MGN5d25KeWs3ZlR0Y1hHNWNJaUFyWEc0Z0lDQWdJQ0J6YjNWeVkyVWdLeUJjSW5KbGRIVnliaUJmWDNBN1hGeHVYQ0k3WEc1Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2NtVnVaR1Z5SUQwZ2JtVjNJRVoxYm1OMGFXOXVLSE5sZEhScGJtZHpMblpoY21saFlteGxJSHg4SUNkdlltb25MQ0FuWHljc0lITnZkWEpqWlNrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ1pTNXpiM1Z5WTJVZ1BTQnpiM1Z5WTJVN1hHNGdJQ0FnSUNCMGFISnZkeUJsTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoa1lYUmhLU0J5WlhSMWNtNGdjbVZ1WkdWeUtHUmhkR0VzSUY4cE8xeHVJQ0FnSUhaaGNpQjBaVzF3YkdGMFpTQTlJR1oxYm1OMGFXOXVLR1JoZEdFcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpXNWtaWEl1WTJGc2JDaDBhR2x6TENCa1lYUmhMQ0JmS1R0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnTHk4Z1VISnZkbWxrWlNCMGFHVWdZMjl0Y0dsc1pXUWdablZ1WTNScGIyNGdjMjkxY21ObElHRnpJR0VnWTI5dWRtVnVhV1Z1WTJVZ1ptOXlJSEJ5WldOdmJYQnBiR0YwYVc5dUxseHVJQ0FnSUhSbGJYQnNZWFJsTG5OdmRYSmpaU0E5SUNkbWRXNWpkR2x2YmlnbklDc2dLSE5sZEhScGJtZHpMblpoY21saFlteGxJSHg4SUNkdlltb25LU0FySUNjcGUxeGNiaWNnS3lCemIzVnlZMlVnS3lBbmZTYzdYRzVjYmlBZ0lDQnlaWFIxY200Z2RHVnRjR3hoZEdVN1hHNGdJSDA3WEc1Y2JpQWdMeThnUVdSa0lHRWdYQ0pqYUdGcGJsd2lJR1oxYm1OMGFXOXVMQ0IzYUdsamFDQjNhV3hzSUdSbGJHVm5ZWFJsSUhSdklIUm9aU0IzY21Gd2NHVnlMbHh1SUNCZkxtTm9ZV2x1SUQwZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGOG9iMkpxS1M1amFHRnBiaWdwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRTlQVUZ4dUlDQXZMeUF0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFnTHk4Z1NXWWdWVzVrWlhKelkyOXlaU0JwY3lCallXeHNaV1FnWVhNZ1lTQm1kVzVqZEdsdmJpd2dhWFFnY21WMGRYSnVjeUJoSUhkeVlYQndaV1FnYjJKcVpXTjBJSFJvWVhSY2JpQWdMeThnWTJGdUlHSmxJSFZ6WldRZ1QwOHRjM1I1YkdVdUlGUm9hWE1nZDNKaGNIQmxjaUJvYjJ4a2N5QmhiSFJsY21Wa0lIWmxjbk5wYjI1eklHOW1JR0ZzYkNCMGFHVmNiaUFnTHk4Z2RXNWtaWEp6WTI5eVpTQm1kVzVqZEdsdmJuTXVJRmR5WVhCd1pXUWdiMkpxWldOMGN5QnRZWGtnWW1VZ1kyaGhhVzVsWkM1Y2JseHVJQ0F2THlCSVpXeHdaWElnWm5WdVkzUnBiMjRnZEc4Z1kyOXVkR2x1ZFdVZ1kyaGhhVzVwYm1jZ2FXNTBaWEp0WldScFlYUmxJSEpsYzNWc2RITXVYRzRnSUhaaGNpQnlaWE4xYkhRZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkyaGhhVzRnUHlCZktHOWlhaWt1WTJoaGFXNG9LU0E2SUc5aWFqdGNiaUFnZlR0Y2JseHVJQ0F2THlCQlpHUWdZV3hzSUc5bUlIUm9aU0JWYm1SbGNuTmpiM0psSUdaMWJtTjBhVzl1Y3lCMGJ5QjBhR1VnZDNKaGNIQmxjaUJ2WW1wbFkzUXVYRzRnSUY4dWJXbDRhVzRvWHlrN1hHNWNiaUFnTHk4Z1FXUmtJR0ZzYkNCdGRYUmhkRzl5SUVGeWNtRjVJR1oxYm1OMGFXOXVjeUIwYnlCMGFHVWdkM0poY0hCbGNpNWNiaUFnWldGamFDaGJKM0J2Y0Njc0lDZHdkWE5vSnl3Z0ozSmxkbVZ5YzJVbkxDQW5jMmhwWm5RbkxDQW5jMjl5ZENjc0lDZHpjR3hwWTJVbkxDQW5kVzV6YUdsbWRDZGRMQ0JtZFc1amRHbHZiaWh1WVcxbEtTQjdYRzRnSUNBZ2RtRnlJRzFsZEdodlpDQTlJRUZ5Y21GNVVISnZkRzliYm1GdFpWMDdYRzRnSUNBZ1h5NXdjbTkwYjNSNWNHVmJibUZ0WlYwZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCdlltb2dQU0IwYUdsekxsOTNjbUZ3Y0dWa08xeHVJQ0FnSUNBZ2JXVjBhRzlrTG1Gd2NHeDVLRzlpYWl3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNBZ0lHbG1JQ2dvYm1GdFpTQTlQU0FuYzJocFpuUW5JSHg4SUc1aGJXVWdQVDBnSjNOd2JHbGpaU2NwSUNZbUlHOWlhaTVzWlc1bmRHZ2dQVDA5SURBcElHUmxiR1YwWlNCdlltcGJNRjA3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4MExtTmhiR3dvZEdocGN5d2diMkpxS1R0Y2JpQWdJQ0I5TzF4dUlDQjlLVHRjYmx4dUlDQXZMeUJCWkdRZ1lXeHNJR0ZqWTJWemMyOXlJRUZ5Y21GNUlHWjFibU4wYVc5dWN5QjBieUIwYUdVZ2QzSmhjSEJsY2k1Y2JpQWdaV0ZqYUNoYkoyTnZibU5oZENjc0lDZHFiMmx1Snl3Z0ozTnNhV05sSjEwc0lHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0IyWVhJZ2JXVjBhRzlrSUQwZ1FYSnlZWGxRY205MGIxdHVZVzFsWFR0Y2JpQWdJQ0JmTG5CeWIzUnZkSGx3WlZ0dVlXMWxYU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkQzVqWVd4c0tIUm9hWE1zSUcxbGRHaHZaQzVoY0hCc2VTaDBhR2x6TGw5M2NtRndjR1ZrTENCaGNtZDFiV1Z1ZEhNcEtUdGNiaUFnSUNCOU8xeHVJQ0I5S1R0Y2JseHVJQ0JmTG1WNGRHVnVaQ2hmTG5CeWIzUnZkSGx3WlN3Z2UxeHVYRzRnSUNBZ0x5OGdVM1JoY25RZ1kyaGhhVzVwYm1jZ1lTQjNjbUZ3Y0dWa0lGVnVaR1Z5YzJOdmNtVWdiMkpxWldOMExseHVJQ0FnSUdOb1lXbHVPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMk5vWVdsdUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdkx5QkZlSFJ5WVdOMGN5QjBhR1VnY21WemRXeDBJR1p5YjIwZ1lTQjNjbUZ3Y0dWa0lHRnVaQ0JqYUdGcGJtVmtJRzlpYW1WamRDNWNiaUFnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkM0poY0hCbFpEdGNiaUFnSUNCOVhHNWNiaUFnZlNrN1hHNWNibjBwTG1OaGJHd29kR2hwY3lrN1hHNWNiaThxWjJ4dlltRnNJRjg2SUdaaGJITmxMQ0FrT2lCbVlXeHpaU3dnYkc5allXeFRkRzl5WVdkbE9pQm1ZV3h6WlN3Z2NISnZZMlZ6Y3pvZ2RISjFaU3hjYmlBZ1dFMU1TSFIwY0ZKbGNYVmxjM1E2SUdaaGJITmxMQ0JZUkc5dFlXbHVVbVZ4ZFdWemREb2dabUZzYzJVc0lHVjRjRzl5ZEhNNklHWmhiSE5sTEZ4dUlDQnlaWEYxYVhKbE9pQm1ZV3h6WlN3Z2MyVjBWR2x0Wlc5MWREb2dkSEoxWlNBcUwxeHVLR1oxYm1OMGFXOXVLSEp2YjNRcElIdGNiaUFnY205dmRDNVFZWEp6WlNBOUlISnZiM1F1VUdGeWMyVWdmSHdnZTMwN1hHNGdJQzhxS2x4dUlDQWdLaUJEYjI1MFlXbHVjeUJoYkd3Z1VHRnljMlVnUVZCSklHTnNZWE56WlhNZ1lXNWtJR1oxYm1OMGFXOXVjeTVjYmlBZ0lDb2dRRzVoYldVZ1VHRnljMlZjYmlBZ0lDb2dRRzVoYldWemNHRmpaVnh1SUNBZ0tseHVJQ0FnS2lCRGIyNTBZV2x1Y3lCaGJHd2dVR0Z5YzJVZ1FWQkpJR05zWVhOelpYTWdZVzVrSUdaMWJtTjBhVzl1Y3k1Y2JpQWdJQ292WEc0Z0lIWmhjaUJRWVhKelpTQTlJSEp2YjNRdVVHRnljMlU3WEc1Y2JpQWdkbUZ5SUhKbGNTQTlJSFI1Y0dWdlppaHlaWEYxYVhKbEtTQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lISmxjWFZwY21VZ09pQnVkV3hzTzF4dUlDQXZMeUJNYjJGa0lISmxabVZ5Wlc1alpYTWdkRzhnYjNSb1pYSWdaR1Z3Wlc1a1pXNWphV1Z6WEc0Z0lHbG1JQ2gwZVhCbGIyWW9XRTFNU0hSMGNGSmxjWFZsYzNRcElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUZCaGNuTmxMbGhOVEVoMGRIQlNaWEYxWlhOMElEMGdXRTFNU0hSMGNGSmxjWFZsYzNRN1hHNGdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1LSEpsY1hWcGNtVXBJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1YRzRnSUNBZ0lDQjBlWEJsYjJZb2NtVnhkV2x5WlM1bGJuTjFjbVVwSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJRkJoY25ObExsaE5URWgwZEhCU1pYRjFaWE4wSUQwZ2NtVnhLQ2Q0Yld4b2RIUndjbVZ4ZFdWemRDY3BMbGhOVEVoMGRIQlNaWEYxWlhOME8xeHVJQ0I5WEc0Z0lDOHZJRWx0Y0c5eWRDQlFZWEp6WlNkeklHeHZZMkZzSUdOdmNIa2diMllnZFc1a1pYSnpZMjl5WlM1Y2JpQWdhV1lnS0hSNWNHVnZaaWhsZUhCdmNuUnpLU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnWlhod2IzSjBjeTVmS1NCN1hHNGdJQ0FnTHk4Z1YyVW5jbVVnY25WdWJtbHVaeUJwYmlCaElFTnZiVzF2YmtwVElHVnVkbWx5YjI1dFpXNTBYRzRnSUNBZ1VHRnljMlV1WHlBOUlHVjRjRzl5ZEhNdVh5NXViME52Ym1ac2FXTjBLQ2s3WEc0Z0lDQWdaWGh3YjNKMGN5NVFZWEp6WlNBOUlGQmhjbk5sTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUZCaGNuTmxMbDhnUFNCZkxtNXZRMjl1Wm14cFkzUW9LVHRjYmlBZ2ZWeHVYRzRnSUM4dklFbG1JR3BSZFdWeWVTQnZjaUJhWlhCMGJ5Qm9ZWE1nWW1WbGJpQnBibU5zZFdSbFpDd2daM0poWWlCaElISmxabVZ5Wlc1alpTQjBieUJwZEM1Y2JpQWdhV1lnS0hSNWNHVnZaaWdrS1NBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlrZ2UxeHVJQ0FnSUZCaGNuTmxMaVFnUFNBa08xeHVJQ0I5WEc1Y2JpQWdMeThnU0dWc2NHVnljMXh1SUNBdkx5QXRMUzB0TFMwdFhHNWNiaUFnTHk4Z1UyaGhjbVZrSUdWdGNIUjVJR052Ym5OMGNuVmpkRzl5SUdaMWJtTjBhVzl1SUhSdklHRnBaQ0JwYmlCd2NtOTBiM1I1Y0dVdFkyaGhhVzRnWTNKbFlYUnBiMjR1WEc0Z0lIWmhjaUJGYlhCMGVVTnZibk4wY25WamRHOXlJRDBnWm5WdVkzUnBiMjRvS1NCN2ZUdGNibHh1SUNBdkx5QlVUMFJQT2lCbWFYZ2dkR2hwY3lCemJ5QjBhR0YwSUZCaGNuTmxUMkpxWldOMGN5QmhjbVZ1SjNRZ1lXeHNJR05oYkd4bFpDQmNJbU5vYVd4a1hDSWdhVzRnWkdWaWRXZG5aWEl1WEc0Z0lDOHZJRWhsYkhCbGNpQm1kVzVqZEdsdmJpQjBieUJqYjNKeVpXTjBiSGtnYzJWMElIVndJSFJvWlNCd2NtOTBiM1I1Y0dVZ1kyaGhhVzRzSUdadmNpQnpkV0pqYkdGemMyVnpMbHh1SUNBdkx5QlRhVzFwYkdGeUlIUnZJR0JuYjI5bkxtbHVhR1Z5YVhSellDd2dZblYwSUhWelpYTWdZU0JvWVhOb0lHOW1JSEJ5YjNSdmRIbHdaU0J3Y205d1pYSjBhV1Z6SUdGdVpGeHVJQ0F2THlCamJHRnpjeUJ3Y205d1pYSjBhV1Z6SUhSdklHSmxJR1Y0ZEdWdVpHVmtMbHh1SUNCMllYSWdhVzVvWlhKcGRITWdQU0JtZFc1amRHbHZiaWh3WVhKbGJuUXNJSEJ5YjNSdlVISnZjSE1zSUhOMFlYUnBZMUJ5YjNCektTQjdYRzRnSUNBZ2RtRnlJR05vYVd4a08xeHVYRzRnSUNBZ0x5OGdWR2hsSUdOdmJuTjBjblZqZEc5eUlHWjFibU4wYVc5dUlHWnZjaUIwYUdVZ2JtVjNJSE4xWW1Oc1lYTnpJR2x6SUdWcGRHaGxjaUJrWldacGJtVmtJR0o1SUhsdmRWeHVJQ0FnSUM4dklDaDBhR1VnWENKamIyNXpkSEoxWTNSdmNsd2lJSEJ5YjNCbGNuUjVJR2x1SUhsdmRYSWdZR1Y0ZEdWdVpHQWdaR1ZtYVc1cGRHbHZiaWtzSUc5eUlHUmxabUYxYkhSbFpGeHVJQ0FnSUM4dklHSjVJSFZ6SUhSdklITnBiWEJzZVNCallXeHNJSFJvWlNCd1lYSmxiblFuY3lCamIyNXpkSEoxWTNSdmNpNWNiaUFnSUNCcFppQW9jSEp2ZEc5UWNtOXdjeUFtSmlCd2NtOTBiMUJ5YjNCekxtaGhjMDkzYmxCeWIzQmxjblI1S0NkamIyNXpkSEoxWTNSdmNpY3BLU0I3WEc0Z0lDQWdJQ0JqYUdsc1pDQTlJSEJ5YjNSdlVISnZjSE11WTI5dWMzUnlkV04wYjNJN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzhxS2lCQWFXZHViM0psSUNvdlhHNGdJQ0FnSUNCamFHbHNaQ0E5SUdaMWJtTjBhVzl1S0NsN0lIQmhjbVZ1ZEM1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPeUI5TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVsdWFHVnlhWFFnWTJ4aGMzTWdLSE4wWVhScFl5a2djSEp2Y0dWeWRHbGxjeUJtY205dElIQmhjbVZ1ZEM1Y2JpQWdJQ0JRWVhKelpTNWZMbVY0ZEdWdVpDaGphR2xzWkN3Z2NHRnlaVzUwS1R0Y2JseHVJQ0FnSUM4dklGTmxkQ0IwYUdVZ2NISnZkRzkwZVhCbElHTm9ZV2x1SUhSdklHbHVhR1Z5YVhRZ1puSnZiU0JnY0dGeVpXNTBZQ3dnZDJsMGFHOTFkQ0JqWVd4c2FXNW5YRzRnSUNBZ0x5OGdZSEJoY21WdWRHQW5jeUJqYjI1emRISjFZM1J2Y2lCbWRXNWpkR2x2Ymk1Y2JpQWdJQ0JGYlhCMGVVTnZibk4wY25WamRHOXlMbkJ5YjNSdmRIbHdaU0E5SUhCaGNtVnVkQzV3Y205MGIzUjVjR1U3WEc0Z0lDQWdZMmhwYkdRdWNISnZkRzkwZVhCbElEMGdibVYzSUVWdGNIUjVRMjl1YzNSeWRXTjBiM0lvS1R0Y2JseHVJQ0FnSUM4dklFRmtaQ0J3Y205MGIzUjVjR1VnY0hKdmNHVnlkR2xsY3lBb2FXNXpkR0Z1WTJVZ2NISnZjR1Z5ZEdsbGN5a2dkRzhnZEdobElITjFZbU5zWVhOekxGeHVJQ0FnSUM4dklHbG1JSE4xY0hCc2FXVmtMbHh1SUNBZ0lHbG1JQ2h3Y205MGIxQnliM0J6S1NCN1hHNGdJQ0FnSUNCUVlYSnpaUzVmTG1WNGRHVnVaQ2hqYUdsc1pDNXdjbTkwYjNSNWNHVXNJSEJ5YjNSdlVISnZjSE1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVGa1pDQnpkR0YwYVdNZ2NISnZjR1Z5ZEdsbGN5QjBieUIwYUdVZ1kyOXVjM1J5ZFdOMGIzSWdablZ1WTNScGIyNHNJR2xtSUhOMWNIQnNhV1ZrTGx4dUlDQWdJR2xtSUNoemRHRjBhV05RY205d2N5a2dlMXh1SUNBZ0lDQWdVR0Z5YzJVdVh5NWxlSFJsYm1Rb1kyaHBiR1FzSUhOMFlYUnBZMUJ5YjNCektUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkRiM0p5WldOMGJIa2djMlYwSUdOb2FXeGtKM01nWUhCeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNSdmNtQXVYRzRnSUNBZ1kyaHBiR1F1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUlEMGdZMmhwYkdRN1hHNWNiaUFnSUNBdkx5QlRaWFFnWVNCamIyNTJaVzVwWlc1alpTQndjbTl3WlhKMGVTQnBiaUJqWVhObElIUm9aU0J3WVhKbGJuUW5jeUJ3Y205MGIzUjVjR1VnYVhOY2JpQWdJQ0F2THlCdVpXVmtaV1FnYkdGMFpYSXVYRzRnSUNBZ1kyaHBiR1F1WDE5emRYQmxjbDlmSUQwZ2NHRnlaVzUwTG5CeWIzUnZkSGx3WlR0Y2JseHVJQ0FnSUhKbGRIVnliaUJqYUdsc1pEdGNiaUFnZlR0Y2JseHVJQ0F2THlCVFpYUWdkR2hsSUhObGNuWmxjaUJtYjNJZ1VHRnljMlVnZEc4Z2RHRnNheUIwYnk1Y2JpQWdVR0Z5YzJVdWMyVnlkbVZ5VlZKTUlEMGdYQ0pvZEhSd2N6b3ZMMkZ3YVM1d1lYSnpaUzVqYjIxY0lqdGNibHh1SUNBdkx5QkRhR1ZqYXlCM2FHVjBhR1Z5SUhkbElHRnlaU0J5ZFc1dWFXNW5JR2x1SUU1dlpHVXVhbk11WEc0Z0lHbG1JQ2gwZVhCbGIyWW9jSEp2WTJWemN5a2dJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdKaVpjYmlBZ0lDQWdJSEJ5YjJObGMzTXVkbVZ5YzJsdmJuTWdKaVpjYmlBZ0lDQWdJSEJ5YjJObGMzTXVkbVZ5YzJsdmJuTXVibTlrWlNrZ2UxeHVJQ0FnSUZCaGNuTmxMbDlwYzA1dlpHVWdQU0IwY25WbE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU5oYkd3Z2RHaHBjeUJ0WlhSb2IyUWdabWx5YzNRZ2RHOGdjMlYwSUhWd0lIbHZkWElnWVhWMGFHVnVkR2xqWVhScGIyNGdkRzlyWlc1eklHWnZjaUJRWVhKelpTNWNiaUFnSUNvZ1dXOTFJR05oYmlCblpYUWdlVzkxY2lCclpYbHpJR1p5YjIwZ2RHaGxJRVJoZEdFZ1FuSnZkM05sY2lCdmJpQndZWEp6WlM1amIyMHVYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCaGNIQnNhV05oZEdsdmJrbGtJRmx2ZFhJZ1VHRnljMlVnUVhCd2JHbGpZWFJwYjI0Z1NVUXVYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCcVlYWmhVMk55YVhCMFMyVjVJRmx2ZFhJZ1VHRnljMlVnU21GMllWTmpjbWx3ZENCTFpYa3VYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCdFlYTjBaWEpMWlhrZ0tHOXdkR2x2Ym1Gc0tTQlpiM1Z5SUZCaGNuTmxJRTFoYzNSbGNpQkxaWGt1SUNoT2IyUmxMbXB6SUc5dWJIa2hLVnh1SUNBZ0tpOWNiaUFnVUdGeWMyVXVhVzVwZEdsaGJHbDZaU0E5SUdaMWJtTjBhVzl1S0dGd2NHeHBZMkYwYVc5dVNXUXNJR3BoZG1GVFkzSnBjSFJMWlhrc0lHMWhjM1JsY2t0bGVTa2dlMXh1SUNBZ0lHbG1JQ2h0WVhOMFpYSkxaWGtwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRndpVUdGeWMyVXVhVzVwZEdsaGJHbDZaU2dwSUhkaGN5QndZWE56WldRZ1lTQk5ZWE4wWlhJZ1MyVjVMQ0IzYUdsamFDQnBjeUJ2Ym14NUlGd2lJQ3RjYmlBZ0lDQWdJQ0FnWENKaGJHeHZkMlZrSUdaeWIyMGdkMmwwYUdsdUlFNXZaR1V1YW5NdVhDSTdYRzRnSUNBZ2ZWeHVJQ0FnSUZCaGNuTmxMbDlwYm1sMGFXRnNhWHBsS0dGd2NHeHBZMkYwYVc5dVNXUXNJR3BoZG1GVFkzSnBjSFJMWlhrcE8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEWVd4c0lIUm9hWE1nYldWMGFHOWtJR1pwY25OMElIUnZJSE5sZENCMWNDQnRZWE4wWlhJZ1lYVjBhR1Z1ZEdsallYUnBiMjRnZEc5clpXNXpJR1p2Y2lCUVlYSnpaUzVjYmlBZ0lDb2dWR2hwY3lCdFpYUm9iMlFnYVhNZ1ptOXlJRkJoY25ObEozTWdiM2R1SUhCeWFYWmhkR1VnZFhObExseHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWVhCd2JHbGpZWFJwYjI1SlpDQlpiM1Z5SUZCaGNuTmxJRUZ3Y0d4cFkyRjBhVzl1SUVsRUxseHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYW1GMllWTmpjbWx3ZEV0bGVTQlpiM1Z5SUZCaGNuTmxJRXBoZG1GVFkzSnBjSFFnUzJWNUxseHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYldGemRHVnlTMlY1SUZsdmRYSWdVR0Z5YzJVZ1RXRnpkR1Z5SUV0bGVTNWNiaUFnSUNvdlhHNGdJRkJoY25ObExsOXBibWwwYVdGc2FYcGxJRDBnWm5WdVkzUnBiMjRvWVhCd2JHbGpZWFJwYjI1SlpDd2dhbUYyWVZOamNtbHdkRXRsZVN3Z2JXRnpkR1Z5UzJWNUtTQjdYRzRnSUNBZ1VHRnljMlV1WVhCd2JHbGpZWFJwYjI1SlpDQTlJR0Z3Y0d4cFkyRjBhVzl1U1dRN1hHNGdJQ0FnVUdGeWMyVXVhbUYyWVZOamNtbHdkRXRsZVNBOUlHcGhkbUZUWTNKcGNIUkxaWGs3WEc0Z0lDQWdVR0Z5YzJVdWJXRnpkR1Z5UzJWNUlEMGdiV0Z6ZEdWeVMyVjVPMXh1SUNBZ0lGQmhjbk5sTGw5MWMyVk5ZWE4wWlhKTFpYa2dQU0JtWVd4elpUdGNiaUFnZlR0Y2JseHVJQ0F2THlCSlppQjNaU2R5WlNCeWRXNXVhVzVuSUdsdUlHNXZaR1V1YW5Nc0lHRnNiRzkzSUhWemFXNW5JSFJvWlNCdFlYTjBaWElnYTJWNUxseHVJQ0JwWmlBb1VHRnljMlV1WDJselRtOWtaU2tnZTF4dUlDQWdJRkJoY25ObExtbHVhWFJwWVd4cGVtVWdQU0JRWVhKelpTNWZhVzVwZEdsaGJHbDZaVHRjYmx4dUlDQWdJRkJoY25ObExrTnNiM1ZrSUQwZ1VHRnljMlV1UTJ4dmRXUWdmSHdnZTMwN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UzZHBkR05vWlhNZ2RHaGxJRkJoY25ObElGTkVTeUIwYnlCMWMybHVaeUIwYUdVZ1RXRnpkR1Z5SUd0bGVTNGdJRlJvWlNCTllYTjBaWElnYTJWNUlHZHlZVzUwYzF4dUlDQWdJQ0FxSUhCeWFYWmxiR1ZuWldRZ1lXTmpaWE56SUhSdklIUm9aU0JrWVhSaElHbHVJRkJoY25ObElHRnVaQ0JqWVc0Z1ltVWdkWE5sWkNCMGJ5QmllWEJoYzNNZ1FVTk1jeUJoYm1SY2JpQWdJQ0FnS2lCdmRHaGxjaUJ5WlhOMGNtbGpkR2x2Ym5NZ2RHaGhkQ0JoY21VZ1lYQndiR2xsWkNCMGJ5QjBhR1VnWTJ4cFpXNTBJRk5FUzNNdVhHNGdJQ0FnSUNvZ1BIQStQSE4wY205dVp6NDhaVzArUVhaaGFXeGhZbXhsSUdsdUlFTnNiM1ZrSUVOdlpHVWdZVzVrSUU1dlpHVXVhbk1nYjI1c2VTNDhMMlZ0UGp3dmMzUnliMjVuUGx4dUlDQWdJQ0FxSUR3dmNENWNiaUFnSUNBZ0tpOWNiaUFnSUNCUVlYSnpaUzVEYkc5MVpDNTFjMlZOWVhOMFpYSkxaWGtnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lGQmhjbk5sTGw5MWMyVk5ZWE4wWlhKTFpYa2dQU0IwY25WbE8xeHVJQ0FnSUgwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QndjbVZtYVhnZ1ptOXlJRk4wYjNKaFoyVWdhMlY1Y3lCMWMyVmtJR0o1SUhSb2FYTWdhVzV6ZEdGdVkyVWdiMllnVUdGeWMyVXVYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCd1lYUm9JRlJvWlNCeVpXeGhkR2wyWlNCemRXWm1hWGdnZEc4Z1lYQndaVzVrSUhSdklHbDBMbHh1SUNBZ0tpQWdJQ0FnYm5Wc2JDQnZjaUIxYm1SbFptbHVaV1FnYVhNZ2RISmxZWFJsWkNCaGN5QjBhR1VnWlcxd2RIa2djM1J5YVc1bkxseHVJQ0FnS2lCQWNtVjBkWEp1SUh0VGRISnBibWQ5SUZSb1pTQm1kV3hzSUd0bGVTQnVZVzFsTGx4dUlDQWdLaTljYmlBZ1VHRnljMlV1WDJkbGRGQmhjbk5sVUdGMGFDQTlJR1oxYm1OMGFXOXVLSEJoZEdncElIdGNiaUFnSUNCcFppQW9JVkJoY25ObExtRndjR3hwWTJGMGFXOXVTV1FwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRndpV1c5MUlHNWxaV1FnZEc4Z1kyRnNiQ0JRWVhKelpTNXBibWwwYVdGc2FYcGxJR0psWm05eVpTQjFjMmx1WnlCUVlYSnpaUzVjSWp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0NGd1lYUm9LU0I3WEc0Z0lDQWdJQ0J3WVhSb0lEMGdYQ0pjSWp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0NGUVlYSnpaUzVmTG1selUzUnlhVzVuS0hCaGRHZ3BLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QmNJbFJ5YVdWa0lIUnZJR2RsZENCaElGTjBiM0poWjJVZ2NHRjBhQ0IwYUdGMElIZGhjMjRuZENCaElGTjBjbWx1Wnk1Y0lqdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIQmhkR2hiTUYwZ1BUMDlJRndpTDF3aUtTQjdYRzRnSUNBZ0lDQndZWFJvSUQwZ2NHRjBhQzV6ZFdKemRISnBibWNvTVNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmNJbEJoY25ObEwxd2lJQ3NnVUdGeWMyVXVZWEJ3YkdsallYUnBiMjVKWkNBcklGd2lMMXdpSUNzZ2NHRjBhRHRjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCaElGQnliMjFwYzJVZ2RHaGhkQ0JwY3lCeVpYTnZiSFpsWkNCM2FYUm9JSFJvWlNCMWJtbHhkV1VnYzNSeWFXNW5JR1p2Y2lCMGFHbHpJR0Z3Y0NCdmJseHVJQ0FnS2lCMGFHbHpJRzFoWTJocGJtVXVYRzRnSUNBcUlFZGxkSE1nY21WelpYUWdkMmhsYmlCVGRHOXlZV2RsSUdseklHTnNaV0Z5WldRdVhHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1ZmFXNXpkR0ZzYkdGMGFXOXVTV1FnUFNCdWRXeHNPMXh1SUNCUVlYSnpaUzVmWjJWMFNXNXpkR0ZzYkdGMGFXOXVTV1FnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBdkx5QlRaV1VnYVdZZ2FYUW5jeUJqWVdOb1pXUWdhVzRnVWtGTkxseHVJQ0FnSUdsbUlDaFFZWEp6WlM1ZmFXNXpkR0ZzYkdGMGFXOXVTV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJRWVhKelpTNVFjbTl0YVhObExtRnpLRkJoY25ObExsOXBibk4wWVd4c1lYUnBiMjVKWkNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1ZISjVJSFJ2SUdkbGRDQnBkQ0JtY205dElGTjBiM0poWjJVdVhHNGdJQ0FnZG1GeUlIQmhkR2dnUFNCUVlYSnpaUzVmWjJWMFVHRnljMlZRWVhSb0tGd2lhVzV6ZEdGc2JHRjBhVzl1U1dSY0lpazdYRzRnSUNBZ2NtVjBkWEp1SUNoUVlYSnpaUzVUZEc5eVlXZGxMbWRsZEVsMFpXMUJjM2x1WXlod1lYUm9LVnh1SUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ1VHRnljMlV1WDJsdWMzUmhiR3hoZEdsdmJrbGtJRDBnZG1Gc2RXVTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRlFZWEp6WlM1ZmFXNXpkR0ZzYkdGMGFXOXVTV1FnZkh3Z1VHRnljMlV1WDJsdWMzUmhiR3hoZEdsdmJrbGtJRDA5UFNCY0lsd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdTWFFnZDJGemJpZDBJR2x1SUZOMGIzSmhaMlVzSUhOdklHTnlaV0YwWlNCaElHNWxkeUJ2Ym1VdVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdobGVFOWpkR1YwSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JOWVhSb0xtWnNiMjl5S0NneEswMWhkR2d1Y21GdVpHOXRLQ2twS2pCNE1UQXdNREFwTG5SdlUzUnlhVzVuS0RFMktTNXpkV0p6ZEhKcGJtY29NU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQlFZWEp6WlM1ZmFXNXpkR0ZzYkdGMGFXOXVTV1FnUFNBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWlhoUFkzUmxkQ2dwSUNzZ2FHVjRUMk4wWlhRb0tTQXJJRndpTFZ3aUlDdGNiaUFnSUNBZ0lDQWdJQ0FnSUdobGVFOWpkR1YwS0NrZ0t5QmNJaTFjSWlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWlhoUFkzUmxkQ2dwSUNzZ1hDSXRYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdhR1Y0VDJOMFpYUW9LU0FySUZ3aUxWd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGxlRTlqZEdWMEtDa2dLeUJvWlhoUFkzUmxkQ2dwSUNzZ2FHVjRUMk4wWlhRb0tTazdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJoY25ObExsTjBiM0poWjJVdWMyVjBTWFJsYlVGemVXNWpLSEJoZEdnc0lGQmhjbk5sTGw5cGJuTjBZV3hzWVhScGIyNUpaQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1VUhKdmJXbHpaUzVoY3loUVlYSnpaUzVmYVc1emRHRnNiR0YwYVc5dVNXUXBPMXh1SUNBZ0lDQWdmU2xjYmlBZ0lDQXBPMXh1SUNCOU8xeHVYRzRnSUZCaGNuTmxMbDl3WVhKelpVUmhkR1VnUFNCbWRXNWpkR2x2YmlocGMyODROakF4S1NCN1hHNGdJQ0FnZG1GeUlISmxaMlY0Y0NBOUlHNWxkeUJTWldkRmVIQW9YRzRnSUNBZ0lDQmNJbDRvV3pBdE9WMTdNU3cwZlNrdEtGc3dMVGxkZXpFc01uMHBMU2hiTUMwNVhYc3hMREo5S1Z3aUlDc2dYQ0pVWENJZ0sxeHVJQ0FnSUNBZ1hDSW9XekF0T1YxN01Td3lmU2s2S0Zzd0xUbGRlekVzTW4wcE9paGJNQzA1WFhzeExESjlLVndpSUN0Y2JpQWdJQ0FnSUZ3aUtDNG9XekF0T1YwcktTay9YQ0lnS3lCY0lsb2tYQ0lwTzF4dUlDQWdJSFpoY2lCdFlYUmphQ0E5SUhKbFoyVjRjQzVsZUdWaktHbHpiemcyTURFcE8xeHVJQ0FnSUdsbUlDZ2hiV0YwWTJncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUI1WldGeUlEMGdiV0YwWTJoYk1WMGdmSHdnTUR0Y2JpQWdJQ0IyWVhJZ2JXOXVkR2dnUFNBb2JXRjBZMmhiTWwwZ2ZId2dNU2tnTFNBeE8xeHVJQ0FnSUhaaGNpQmtZWGtnUFNCdFlYUmphRnN6WFNCOGZDQXdPMXh1SUNBZ0lIWmhjaUJvYjNWeUlEMGdiV0YwWTJoYk5GMGdmSHdnTUR0Y2JpQWdJQ0IyWVhJZ2JXbHVkWFJsSUQwZ2JXRjBZMmhiTlYwZ2ZId2dNRHRjYmlBZ0lDQjJZWElnYzJWamIyNWtJRDBnYldGMFkyaGJObDBnZkh3Z01EdGNiaUFnSUNCMllYSWdiV2xzYkdrZ1BTQnRZWFJqYUZzNFhTQjhmQ0F3TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCRVlYUmxLRVJoZEdVdVZWUkRLSGxsWVhJc0lHMXZiblJvTENCa1lYa3NJR2h2ZFhJc0lHMXBiblYwWlN3Z2MyVmpiMjVrTENCdGFXeHNhU2twTzF4dUlDQjlPMXh1WEc0Z0lGQmhjbk5sTGw5aGFtRjRTVVU0SUQwZ1puVnVZM1JwYjI0b2JXVjBhRzlrTENCMWNtd3NJR1JoZEdFcElIdGNiaUFnSUNCMllYSWdjSEp2YldselpTQTlJRzVsZHlCUVlYSnpaUzVRY205dGFYTmxLQ2s3WEc0Z0lDQWdkbUZ5SUhoa2NpQTlJRzVsZHlCWVJHOXRZV2x1VW1WeGRXVnpkQ2dwTzF4dUlDQWdJSGhrY2k1dmJteHZZV1FnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJ5WlhOd2IyNXpaVHRjYmlBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lISmxjM0J2Ym5ObElEMGdTbE5QVGk1d1lYSnpaU2g0WkhJdWNtVnpjRzl1YzJWVVpYaDBLVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ2NISnZiV2x6WlM1eVpXcGxZM1FvWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9jbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJQ0FnY0hKdmJXbHpaUzV5WlhOdmJIWmxLSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lIaGtjaTV2Ym1WeWNtOXlJRDBnZUdSeUxtOXVkR2x0Wlc5MWRDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnTHk4Z1RHVjBKM01nWm1GclpTQmhJSEpsWVd3Z1pYSnliM0lnYldWemMyRm5aUzVjYmlBZ0lDQWdJSFpoY2lCbVlXdGxVbVZ6Y0c5dWMyVWdQU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzQnZibk5sVkdWNGREb2dTbE5QVGk1emRISnBibWRwWm5rb2UxeHVJQ0FnSUNBZ0lDQWdJR052WkdVNklGQmhjbk5sTGtWeWNtOXlMbGhmUkU5TlFVbE9YMUpGVVZWRlUxUXNYRzRnSUNBZ0lDQWdJQ0FnWlhKeWIzSTZJRndpU1VVbmN5QllSRzl0WVdsdVVtVnhkV1Z6ZENCa2IyVnpJRzV2ZENCemRYQndiSGtnWlhKeWIzSWdhVzVtYnk1Y0lseHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVjbVZxWldOMEtHWmhhMlZTWlhOd2IyNXpaU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQjRaSEl1YjI1d2NtOW5jbVZ6Y3lBOUlHWjFibU4wYVc5dUtDa2dlMzA3WEc0Z0lDQWdlR1J5TG05d1pXNG9iV1YwYUc5a0xDQjFjbXdwTzF4dUlDQWdJSGhrY2k1elpXNWtLR1JoZEdFcE8xeHVJQ0FnSUhKbGRIVnliaUJ3Y205dGFYTmxPMXh1SUNCOU8xeHVYRzRnSUZCaGNuTmxMbDkxYzJWWVJHOXRZV2x1VW1WeGRXVnpkQ0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZb1dFUnZiV0ZwYmxKbGNYVmxjM1FwSUNFOVBTQmNJblZ1WkdWbWFXNWxaRndpS1NCN1hHNGdJQ0FnSUNBdkx5QlhaU2R5WlNCcGJpQkpSU0E0S3k1Y2JpQWdJQ0FnSUdsbUlDZ25kMmwwYUVOeVpXUmxiblJwWVd4ekp5QnBiaUJ1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1FvS1NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJYWlNkeVpTQnBiaUJKUlNBeE1Dc3VYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDA3WEc1Y2JpQWdMeThnVkU5RVR5aHJiR2x0ZENrNklFZGxkQ0J5YVdRZ2IyWWdjM1ZqWTJWemN5OWxjbkp2Y2lCMWMyRm5aU0JwYmlCM1pXSnphWFJsTGx4dUlDQlFZWEp6WlM1ZllXcGhlQ0E5SUdaMWJtTjBhVzl1S0cxbGRHaHZaQ3dnZFhKc0xDQmtZWFJoTENCemRXTmpaWE56TENCbGNuSnZjaWtnZTF4dUlDQWdJSFpoY2lCdmNIUnBiMjV6SUQwZ2UxeHVJQ0FnSUNBZ2MzVmpZMlZ6Y3pvZ2MzVmpZMlZ6Y3l4Y2JpQWdJQ0FnSUdWeWNtOXlPaUJsY25KdmNseHVJQ0FnSUgwN1hHNWNiaUFnSUNCcFppQW9VR0Z5YzJVdVgzVnpaVmhFYjIxaGFXNVNaWEYxWlhOMEtDa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQlFZWEp6WlM1ZllXcGhlRWxGT0NodFpYUm9iMlFzSUhWeWJDd2daR0YwWVNrdVgzUm9aVzVTZFc1RFlXeHNZbUZqYTNNb2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlIQnliMjFwYzJVZ1BTQnVaWGNnVUdGeWMyVXVVSEp2YldselpTZ3BPMXh1SUNBZ0lIWmhjaUJoZEhSbGJYQjBjeUE5SURBN1hHNWNiaUFnSUNCMllYSWdaR2x6Y0dGMFkyZ2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQm9ZVzVrYkdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNCMllYSWdlR2h5SUQwZ2JtVjNJRkJoY25ObExsaE5URWgwZEhCU1pYRjFaWE4wS0NrN1hHNWNiaUFnSUNBZ0lIaG9jaTV2Ym5KbFlXUjVjM1JoZEdWamFHRnVaMlVnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hob2NpNXlaV0ZrZVZOMFlYUmxJRDA5UFNBMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHaGhibVJzWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFpDQTlJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2VHaHlMbk4wWVhSMWN5QStQU0F5TURBZ0ppWWdlR2h5TG5OMFlYUjFjeUE4SURNd01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYzNCdmJuTmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6Y0c5dWMyVWdQU0JLVTA5T0xuQmhjbk5sS0hob2NpNXlaWE53YjI1elpWUmxlSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205dGFYTmxMbkpsYW1WamRDaGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl0YVhObExuSmxjMjlzZG1Vb2NtVnpjRzl1YzJVc0lIaG9jaTV6ZEdGMGRYTXNJSGhvY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDRhSEl1YzNSaGRIVnpJRDQ5SURVd01Da2dleUF2THlCU1pYUnllU0J2YmlBMVdGaGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ3JLMkYwZEdWdGNIUnpJRHdnTlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkZlSEJ2Ym1WdWRHbGhiR3g1TFdkeWIzZHBibWNnWkdWc1lYbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsYkdGNUlEMGdUV0YwYUM1eWIzVnVaQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JOWVhSb0xuSmhibVJ2YlNncElDb2dNVEkxSUNvZ1RXRjBhQzV3YjNjb01pd2dZWFIwWlcxd2RITXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRlJwYldWdmRYUW9aR2x6Y0dGMFkyZ3NJR1JsYkdGNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVGbWRHVnlJRFVnY21WMGNtbGxjeXdnWm1GcGJGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXRhWE5sTG5KbGFtVmpkQ2g0YUhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y205dGFYTmxMbkpsYW1WamRDaDRhSElwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnZUdoeUxtOXdaVzRvYldWMGFHOWtMQ0IxY213c0lIUnlkV1VwTzF4dUlDQWdJQ0FnZUdoeUxuTmxkRkpsY1hWbGMzUklaV0ZrWlhJb0owTnZiblJsYm5RdFZIbHdaU2NzSUNkMFpYaDBMM0JzWVdsdUp5azdJQ0F2THlCaGRtOXBaQ0J3Y21VdFpteHBaMmgwTGx4dUlDQWdJQ0FnYVdZZ0tGQmhjbk5sTGw5cGMwNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdRV1JrSUdFZ2MzQmxZMmxoYkNCMWMyVnlJR0ZuWlc1MElHcDFjM1FnWm05eUlISmxjWFZsYzNRZ1puSnZiU0J1YjJSbExtcHpMbHh1SUNBZ0lDQWdJQ0I0YUhJdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2loY0lsVnpaWEl0UVdkbGJuUmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSlFZWEp6WlM5Y0lpQXJJRkJoY25ObExsWkZVbE5KVDA0Z0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWlBb1RtOWtaVXBUSUZ3aUlDc2djSEp2WTJWemN5NTJaWEp6YVc5dWN5NXViMlJsSUNzZ1hDSXBYQ0lwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZUdoeUxuTmxibVFvWkdGMFlTazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHUnBjM0JoZEdOb0tDazdYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyMXBjMlV1WDNSb1pXNVNkVzVEWVd4c1ltRmphM01vYjNCMGFXOXVjeWs3SUZ4dUlDQjlPMXh1WEc0Z0lDOHZJRUVnYzJWc1ppMXdjbTl3WVdkaGRHbHVaeUJsZUhSbGJtUWdablZ1WTNScGIyNHVYRzRnSUZCaGNuTmxMbDlsZUhSbGJtUWdQU0JtZFc1amRHbHZiaWh3Y205MGIxQnliM0J6TENCamJHRnpjMUJ5YjNCektTQjdYRzRnSUNBZ2RtRnlJR05vYVd4a0lEMGdhVzVvWlhKcGRITW9kR2hwY3l3Z2NISnZkRzlRY205d2N5d2dZMnhoYzNOUWNtOXdjeWs3WEc0Z0lDQWdZMmhwYkdRdVpYaDBaVzVrSUQwZ2RHaHBjeTVsZUhSbGJtUTdYRzRnSUNBZ2NtVjBkWEp1SUdOb2FXeGtPMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCUGNIUnBiMjV6T2x4dUlDQWdLaUFnSUhKdmRYUmxPaUJwY3lCamJHRnpjMlZ6TENCMWMyVnljeXdnYkc5bmFXNHNJR1YwWXk1Y2JpQWdJQ29nSUNCdlltcGxZM1JKWkRvZ2JuVnNiQ0JwWmlCMGFHVnlaU0JwY3lCdWJ5QmhjM052WTJsaGRHVmtJRzlpYW1WamRFbGtMbHh1SUNBZ0tpQWdJRzFsZEdodlpEb2dkR2hsSUdoMGRIQWdiV1YwYUc5a0lHWnZjaUIwYUdVZ1VrVlRWQ0JCVUVrdVhHNGdJQ0FxSUNBZ1pHRjBZVTlpYW1WamREb2dkR2hsSUhCaGVXeHZZV1FnWVhNZ1lXNGdiMkpxWldOMExDQnZjaUJ1ZFd4c0lHbG1JSFJvWlhKbElHbHpJRzV2Ym1VdVhHNGdJQ0FxSUNBZ2RYTmxUV0Z6ZEdWeVMyVjVPaUJ2ZG1WeWNtbGtaWE1nZDJobGRHaGxjaUIwYnlCMWMyVWdkR2hsSUcxaGMzUmxjaUJyWlhrZ2FXWWdjMlYwTGx4dUlDQWdLaUJBYVdkdWIzSmxYRzRnSUNBcUwxeHVJQ0JRWVhKelpTNWZjbVZ4ZFdWemRDQTlJR1oxYm1OMGFXOXVLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQjJZWElnY205MWRHVWdQU0J2Y0hScGIyNXpMbkp2ZFhSbE8xeHVJQ0FnSUhaaGNpQmpiR0Z6YzA1aGJXVWdQU0J2Y0hScGIyNXpMbU5zWVhOelRtRnRaVHRjYmlBZ0lDQjJZWElnYjJKcVpXTjBTV1FnUFNCdmNIUnBiMjV6TG05aWFtVmpkRWxrTzF4dUlDQWdJSFpoY2lCdFpYUm9iMlFnUFNCdmNIUnBiMjV6TG0xbGRHaHZaRHRjYmlBZ0lDQjJZWElnZFhObFRXRnpkR1Z5UzJWNUlEMGdiM0IwYVc5dWN5NTFjMlZOWVhOMFpYSkxaWGs3WEc0Z0lDQWdkbUZ5SUhObGMzTnBiMjVVYjJ0bGJpQTlJRzl3ZEdsdmJuTXVjMlZ6YzJsdmJsUnZhMlZ1TzF4dUlDQWdJSFpoY2lCa1lYUmhUMkpxWldOMElEMGdiM0IwYVc5dWN5NWtZWFJoTzF4dVhHNGdJQ0FnYVdZZ0tDRlFZWEp6WlM1aGNIQnNhV05oZEdsdmJrbGtLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QmNJbGx2ZFNCdGRYTjBJSE53WldOcFpua2dlVzkxY2lCaGNIQnNhV05oZEdsdmJrbGtJSFZ6YVc1bklGQmhjbk5sTG1sdWFYUnBZV3hwZW1VdVhDSTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLQ0ZRWVhKelpTNXFZWFpoVTJOeWFYQjBTMlY1SUNZbUlDRlFZWEp6WlM1dFlYTjBaWEpMWlhrcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUZ3aVdXOTFJRzExYzNRZ2MzQmxZMmxtZVNCaElHdGxlU0IxYzJsdVp5QlFZWEp6WlM1cGJtbDBhV0ZzYVhwbExsd2lPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRlJQUkU4NklGZGxJR05oYmlCeVpXMXZkbVVnZEdocGN5QmphR1ZqYXlCc1lYUmxjaXdnWW5WMElHbDBKM01nZFhObFpuVnNJR1p2Y2lCa1pYWmxiRzl3YldWdWRDNWNiaUFnSUNCcFppQW9jbTkxZEdVZ0lUMDlJRndpWW1GMFkyaGNJaUFtSmx4dUlDQWdJQ0FnSUNCeWIzVjBaU0FoUFQwZ1hDSmpiR0Z6YzJWelhDSWdKaVpjYmlBZ0lDQWdJQ0FnY205MWRHVWdJVDA5SUZ3aVpYWmxiblJ6WENJZ0ppWmNiaUFnSUNBZ0lDQWdjbTkxZEdVZ0lUMDlJRndpWm1sc1pYTmNJaUFtSmx4dUlDQWdJQ0FnSUNCeWIzVjBaU0FoUFQwZ1hDSm1kVzVqZEdsdmJuTmNJaUFtSmx4dUlDQWdJQ0FnSUNCeWIzVjBaU0FoUFQwZ1hDSnNiMmRwYmx3aUlDWW1YRzRnSUNBZ0lDQWdJSEp2ZFhSbElDRTlQU0JjSW14dloyOTFkRndpSUNZbVhHNGdJQ0FnSUNBZ0lISnZkWFJsSUNFOVBTQmNJbkIxYzJoY0lpQW1KbHh1SUNBZ0lDQWdJQ0J5YjNWMFpTQWhQVDBnWENKeVpYRjFaWE4wVUdGemMzZHZjbVJTWlhObGRGd2lJQ1ltWEc0Z0lDQWdJQ0FnSUhKdmRYUmxJQ0U5UFNCY0luSmxjM1JmZG1WeWFXWjVYMkZ1WVd4NWRHbGpjMXdpSUNZbVhHNGdJQ0FnSUNBZ0lISnZkWFJsSUNFOVBTQmNJblZ6WlhKelhDSWdKaVpjYmlBZ0lDQWdJQ0FnY205MWRHVWdJVDA5SUZ3aWFtOWljMXdpSUNZbVhHNGdJQ0FnSUNBZ0lISnZkWFJsSUNFOVBTQmNJbU52Ym1acFoxd2lJQ1ltWEc0Z0lDQWdJQ0FnSUhKdmRYUmxJQ0U5UFNCY0luTmxjM05wYjI1elhDSWdKaVpjYmlBZ0lDQWdJQ0FnY205MWRHVWdJVDA5SUZ3aWRYQm5jbUZrWlZSdlVtVjJiMk5oWW14bFUyVnpjMmx2Ymx3aUtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCY0lrSmhaQ0J5YjNWMFpUb2dKMXdpSUNzZ2NtOTFkR1VnS3lCY0lpY3VYQ0k3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUhWeWJDQTlJRkJoY25ObExuTmxjblpsY2xWU1REdGNiaUFnSUNCcFppQW9kWEpzTG1Ob1lYSkJkQ2gxY213dWJHVnVaM1JvSUMwZ01Ta2dJVDA5SUZ3aUwxd2lLU0I3WEc0Z0lDQWdJQ0IxY213Z0t6MGdYQ0l2WENJN1hHNGdJQ0FnZlZ4dUlDQWdJSFZ5YkNBclBTQmNJakV2WENJZ0t5QnliM1YwWlR0Y2JpQWdJQ0JwWmlBb1kyeGhjM05PWVcxbEtTQjdYRzRnSUNBZ0lDQjFjbXdnS3owZ1hDSXZYQ0lnS3lCamJHRnpjMDVoYldVN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNodlltcGxZM1JKWkNrZ2UxeHVJQ0FnSUNBZ2RYSnNJQ3M5SUZ3aUwxd2lJQ3NnYjJKcVpXTjBTV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaR0YwWVU5aWFtVmpkQ0E5SUZCaGNuTmxMbDh1WTJ4dmJtVW9aR0YwWVU5aWFtVmpkQ0I4ZkNCN2ZTazdYRzRnSUNBZ2FXWWdLRzFsZEdodlpDQWhQVDBnWENKUVQxTlVYQ0lwSUh0Y2JpQWdJQ0FnSUdSaGRHRlBZbXBsWTNRdVgyMWxkR2h2WkNBOUlHMWxkR2h2WkR0Y2JpQWdJQ0FnSUcxbGRHaHZaQ0E5SUZ3aVVFOVRWRndpTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoUVlYSnpaUzVmTG1selZXNWtaV1pwYm1Wa0tIVnpaVTFoYzNSbGNrdGxlU2twSUh0Y2JpQWdJQ0FnSUhWelpVMWhjM1JsY2t0bGVTQTlJRkJoY25ObExsOTFjMlZOWVhOMFpYSkxaWGs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaR0YwWVU5aWFtVmpkQzVmUVhCd2JHbGpZWFJwYjI1SlpDQTlJRkJoY25ObExtRndjR3hwWTJGMGFXOXVTV1E3WEc0Z0lDQWdhV1lnS0NGMWMyVk5ZWE4wWlhKTFpYa3BJSHRjYmlBZ0lDQWdJR1JoZEdGUFltcGxZM1F1WDBwaGRtRlRZM0pwY0hSTFpYa2dQU0JRWVhKelpTNXFZWFpoVTJOeWFYQjBTMlY1TzF4dUlDQWdJSDBnWld4elpTQnBaaUFvSVZCaGNuTmxMbTFoYzNSbGNrdGxlU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2REWVc1dWIzUWdkWE5sSUhSb1pTQk5ZWE4wWlhJZ1MyVjVMQ0JwZENCb1lYTWdibTkwSUdKbFpXNGdjSEp2ZG1sa1pXUXVKeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHUmhkR0ZQWW1wbFkzUXVYMDFoYzNSbGNrdGxlU0E5SUZCaGNuTmxMbTFoYzNSbGNrdGxlVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmtZWFJoVDJKcVpXTjBMbDlEYkdsbGJuUldaWEp6YVc5dUlEMGdVR0Z5YzJVdVZrVlNVMGxQVGp0Y2JseHVJQ0FnSUhKbGRIVnliaUJRWVhKelpTNWZaMlYwU1c1emRHRnNiR0YwYVc5dVNXUW9LUzUwYUdWdUtHWjFibU4wYVc5dUtHbHBaQ2tnZTF4dUlDQWdJQ0FnWkdGMFlVOWlhbVZqZEM1ZlNXNXpkR0ZzYkdGMGFXOXVTV1FnUFNCcGFXUTdYRzVjYmlBZ0lDQWdJR2xtSUNoelpYTnphVzl1Vkc5clpXNHBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRkJoY25ObExsQnliMjFwYzJVdVlYTW9leUJmYzJWemMybHZibFJ2YTJWdU9pQnpaWE56YVc5dVZHOXJaVzRnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9JVkJoY25ObExsVnpaWEl1WDJOaGJsVnpaVU4xY25KbGJuUlZjMlZ5S0NrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQmhjbk5sTGxCeWIyMXBjMlV1WVhNb2JuVnNiQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJRWVhKelpTNVZjMlZ5TGw5amRYSnlaVzUwUVhONWJtTW9LVHRjYmlBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtHTjFjbkpsYm5SVmMyVnlLU0I3WEc0Z0lDQWdJQ0JwWmlBb1kzVnljbVZ1ZEZWelpYSWdKaVlnWTNWeWNtVnVkRlZ6WlhJdVgzTmxjM05wYjI1VWIydGxiaWtnZTF4dUlDQWdJQ0FnSUNCa1lYUmhUMkpxWldOMExsOVRaWE56YVc5dVZHOXJaVzRnUFNCamRYSnlaVzUwVlhObGNpNWZjMlZ6YzJsdmJsUnZhMlZ1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9VR0Z5YzJVdVZYTmxjaTVmYVhOU1pYWnZZMkZpYkdWVFpYTnphVzl1Ulc1aFlteGxaQ2tnZTF4dUlDQWdJQ0FnSUNCa1lYUmhUMkpxWldOMExsOVNaWFp2WTJGaWJHVlRaWE56YVc5dUlEMGdKekVuTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMllYSWdaR0YwWVNBOUlFcFRUMDR1YzNSeWFXNW5hV1o1S0dSaGRHRlBZbXBsWTNRcE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1WDJGcVlYZ29iV1YwYUc5a0xDQjFjbXdzSUdSaGRHRXBPMXh1SUNBZ0lIMHBMblJvWlc0b2JuVnNiQ3dnWm5WdVkzUnBiMjRvY21WemNHOXVjMlVwSUh0Y2JpQWdJQ0FnSUM4dklGUnlZVzV6Wm05eWJTQjBhR1VnWlhKeWIzSWdhVzUwYnlCaGJpQnBibk4wWVc1alpTQnZaaUJRWVhKelpTNUZjbkp2Y2lCaWVTQjBjbmxwYm1jZ2RHOGdjR0Z5YzJWY2JpQWdJQ0FnSUM4dklIUm9aU0JsY25KdmNpQnpkSEpwYm1jZ1lYTWdTbE5QVGk1Y2JpQWdJQ0FnSUhaaGNpQmxjbkp2Y2p0Y2JpQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpTQW1KaUJ5WlhOd2IyNXpaUzV5WlhOd2IyNXpaVlJsZUhRcElIdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnWlhKeWIzSktVMDlPSUQwZ1NsTlBUaTV3WVhKelpTaHlaWE53YjI1elpTNXlaWE53YjI1elpWUmxlSFFwTzF4dUlDQWdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2JtVjNJRkJoY25ObExrVnljbTl5S0dWeWNtOXlTbE5QVGk1amIyUmxMQ0JsY25KdmNrcFRUMDR1WlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2QyVWdabUZwYkNCMGJ5QndZWEp6WlNCMGFHVWdaWEp5YjNJZ2RHVjRkQ3dnZEdoaGRDZHpJRzlyWVhrdVhHNGdJQ0FnSUNBZ0lDQWdaWEp5YjNJZ1BTQnVaWGNnVUdGeWMyVXVSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUZCaGNuTmxMa1Z5Y205eUxrbE9Wa0ZNU1VSZlNsTlBUaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0pTWldObGFYWmxaQ0JoYmlCbGNuSnZjaUIzYVhSb0lHbHVkbUZzYVdRZ1NsTlBUaUJtY205dElGQmhjbk5sT2lCY0lpQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOd2IyNXpaUzV5WlhOd2IyNXpaVlJsZUhRcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlHNWxkeUJRWVhKelpTNUZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJRkJoY25ObExrVnljbTl5TGtOUFRrNUZRMVJKVDA1ZlJrRkpURVZFTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0pZVFV4SWRIUndVbVZ4ZFdWemRDQm1ZV2xzWldRNklGd2lJQ3NnU2xOUFRpNXpkSEpwYm1kcFpua29jbVZ6Y0c5dWMyVXBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJQzh2SUVKNUlHVjRjR3hwWTJsMGJIa2djbVYwZFhKdWFXNW5JR0VnY21WcVpXTjBaV1FnVUhKdmJXbHpaU3dnZEdocGN5QjNhV3hzSUhkdmNtc2dkMmwwYUZ4dUlDQWdJQ0FnTHk4Z1pXbDBhR1Z5SUdwUmRXVnllU0J2Y2lCUWNtOXRhWE5sY3k5QklITmxiV0Z1ZEdsamN5NWNiaUFnSUNBZ0lISmxkSFZ5YmlCUVlYSnpaUzVRY205dGFYTmxMbVZ5Y205eUtHVnljbTl5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJJWld4d1pYSWdablZ1WTNScGIyNGdkRzhnWjJWMElHRWdkbUZzZFdVZ1puSnZiU0JoSUVKaFkydGliMjVsSUc5aWFtVmpkQ0JoY3lCaElIQnliM0JsY25SNVhHNGdJQzh2SUc5eUlHRnpJR0VnWm5WdVkzUnBiMjR1WEc0Z0lGQmhjbk5sTGw5blpYUldZV3gxWlNBOUlHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z2NISnZjQ2tnZTF4dUlDQWdJR2xtSUNnaEtHOWlhbVZqZENBbUppQnZZbXBsWTNSYmNISnZjRjBwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRkJoY25ObExsOHVhWE5HZFc1amRHbHZiaWh2WW1wbFkzUmJjSEp2Y0YwcElEOGdiMkpxWldOMFczQnliM0JkS0NrZ09pQnZZbXBsWTNSYmNISnZjRjA3WEc0Z0lIMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnZiblpsY25SeklHRWdkbUZzZFdVZ2FXNGdZU0JRWVhKelpTQlBZbXBsWTNRZ2FXNTBieUIwYUdVZ1lYQndjbTl3Y21saGRHVWdjbVZ3Y21WelpXNTBZWFJwYjI0dVhHNGdJQ0FxSUZSb2FYTWdhWE1nZEdobElFcFRJR1Z4ZFdsMllXeGxiblFnYjJZZ1NtRjJZU2R6SUZCaGNuTmxMbTFoZVdKbFVtVm1aWEpsYm1ObFFXNWtSVzVqYjJSbEtFOWlhbVZqZENsY2JpQWdJQ29nYVdZZ2MyVmxiazlpYW1WamRITWdhWE1nWm1Gc2MyVjVMaUJQZEdobGNuZHBjMlVnWVc1NUlGQmhjbk5sTGs5aWFtVmpkSE1nYm05MElHbHVYRzRnSUNBcUlITmxaVzVQWW1wbFkzUnpJSGRwYkd3Z1ltVWdablZzYkhrZ1pXMWlaV1JrWldRZ2NtRjBhR1Z5SUhSb1lXNGdaVzVqYjJSbFpGeHVJQ0FnS2lCaGN5QmhJSEJ2YVc1MFpYSXVJQ0JVYUdseklHRnljbUY1SUhkcGJHd2dZbVVnZFhObFpDQjBieUJ3Y21WMlpXNTBJR2R2YVc1bklHbHVkRzhnWVc0Z2FXNW1hVzVwZEdWY2JpQWdJQ29nYkc5dmNDQmlaV05oZFhObElIZGxJR2hoZG1VZ1kybHlZM1ZzWVhJZ2NtVm1aWEpsYm1ObGN5NGdJRWxtSUhObFpXNVBZbXBsWTNSelhHNGdJQ0FxSUdseklITmxkQ3dnZEdobGJpQnViMjVsSUc5bUlIUm9aU0JRWVhKelpTQlBZbXBsWTNSeklIUm9ZWFFnWVhKbElITmxjbWxoYkdsNlpXUWdZMkZ1SUdKbElHUnBjblI1TGx4dUlDQWdLaTljYmlBZ1VHRnljMlV1WDJWdVkyOWtaU0E5SUdaMWJtTjBhVzl1S0haaGJIVmxMQ0J6WldWdVQySnFaV04wY3l3Z1pHbHpZV3hzYjNkUFltcGxZM1J6S1NCN1hHNGdJQ0FnZG1GeUlGOGdQU0JRWVhKelpTNWZPMXh1SUNBZ0lHbG1JQ2gyWVd4MVpTQnBibk4wWVc1alpXOW1JRkJoY25ObExrOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1JwYzJGc2JHOTNUMkpxWldOMGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QmNJbEJoY25ObExrOWlhbVZqZEhNZ2JtOTBJR0ZzYkc5M1pXUWdhR1Z5WlZ3aU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLQ0Z6WldWdVQySnFaV04wY3lCOGZDQmZMbWx1WTJ4MVpHVW9jMlZsYms5aWFtVmpkSE1zSUhaaGJIVmxLU0I4ZkNBaGRtRnNkV1V1WDJoaGMwUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxMbDkwYjFCdmFXNTBaWElvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDZ2hkbUZzZFdVdVpHbHlkSGtvS1NrZ2UxeHVJQ0FnSUNBZ0lDQnpaV1Z1VDJKcVpXTjBjeUE5SUhObFpXNVBZbXBsWTNSekxtTnZibU5oZENoMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRWVhKelpTNWZaVzVqYjJSbEtIWmhiSFZsTGw5MGIwWjFiR3hLVTA5T0tITmxaVzVQWW1wbFkzUnpLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVmxiazlpYW1WamRITXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMyRnNiRzkzVDJKcVpXTjBjeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUhKdmR5QmNJbFJ5YVdWa0lIUnZJSE5oZG1VZ1lXNGdiMkpxWldOMElIZHBkR2dnWVNCd2IybHVkR1Z5SUhSdklHRWdibVYzTENCMWJuTmhkbVZrSUc5aWFtVmpkQzVjSWp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0haaGJIVmxJR2x1YzNSaGJtTmxiMllnVUdGeWMyVXVRVU5NS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVXVkRzlLVTA5T0tDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGZMbWx6UkdGMFpTaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lHbG1JQ2hwYzA1aFRpaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZERZVzV1YjNRZ1pXNWpiMlJsSUdsdWRtRnNhV1FnUkdGMFpTY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIc2dYQ0pmWDNSNWNHVmNJam9nWENKRVlYUmxYQ0lzSUZ3aWFYTnZYQ0k2SUhaaGJIVmxMblJ2U2xOUFRpZ3BJSDA3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gyWVd4MVpTQnBibk4wWVc1alpXOW1JRkJoY25ObExrZGxiMUJ2YVc1MEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1V1ZEc5S1UwOU9LQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hmTG1selFYSnlZWGtvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdYeTV0WVhBb2RtRnNkV1VzSUdaMWJtTjBhVzl1S0hncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQmhjbk5sTGw5bGJtTnZaR1VvZUN3Z2MyVmxiazlpYW1WamRITXNJR1JwYzJGc2JHOTNUMkpxWldOMGN5azdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRjh1YVhOU1pXZEZlSEFvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdVdWMyOTFjbU5sTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJRWVhKelpTNVNaV3hoZEdsdmJpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTG5SdlNsTlBUaWdwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJRWVhKelpTNVBjQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbExuUnZTbE5QVGlncE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCUVlYSnpaUzVHYVd4bEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVhaaGJIVmxMblZ5YkNncEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lGd2lWSEpwWldRZ2RHOGdjMkYyWlNCaGJpQnZZbXBsWTNRZ1kyOXVkR0ZwYm1sdVp5QmhiaUIxYm5OaGRtVmtJR1pwYkdVdVhDSTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQmZYM1I1Y0dVNklGd2lSbWxzWlZ3aUxGeHVJQ0FnSUNBZ0lDQnVZVzFsT2lCMllXeDFaUzV1WVcxbEtDa3NYRzRnSUNBZ0lDQWdJSFZ5YkRvZ2RtRnNkV1V1ZFhKc0tDbGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGZMbWx6VDJKcVpXTjBLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdkbUZ5SUc5MWRIQjFkQ0E5SUh0OU8xeHVJQ0FnSUNBZ1VHRnljMlV1WDI5aWFtVmpkRVZoWTJnb2RtRnNkV1VzSUdaMWJtTjBhVzl1S0hZc0lHc3BJSHRjYmlBZ0lDQWdJQ0FnYjNWMGNIVjBXMnRkSUQwZ1VHRnljMlV1WDJWdVkyOWtaU2gyTENCelpXVnVUMkpxWldOMGN5d2daR2x6WVd4c2IzZFBZbXBsWTNSektUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHOTFkSEIxZER0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dUlDQjlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnYVc1MlpYSnpaU0JtZFc1amRHbHZiaUJ2WmlCUVlYSnpaUzVmWlc1amIyUmxMbHh1SUNBZ0tpQlVUMFJQT2lCdFlXdGxJR1JsWTI5a1pTQnViM1FnYlhWMFlYUmxJSFpoYkhWbExseHVJQ0FnS2k5Y2JpQWdVR0Z5YzJVdVgyUmxZMjlrWlNBOUlHWjFibU4wYVc5dUtHdGxlU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQjJZWElnWHlBOUlGQmhjbk5sTGw4N1hHNGdJQ0FnYVdZZ0tDRmZMbWx6VDJKcVpXTjBLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWHk1cGMwRnljbUY1S0haaGJIVmxLU2tnZTF4dUlDQWdJQ0FnVUdGeWMyVXVYMkZ5Y21GNVJXRmphQ2gyWVd4MVpTd2dablZ1WTNScGIyNG9kaXdnYXlrZ2UxeHVJQ0FnSUNBZ0lDQjJZV3gxWlZ0clhTQTlJRkJoY25ObExsOWtaV052WkdVb2F5d2dkaWs3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1VHRnljMlV1VDJKcVpXTjBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMllXeDFaU0JwYm5OMFlXNWpaVzltSUZCaGNuTmxMa1pwYkdVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMllXeDFaVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFpoYkhWbElHbHVjM1JoYm1ObGIyWWdVR0Z5YzJVdVQzQXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjJZV3gxWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0haaGJIVmxMbDlmYjNBcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCUVlYSnpaUzVQY0M1ZlpHVmpiMlJsS0haaGJIVmxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFpoYkhWbExsOWZkSGx3WlNBOVBUMGdYQ0pRYjJsdWRHVnlYQ0lnSmlZZ2RtRnNkV1V1WTJ4aGMzTk9ZVzFsS1NCN1hHNGdJQ0FnSUNCMllYSWdjRzlwYm5SbGNpQTlJRkJoY25ObExrOWlhbVZqZEM1ZlkzSmxZWFJsS0haaGJIVmxMbU5zWVhOelRtRnRaU2s3WEc0Z0lDQWdJQ0J3YjJsdWRHVnlMbDltYVc1cGMyaEdaWFJqYUNoN0lHOWlhbVZqZEVsa09pQjJZV3gxWlM1dlltcGxZM1JKWkNCOUxDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY0c5cGJuUmxjanRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFpoYkhWbExsOWZkSGx3WlNBOVBUMGdYQ0pQWW1wbFkzUmNJaUFtSmlCMllXeDFaUzVqYkdGemMwNWhiV1VwSUh0Y2JpQWdJQ0FnSUM4dklFbDBKM01nWVc0Z1QySnFaV04wSUdsdVkyeDFaR1ZrSUdsdUlHRWdjWFZsY25rZ2NtVnpkV3gwTGx4dUlDQWdJQ0FnZG1GeUlHTnNZWE56VG1GdFpTQTlJSFpoYkhWbExtTnNZWE56VG1GdFpUdGNiaUFnSUNBZ0lHUmxiR1YwWlNCMllXeDFaUzVmWDNSNWNHVTdYRzRnSUNBZ0lDQmtaV3hsZEdVZ2RtRnNkV1V1WTJ4aGMzTk9ZVzFsTzF4dUlDQWdJQ0FnZG1GeUlHOWlhbVZqZENBOUlGQmhjbk5sTGs5aWFtVmpkQzVmWTNKbFlYUmxLR05zWVhOelRtRnRaU2s3WEc0Z0lDQWdJQ0J2WW1wbFkzUXVYMlpwYm1semFFWmxkR05vS0haaGJIVmxMQ0IwY25WbEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdlltcGxZM1E3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gyWVd4MVpTNWZYM1I1Y0dVZ1BUMDlJRndpUkdGMFpWd2lLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVgzQmhjbk5sUkdGMFpTaDJZV3gxWlM1cGMyOHBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kbUZzZFdVdVgxOTBlWEJsSUQwOVBTQmNJa2RsYjFCdmFXNTBYQ0lwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VHRnljMlV1UjJWdlVHOXBiblFvZTF4dUlDQWdJQ0FnSUNCc1lYUnBkSFZrWlRvZ2RtRnNkV1V1YkdGMGFYUjFaR1VzWEc0Z0lDQWdJQ0FnSUd4dmJtZHBkSFZrWlRvZ2RtRnNkV1V1Ykc5dVoybDBkV1JsWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0d0bGVTQTlQVDBnWENKQlEweGNJaWtnZTF4dUlDQWdJQ0FnYVdZZ0tIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1VHRnljMlV1UVVOTUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjJZV3gxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VHRnljMlV1UVVOTUtIWmhiSFZsS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0haaGJIVmxMbDlmZEhsd1pTQTlQVDBnWENKU1pXeGhkR2x2Ymx3aUtTQjdYRzRnSUNBZ0lDQjJZWElnY21Wc1lYUnBiMjRnUFNCdVpYY2dVR0Z5YzJVdVVtVnNZWFJwYjI0b2JuVnNiQ3dnYTJWNUtUdGNiaUFnSUNBZ0lISmxiR0YwYVc5dUxuUmhjbWRsZEVOc1lYTnpUbUZ0WlNBOUlIWmhiSFZsTG1Oc1lYTnpUbUZ0WlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ5Wld4aGRHbHZianRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFpoYkhWbExsOWZkSGx3WlNBOVBUMGdYQ0pHYVd4bFhDSXBJSHRjYmlBZ0lDQWdJSFpoY2lCbWFXeGxJRDBnYm1WM0lGQmhjbk5sTGtacGJHVW9kbUZzZFdVdWJtRnRaU2s3WEc0Z0lDQWdJQ0JtYVd4bExsOTFjbXdnUFNCMllXeDFaUzUxY213N1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm1sc1pUdGNiaUFnSUNCOVhHNGdJQ0FnVUdGeWMyVXVYMjlpYW1WamRFVmhZMmdvZG1Gc2RXVXNJR1oxYm1OMGFXOXVLSFlzSUdzcElIdGNiaUFnSUNBZ0lIWmhiSFZsVzJ0ZElEMGdVR0Z5YzJVdVgyUmxZMjlrWlNockxDQjJLVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1U3WEc0Z0lIMDdYRzVjYmlBZ1VHRnljMlV1WDJGeWNtRjVSV0ZqYUNBOUlGQmhjbk5sTGw4dVpXRmphRHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSRzlsY3lCaElHUmxaWEFnZEhKaGRtVnljMkZzSUc5bUlHVjJaWEo1SUdsMFpXMGdhVzRnYjJKcVpXTjBMQ0JqWVd4c2FXNW5JR1oxYm1NZ2IyNGdaWFpsY25rZ2IyNWxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IySnFaV04wSUZSb1pTQnZZbXBsWTNRZ2IzSWdZWEp5WVhrZ2RHOGdkSEpoZG1WeWMyVWdaR1ZsY0d4NUxseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWRXNWpJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QmpZV3hzSUdadmNpQmxkbVZ5ZVNCcGRHVnRMaUJKZENCM2FXeHNYRzRnSUNBcUlDQWdJQ0JpWlNCd1lYTnpaV1FnZEdobElHbDBaVzBnWVhNZ1lXNGdZWEpuZFcxbGJuUXVJRWxtSUdsMElISmxkSFZ5Ym5NZ1lTQjBjblYwYUhrZ2RtRnNkV1VzSUhSb1lYUmNiaUFnSUNvZ0lDQWdJSFpoYkhWbElIZHBiR3dnY21Wd2JHRmpaU0IwYUdVZ2FYUmxiU0JwYmlCcGRITWdjR0Z5Wlc1MElHTnZiblJoYVc1bGNpNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UzMGdkR2hsSUhKbGMzVnNkQ0J2WmlCallXeHNhVzVuSUdaMWJtTWdiMjRnZEdobElIUnZjQzFzWlhabGJDQnZZbXBsWTNRZ2FYUnpaV3htTGx4dUlDQWdLaTljYmlBZ1VHRnljMlV1WDNSeVlYWmxjbk5sSUQwZ1puVnVZM1JwYjI0b2IySnFaV04wTENCbWRXNWpMQ0J6WldWdUtTQjdYRzRnSUNBZ2FXWWdLRzlpYW1WamRDQnBibk4wWVc1alpXOW1JRkJoY25ObExrOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ2MyVmxiaUE5SUhObFpXNGdmSHdnVzEwN1hHNGdJQ0FnSUNCcFppQW9VR0Z5YzJVdVh5NXBibVJsZUU5bUtITmxaVzRzSUc5aWFtVmpkQ2tnUGowZ01Da2dlMXh1SUNBZ0lDQWdJQ0F2THlCWFpTZDJaU0JoYkhKbFlXUjVJSFpwYzJsMFpXUWdkR2hwY3lCdlltcGxZM1FnYVc0Z2RHaHBjeUJqWVd4c0xseHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCelpXVnVMbkIxYzJnb2IySnFaV04wS1R0Y2JpQWdJQ0FnSUZCaGNuTmxMbDkwY21GMlpYSnpaU2h2WW1wbFkzUXVZWFIwY21saWRYUmxjeXdnWm5WdVl5d2djMlZsYmlrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm5WdVl5aHZZbXBsWTNRcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2IySnFaV04wSUdsdWMzUmhibU5sYjJZZ1VHRnljMlV1VW1Wc1lYUnBiMjRnZkh3Z2IySnFaV04wSUdsdWMzUmhibU5sYjJZZ1VHRnljMlV1Um1sc1pTa2dlMXh1SUNBZ0lDQWdMeThnVG05MGFHbHVaeUJ1WldWa2N5QjBieUJpWlNCa2IyNWxMQ0JpZFhRZ2QyVWdaRzl1SjNRZ2QyRnVkQ0IwYnlCeVpXTjFjbk5sSUdsdWRHOGdkR2hsWEc0Z0lDQWdJQ0F2THlCdlltcGxZM1FuY3lCd1lYSmxiblFnYVc1bWFXNXBkR1ZzZVN3Z2MyOGdkMlVnWTJGMFkyZ2dkR2hwY3lCallYTmxMbHh1SUNBZ0lDQWdjbVYwZFhKdUlHWjFibU1vYjJKcVpXTjBLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRkJoY25ObExsOHVhWE5CY25KaGVTaHZZbXBsWTNRcEtTQjdYRzRnSUNBZ0lDQlFZWEp6WlM1ZkxtVmhZMmdvYjJKcVpXTjBMQ0JtZFc1amRHbHZiaWhqYUdsc1pDd2dhVzVrWlhncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUc1bGQwTm9hV3hrSUQwZ1VHRnljMlV1WDNSeVlYWmxjbk5sS0dOb2FXeGtMQ0JtZFc1akxDQnpaV1Z1S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzVsZDBOb2FXeGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IySnFaV04wVzJsdVpHVjRYU0E5SUc1bGQwTm9hV3hrTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWRXNWpLRzlpYW1WamRDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaFFZWEp6WlM1ZkxtbHpUMkpxWldOMEtHOWlhbVZqZENrcElIdGNiaUFnSUNBZ0lGQmhjbk5sTGw5bFlXTm9LRzlpYW1WamRDd2dablZ1WTNScGIyNG9ZMmhwYkdRc0lHdGxlU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdibVYzUTJocGJHUWdQU0JRWVhKelpTNWZkSEpoZG1WeWMyVW9ZMmhwYkdRc0lHWjFibU1zSUhObFpXNHBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JtVjNRMmhwYkdRcElIdGNiaUFnSUNBZ0lDQWdJQ0J2WW1wbFkzUmJhMlY1WFNBOUlHNWxkME5vYVd4a08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1kVzVqS0c5aWFtVmpkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpLRzlpYW1WamRDazdYRzRnSUgwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb2FYTWdhWE1nYkdsclpTQmZMbVZoWTJnc0lHVjRZMlZ3ZERwY2JpQWdJQ29nS2lCcGRDQmtiMlZ6YmlkMElIZHZjbXNnWm05eUlITnZMV05oYkd4bFpDQmhjbkpoZVMxc2FXdGxJRzlpYW1WamRITXNYRzRnSUNBcUlDb2dhWFFnWkc5bGN5QjNiM0pySUdadmNpQmthV04wYVc5dVlYSnBaWE1nZDJsMGFDQmhJRndpYkdWdVozUm9YQ0lnWVhSMGNtbGlkWFJsTGx4dUlDQWdLaTljYmlBZ1VHRnljMlV1WDI5aWFtVmpkRVZoWTJnZ1BTQlFZWEp6WlM1ZlpXRmphQ0E5SUdaMWJtTjBhVzl1S0c5aWFpd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQjJZWElnWHlBOUlGQmhjbk5sTGw4N1hHNGdJQ0FnYVdZZ0tGOHVhWE5QWW1wbFkzUW9iMkpxS1NrZ2UxeHVJQ0FnSUNBZ1h5NWxZV05vS0Y4dWEyVjVjeWh2WW1vcExDQm1kVzVqZEdsdmJpaHJaWGtwSUh0Y2JpQWdJQ0FnSUNBZ1kyRnNiR0poWTJzb2IySnFXMnRsZVYwc0lHdGxlU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdYeTVsWVdOb0tHOWlhaXdnWTJGc2JHSmhZMnNwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdkx5QklaV3h3WlhJZ1puVnVZM1JwYjI0Z2RHOGdZMmhsWTJzZ2JuVnNiQ0J2Y2lCMWJtUmxabWx1WldRdVhHNGdJRkJoY25ObExsOXBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpDQTlJR1oxYm1OMGFXOXVLSGdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVh5NXBjMDUxYkd3b2VDa2dmSHdnVUdGeWMyVXVYeTVwYzFWdVpHVm1hVzVsWkNoNEtUdGNiaUFnZlR0Y2JuMG9kR2hwY3lrcE8xeHVYRzR2S2lCbmJHOWlZV3dnY21WeGRXbHlaVG9nWm1Gc2MyVXNJR3h2WTJGc1UzUnZjbUZuWlRvZ1ptRnNjMlVnS2k5Y2JpaG1kVzVqZEdsdmJpaHliMjkwS1NCN1hHNGdJSEp2YjNRdVVHRnljMlVnUFNCeWIyOTBMbEJoY25ObElIeDhJSHQ5TzF4dUlDQjJZWElnVUdGeWMyVWdQU0J5YjI5MExsQmhjbk5sTzF4dUlDQmNiaUFnZG1GeUlGTjBiM0poWjJVZ1BTQjdYRzRnSUNBZ1lYTjVibU02SUdaaGJITmxMRnh1SUNCOU8xeHVYRzRnSUhaaGNpQm9ZWE5NYjJOaGJGTjBiM0poWjJVZ1BTQW9kSGx3Wlc5bUlHeHZZMkZzVTNSdmNtRm5aU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BPMXh1SUNCcFppQW9hR0Z6VEc5allXeFRkRzl5WVdkbEtTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR3h2WTJGc1UzUnZjbUZuWlM1elpYUkpkR1Z0S0NkemRYQndiM0owWldRbkxDQjBjblZsS1R0Y2JpQWdJQ0FnSUd4dlkyRnNVM1J2Y21GblpTNXlaVzF2ZG1WSmRHVnRLQ2R6ZFhCd2IzSjBaV1FuS1R0Y2JpQWdJQ0I5SUdOaGRHTm9LR1VwSUh0Y2JpQWdJQ0FnSUdoaGMweHZZMkZzVTNSdmNtRm5aU0E5SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnBaaUFvYUdGelRHOWpZV3hUZEc5eVlXZGxLU0I3WEc0Z0lDQWdVM1J2Y21GblpTNW5aWFJKZEdWdElEMGdablZ1WTNScGIyNG9jR0YwYUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUd4dlkyRnNVM1J2Y21GblpTNW5aWFJKZEdWdEtIQmhkR2dwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JUZEc5eVlXZGxMbk5sZEVsMFpXMGdQU0JtZFc1amRHbHZiaWh3WVhSb0xDQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUd4dlkyRnNVM1J2Y21GblpTNXpaWFJKZEdWdEtIQmhkR2dzSUhaaGJIVmxLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdVM1J2Y21GblpTNXlaVzF2ZG1WSmRHVnRJRDBnWm5WdVkzUnBiMjRvY0dGMGFDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHeHZZMkZzVTNSdmNtRm5aUzV5WlcxdmRtVkpkR1Z0S0hCaGRHZ3BPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQlRkRzl5WVdkbExtTnNaV0Z5SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JHOWpZV3hUZEc5eVlXZGxMbU5zWldGeUtDazdYRzRnSUNBZ2ZUdGNiaUFnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnY21WeGRXbHlaU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lIWmhjaUJCYzNsdVkxTjBiM0poWjJVN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lFRnplVzVqVTNSdmNtRm5aU0E5SUdWMllXd29YQ0p5WlhGMWFYSmxLQ2RCYzNsdVkxTjBiM0poWjJVbktWd2lLVHNnTHk4Z2FuTm9hVzUwSUdsbmJtOXlaVHBzYVc1bFhHNWNiaUFnSUNBZ0lGTjBiM0poWjJVdVlYTjVibU1nUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0JUZEc5eVlXZGxMbWRsZEVsMFpXMUJjM2x1WXlBOUlHWjFibU4wYVc5dUtIQmhkR2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEFnUFNCdVpYY2dVR0Z5YzJVdVVISnZiV2x6WlNncE8xeHVJQ0FnSUNBZ0lDQkJjM2x1WTFOMGIzSmhaMlV1WjJWMFNYUmxiU2h3WVhSb0xDQm1kVzVqZEdsdmJpaGxjbklzSUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0M1eVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NDNXlaWE52YkhabEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0R0Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lGTjBiM0poWjJVdWMyVjBTWFJsYlVGemVXNWpJRDBnWm5WdVkzUnBiMjRvY0dGMGFDd2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhBZ1BTQnVaWGNnVUdGeWMyVXVVSEp2YldselpTZ3BPMXh1SUNBZ0lDQWdJQ0JCYzNsdVkxTjBiM0poWjJVdWMyVjBTWFJsYlNod1lYUm9MQ0IyWVd4MVpTd2dablZ1WTNScGIyNG9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NDNXlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjQzV5WlhOdmJIWmxLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NEdGNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJRk4wYjNKaFoyVXVjbVZ0YjNabFNYUmxiVUZ6ZVc1aklEMGdablZ1WTNScGIyNG9jR0YwYUNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY0NBOUlHNWxkeUJRWVhKelpTNVFjbTl0YVhObEtDazdYRzRnSUNBZ0lDQWdJRUZ6ZVc1alUzUnZjbUZuWlM1eVpXMXZkbVZKZEdWdEtIQmhkR2dzSUdaMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEF1Y21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhBdWNtVnpiMngyWlNncE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCd08xeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdVM1J2Y21GblpTNWpiR1ZoY2lBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0JCYzNsdVkxTjBiM0poWjJVdVkyeGxZWElvS1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2V5QjlYRzRnSUgxY2JpQWdhV1lnS0NGVGRHOXlZV2RsTG1GemVXNWpJQ1ltSUNGVGRHOXlZV2RsTG1kbGRFbDBaVzBwSUh0Y2JpQWdJQ0IyWVhJZ2JXVnRUV0Z3SUQwZ1UzUnZjbUZuWlM1cGJrMWxiVzl5ZVUxaGNDQTlJSHQ5TzF4dUlDQWdJRk4wYjNKaFoyVXVaMlYwU1hSbGJTQTlJR1oxYm1OMGFXOXVLSEJoZEdncElIdGNiaUFnSUNBZ0lHbG1JQ2h0WlcxTllYQXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NHRjBhQ2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxbGJVMWhjRnR3WVhSb1hUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQlRkRzl5WVdkbExuTmxkRWwwWlcwZ1BTQm1kVzVqZEdsdmJpaHdZWFJvTENCMllXeDFaU2tnZTF4dUlDQWdJQ0FnYldWdFRXRndXM0JoZEdoZElEMGdVM1J5YVc1bktIWmhiSFZsS1R0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnVTNSdmNtRm5aUzV5WlcxdmRtVkpkR1Z0SUQwZ1puVnVZM1JwYjI0b2NHRjBhQ2tnZTF4dUlDQWdJQ0FnWkdWc1pYUmxJRzFsYlUxaGNGdHdZWFJvWFR0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnVTNSdmNtRm5aUzVqYkdWaGNpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJRzFsYlUxaGNDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXVnRUV0Z3TG1oaGMwOTNibEJ5YjNCbGNuUjVLR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0JrWld4bGRHVWdiV1Z0VFdGd1cydGxlVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ0x5OGdWMlVnWTJGdUlIVnpaU0J6ZVc1amFISnZibTkxY3lCdFpYUm9iMlJ6SUdaeWIyMGdZWE41Ym1NZ2MyTmxibUZ5YVc5ekxDQmlkWFFnYm05MElIWnBZMlV0ZG1WeWMyRmNiaUFnYVdZZ0tDRlRkRzl5WVdkbExtRnplVzVqS1NCN1hHNGdJQ0FnVTNSdmNtRm5aUzVuWlhSSmRHVnRRWE41Ym1NZ1BTQm1kVzVqZEdsdmJpaHdZWFJvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVVSEp2YldselpTNWhjeWhjYmlBZ0lDQWdJQ0FnVTNSdmNtRm5aUzVuWlhSSmRHVnRLSEJoZEdncFhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCVGRHOXlZV2RsTG5ObGRFbDBaVzFCYzNsdVl5QTlJR1oxYm1OMGFXOXVLSEJoZEdnc0lIWmhiSFZsS1NCN1hHNGdJQ0FnSUNCVGRHOXlZV2RsTG5ObGRFbDBaVzBvY0dGMGFDd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbEJ5YjIxcGMyVXVZWE1vZG1Gc2RXVXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQlRkRzl5WVdkbExuSmxiVzkyWlVsMFpXMUJjM2x1WXlBOUlHWjFibU4wYVc5dUtIQmhkR2dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJRWVhKelpTNVFjbTl0YVhObExtRnpLRnh1SUNBZ0lDQWdJQ0JUZEc5eVlXZGxMbkpsYlc5MlpVbDBaVzBvY0dGMGFDbGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJRkJoY25ObExsTjBiM0poWjJVZ1BTQlRkRzl5WVdkbE8xeHVYRzU5S1NoMGFHbHpLVHRjYmx4dUtHWjFibU4wYVc5dUtISnZiM1FwSUh0Y2JpQWdjbTl2ZEM1UVlYSnpaU0E5SUhKdmIzUXVVR0Z5YzJVZ2ZId2dlMzA3WEc0Z0lIWmhjaUJRWVhKelpTQTlJSEp2YjNRdVVHRnljMlU3WEc0Z0lIWmhjaUJmSUQwZ1VHRnljMlV1WHp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUc1aGJXVnpjR0ZqWlNCUWNtOTJhV1JsY3lCaGJpQnBiblJsY21aaFkyVWdkRzhnVUdGeWMyVW5jeUJzYjJkbmFXNW5JR0Z1WkNCaGJtRnNlWFJwWTNNZ1ltRmphMlZ1WkM1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGtGdVlXeDVkR2xqY3lBOUlGQmhjbk5sTGtGdVlXeDVkR2xqY3lCOGZDQjdmVHRjYmx4dUlDQmZMbVY0ZEdWdVpDaFFZWEp6WlM1QmJtRnNlWFJwWTNNc0lDOHFLaUJBYkdWdVpITWdVR0Z5YzJVdVFXNWhiSGwwYVdOeklDb3ZJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVY21GamEzTWdkR2hsSUc5alkzVnljbVZ1WTJVZ2IyWWdZU0JqZFhOMGIyMGdaWFpsYm5RZ2QybDBhQ0JoWkdScGRHbHZibUZzSUdScGJXVnVjMmx2Ym5NdVhHNGdJQ0FnSUNvZ1VHRnljMlVnZDJsc2JDQnpkRzl5WlNCaElHUmhkR0VnY0c5cGJuUWdZWFFnZEdobElIUnBiV1VnYjJZZ2FXNTJiMk5oZEdsdmJpQjNhWFJvSUhSb1pTQm5hWFpsYmx4dUlDQWdJQ0FxSUdWMlpXNTBJRzVoYldVdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCRWFXMWxibk5wYjI1eklIZHBiR3dnWVd4c2IzY2djMlZuYldWdWRHRjBhVzl1SUc5bUlIUm9aU0J2WTJOMWNuSmxibU5sY3lCdlppQjBhR2x6SUdOMWMzUnZiVnh1SUNBZ0lDQXFJR1YyWlc1MExpQkxaWGx6SUdGdVpDQjJZV3gxWlhNZ2MyaHZkV3hrSUdKbElIdEFZMjlrWlNCVGRISnBibWQ5Y3l3Z1lXNWtJSGRwYkd3Z2RHaHliM2RjYmlBZ0lDQWdLaUJ2ZEdobGNuZHBjMlV1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJVYnlCMGNtRmpheUJoSUhWelpYSWdjMmxuYm5Wd0lHRnNiMjVuSUhkcGRHZ2dZV1JrYVhScGIyNWhiQ0J0WlhSaFpHRjBZU3dnWTI5dWMybGtaWElnZEdobFhHNGdJQ0FnSUNvZ1ptOXNiRzkzYVc1bk9seHVJQ0FnSUNBcUlEeHdjbVUrWEc0Z0lDQWdJQ29nZG1GeUlHUnBiV1Z1YzJsdmJuTWdQU0I3WEc0Z0lDQWdJQ29nSUdkbGJtUmxjam9nSjIwbkxGeHVJQ0FnSUNBcUlDQnpiM1Z5WTJVNklDZDNaV0luTEZ4dUlDQWdJQ0FxSUNCa1lYbFVlWEJsT2lBbmQyVmxhMlZ1WkNkY2JpQWdJQ0FnS2lCOU8xeHVJQ0FnSUNBcUlGQmhjbk5sTGtGdVlXeDVkR2xqY3k1MGNtRmpheWduYzJsbmJuVndKeXdnWkdsdFpXNXphVzl1Y3lrN1hHNGdJQ0FnSUNvZ1BDOXdjbVUrWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJVYUdWeVpTQnBjeUJoSUdSbFptRjFiSFFnYkdsdGFYUWdiMllnT0NCa2FXMWxibk5wYjI1eklIQmxjaUJsZG1WdWRDQjBjbUZqYTJWa0xseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUc1aGJXVWdWR2hsSUc1aGJXVWdiMllnZEdobElHTjFjM1J2YlNCbGRtVnVkQ0IwYnlCeVpYQnZjblFnZEc4Z1VHRnljMlVnWVhOY2JpQWdJQ0FnS2lCb1lYWnBibWNnYUdGd2NHVnVaV1F1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1JwYldWdWMybHZibk1nVkdobElHUnBZM1JwYjI1aGNua2diMllnYVc1bWIzSnRZWFJwYjI0Z1lua2dkMmhwWTJnZ2RHOWNiaUFnSUNBZ0tpQnpaV2R0Wlc1MElIUm9hWE1nWlhabGJuUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ1FTQkNZV05yWW05dVpTMXpkSGxzWlNCallXeHNZbUZqYXlCdlltcGxZM1F1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVSEp2YldselpYMGdRU0J3Y205dGFYTmxJSFJvWVhRZ2FYTWdjbVZ6YjJ4MlpXUWdkMmhsYmlCMGFHVWdjbTkxYm1RdGRISnBjRnh1SUNBZ0lDQXFJSFJ2SUhSb1pTQnpaWEoyWlhJZ1kyOXRjR3hsZEdWekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhSeVlXTnJPaUJtZFc1amRHbHZiaWh1WVcxbExDQmthVzFsYm5OcGIyNXpMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0J1WVcxbElEMGdibUZ0WlNCOGZDQW5KenRjYmlBZ0lDQWdJRzVoYldVZ1BTQnVZVzFsTG5KbGNHeGhZMlVvTDE1Y1hITXFMeXdnSnljcE8xeHVJQ0FnSUNBZ2JtRnRaU0E5SUc1aGJXVXVjbVZ3YkdGalpTZ3ZYRnh6S2lRdkxDQW5KeWs3WEc0Z0lDQWdJQ0JwWmlBb2JtRnRaUzVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ0owRWdibUZ0WlNCbWIzSWdkR2hsSUdOMWMzUnZiU0JsZG1WdWRDQnRkWE4wSUdKbElIQnliM1pwWkdWa0p6dGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdYeTVsWVdOb0tHUnBiV1Z1YzJsdmJuTXNJR1oxYm1OMGFXOXVLSFpoYkN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hYeTVwYzFOMGNtbHVaeWhyWlhrcElIeDhJQ0ZmTG1selUzUnlhVzVuS0haaGJDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUFuZEhKaFkyc29LU0JrYVcxbGJuTnBiMjV6SUdWNGNHVmpkSE1nYTJWNWN5QmhibVFnZG1Gc2RXVnpJRzltSUhSNWNHVWdYQ0p6ZEhKcGJtZGNJaTRuTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdiM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMwN1hHNGdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVYM0psY1hWbGMzUW9lMXh1SUNBZ0lDQWdJQ0J5YjNWMFpUb2dKMlYyWlc1MGN5Y3NYRzRnSUNBZ0lDQWdJR05zWVhOelRtRnRaVG9nYm1GdFpTeGNiaUFnSUNBZ0lDQWdiV1YwYUc5a09pQW5VRTlUVkNjc1hHNGdJQ0FnSUNBZ0lHUmhkR0U2SUhzZ1pHbHRaVzV6YVc5dWN6b2daR2x0Wlc1emFXOXVjeUI5WEc0Z0lDQWdJQ0I5S1M1ZmRHaGxibEoxYmtOaGJHeGlZV05yY3lodmNIUnBiMjV6S1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlNoMGFHbHpLU2s3WEc1Y2JpaG1kVzVqZEdsdmJpaHliMjkwS1NCN1hHNGdJSEp2YjNRdVVHRnljMlVnUFNCeWIyOTBMbEJoY25ObElIeDhJSHQ5TzF4dUlDQjJZWElnVUdGeWMyVWdQU0J5YjI5MExsQmhjbk5sTzF4dUlDQjJZWElnWHlBOUlGQmhjbk5sTGw4N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCamJHRnpjeUJRWVhKelpTNURiMjVtYVdjZ2FYTWdZU0JzYjJOaGJDQnlaWEJ5WlhObGJuUmhkR2x2YmlCdlppQmpiMjVtYVdkMWNtRjBhVzl1SUdSaGRHRWdkR2hoZEZ4dUlDQWdLaUJqWVc0Z1ltVWdjMlYwSUdaeWIyMGdkR2hsSUZCaGNuTmxJR1JoYzJoaWIyRnlaQzVjYmlBZ0lDb3ZYRzRnSUZCaGNuTmxMa052Ym1acFp5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSFJvYVhNdVlYUjBjbWxpZFhSbGN5QTlJSHQ5TzF4dUlDQWdJSFJvYVhNdVgyVnpZMkZ3WldSQmRIUnlhV0oxZEdWeklEMGdlMzA3WEc0Z0lIMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSEpwWlhabGN5QjBhR1VnYlc5emRDQnlaV05sYm5Sc2VTMW1aWFJqYUdWa0lHTnZibVpwWjNWeVlYUnBiMjRnYjJKcVpXTjBMQ0JsYVhSb1pYSWdabkp2YlZ4dUlDQWdLaUJ0WlcxdmNua2diM0lnWm5KdmJTQnNiMk5oYkNCemRHOXlZV2RsSUdsbUlHNWxZMlZ6YzJGeWVTNWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVRMjl1Wm1sbmZTQlVhR1VnYlc5emRDQnlaV05sYm5Sc2VTMW1aWFJqYUdWa0lGQmhjbk5sTGtOdmJtWnBaeUJwWmlCcGRGeHVJQ0FnS2lBZ0lDQWdaWGhwYzNSekxDQmxiSE5sSUdGdUlHVnRjSFI1SUZCaGNuTmxMa052Ym1acFp5NWNiaUFnSUNvdlhHNGdJRkJoY25ObExrTnZibVpwWnk1amRYSnlaVzUwSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2FXWWdLRkJoY25ObExrTnZibVpwWnk1ZlkzVnljbVZ1ZEVOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRkJoY25ObExrTnZibVpwWnk1ZlkzVnljbVZ1ZEVOdmJtWnBaenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnWTI5dVptbG5JRDBnYm1WM0lGQmhjbk5sTGtOdmJtWnBaeWdwTzF4dVhHNGdJQ0FnYVdZZ0tGQmhjbk5sTGxOMGIzSmhaMlV1WVhONWJtTXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpiMjVtYVdjN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHTnZibVpwWjBSaGRHRWdQU0JRWVhKelpTNVRkRzl5WVdkbExtZGxkRWwwWlcwb1VHRnljMlV1WDJkbGRGQmhjbk5sVUdGMGFDaGNiaUFnSUNBZ0lDQWdJQ0JRWVhKelpTNURiMjVtYVdjdVgwTlZVbEpGVGxSZlEwOU9Sa2xIWDB0RldTa3BPMXh1WEc0Z0lDQWdhV1lnS0dOdmJtWnBaMFJoZEdFcElIc2dJRnh1SUNBZ0lDQWdZMjl1Wm1sbkxsOW1hVzVwYzJoR1pYUmphQ2hLVTA5T0xuQmhjbk5sS0dOdmJtWnBaMFJoZEdFcEtUdGNiaUFnSUNBZ0lGQmhjbk5sTGtOdmJtWnBaeTVmWTNWeWNtVnVkRU52Ym1acFp5QTlJR052Ym1acFp6dGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR052Ym1acFp6dGNiaUFnZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMGN5QmhJRzVsZHlCamIyNW1hV2QxY21GMGFXOXVJRzlpYW1WamRDQm1jbTl0SUhSb1pTQnpaWEoyWlhJdVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJRUVnUW1GamEySnZibVV0YzNSNWJHVWdiM0IwYVc5dWN5QnZZbXBsWTNRdVhHNGdJQ0FxSUZaaGJHbGtJRzl3ZEdsdmJuTWdZWEpsT2p4MWJENWNiaUFnSUNvZ0lDQThiR2srYzNWalkyVnpjem9nUm5WdVkzUnBiMjRnZEc4Z1kyRnNiQ0IzYUdWdUlIUm9aU0JuWlhRZ1kyOXRjR3hsZEdWeklITjFZMk5sYzNObWRXeHNlUzVjYmlBZ0lDb2dJQ0E4YkdrK1pYSnliM0k2SUVaMWJtTjBhVzl1SUhSdklHTmhiR3dnZDJobGJpQjBhR1VnWjJWMElHWmhhV3h6TGx4dUlDQWdLaUE4TDNWc1BseHVJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVRY205dGFYTmxmU0JCSUhCeWIyMXBjMlVnZEdoaGRDQnBjeUJ5WlhOdmJIWmxaQ0IzYVhSb0lHRWdibVYzYkhrdFkzSmxZWFJsWkZ4dUlDQWdLaUFnSUNBZ1kyOXVabWxuZFhKaGRHbHZiaUJ2WW1wbFkzUWdkMmhsYmlCMGFHVWdaMlYwSUdOdmJYQnNaWFJsY3k1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGtOdmJtWnBaeTVuWlhRZ1BTQm1kVzVqZEdsdmJpaHZjSFJwYjI1ektTQjdYRzRnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc1Y2JpQWdJQ0IyWVhJZ2NtVnhkV1Z6ZENBOUlGQmhjbk5sTGw5eVpYRjFaWE4wS0h0Y2JpQWdJQ0FnSUhKdmRYUmxPaUJjSW1OdmJtWnBaMXdpTEZ4dUlDQWdJQ0FnYldWMGFHOWtPaUJjSWtkRlZGd2lMRnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlISmxjWFZsYzNRdWRHaGxiaWhtZFc1amRHbHZiaWh5WlhOd2IyNXpaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRnlaWE53YjI1elpTQjhmQ0FoY21WemNHOXVjMlV1Y0dGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxjbkp2Y2s5aWFtVmpkQ0E5SUc1bGR5QlFZWEp6WlM1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNCUVlYSnpaUzVGY25KdmNpNUpUbFpCVEVsRVgwcFRUMDRzWEc0Z0lDQWdJQ0FnSUNBZ1hDSkRiMjVtYVdjZ1NsTlBUaUJ5WlhOd2IyNXpaU0JwYm5aaGJHbGtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbEJ5YjIxcGMyVXVaWEp5YjNJb1pYSnliM0pQWW1wbFkzUXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ1kyOXVabWxuSUQwZ2JtVjNJRkJoY25ObExrTnZibVpwWnlncE8xeHVJQ0FnSUNBZ1kyOXVabWxuTGw5bWFXNXBjMmhHWlhSamFDaHlaWE53YjI1elpTazdYRzRnSUNBZ0lDQlFZWEp6WlM1RGIyNW1hV2N1WDJOMWNuSmxiblJEYjI1bWFXY2dQU0JqYjI1bWFXYzdYRzRnSUNBZ0lDQnlaWFIxY200Z1kyOXVabWxuTzF4dUlDQWdJSDBwTGw5MGFHVnVVblZ1UTJGc2JHSmhZMnR6S0c5d2RHbHZibk1wTzF4dUlDQjlPMXh1WEc0Z0lGQmhjbk5sTGtOdmJtWnBaeTV3Y205MGIzUjVjR1VnUFNCN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFJ6SUhSb1pTQklWRTFNTFdWelkyRndaV1FnZG1Gc2RXVWdiMllnWVc0Z1lYUjBjbWxpZFhSbExseHVJQ0FnSUNBcUwxeHVJQ0FnSUdWelkyRndaVG9nWm5WdVkzUnBiMjRvWVhSMGNpa2dlMXh1SUNBZ0lDQWdkbUZ5SUdoMGJXd2dQU0IwYUdsekxsOWxjMk5oY0dWa1FYUjBjbWxpZFhSbGMxdGhkSFJ5WFR0Y2JpQWdJQ0FnSUdsbUlDaG9kRzFzS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCb2RHMXNPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkbUZ5SUhaaGJDQTlJSFJvYVhNdVlYUjBjbWxpZFhSbGMxdGhkSFJ5WFR0Y2JpQWdJQ0FnSUhaaGNpQmxjMk5oY0dWa08xeHVJQ0FnSUNBZ2FXWWdLRkJoY25ObExsOXBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpDaDJZV3dwS1NCN1hHNGdJQ0FnSUNBZ0lHVnpZMkZ3WldRZ1BTQW5KenRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR1Z6WTJGd1pXUWdQU0JmTG1WelkyRndaU2gyWVd3dWRHOVRkSEpwYm1jb0tTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjBhR2x6TGw5bGMyTmhjR1ZrUVhSMGNtbGlkWFJsYzF0aGRIUnlYU0E5SUdWelkyRndaV1E3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaWE5qWVhCbFpEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdkbUZzZFdVZ2IyWWdZVzRnWVhSMGNtbGlkWFJsTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JoZEhSeUlGUm9aU0J1WVcxbElHOW1JR0Z1SUdGMGRISnBZblYwWlM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtHRjBkSElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRjBkSEpwWW5WMFpYTmJZWFIwY2wwN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5bWFXNXBjMmhHWlhSamFEb2dablZ1WTNScGIyNG9jMlZ5ZG1WeVJHRjBZU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWhkSFJ5YVdKMWRHVnpJRDBnVUdGeWMyVXVYMlJsWTI5a1pTaHVkV3hzTENCZkxtTnNiMjVsS0hObGNuWmxja1JoZEdFdWNHRnlZVzF6S1NrN1hHNGdJQ0FnSUNCcFppQW9JVkJoY25ObExsTjBiM0poWjJVdVlYTjVibU1wSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWMlVnYjI1c2VTQndjbTkyYVdSbElHeHZZMkZzSUdOaFkyaHBibWNnYjJZZ1kyOXVabWxuSUhkcGRHZ2djM2x1WTJoeWIyNXZkWE1nVTNSdmNtRm5aVnh1SUNBZ0lDQWdJQ0JRWVhKelpTNVRkRzl5WVdkbExuTmxkRWwwWlcwb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JRWVhKelpTNWZaMlYwVUdGeWMyVlFZWFJvS0ZCaGNuTmxMa052Ym1acFp5NWZRMVZTVWtWT1ZGOURUMDVHU1VkZlMwVlpLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lFcFRUMDR1YzNSeWFXNW5hV1o1S0hObGNuWmxja1JoZEdFcEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdVR0Z5YzJVdVEyOXVabWxuTGw5amRYSnlaVzUwUTI5dVptbG5JRDBnYm5Wc2JEdGNibHh1SUNCUVlYSnpaUzVEYjI1bWFXY3VYME5WVWxKRlRsUmZRMDlPUmtsSFgwdEZXU0E5SUZ3aVkzVnljbVZ1ZEVOdmJtWnBaMXdpTzF4dVhHNTlLSFJvYVhNcEtUdGNibHh1WEc0b1puVnVZM1JwYjI0b2NtOXZkQ2tnZTF4dUlDQnliMjkwTGxCaGNuTmxJRDBnY205dmRDNVFZWEp6WlNCOGZDQjdmVHRjYmlBZ2RtRnlJRkJoY25ObElEMGdjbTl2ZEM1UVlYSnpaVHRjYmlBZ2RtRnlJRjhnUFNCUVlYSnpaUzVmTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYjI1emRISjFZM1J6SUdFZ2JtVjNJRkJoY25ObExrVnljbTl5SUc5aWFtVmpkQ0IzYVhSb0lIUm9aU0JuYVhabGJpQmpiMlJsSUdGdVpDQnRaWE56WVdkbExseHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWTI5a1pTQkJiaUJsY25KdmNpQmpiMlJsSUdOdmJuTjBZVzUwSUdaeWIyMGdQR052WkdVK1VHRnljMlV1UlhKeWIzSThMMk52WkdVK0xseHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYldWemMyRm5aU0JCSUdSbGRHRnBiR1ZrSUdSbGMyTnlhWEIwYVc5dUlHOW1JSFJvWlNCbGNuSnZjaTVjYmlBZ0lDb2dRR05zWVhOelhHNGdJQ0FxWEc0Z0lDQXFJRHh3UGtOc1lYTnpJSFZ6WldRZ1ptOXlJR0ZzYkNCdlltcGxZM1J6SUhCaGMzTmxaQ0IwYnlCbGNuSnZjaUJqWVd4c1ltRmphM011UEM5d1BseHVJQ0FnS2k5Y2JpQWdVR0Z5YzJVdVJYSnliM0lnUFNCbWRXNWpkR2x2YmloamIyUmxMQ0J0WlhOellXZGxLU0I3WEc0Z0lDQWdkR2hwY3k1amIyUmxJRDBnWTI5a1pUdGNiaUFnSUNCMGFHbHpMbTFsYzNOaFoyVWdQU0J0WlhOellXZGxPMXh1SUNCOU8xeHVYRzRnSUY4dVpYaDBaVzVrS0ZCaGNuTmxMa1Z5Y205eUxDQXZLaW9nUUd4bGJtUnpJRkJoY25ObExrVnljbTl5SUNvdklIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnYzI5dFpTQmxjbkp2Y2lCdmRHaGxjaUIwYUdGdUlIUm9iM05sSUdWdWRXMWxjbUYwWldRZ2FHVnlaUzVjYmlBZ0lDQWdLaUJBWTI5dWMzUmhiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQlBWRWhGVWw5RFFWVlRSVG9nTFRFc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnZEdoaGRDQnpiMjFsZEdocGJtY2dhR0Z6SUdkdmJtVWdkM0p2Ym1jZ2QybDBhQ0IwYUdVZ2MyVnlkbVZ5TGx4dUlDQWdJQ0FxSUVsbUlIbHZkU0JuWlhRZ2RHaHBjeUJsY25KdmNpQmpiMlJsTENCcGRDQnBjeUJRWVhKelpTZHpJR1poZFd4MExpQkRiMjUwWVdOMElIVnpJR0YwSUZ4dUlDQWdJQ0FxSUdoMGRIQnpPaTh2Y0dGeWMyVXVZMjl0TDJobGJIQmNiaUFnSUNBZ0tpQkFZMjl1YzNSaGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCSlRsUkZVazVCVEY5VFJWSldSVkpmUlZKU1QxSTZJREVzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmNuSnZjaUJqYjJSbElHbHVaR2xqWVhScGJtY2dkR2hsSUdOdmJtNWxZM1JwYjI0Z2RHOGdkR2hsSUZCaGNuTmxJSE5sY25abGNuTWdabUZwYkdWa0xseHVJQ0FnSUNBcUlFQmpiMjV6ZEdGdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUVOUFRrNUZRMVJKVDA1ZlJrRkpURVZFT2lBeE1EQXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ2RHaGxJSE53WldOcFptbGxaQ0J2WW1wbFkzUWdaRzlsYzI0bmRDQmxlR2x6ZEM1Y2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JQUWtwRlExUmZUazlVWDBaUFZVNUVPaUF4TURFc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnZVc5MUlIUnlhV1ZrSUhSdklIRjFaWEo1SUhkcGRHZ2dZU0JrWVhSaGRIbHdaU0IwYUdGMElHUnZaWE51SjNSY2JpQWdJQ0FnS2lCemRYQndiM0owSUdsMExDQnNhV3RsSUdWNFlXTjBJRzFoZEdOb2FXNW5JR0Z1SUdGeWNtRjVJRzl5SUc5aWFtVmpkQzVjYmlBZ0lDQWdLaUJBWTI5dWMzUmhiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQkpUbFpCVEVsRVgxRlZSVkpaT2lBeE1ESXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ1lTQnRhWE56YVc1bklHOXlJR2x1ZG1Gc2FXUWdZMnhoYzNOdVlXMWxMaUJEYkdGemMyNWhiV1Z6SUdGeVpWeHVJQ0FnSUNBcUlHTmhjMlV0YzJWdWMybDBhWFpsTGlCVWFHVjVJRzExYzNRZ2MzUmhjblFnZDJsMGFDQmhJR3hsZEhSbGNpd2dZVzVrSUdFdGVrRXRXakF0T1Y4Z1lYSmxJSFJvWlZ4dUlDQWdJQ0FxSUc5dWJIa2dkbUZzYVdRZ1kyaGhjbUZqZEdWeWN5NWNiaUFnSUNBZ0tpQkFZMjl1YzNSaGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCSlRsWkJURWxFWDBOTVFWTlRYMDVCVFVVNklERXdNeXhjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWeWNtOXlJR052WkdVZ2FXNWthV05oZEdsdVp5QmhiaUIxYm5Od1pXTnBabWxsWkNCdlltcGxZM1FnYVdRdVhHNGdJQ0FnSUNvZ1FHTnZibk4wWVc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnVFVsVFUwbE9SMTlQUWtwRlExUmZTVVE2SURFd05DeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVZ5Y205eUlHTnZaR1VnYVc1a2FXTmhkR2x1WnlCaGJpQnBiblpoYkdsa0lHdGxlU0J1WVcxbExpQkxaWGx6SUdGeVpTQmpZWE5sTFhObGJuTnBkR2wyWlM0Z1ZHaGxlVnh1SUNBZ0lDQXFJRzExYzNRZ2MzUmhjblFnZDJsMGFDQmhJR3hsZEhSbGNpd2dZVzVrSUdFdGVrRXRXakF0T1Y4Z1lYSmxJSFJvWlNCdmJteDVJSFpoYkdsa0lHTm9ZWEpoWTNSbGNuTXVYRzRnSUNBZ0lDb2dRR052Ym5OMFlXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1NVNVdRVXhKUkY5TFJWbGZUa0ZOUlRvZ01UQTFMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlhKeWIzSWdZMjlrWlNCcGJtUnBZMkYwYVc1bklHRWdiV0ZzWm05eWJXVmtJSEJ2YVc1MFpYSXVJRmx2ZFNCemFHOTFiR1FnYm05MElITmxaU0IwYUdseklIVnViR1Z6YzF4dUlDQWdJQ0FxSUhsdmRTQm9ZWFpsSUdKbFpXNGdiWFZqYTJsdVp5QmhZbTkxZENCamFHRnVaMmx1WnlCcGJuUmxjbTVoYkNCUVlYSnpaU0JqYjJSbExseHVJQ0FnSUNBcUlFQmpiMjV6ZEdGdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUVsT1ZrRk1TVVJmVUU5SlRsUkZVam9nTVRBMkxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWEp5YjNJZ1kyOWtaU0JwYm1ScFkyRjBhVzVuSUhSb1lYUWdZbUZrYkhrZ1ptOXliV1ZrSUVwVFQwNGdkMkZ6SUhKbFkyVnBkbVZrSUhWd2MzUnlaV0Z0TGlCVWFHbHpYRzRnSUNBZ0lDb2daV2wwYUdWeUlHbHVaR2xqWVhSbGN5QjViM1VnYUdGMlpTQmtiMjVsSUhOdmJXVjBhR2x1WnlCMWJuVnpkV0ZzSUhkcGRHZ2diVzlrYVdaNWFXNW5JR2h2ZDF4dUlDQWdJQ0FxSUhSb2FXNW5jeUJsYm1OdlpHVWdkRzhnU2xOUFRpd2diM0lnZEdobElHNWxkSGR2Y21zZ2FYTWdabUZwYkdsdVp5QmlZV1JzZVM1Y2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JKVGxaQlRFbEVYMHBUVDA0NklERXdOeXhjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWeWNtOXlJR052WkdVZ2FXNWthV05oZEdsdVp5QjBhR0YwSUhSb1pTQm1aV0YwZFhKbElIbHZkU0IwY21sbFpDQjBieUJoWTJObGMzTWdhWE1nYjI1c2VWeHVJQ0FnSUNBcUlHRjJZV2xzWVdKc1pTQnBiblJsY201aGJHeDVJR1p2Y2lCMFpYTjBhVzVuSUhCMWNuQnZjMlZ6TGx4dUlDQWdJQ0FxSUVCamIyNXpkR0Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRU5QVFUxQlRrUmZWVTVCVmtGSlRFRkNURVU2SURFd09DeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRmx2ZFNCdGRYTjBJR05oYkd3Z1VHRnljMlV1YVc1cGRHbGhiR2w2WlNCaVpXWnZjbVVnZFhOcGJtY2dkR2hsSUZCaGNuTmxJR3hwWW5KaGNua3VYRzRnSUNBZ0lDb2dRR052Ym5OMFlXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1RrOVVYMGxPU1ZSSlFVeEpXa1ZFT2lBeE1Ea3NYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ2RHaGhkQ0JoSUdacFpXeGtJSGRoY3lCelpYUWdkRzhnWVc0Z2FXNWpiMjV6YVhOMFpXNTBJSFI1Y0dVdVhHNGdJQ0FnSUNvZ1FHTnZibk4wWVc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnU1U1RFQxSlNSVU5VWDFSWlVFVTZJREV4TVN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVnljbTl5SUdOdlpHVWdhVzVrYVdOaGRHbHVaeUJoYmlCcGJuWmhiR2xrSUdOb1lXNXVaV3dnYm1GdFpTNGdRU0JqYUdGdWJtVnNJRzVoYldVZ2FYTWdaV2wwYUdWeVhHNGdJQ0FnSUNvZ1lXNGdaVzF3ZEhrZ2MzUnlhVzVuSUNoMGFHVWdZbkp2WVdSallYTjBJR05vWVc1dVpXd3BJRzl5SUdOdmJuUmhhVzV6SUc5dWJIa2dZUzE2UVMxYU1DMDVYMXh1SUNBZ0lDQXFJR05vWVhKaFkzUmxjbk1nWVc1a0lITjBZWEowY3lCM2FYUm9JR0VnYkdWMGRHVnlMbHh1SUNBZ0lDQXFJRUJqYjI1emRHRnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lFbE9Wa0ZNU1VSZlEwaEJUazVGVEY5T1FVMUZPaUF4TVRJc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnZEdoaGRDQndkWE5vSUdseklHMXBjMk52Ym1acFozVnlaV1F1WEc0Z0lDQWdJQ29nUUdOdmJuTjBZVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdVRlZUU0Y5TlNWTkRUMDVHU1VkVlVrVkVPaUF4TVRVc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnZEdoaGRDQjBhR1VnYjJKcVpXTjBJR2x6SUhSdmJ5QnNZWEpuWlM1Y2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JQUWtwRlExUmZWRTlQWDB4QlVrZEZPaUF4TVRZc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnZEdoaGRDQjBhR1VnYjNCbGNtRjBhVzl1SUdsemJpZDBJR0ZzYkc5M1pXUWdabTl5SUdOc2FXVnVkSE11WEc0Z0lDQWdJQ29nUUdOdmJuTjBZVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdUMUJGVWtGVVNVOU9YMFpQVWtKSlJFUkZUam9nTVRFNUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWEp5YjNJZ1kyOWtaU0JwYm1ScFkyRjBhVzVuSUhSb1pTQnlaWE4xYkhRZ2QyRnpJRzV2ZENCbWIzVnVaQ0JwYmlCMGFHVWdZMkZqYUdVdVhHNGdJQ0FnSUNvZ1FHTnZibk4wWVc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnUTBGRFNFVmZUVWxUVXpvZ01USXdMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlhKeWIzSWdZMjlrWlNCcGJtUnBZMkYwYVc1bklIUm9ZWFFnWVc0Z2FXNTJZV3hwWkNCclpYa2dkMkZ6SUhWelpXUWdhVzRnWVNCdVpYTjBaV1JjYmlBZ0lDQWdLaUJLVTA5T1QySnFaV04wTGx4dUlDQWdJQ0FxSUVCamIyNXpkR0Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRWxPVmtGTVNVUmZUa1ZUVkVWRVgwdEZXVG9nTVRJeExGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWEp5YjNJZ1kyOWtaU0JwYm1ScFkyRjBhVzVuSUhSb1lYUWdZVzRnYVc1MllXeHBaQ0JtYVd4bGJtRnRaU0IzWVhNZ2RYTmxaQ0JtYjNJZ1VHRnljMlZHYVd4bExseHVJQ0FnSUNBcUlFRWdkbUZzYVdRZ1ptbHNaU0J1WVcxbElHTnZiblJoYVc1eklHOXViSGtnWVMxNlFTMWFNQzA1WHk0Z1kyaGhjbUZqZEdWeWN5QmhibVFnYVhNZ1ltVjBkMlZsYmlBeFhHNGdJQ0FnSUNvZ1lXNWtJREV5T0NCamFHRnlZV04wWlhKekxseHVJQ0FnSUNBcUlFQmpiMjV6ZEdGdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUVsT1ZrRk1TVVJmUmtsTVJWOU9RVTFGT2lBeE1qSXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ1lXNGdhVzUyWVd4cFpDQkJRMHdnZDJGeklIQnliM1pwWkdWa0xseHVJQ0FnSUNBcUlFQmpiMjV6ZEdGdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUVsT1ZrRk1TVVJmUVVOTU9pQXhNak1zWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmNuSnZjaUJqYjJSbElHbHVaR2xqWVhScGJtY2dkR2hoZENCMGFHVWdjbVZ4ZFdWemRDQjBhVzFsWkNCdmRYUWdiMjRnZEdobElITmxjblpsY2k0Z1ZIbHdhV05oYkd4NVhHNGdJQ0FnSUNvZ2RHaHBjeUJwYm1ScFkyRjBaWE1nZEdoaGRDQjBhR1VnY21WeGRXVnpkQ0JwY3lCMGIyOGdaWGh3Wlc1emFYWmxJSFJ2SUhKMWJpNWNiaUFnSUNBZ0tpQkFZMjl1YzNSaGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCVVNVMUZUMVZVT2lBeE1qUXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ2RHaGhkQ0IwYUdVZ1pXMWhhV3dnWVdSa2NtVnpjeUIzWVhNZ2FXNTJZV3hwWkM1Y2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JKVGxaQlRFbEVYMFZOUVVsTVgwRkVSRkpGVTFNNklERXlOU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWeWNtOXlJR052WkdVZ2FXNWthV05oZEdsdVp5QmhJRzFwYzNOcGJtY2dZMjl1ZEdWdWRDQjBlWEJsTGx4dUlDQWdJQ0FxSUVCamIyNXpkR0Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRTFKVTFOSlRrZGZRMDlPVkVWT1ZGOVVXVkJGT2lBeE1qWXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ1lTQnRhWE56YVc1bklHTnZiblJsYm5RZ2JHVnVaM1JvTGx4dUlDQWdJQ0FxSUVCamIyNXpkR0Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRTFKVTFOSlRrZGZRMDlPVkVWT1ZGOU1SVTVIVkVnNklERXlOeXhjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWeWNtOXlJR052WkdVZ2FXNWthV05oZEdsdVp5QmhiaUJwYm5aaGJHbGtJR052Ym5SbGJuUWdiR1Z1WjNSb0xseHVJQ0FnSUNBcUlFQmpiMjV6ZEdGdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUVsT1ZrRk1TVVJmUTA5T1ZFVk9WRjlNUlU1SFZFZzZJREV5T0N4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVnljbTl5SUdOdlpHVWdhVzVrYVdOaGRHbHVaeUJoSUdacGJHVWdkR2hoZENCM1lYTWdkRzl2SUd4aGNtZGxMbHh1SUNBZ0lDQXFJRUJqYjI1emRHRnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lFWkpURVZmVkU5UFgweEJVa2RGT2lBeE1qa3NYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ1lXNGdaWEp5YjNJZ2MyRjJhVzVuSUdFZ1ptbHNaUzVjYmlBZ0lDQWdLaUJBWTI5dWMzUmhiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQkdTVXhGWDFOQlZrVmZSVkpTVDFJNklERXpNQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWeWNtOXlJR052WkdVZ2FXNWthV05oZEdsdVp5QjBhR0YwSUdFZ2RXNXBjWFZsSUdacFpXeGtJSGRoY3lCbmFYWmxiaUJoSUhaaGJIVmxJSFJvWVhRZ2FYTmNiaUFnSUNBZ0tpQmhiSEpsWVdSNUlIUmhhMlZ1TGx4dUlDQWdJQ0FxSUVCamIyNXpkR0Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRVJWVUV4SlEwRlVSVjlXUVV4VlJUb2dNVE0zTEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JYSnliM0lnWTI5a1pTQnBibVJwWTJGMGFXNW5JSFJvWVhRZ1lTQnliMnhsSjNNZ2JtRnRaU0JwY3lCcGJuWmhiR2xrTGx4dUlDQWdJQ0FxSUVCamIyNXpkR0Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRWxPVmtGTVNVUmZVazlNUlY5T1FVMUZPaUF4TXprc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnZEdoaGRDQmhiaUJoY0hCc2FXTmhkR2x2YmlCeGRXOTBZU0IzWVhNZ1pYaGpaV1ZrWldRdUlDQlZjR2R5WVdSbElIUnZYRzRnSUNBZ0lDb2djbVZ6YjJ4MlpTNWNiaUFnSUNBZ0tpQkFZMjl1YzNSaGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCRldFTkZSVVJGUkY5UlZVOVVRVG9nTVRRd0xGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWEp5YjNJZ1kyOWtaU0JwYm1ScFkyRjBhVzVuSUhSb1lYUWdZU0JEYkc5MVpDQkRiMlJsSUhOamNtbHdkQ0JtWVdsc1pXUXVYRzRnSUNBZ0lDb2dRR052Ym5OMFlXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1UwTlNTVkJVWDBaQlNVeEZSRG9nTVRReExGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWEp5YjNJZ1kyOWtaU0JwYm1ScFkyRjBhVzVuSUhSb1lYUWdZU0JEYkc5MVpDQkRiMlJsSUhaaGJHbGtZWFJwYjI0Z1ptRnBiR1ZrTGx4dUlDQWdJQ0FxSUVCamIyNXpkR0Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRlpCVEVsRVFWUkpUMDVmUlZKU1QxSTZJREUwTWl4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVnljbTl5SUdOdlpHVWdhVzVrYVdOaGRHbHVaeUIwYUdGMElHbHVkbUZzYVdRZ2FXMWhaMlVnWkdGMFlTQjNZWE1nY0hKdmRtbGtaV1F1WEc0Z0lDQWdJQ29nUUdOdmJuTjBZVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdTVTVXUVV4SlJGOUpUVUZIUlY5RVFWUkJPaUF4TlRBc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnWVc0Z2RXNXpZWFpsWkNCbWFXeGxMbHh1SUNBZ0lDQXFJRUJqYjI1emRHRnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lGVk9VMEZXUlVSZlJrbE1SVjlGVWxKUFVqb2dNVFV4TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JYSnliM0lnWTI5a1pTQnBibVJwWTJGMGFXNW5JR0Z1SUdsdWRtRnNhV1FnY0hWemFDQjBhVzFsTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRWxPVmtGTVNVUmZVRlZUU0Y5VVNVMUZYMFZTVWs5U09pQXhOVElzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmNuSnZjaUJqYjJSbElHbHVaR2xqWVhScGJtY2dZVzRnWlhKeWIzSWdaR1ZzWlhScGJtY2dZU0JtYVd4bExseHVJQ0FnSUNBcUlFQmpiMjV6ZEdGdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUVaSlRFVmZSRVZNUlZSRlgwVlNVazlTT2lBeE5UTXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ2RHaGhkQ0IwYUdVZ1lYQndiR2xqWVhScGIyNGdhR0Z6SUdWNFkyVmxaR1ZrSUdsMGN5QnlaWEYxWlhOMFhHNGdJQ0FnSUNvZ2JHbHRhWFF1WEc0Z0lDQWdJQ29nUUdOdmJuTjBZVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdVa1ZSVlVWVFZGOU1TVTFKVkY5RldFTkZSVVJGUkRvZ01UVTFMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlhKeWIzSWdZMjlrWlNCcGJtUnBZMkYwYVc1bklHRnVJR2x1ZG1Gc2FXUWdaWFpsYm5RZ2JtRnRaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQkpUbFpCVEVsRVgwVldSVTVVWDA1QlRVVTZJREUyTUN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVnljbTl5SUdOdlpHVWdhVzVrYVdOaGRHbHVaeUIwYUdGMElIUm9aU0IxYzJWeWJtRnRaU0JwY3lCdGFYTnphVzVuSUc5eUlHVnRjSFI1TGx4dUlDQWdJQ0FxSUVCamIyNXpkR0Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRlZUUlZKT1FVMUZYMDFKVTFOSlRrYzZJREl3TUN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVnljbTl5SUdOdlpHVWdhVzVrYVdOaGRHbHVaeUIwYUdGMElIUm9aU0J3WVhOemQyOXlaQ0JwY3lCdGFYTnphVzVuSUc5eUlHVnRjSFI1TGx4dUlDQWdJQ0FxSUVCamIyNXpkR0Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRkJCVTFOWFQxSkVYMDFKVTFOSlRrYzZJREl3TVN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVnljbTl5SUdOdlpHVWdhVzVrYVdOaGRHbHVaeUIwYUdGMElIUm9aU0IxYzJWeWJtRnRaU0JvWVhNZ1lXeHlaV0ZrZVNCaVpXVnVJSFJoYTJWdUxseHVJQ0FnSUNBcUlFQmpiMjV6ZEdGdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUZWVFJWSk9RVTFGWDFSQlMwVk9PaUF5TURJc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnZEdoaGRDQjBhR1VnWlcxaGFXd2dhR0Z6SUdGc2NtVmhaSGtnWW1WbGJpQjBZV3RsYmk1Y2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JGVFVGSlRGOVVRVXRGVGpvZ01qQXpMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlhKeWIzSWdZMjlrWlNCcGJtUnBZMkYwYVc1bklIUm9ZWFFnZEdobElHVnRZV2xzSUdseklHMXBjM05wYm1jc0lHSjFkQ0J0ZFhOMElHSmxJSE53WldOcFptbGxaQzVjYmlBZ0lDQWdLaUJBWTI5dWMzUmhiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQkZUVUZKVEY5TlNWTlRTVTVIT2lBeU1EUXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ2RHaGhkQ0JoSUhWelpYSWdkMmwwYUNCMGFHVWdjM0JsWTJsbWFXVmtJR1Z0WVdsc0lIZGhjeUJ1YjNRZ1ptOTFibVF1WEc0Z0lDQWdJQ29nUUdOdmJuTjBZVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdSVTFCU1V4ZlRrOVVYMFpQVlU1RU9pQXlNRFVzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmNuSnZjaUJqYjJSbElHbHVaR2xqWVhScGJtY2dkR2hoZENCaElIVnpaWElnYjJKcVpXTjBJSGRwZEdodmRYUWdZU0IyWVd4cFpDQnpaWE56YVc5dUlHTnZkV3hrWEc0Z0lDQWdJQ29nYm05MElHSmxJR0ZzZEdWeVpXUXVYRzRnSUNBZ0lDb2dRR052Ym5OMFlXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1UwVlRVMGxQVGw5TlNWTlRTVTVIT2lBeU1EWXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGY25KdmNpQmpiMlJsSUdsdVpHbGpZWFJwYm1jZ2RHaGhkQ0JoSUhWelpYSWdZMkZ1SUc5dWJIa2dZbVVnWTNKbFlYUmxaQ0IwYUhKdmRXZG9JSE5wWjI1MWNDNWNiaUFnSUNBZ0tpQkFZMjl1YzNSaGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCTlZWTlVYME5TUlVGVVJWOVZVMFZTWDFSSVVrOVZSMGhmVTBsSFRsVlFPaUF5TURjc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZjbkp2Y2lCamIyUmxJR2x1WkdsallYUnBibWNnZEdoaGRDQmhiaUJoYmlCaFkyTnZkVzUwSUdKbGFXNW5JR3hwYm10bFpDQnBjeUJoYkhKbFlXUjVJR3hwYm10bFpGeHVJQ0FnSUNBcUlIUnZJR0Z1YjNSb1pYSWdkWE5sY2k1Y2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JCUTBOUFZVNVVYMEZNVWtWQlJGbGZURWxPUzBWRU9pQXlNRGdzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmNuSnZjaUJqYjJSbElHbHVaR2xqWVhScGJtY2dkR2hoZENCMGFHVWdZM1Z5Y21WdWRDQnpaWE56YVc5dUlIUnZhMlZ1SUdseklHbHVkbUZzYVdRdVhHNGdJQ0FnSUNvZ1FHTnZibk4wWVc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnU1U1V1FVeEpSRjlUUlZOVFNVOU9YMVJQUzBWT09pQXlNRGtzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmNuSnZjaUJqYjJSbElHbHVaR2xqWVhScGJtY2dkR2hoZENCaElIVnpaWElnWTJGdWJtOTBJR0psSUd4cGJtdGxaQ0IwYnlCaGJpQmhZMk52ZFc1MElHSmxZMkYxYzJWY2JpQWdJQ0FnS2lCMGFHRjBJR0ZqWTI5MWJuUW5jeUJwWkNCamIzVnNaQ0J1YjNRZ1ltVWdabTkxYm1RdVhHNGdJQ0FnSUNvZ1FHTnZibk4wWVc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnVEVsT1MwVkVYMGxFWDAxSlUxTkpUa2M2SURJMU1DeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVZ5Y205eUlHTnZaR1VnYVc1a2FXTmhkR2x1WnlCMGFHRjBJR0VnZFhObGNpQjNhWFJvSUdFZ2JHbHVhMlZrSUNobExtY3VJRVpoWTJWaWIyOXJLU0JoWTJOdmRXNTBYRzRnSUNBZ0lDb2dhR0Z6SUdGdUlHbHVkbUZzYVdRZ2MyVnpjMmx2Ymk1Y2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JKVGxaQlRFbEVYMHhKVGt0RlJGOVRSVk5UU1U5T09pQXlOVEVzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmNuSnZjaUJqYjJSbElHbHVaR2xqWVhScGJtY2dkR2hoZENCaElITmxjblpwWTJVZ1ltVnBibWNnYkdsdWEyVmtJQ2hsTG1jdUlFWmhZMlZpYjI5cklHOXlYRzRnSUNBZ0lDb2dWSGRwZEhSbGNpa2dhWE1nZFc1emRYQndiM0owWldRdVhHNGdJQ0FnSUNvZ1FHTnZibk4wWVc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnVlU1VFZWQlFUMUpVUlVSZlUwVlNWa2xEUlRvZ01qVXlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlhKeWIzSWdZMjlrWlNCcGJtUnBZMkYwYVc1bklIUm9ZWFFnZEdobGNtVWdkMlZ5WlNCdGRXeDBhWEJzWlNCbGNuSnZjbk11SUVGblozSmxaMkYwWlNCbGNuSnZjbk5jYmlBZ0lDQWdLaUJvWVhabElHRnVJRndpWlhKeWIzSnpYQ0lnY0hKdmNHVnlkSGtzSUhkb2FXTm9JR2x6SUdGdUlHRnljbUY1SUc5bUlHVnljbTl5SUc5aWFtVmpkSE1nZDJsMGFDQnRiM0psWEc0Z0lDQWdJQ29nWkdWMFlXbHNJR0ZpYjNWMElHVmhZMmdnWlhKeWIzSWdkR2hoZENCdlkyTjFjbkpsWkM1Y2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JCUjBkU1JVZEJWRVZmUlZKU1QxSTZJRFl3TUN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVnljbTl5SUdOdlpHVWdhVzVrYVdOaGRHbHVaeUIwYUdVZ1kyeHBaVzUwSUhkaGN5QjFibUZpYkdVZ2RHOGdjbVZoWkNCaGJpQnBibkIxZENCbWFXeGxMbHh1SUNBZ0lDQXFJRUJqYjI1emRHRnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lFWkpURVZmVWtWQlJGOUZVbEpQVWpvZ05qQXhMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlhKeWIzSWdZMjlrWlNCcGJtUnBZMkYwYVc1bklHRWdjbVZoYkNCbGNuSnZjaUJqYjJSbElHbHpJSFZ1WVhaaGFXeGhZbXhsSUdKbFkyRjFjMlZjYmlBZ0lDQWdLaUIzWlNCb1lXUWdkRzhnZFhObElHRnVJRmhFYjIxaGFXNVNaWEYxWlhOMElHOWlhbVZqZENCMGJ5QmhiR3h2ZHlCRFQxSlRJSEpsY1hWbGMzUnpJR2x1WEc0Z0lDQWdJQ29nU1c1MFpYSnVaWFFnUlhod2JHOXlaWElzSUhkb2FXTm9JSE4wY21sd2N5QjBhR1VnWW05a2VTQm1jbTl0SUVoVVZGQWdjbVZ6Y0c5dWMyVnpJSFJvWVhRZ2FHRjJaVnh1SUNBZ0lDQXFJR0VnYm05dUxUSllXQ0J6ZEdGMGRYTWdZMjlrWlM1Y2JpQWdJQ0FnS2lCQVkyOXVjM1JoYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JZWDBSUFRVRkpUbDlTUlZGVlJWTlVPaUEyTURKY2JpQWdmU2s3WEc1Y2JuMG9kR2hwY3lrcE8xeHVYRzR2S21kc2IySmhiQ0JmT2lCbVlXeHpaU0FxTDF4dUtHWjFibU4wYVc5dUtDa2dlMXh1SUNCMllYSWdjbTl2ZENBOUlIUm9hWE03WEc0Z0lIWmhjaUJRWVhKelpTQTlJQ2h5YjI5MExsQmhjbk5sSUh4OElDaHliMjkwTGxCaGNuTmxJRDBnZTMwcEtUdGNiaUFnZG1GeUlHVjJaVzUwVTNCc2FYUjBaWElnUFNBdlhGeHpLeTg3WEc0Z0lIWmhjaUJ6YkdsalpTQTlJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUdOc1lYTnpYRzRnSUNBcVhHNGdJQ0FxSUR4d1BsQmhjbk5sTGtWMlpXNTBjeUJwY3lCaElHWnZjbXNnYjJZZ1FtRmphMkp2Ym1VbmN5QkZkbVZ1ZEhNZ2JXOWtkV3hsTENCd2NtOTJhV1JsWkNCbWIzSWdlVzkxY2x4dUlDQWdLaUJqYjI1MlpXNXBaVzVqWlM0OEwzQStYRzRnSUNBcVhHNGdJQ0FxSUR4d1BrRWdiVzlrZFd4bElIUm9ZWFFnWTJGdUlHSmxJRzFwZUdWa0lHbHVJSFJ2SUdGdWVTQnZZbXBsWTNRZ2FXNGdiM0prWlhJZ2RHOGdjSEp2ZG1sa1pWeHVJQ0FnS2lCcGRDQjNhWFJvSUdOMWMzUnZiU0JsZG1WdWRITXVJRmx2ZFNCdFlYa2dZbWx1WkNCallXeHNZbUZqYXlCbWRXNWpkR2x2Ym5NZ2RHOGdZVzRnWlhabGJuUmNiaUFnSUNvZ2QybDBhQ0JnYjI1Z0xDQnZjaUJ5WlcxdmRtVWdkR2hsYzJVZ1puVnVZM1JwYjI1eklIZHBkR2dnWUc5bVptQXVYRzRnSUNBcUlGUnlhV2RuWlhKcGJtY2dZVzRnWlhabGJuUWdabWx5WlhNZ1lXeHNJR05oYkd4aVlXTnJjeUJwYmlCMGFHVWdiM0prWlhJZ2RHaGhkQ0JnYjI1Z0lIZGhjMXh1SUNBZ0tpQmpZV3hzWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRHh3Y21VK1hHNGdJQ0FxSUNBZ0lDQjJZWElnYjJKcVpXTjBJRDBnZTMwN1hHNGdJQ0FxSUNBZ0lDQmZMbVY0ZEdWdVpDaHZZbXBsWTNRc0lGQmhjbk5sTGtWMlpXNTBjeWs3WEc0Z0lDQXFJQ0FnSUNCdlltcGxZM1F1YjI0b0oyVjRjR0Z1WkNjc0lHWjFibU4wYVc5dUtDbDdJR0ZzWlhKMEtDZGxlSEJoYm1SbFpDY3BPeUI5S1R0Y2JpQWdJQ29nSUNBZ0lHOWlhbVZqZEM1MGNtbG5aMlZ5S0NkbGVIQmhibVFuS1RzOEwzQnlaVDQ4TDNBK1hHNGdJQ0FxWEc0Z0lDQXFJRHh3UGtadmNpQnRiM0psSUdsdVptOXliV0YwYVc5dUxDQnpaV1VnZEdobFhHNGdJQ0FxSUR4aElHaHlaV1k5WENKb2RIUndPaTh2Wkc5amRXMWxiblJqYkc5MVpDNW5hWFJvZFdJdVkyOXRMMkpoWTJ0aWIyNWxMeU5GZG1WdWRITmNJajVDWVdOclltOXVaVnh1SUNBZ0tpQmtiMk4xYldWdWRHRjBhVzl1UEM5aFBpNDhMM0ErWEc0Z0lDQXFMMXh1SUNCUVlYSnpaUzVGZG1WdWRITWdQU0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUW1sdVpDQnZibVVnYjNJZ2JXOXlaU0J6Y0dGalpTQnpaWEJoY21GMFpXUWdaWFpsYm5SekxDQmdaWFpsYm5SellDd2dkRzhnWVNCZ1kyRnNiR0poWTJ0Z1hHNGdJQ0FnSUNvZ1puVnVZM1JwYjI0dUlGQmhjM05wYm1jZ1lGd2lZV3hzWENKZ0lIZHBiR3dnWW1sdVpDQjBhR1VnWTJGc2JHSmhZMnNnZEc4Z1lXeHNJR1YyWlc1MGN5Qm1hWEpsWkM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2YmpvZ1puVnVZM1JwYjI0b1pYWmxiblJ6TENCallXeHNZbUZqYXl3Z1kyOXVkR1Y0ZENrZ2UxeHVYRzRnSUNBZ0lDQjJZWElnWTJGc2JITXNJR1YyWlc1MExDQnViMlJsTENCMFlXbHNMQ0JzYVhOME8xeHVJQ0FnSUNBZ2FXWWdLQ0ZqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHVjJaVzUwY3lBOUlHVjJaVzUwY3k1emNHeHBkQ2hsZG1WdWRGTndiR2wwZEdWeUtUdGNiaUFnSUNBZ0lHTmhiR3h6SUQwZ2RHaHBjeTVmWTJGc2JHSmhZMnR6SUh4OElDaDBhR2x6TGw5allXeHNZbUZqYTNNZ1BTQjdmU2s3WEc1Y2JpQWdJQ0FnSUM4dklFTnlaV0YwWlNCaGJpQnBiVzExZEdGaWJHVWdZMkZzYkdKaFkyc2diR2x6ZEN3Z1lXeHNiM2RwYm1jZ2RISmhkbVZ5YzJGc0lHUjFjbWx1WjF4dUlDQWdJQ0FnTHk4Z2JXOWthV1pwWTJGMGFXOXVMaUFnVkdobElIUmhhV3dnYVhNZ1lXNGdaVzF3ZEhrZ2IySnFaV04wSUhSb1lYUWdkMmxzYkNCaGJIZGhlWE1nWW1VZ2RYTmxaRnh1SUNBZ0lDQWdMeThnWVhNZ2RHaGxJRzVsZUhRZ2JtOWtaUzVjYmlBZ0lDQWdJR1YyWlc1MElEMGdaWFpsYm5SekxuTm9hV1owS0NrN1hHNGdJQ0FnSUNCM2FHbHNaU0FvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYkdsemRDQTlJR05oYkd4elcyVjJaVzUwWFR0Y2JpQWdJQ0FnSUNBZ2JtOWtaU0E5SUd4cGMzUWdQeUJzYVhOMExuUmhhV3dnT2lCN2ZUdGNiaUFnSUNBZ0lDQWdibTlrWlM1dVpYaDBJRDBnZEdGcGJDQTlJSHQ5TzF4dUlDQWdJQ0FnSUNCdWIyUmxMbU52Ym5SbGVIUWdQU0JqYjI1MFpYaDBPMXh1SUNBZ0lDQWdJQ0J1YjJSbExtTmhiR3hpWVdOcklEMGdZMkZzYkdKaFkyczdYRzRnSUNBZ0lDQWdJR05oYkd4elcyVjJaVzUwWFNBOUlIdDBZV2xzT2lCMFlXbHNMQ0J1WlhoME9pQnNhWE4wSUQ4Z2JHbHpkQzV1WlhoMElEb2dibTlrWlgwN1hHNGdJQ0FnSUNBZ0lHVjJaVzUwSUQwZ1pYWmxiblJ6TG5Ob2FXWjBLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaVzF2ZG1VZ2IyNWxJRzl5SUcxaGJua2dZMkZzYkdKaFkydHpMaUJKWmlCZ1kyOXVkR1Y0ZEdBZ2FYTWdiblZzYkN3Z2NtVnRiM1psY3lCaGJHd2dZMkZzYkdKaFkydHpYRzRnSUNBZ0lDb2dkMmwwYUNCMGFHRjBJR1oxYm1OMGFXOXVMaUJKWmlCZ1kyRnNiR0poWTJ0Z0lHbHpJRzUxYkd3c0lISmxiVzkyWlhNZ1lXeHNJR05oYkd4aVlXTnJjeUJtYjNJZ2RHaGxYRzRnSUNBZ0lDb2daWFpsYm5RdUlFbG1JR0JsZG1WdWRITmdJR2x6SUc1MWJHd3NJSEpsYlc5MlpYTWdZV3hzSUdKdmRXNWtJR05oYkd4aVlXTnJjeUJtYjNJZ1lXeHNJR1YyWlc1MGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCdlptWTZJR1oxYm1OMGFXOXVLR1YyWlc1MGN5d2dZMkZzYkdKaFkyc3NJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJSFpoY2lCbGRtVnVkQ3dnWTJGc2JITXNJRzV2WkdVc0lIUmhhV3dzSUdOaUxDQmpkSGc3WEc1Y2JpQWdJQ0FnSUM4dklFNXZJR1YyWlc1MGN5d2diM0lnY21WdGIzWnBibWNnS21Gc2JDb2daWFpsYm5SekxseHVJQ0FnSUNBZ2FXWWdLQ0VvWTJGc2JITWdQU0IwYUdsekxsOWpZV3hzWW1GamEzTXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNnaEtHVjJaVzUwY3lCOGZDQmpZV3hzWW1GamF5QjhmQ0JqYjI1MFpYaDBLU2tnZTF4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NWZZMkZzYkdKaFkydHpPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdURzl2Y0NCMGFISnZkV2RvSUhSb1pTQnNhWE4wWldRZ1pYWmxiblJ6SUdGdVpDQmpiMjUwWlhoMGN5d2djM0JzYVdOcGJtY2dkR2hsYlNCdmRYUWdiMllnZEdobFhHNGdJQ0FnSUNBdkx5QnNhVzVyWldRZ2JHbHpkQ0J2WmlCallXeHNZbUZqYTNNZ2FXWWdZWEJ3Y205d2NtbGhkR1V1WEc0Z0lDQWdJQ0JsZG1WdWRITWdQU0JsZG1WdWRITWdQeUJsZG1WdWRITXVjM0JzYVhRb1pYWmxiblJUY0d4cGRIUmxjaWtnT2lCUFltcGxZM1F1YTJWNWN5aGpZV3hzY3lrN1hHNGdJQ0FnSUNCbGRtVnVkQ0E5SUdWMlpXNTBjeTV6YUdsbWRDZ3BPMXh1SUNBZ0lDQWdkMmhwYkdVZ0tHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHNXZaR1VnUFNCallXeHNjMXRsZG1WdWRGMDdYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQmpZV3hzYzF0bGRtVnVkRjA3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hibTlrWlNCOGZDQWhLR05oYkd4aVlXTnJJSHg4SUdOdmJuUmxlSFFwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaWFpsYm5RZ1BTQmxkbVZ1ZEhNdWMyaHBablFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCRGNtVmhkR1VnWVNCdVpYY2diR2x6ZEN3Z2IyMXBkSFJwYm1jZ2RHaGxJR2x1WkdsallYUmxaQ0JqWVd4c1ltRmphM011WEc0Z0lDQWdJQ0FnSUhSaGFXd2dQU0J1YjJSbExuUmhhV3c3WEc0Z0lDQWdJQ0FnSUc1dlpHVWdQU0J1YjJSbExtNWxlSFE3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2h1YjJSbElDRTlQU0IwWVdsc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJJZ1BTQnViMlJsTG1OaGJHeGlZV05yTzF4dUlDQWdJQ0FnSUNBZ0lHTjBlQ0E5SUc1dlpHVXVZMjl1ZEdWNGREdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0tHTmhiR3hpWVdOcklDWW1JR05pSUNFOVBTQmpZV3hzWW1GamF5a2dmSHdnS0dOdmJuUmxlSFFnSmlZZ1kzUjRJQ0U5UFNCamIyNTBaWGgwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZiaWhsZG1WdWRDd2dZMklzSUdOMGVDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHNXZaR1VnUFNCdWIyUmxMbTVsZUhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaWFpsYm5RZ1BTQmxkbVZ1ZEhNdWMyaHBablFvS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJ5YVdkblpYSWdiMjVsSUc5eUlHMWhibmtnWlhabGJuUnpMQ0JtYVhKcGJtY2dZV3hzSUdKdmRXNWtJR05oYkd4aVlXTnJjeTRnUTJGc2JHSmhZMnR6SUdGeVpWeHVJQ0FnSUNBcUlIQmhjM05sWkNCMGFHVWdjMkZ0WlNCaGNtZDFiV1Z1ZEhNZ1lYTWdZSFJ5YVdkblpYSmdJR2x6TENCaGNHRnlkQ0JtY205dElIUm9aU0JsZG1WdWRDQnVZVzFsWEc0Z0lDQWdJQ29nS0hWdWJHVnpjeUI1YjNVbmNtVWdiR2x6ZEdWdWFXNW5JRzl1SUdCY0ltRnNiRndpWUN3Z2QyaHBZMmdnZDJsc2JDQmpZWFZ6WlNCNWIzVnlJR05oYkd4aVlXTnJJSFJ2WEc0Z0lDQWdJQ29nY21WalpXbDJaU0IwYUdVZ2RISjFaU0J1WVcxbElHOW1JSFJvWlNCbGRtVnVkQ0JoY3lCMGFHVWdabWx5YzNRZ1lYSm5kVzFsYm5RcExseHVJQ0FnSUNBcUwxeHVJQ0FnSUhSeWFXZG5aWEk2SUdaMWJtTjBhVzl1S0dWMlpXNTBjeWtnZTF4dUlDQWdJQ0FnZG1GeUlHVjJaVzUwTENCdWIyUmxMQ0JqWVd4c2N5d2dkR0ZwYkN3Z1lYSm5jeXdnWVd4c0xDQnlaWE4wTzF4dUlDQWdJQ0FnYVdZZ0tDRW9ZMkZzYkhNZ1BTQjBhR2x6TGw5allXeHNZbUZqYTNNcEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWVd4c0lEMGdZMkZzYkhNdVlXeHNPMXh1SUNBZ0lDQWdaWFpsYm5SeklEMGdaWFpsYm5SekxuTndiR2wwS0dWMlpXNTBVM0JzYVhSMFpYSXBPMXh1SUNBZ0lDQWdjbVZ6ZENBOUlITnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F4S1R0Y2JseHVJQ0FnSUNBZ0x5OGdSbTl5SUdWaFkyZ2daWFpsYm5Rc0lIZGhiR3NnZEdoeWIzVm5hQ0IwYUdVZ2JHbHVhMlZrSUd4cGMzUWdiMllnWTJGc2JHSmhZMnR6SUhSM2FXTmxMRnh1SUNBZ0lDQWdMeThnWm1seWMzUWdkRzhnZEhKcFoyZGxjaUIwYUdVZ1pYWmxiblFzSUhSb1pXNGdkRzhnZEhKcFoyZGxjaUJoYm5rZ1lGd2lZV3hzWENKZ0lHTmhiR3hpWVdOcmN5NWNiaUFnSUNBZ0lHVjJaVzUwSUQwZ1pYWmxiblJ6TG5Ob2FXWjBLQ2s3WEc0Z0lDQWdJQ0IzYUdsc1pTQW9aWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdibTlrWlNBOUlHTmhiR3h6VzJWMlpXNTBYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBZV2xzSUQwZ2JtOWtaUzUwWVdsc08xeHVJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDZ29ibTlrWlNBOUlHNXZaR1V1Ym1WNGRDa2dJVDA5SUhSaGFXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1WTJGc2JHSmhZMnN1WVhCd2JIa29ibTlrWlM1amIyNTBaWGgwSUh4OElIUm9hWE1zSUhKbGMzUXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnViMlJsSUQwZ1lXeHNPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JtOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUmhhV3dnUFNCdWIyUmxMblJoYVd3N1hHNGdJQ0FnSUNBZ0lDQWdZWEpuY3lBOUlGdGxkbVZ1ZEYwdVkyOXVZMkYwS0hKbGMzUXBPMXh1SUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2dvYm05a1pTQTlJRzV2WkdVdWJtVjRkQ2tnSVQwOUlIUmhhV3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVdVkyRnNiR0poWTJzdVlYQndiSGtvYm05a1pTNWpiMjUwWlhoMElIeDhJSFJvYVhNc0lHRnlaM01wTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsZG1WdWRDQTlJR1YyWlc1MGN5NXphR2xtZENncE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzRnSUgwN0lDQmNibHh1SUNBdktpcGNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1RmRtVnVkSE11WW1sdVpDQTlJRkJoY25ObExrVjJaVzUwY3k1dmJqdGNibHh1SUNBdktpcGNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1RmRtVnVkSE11ZFc1aWFXNWtJRDBnVUdGeWMyVXVSWFpsYm5SekxtOW1aanRjYm4wdVkyRnNiQ2gwYUdsektTazdYRzVjYmx4dUx5cG5iRzlpWVd3Z2JtRjJhV2RoZEc5eU9pQm1ZV3h6WlNBcUwxeHVLR1oxYm1OMGFXOXVLSEp2YjNRcElIdGNiaUFnY205dmRDNVFZWEp6WlNBOUlISnZiM1F1VUdGeWMyVWdmSHdnZTMwN1hHNGdJSFpoY2lCUVlYSnpaU0E5SUhKdmIzUXVVR0Z5YzJVN1hHNGdJSFpoY2lCZklEMGdVR0Z5YzJVdVh6dGNibHh1SUNBdktpcGNiaUFnSUNvZ1EzSmxZWFJsY3lCaElHNWxkeUJIWlc5UWIybHVkQ0IzYVhSb0lHRnVlU0J2WmlCMGFHVWdabTlzYkc5M2FXNW5JR1p2Y20xek9qeGljajVjYmlBZ0lDb2dJQ0E4Y0hKbFBseHVJQ0FnS2lBZ0lHNWxkeUJIWlc5UWIybHVkQ2h2ZEdobGNrZGxiMUJ2YVc1MEtWeHVJQ0FnS2lBZ0lHNWxkeUJIWlc5UWIybHVkQ2d6TUN3Z016QXBYRzRnSUNBcUlDQWdibVYzSUVkbGIxQnZhVzUwS0Zzek1Dd2dNekJkS1Z4dUlDQWdLaUFnSUc1bGR5QkhaVzlRYjJsdWRDaDdiR0YwYVhSMVpHVTZJRE13TENCc2IyNW5hWFIxWkdVNklETXdmU2xjYmlBZ0lDb2dJQ0J1WlhjZ1IyVnZVRzlwYm5Rb0tTQWdMeThnWkdWbVlYVnNkSE1nZEc4Z0tEQXNJREFwWEc0Z0lDQXFJQ0FnUEM5d2NtVStYRzRnSUNBcUlFQmpiR0Z6YzF4dUlDQWdLbHh1SUNBZ0tpQThjRDVTWlhCeVpYTmxiblJ6SUdFZ2JHRjBhWFIxWkdVZ0x5QnNiMjVuYVhSMVpHVWdjRzlwYm5RZ2RHaGhkQ0J0WVhrZ1ltVWdZWE56YjJOcFlYUmxaRnh1SUNBZ0tpQjNhWFJvSUdFZ2EyVjVJR2x1SUdFZ1VHRnljMlZQWW1wbFkzUWdiM0lnZFhObFpDQmhjeUJoSUhKbFptVnlaVzVqWlNCd2IybHVkQ0JtYjNJZ1oyVnZJSEYxWlhKcFpYTXVYRzRnSUNBcUlGUm9hWE1nWVd4c2IzZHpJSEJ5YjNocGJXbDBlUzFpWVhObFpDQnhkV1Z5YVdWeklHOXVJSFJvWlNCclpYa3VQQzl3UGx4dUlDQWdLbHh1SUNBZ0tpQThjRDVQYm14NUlHOXVaU0JyWlhrZ2FXNGdZU0JqYkdGemN5QnRZWGtnWTI5dWRHRnBiaUJoSUVkbGIxQnZhVzUwTGp3dmNENWNiaUFnSUNwY2JpQWdJQ29nUEhBK1JYaGhiWEJzWlRvOGNISmxQbHh1SUNBZ0tpQWdJSFpoY2lCd2IybHVkQ0E5SUc1bGR5QlFZWEp6WlM1SFpXOVFiMmx1ZENnek1DNHdMQ0F0TWpBdU1DazdYRzRnSUNBcUlDQWdkbUZ5SUc5aWFtVmpkQ0E5SUc1bGR5QlFZWEp6WlM1UFltcGxZM1FvWENKUWJHRmpaVTlpYW1WamRGd2lLVHRjYmlBZ0lDb2dJQ0J2WW1wbFkzUXVjMlYwS0Z3aWJHOWpZWFJwYjI1Y0lpd2djRzlwYm5RcE8xeHVJQ0FnS2lBZ0lHOWlhbVZqZEM1ellYWmxLQ2s3UEM5d2NtVStQQzl3UGx4dUlDQWdLaTljYmlBZ1VHRnljMlV1UjJWdlVHOXBiblFnUFNCbWRXNWpkR2x2YmloaGNtY3hMQ0JoY21jeUtTQjdYRzRnSUNBZ2FXWWdLRjh1YVhOQmNuSmhlU2hoY21jeEtTa2dlMXh1SUNBZ0lDQWdVR0Z5YzJVdVIyVnZVRzlwYm5RdVgzWmhiR2xrWVhSbEtHRnlaekZiTUYwc0lHRnlaekZiTVYwcE8xeHVJQ0FnSUNBZ2RHaHBjeTVzWVhScGRIVmtaU0E5SUdGeVp6RmJNRjA3WEc0Z0lDQWdJQ0IwYUdsekxteHZibWRwZEhWa1pTQTlJR0Z5WnpGYk1WMDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGZMbWx6VDJKcVpXTjBLR0Z5WnpFcEtTQjdYRzRnSUNBZ0lDQlFZWEp6WlM1SFpXOVFiMmx1ZEM1ZmRtRnNhV1JoZEdVb1lYSm5NUzVzWVhScGRIVmtaU3dnWVhKbk1TNXNiMjVuYVhSMVpHVXBPMXh1SUNBZ0lDQWdkR2hwY3k1c1lYUnBkSFZrWlNBOUlHRnlaekV1YkdGMGFYUjFaR1U3WEc0Z0lDQWdJQ0IwYUdsekxteHZibWRwZEhWa1pTQTlJR0Z5WnpFdWJHOXVaMmwwZFdSbE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1h5NXBjMDUxYldKbGNpaGhjbWN4S1NBbUppQmZMbWx6VG5WdFltVnlLR0Z5WnpJcEtTQjdYRzRnSUNBZ0lDQlFZWEp6WlM1SFpXOVFiMmx1ZEM1ZmRtRnNhV1JoZEdVb1lYSm5NU3dnWVhKbk1pazdYRzRnSUNBZ0lDQjBhR2x6TG14aGRHbDBkV1JsSUQwZ1lYSm5NVHRjYmlBZ0lDQWdJSFJvYVhNdWJHOXVaMmwwZFdSbElEMGdZWEpuTWp0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2hwY3k1c1lYUnBkSFZrWlNBOUlEQTdYRzRnSUNBZ0lDQjBhR2x6TG14dmJtZHBkSFZrWlNBOUlEQTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdRV1JrSUhCeWIzQmxjblJwWlhNZ2MyOGdkR2hoZENCaGJubHZibVVnZFhOcGJtY2dWMlZpYTJsMElHOXlJRTF2ZW1sc2JHRWdkMmxzYkNCblpYUWdZVzRnWlhKeWIzSmNiaUFnSUNBdkx5QnBaaUIwYUdWNUlIUnllU0IwYnlCelpYUWdkbUZzZFdWeklIUm9ZWFFnWVhKbElHOTFkQ0J2WmlCaWIzVnVaSE11WEc0Z0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVJQ0FnSUdsbUlDaDBhR2x6TGw5ZlpHVm1hVzVsUjJWMGRHVnlYMThnSmlZZ2RHaHBjeTVmWDJSbFptbHVaVk5sZEhSbGNsOWZLU0I3WEc0Z0lDQWdJQ0F2THlCVmMyVWdYMnhoZEdsMGRXUmxJR0Z1WkNCZmJHOXVaMmwwZFdSbElIUnZJR0ZqZEhWaGJHeDVJSE4wYjNKbElIUm9aU0IyWVd4MVpYTXNJR0Z1WkNCaFpHUmNiaUFnSUNBZ0lDOHZJR2RsZEhSbGNuTWdZVzVrSUhObGRIUmxjbk1nWm05eUlHeGhkR2wwZFdSbElHRnVaQ0JzYjI1bmFYUjFaR1V1WEc0Z0lDQWdJQ0IwYUdsekxsOXNZWFJwZEhWa1pTQTlJSFJvYVhNdWJHRjBhWFIxWkdVN1hHNGdJQ0FnSUNCMGFHbHpMbDlzYjI1bmFYUjFaR1VnUFNCMGFHbHpMbXh2Ym1kcGRIVmtaVHRjYmlBZ0lDQWdJSFJvYVhNdVgxOWtaV1pwYm1WSFpYUjBaWEpmWHloY0lteGhkR2wwZFdSbFhDSXNJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzJWc1ppNWZiR0YwYVhSMVpHVTdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSFJvYVhNdVgxOWtaV1pwYm1WSFpYUjBaWEpmWHloY0lteHZibWRwZEhWa1pWd2lMQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWXVYMnh2Ym1kcGRIVmtaVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZEdocGN5NWZYMlJsWm1sdVpWTmxkSFJsY2w5ZktGd2liR0YwYVhSMVpHVmNJaXdnWm5WdVkzUnBiMjRvZG1Gc0tTQjdYRzRnSUNBZ0lDQWdJRkJoY25ObExrZGxiMUJ2YVc1MExsOTJZV3hwWkdGMFpTaDJZV3dzSUhObGJHWXViRzl1WjJsMGRXUmxLVHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNWZiR0YwYVhSMVpHVWdQU0IyWVd3N1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIUm9hWE11WDE5a1pXWnBibVZUWlhSMFpYSmZYeWhjSW14dmJtZHBkSFZrWlZ3aUxDQm1kVzVqZEdsdmJpaDJZV3dwSUh0Y2JpQWdJQ0FnSUNBZ1VHRnljMlV1UjJWdlVHOXBiblF1WDNaaGJHbGtZWFJsS0hObGJHWXViR0YwYVhSMVpHVXNJSFpoYkNrN1hHNGdJQ0FnSUNBZ0lITmxiR1l1WDJ4dmJtZHBkSFZrWlNBOUlIWmhiRHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1FHeGxibVJ6SUZCaGNuTmxMa2RsYjFCdmFXNTBMbkJ5YjNSdmRIbHdaVnh1SUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMlpzYjJGMGZTQnNZWFJwZEhWa1pTQk9iM0owYUMxemIzVjBhQ0J3YjNKMGFXOXVJRzltSUhSb1pTQmpiMjl5WkdsdVlYUmxMQ0JwYmlCeVlXNW5aVnh1SUNBZ0tpQWdJRnN0T1RBc0lEa3dYUzRnSUZSb2NtOTNjeUJoYmlCbGVHTmxjSFJwYjI0Z2FXWWdjMlYwSUc5MWRDQnZaaUJ5WVc1blpTQnBiaUJoSUcxdlpHVnliaUJpY205M2MyVnlMbHh1SUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMlpzYjJGMGZTQnNiMjVuYVhSMVpHVWdSV0Z6ZEMxM1pYTjBJSEJ2Y25ScGIyNGdiMllnZEdobElHTnZiM0prYVc1aGRHVXNJR2x1SUhKaGJtZGxYRzRnSUNBcUlDQWdXeTB4T0RBc0lERTRNRjB1SUNCVWFISnZkM01nYVdZZ2MyVjBJRzkxZENCdlppQnlZVzVuWlNCcGJpQmhJRzF2WkdWeWJpQmljbTkzYzJWeUxseHVJQ0FnS2k5Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVkdoeWIzZHpJR0Z1SUdWNFkyVndkR2x2YmlCcFppQjBhR1VnWjJsMlpXNGdiR0YwTFd4dmJtY2dhWE1nYjNWMElHOW1JR0p2ZFc1a2N5NWNiaUFnSUNvdlhHNGdJRkJoY25ObExrZGxiMUJ2YVc1MExsOTJZV3hwWkdGMFpTQTlJR1oxYm1OMGFXOXVLR3hoZEdsMGRXUmxMQ0JzYjI1bmFYUjFaR1VwSUh0Y2JpQWdJQ0JwWmlBb2JHRjBhWFIxWkdVZ1BDQXRPVEF1TUNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnWENKUVlYSnpaUzVIWlc5UWIybHVkQ0JzWVhScGRIVmtaU0JjSWlBcklHeGhkR2wwZFdSbElDc2dYQ0lnUENBdE9UQXVNQzVjSWp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0d4aGRHbDBkV1JsSUQ0Z09UQXVNQ2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dYQ0pRWVhKelpTNUhaVzlRYjJsdWRDQnNZWFJwZEhWa1pTQmNJaUFySUd4aGRHbDBkV1JsSUNzZ1hDSWdQaUE1TUM0d0xsd2lPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9iRzl1WjJsMGRXUmxJRHdnTFRFNE1DNHdLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QmNJbEJoY25ObExrZGxiMUJ2YVc1MElHeHZibWRwZEhWa1pTQmNJaUFySUd4dmJtZHBkSFZrWlNBcklGd2lJRHdnTFRFNE1DNHdMbHdpTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYkc5dVoybDBkV1JsSUQ0Z01UZ3dMakFwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRndpVUdGeWMyVXVSMlZ2VUc5cGJuUWdiRzl1WjJsMGRXUmxJRndpSUNzZ2JHOXVaMmwwZFdSbElDc2dYQ0lnUGlBeE9EQXVNQzVjSWp0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlhNZ1lTQkhaVzlRYjJsdWRDQjNhWFJvSUhSb1pTQjFjMlZ5SjNNZ1kzVnljbVZ1ZENCc2IyTmhkR2x2Yml3Z2FXWWdZWFpoYVd4aFlteGxMbHh1SUNBZ0tpQkRZV3hzY3lCdmNIUnBiMjV6TG5OMVkyTmxjM01nZDJsMGFDQmhJRzVsZHlCSFpXOVFiMmx1ZENCcGJuTjBZVzVqWlNCdmNpQmpZV3hzY3lCdmNIUnBiMjV6TG1WeWNtOXlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lCQmJpQnZZbXBsWTNRZ2QybDBhQ0J6ZFdOalpYTnpJR0Z1WkNCbGNuSnZjaUJqWVd4c1ltRmphM011WEc0Z0lDQXFMMXh1SUNCUVlYSnpaUzVIWlc5UWIybHVkQzVqZFhKeVpXNTBJRDBnWm5WdVkzUnBiMjRvYjNCMGFXOXVjeWtnZTF4dUlDQWdJSFpoY2lCd2NtOXRhWE5sSUQwZ2JtVjNJRkJoY25ObExsQnliMjFwYzJVb0tUdGNiaUFnSUNCdVlYWnBaMkYwYjNJdVoyVnZiRzlqWVhScGIyNHVaMlYwUTNWeWNtVnVkRkJ2YzJsMGFXOXVLR1oxYm1OMGFXOXVLR3h2WTJGMGFXOXVLU0I3WEc0Z0lDQWdJQ0J3Y205dGFYTmxMbkpsYzI5c2RtVW9ibVYzSUZCaGNuTmxMa2RsYjFCdmFXNTBLSHRjYmlBZ0lDQWdJQ0FnYkdGMGFYUjFaR1U2SUd4dlkyRjBhVzl1TG1OdmIzSmtjeTVzWVhScGRIVmtaU3hjYmlBZ0lDQWdJQ0FnYkc5dVoybDBkV1JsT2lCc2IyTmhkR2x2Ymk1amIyOXlaSE11Ykc5dVoybDBkV1JsWEc0Z0lDQWdJQ0I5S1NrN1hHNWNiaUFnSUNCOUxDQm1kVzVqZEdsdmJpaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ2NISnZiV2x6WlM1eVpXcGxZM1FvWlhKeWIzSXBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIQnliMjFwYzJVdVgzUm9aVzVTZFc1RFlXeHNZbUZqYTNNb2IzQjBhVzl1Y3lrN1hHNGdJSDA3WEc1Y2JpQWdVR0Z5YzJVdVIyVnZVRzlwYm5RdWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdZU0JLVTA5T0lISmxjSEpsYzJWdWRHRjBhVzl1SUc5bUlIUm9aU0JIWlc5UWIybHVkQ3dnYzNWcGRHRmliR1VnWm05eUlGQmhjbk5sTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQjBiMHBUVDA0NklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdVR0Z5YzJVdVIyVnZVRzlwYm5RdVgzWmhiR2xrWVhSbEtIUm9hWE11YkdGMGFYUjFaR1VzSUhSb2FYTXViRzl1WjJsMGRXUmxLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJRndpWDE5MGVYQmxYQ0k2SUZ3aVIyVnZVRzlwYm5SY0lpeGNiaUFnSUNBZ0lDQWdiR0YwYVhSMVpHVTZJSFJvYVhNdWJHRjBhWFIxWkdVc1hHNGdJQ0FnSUNBZ0lHeHZibWRwZEhWa1pUb2dkR2hwY3k1c2IyNW5hWFIxWkdWY2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJR1JwYzNSaGJtTmxJR1p5YjIwZ2RHaHBjeUJIWlc5UWIybHVkQ0IwYnlCaGJtOTBhR1Z5SUdsdUlISmhaR2xoYm5NdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UVlYSnpaUzVIWlc5UWIybHVkSDBnY0c5cGJuUWdkR2hsSUc5MGFHVnlJRkJoY25ObExrZGxiMUJ2YVc1MExseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwNTFiV0psY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WVdScFlXNXpWRzg2SUdaMWJtTjBhVzl1S0hCdmFXNTBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1pESnlJRDBnVFdGMGFDNVFTU0F2SURFNE1DNHdPMXh1SUNBZ0lDQWdkbUZ5SUd4aGRERnlZV1FnUFNCMGFHbHpMbXhoZEdsMGRXUmxJQ29nWkRKeU8xeHVJQ0FnSUNBZ2RtRnlJR3h2Ym1jeGNtRmtJRDBnZEdocGN5NXNiMjVuYVhSMVpHVWdLaUJrTW5JN1hHNGdJQ0FnSUNCMllYSWdiR0YwTW5KaFpDQTlJSEJ2YVc1MExteGhkR2wwZFdSbElDb2daREp5TzF4dUlDQWdJQ0FnZG1GeUlHeHZibWN5Y21Ga0lEMGdjRzlwYm5RdWJHOXVaMmwwZFdSbElDb2daREp5TzF4dUlDQWdJQ0FnZG1GeUlHUmxiSFJoVEdGMElEMGdiR0YwTVhKaFpDQXRJR3hoZERKeVlXUTdYRzRnSUNBZ0lDQjJZWElnWkdWc2RHRk1iMjVuSUQwZ2JHOXVaekZ5WVdRZ0xTQnNiMjVuTW5KaFpEdGNiaUFnSUNBZ0lIWmhjaUJ6YVc1RVpXeDBZVXhoZEVScGRqSWdQU0JOWVhSb0xuTnBiaWhrWld4MFlVeGhkQ0F2SURJcE8xeHVJQ0FnSUNBZ2RtRnlJSE5wYmtSbGJIUmhURzl1WjBScGRqSWdQU0JOWVhSb0xuTnBiaWhrWld4MFlVeHZibWNnTHlBeUtUdGNiaUFnSUNBZ0lDOHZJRk54ZFdGeVpTQnZaaUJvWVd4bUlIUm9aU0J6ZEhKaGFXZG9kQ0JzYVc1bElHTm9iM0prSUdScGMzUmhibU5sSUdKbGRIZGxaVzRnWW05MGFDQndiMmx1ZEhNdVhHNGdJQ0FnSUNCMllYSWdZU0E5SUNnb2MybHVSR1ZzZEdGTVlYUkVhWFl5SUNvZ2MybHVSR1ZzZEdGTVlYUkVhWFl5S1NBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1RXRjBhQzVqYjNNb2JHRjBNWEpoWkNrZ0tpQk5ZWFJvTG1OdmN5aHNZWFF5Y21Ga0tTQXFYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmx1UkdWc2RHRk1iMjVuUkdsMk1pQXFJSE5wYmtSbGJIUmhURzl1WjBScGRqSXBLVHRjYmlBZ0lDQWdJR0VnUFNCTllYUm9MbTFwYmlneExqQXNJR0VwTzF4dUlDQWdJQ0FnY21WMGRYSnVJRElnS2lCTllYUm9MbUZ6YVc0b1RXRjBhQzV6Y1hKMEtHRXBLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ1pHbHpkR0Z1WTJVZ1puSnZiU0IwYUdseklFZGxiMUJ2YVc1MElIUnZJR0Z1YjNSb1pYSWdhVzRnYTJsc2IyMWxkR1Z5Y3k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFCaGNuTmxMa2RsYjFCdmFXNTBmU0J3YjJsdWRDQjBhR1VnYjNSb1pYSWdVR0Z5YzJVdVIyVnZVRzlwYm5RdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR3RwYkc5dFpYUmxjbk5VYnpvZ1puVnVZM1JwYjI0b2NHOXBiblFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmhaR2xoYm5OVWJ5aHdiMmx1ZENrZ0tpQTJNemN4TGpBN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJR1JwYzNSaGJtTmxJR1p5YjIwZ2RHaHBjeUJIWlc5UWIybHVkQ0IwYnlCaGJtOTBhR1Z5SUdsdUlHMXBiR1Z6TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VUdGeWMyVXVSMlZ2VUc5cGJuUjlJSEJ2YVc1MElIUm9aU0J2ZEdobGNpQlFZWEp6WlM1SFpXOVFiMmx1ZEM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdiV2xzWlhOVWJ6b2dablZ1WTNScGIyNG9jRzlwYm5RcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpoWkdsaGJuTlVieWh3YjJsdWRDa2dLaUF6T1RVNExqZzdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZTaDBhR2x6S1NrN1hHNWNiaThxWjJ4dlltRnNJRzVoZG1sbllYUnZjam9nWm1Gc2MyVWdLaTljYmlobWRXNWpkR2x2YmloeWIyOTBLU0I3WEc0Z0lISnZiM1F1VUdGeWMyVWdQU0J5YjI5MExsQmhjbk5sSUh4OElIdDlPMXh1SUNCMllYSWdVR0Z5YzJVZ1BTQnliMjkwTGxCaGNuTmxPMXh1SUNCMllYSWdYeUE5SUZCaGNuTmxMbDg3WEc1Y2JpQWdkbUZ5SUZCVlFreEpRMTlMUlZrZ1BTQmNJaXBjSWp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUc1bGR5QkJRMHd1WEc0Z0lDQXFJRWxtSUc1dklHRnlaM1Z0Wlc1MElHbHpJR2RwZG1WdUxDQjBhR1VnUVVOTUlHaGhjeUJ1YnlCd1pYSnRhWE56YVc5dWN5Qm1iM0lnWVc1NWIyNWxMbHh1SUNBZ0tpQkpaaUIwYUdVZ1lYSm5kVzFsYm5RZ2FYTWdZU0JRWVhKelpTNVZjMlZ5TENCMGFHVWdRVU5NSUhkcGJHd2dhR0YyWlNCeVpXRmtJR0Z1WkNCM2NtbDBaVnh1SUNBZ0tpQWdJSEJsY20xcGMzTnBiMjRnWm05eUlHOXViSGtnZEdoaGRDQjFjMlZ5TGx4dUlDQWdLaUJKWmlCMGFHVWdZWEpuZFcxbGJuUWdhWE1nWVc1NUlHOTBhR1Z5SUVwVFQwNGdiMkpxWldOMExDQjBhR0YwSUc5aWFtVmpkQ0IzYVd4c0lHSmxJR2x1ZEdWeWNISmxkSFJsWkZ4dUlDQWdLaUFnSUdGeklHRWdjMlZ5YVdGc2FYcGxaQ0JCUTB3Z1kzSmxZWFJsWkNCM2FYUm9JSFJ2U2xOUFRpZ3BMbHh1SUNBZ0tpQkFjMlZsSUZCaGNuTmxMazlpYW1WamRDTnpaWFJCUTB4Y2JpQWdJQ29nUUdOc1lYTnpYRzRnSUNBcVhHNGdJQ0FxSUR4d1BrRnVJRUZEVEN3Z2IzSWdRV05qWlhOeklFTnZiblJ5YjJ3Z1RHbHpkQ0JqWVc0Z1ltVWdZV1JrWldRZ2RHOGdZVzU1WEc0Z0lDQXFJRHhqYjJSbFBsQmhjbk5sTGs5aWFtVmpkRHd2WTI5a1pUNGdkRzhnY21WemRISnBZM1FnWVdOalpYTnpJSFJ2SUc5dWJIa2dZU0J6ZFdKelpYUWdiMllnZFhObGNuTmNiaUFnSUNvZ2IyWWdlVzkxY2lCaGNIQnNhV05oZEdsdmJpNDhMM0ErWEc0Z0lDQXFMMXh1SUNCUVlYSnpaUzVCUTB3Z1BTQm1kVzVqZEdsdmJpaGhjbWN4S1NCN1hHNGdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lITmxiR1l1Y0dWeWJXbHpjMmx2Ym5OQ2VVbGtJRDBnZTMwN1hHNGdJQ0FnYVdZZ0tGOHVhWE5QWW1wbFkzUW9ZWEpuTVNrcElIdGNiaUFnSUNBZ0lHbG1JQ2hoY21jeElHbHVjM1JoYm1ObGIyWWdVR0Z5YzJVdVZYTmxjaWtnZTF4dUlDQWdJQ0FnSUNCelpXeG1Mbk5sZEZKbFlXUkJZMk5sYzNNb1lYSm5NU3dnZEhKMVpTazdYRzRnSUNBZ0lDQWdJSE5sYkdZdWMyVjBWM0pwZEdWQlkyTmxjM01vWVhKbk1Td2dkSEoxWlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCcFppQW9YeTVwYzBaMWJtTjBhVzl1S0dGeVp6RXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnWENKUVlYSnpaUzVCUTB3b0tTQmpZV3hzWldRZ2QybDBhQ0JoSUdaMWJtTjBhVzl1TGlBZ1JHbGtJSGx2ZFNCbWIzSm5aWFFnS0NrL1hDSTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnVUdGeWMyVXVYMjlpYW1WamRFVmhZMmdvWVhKbk1Td2dablZ1WTNScGIyNG9ZV05qWlhOelRHbHpkQ3dnZFhObGNrbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZmTG1selUzUnlhVzVuS0hWelpYSkpaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGd2lWSEpwWldRZ2RHOGdZM0psWVhSbElHRnVJRUZEVENCM2FYUm9JR0Z1SUdsdWRtRnNhV1FnZFhObGNrbGtMbHdpTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxuQmxjbTFwYzNOcGIyNXpRbmxKWkZ0MWMyVnlTV1JkSUQwZ2UzMDdYRzRnSUNBZ0lDQWdJQ0FnVUdGeWMyVXVYMjlpYW1WamRFVmhZMmdvWVdOalpYTnpUR2x6ZEN3Z1puVnVZM1JwYjI0b1lXeHNiM2RsWkN3Z2NHVnliV2x6YzJsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJsY20xcGMzTnBiMjRnSVQwOUlGd2ljbVZoWkZ3aUlDWW1JSEJsY20xcGMzTnBiMjRnSVQwOUlGd2lkM0pwZEdWY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCY0lsUnlhV1ZrSUhSdklHTnlaV0YwWlNCaGJpQkJRMHdnZDJsMGFDQmhiaUJwYm5aaGJHbGtJSEJsY20xcGMzTnBiMjRnZEhsd1pTNWNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYeTVwYzBKdmIyeGxZVzRvWVd4c2IzZGxaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dYQ0pVY21sbFpDQjBieUJqY21WaGRHVWdZVzRnUVVOTUlIZHBkR2dnWVc0Z2FXNTJZV3hwWkNCd1pYSnRhWE56YVc5dUlIWmhiSFZsTGx3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1d1pYSnRhWE56YVc5dWMwSjVTV1JiZFhObGNrbGtYVnR3WlhKdGFYTnphVzl1WFNBOUlHRnNiRzkzWldRN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QmhJRXBUVDA0dFpXNWpiMlJsWkNCMlpYSnphVzl1SUc5bUlIUm9aU0JCUTB3dVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDFjYmlBZ0lDb3ZYRzRnSUZCaGNuTmxMa0ZEVEM1d2NtOTBiM1I1Y0dVdWRHOUtVMDlPSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUY4dVkyeHZibVVvZEdocGN5NXdaWEp0YVhOemFXOXVjMEo1U1dRcE8xeHVJQ0I5TzF4dVhHNGdJRkJoY25ObExrRkRUQzV3Y205MGIzUjVjR1V1WDNObGRFRmpZMlZ6Y3lBOUlHWjFibU4wYVc5dUtHRmpZMlZ6YzFSNWNHVXNJSFZ6WlhKSlpDd2dZV3hzYjNkbFpDa2dlMXh1SUNBZ0lHbG1JQ2gxYzJWeVNXUWdhVzV6ZEdGdVkyVnZaaUJRWVhKelpTNVZjMlZ5S1NCN1hHNGdJQ0FnSUNCMWMyVnlTV1FnUFNCMWMyVnlTV1F1YVdRN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMWMyVnlTV1FnYVc1emRHRnVZMlZ2WmlCUVlYSnpaUzVTYjJ4bEtTQjdYRzRnSUNBZ0lDQjFjMlZ5U1dRZ1BTQmNJbkp2YkdVNlhDSWdLeUIxYzJWeVNXUXVaMlYwVG1GdFpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JVjh1YVhOVGRISnBibWNvZFhObGNrbGtLU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dYQ0oxYzJWeVNXUWdiWFZ6ZENCaVpTQmhJSE4wY21sdVp5NWNJanRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQ0ZmTG1selFtOXZiR1ZoYmloaGJHeHZkMlZrS1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnWENKaGJHeHZkMlZrSUcxMWMzUWdZbVVnWldsMGFHVnlJSFJ5ZFdVZ2IzSWdabUZzYzJVdVhDSTdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQndaWEp0YVhOemFXOXVjeUE5SUhSb2FYTXVjR1Z5YldsemMybHZibk5DZVVsa1czVnpaWEpKWkYwN1hHNGdJQ0FnYVdZZ0tDRndaWEp0YVhOemFXOXVjeWtnZTF4dUlDQWdJQ0FnYVdZZ0tDRmhiR3h2ZDJWa0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUZSb1pTQjFjMlZ5SUdGc2NtVmhaSGtnWkc5bGMyNG5kQ0JvWVhabElIUm9hWE1nY0dWeWJXbHpjMmx2Yml3Z2MyOGdibThnWVdOMGFXOXVJRzVsWldSbFpDNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NHVnliV2x6YzJsdmJuTWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WlhKdGFYTnphVzl1YzBKNVNXUmJkWE5sY2tsa1hTQTlJSEJsY20xcGMzTnBiMjV6TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoaGJHeHZkMlZrS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJsY20xcGMzTnBiMjV6UW5sSlpGdDFjMlZ5U1dSZFcyRmpZMlZ6YzFSNWNHVmRJRDBnZEhKMVpUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWkdWc1pYUmxJSEJsY20xcGMzTnBiMjV6VzJGalkyVnpjMVI1Y0dWZE8xeHVJQ0FnSUNBZ2FXWWdLRjh1YVhORmJYQjBlU2h3WlhKdGFYTnphVzl1Y3lrcElIdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElIQmxjbTFwYzNOcGIyNXpXM1Z6WlhKSlpGMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJRkJoY25ObExrRkRUQzV3Y205MGIzUjVjR1V1WDJkbGRFRmpZMlZ6Y3lBOUlHWjFibU4wYVc5dUtHRmpZMlZ6YzFSNWNHVXNJSFZ6WlhKSlpDa2dlMXh1SUNBZ0lHbG1JQ2gxYzJWeVNXUWdhVzV6ZEdGdVkyVnZaaUJRWVhKelpTNVZjMlZ5S1NCN1hHNGdJQ0FnSUNCMWMyVnlTV1FnUFNCMWMyVnlTV1F1YVdRN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMWMyVnlTV1FnYVc1emRHRnVZMlZ2WmlCUVlYSnpaUzVTYjJ4bEtTQjdYRzRnSUNBZ0lDQjFjMlZ5U1dRZ1BTQmNJbkp2YkdVNlhDSWdLeUIxYzJWeVNXUXVaMlYwVG1GdFpTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdjR1Z5YldsemMybHZibk1nUFNCMGFHbHpMbkJsY20xcGMzTnBiMjV6UW5sSlpGdDFjMlZ5U1dSZE8xeHVJQ0FnSUdsbUlDZ2hjR1Z5YldsemMybHZibk1wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSEJsY20xcGMzTnBiMjV6VzJGalkyVnpjMVI1Y0dWZElEOGdkSEoxWlNBNklHWmhiSE5sTzF4dUlDQjlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFFnZDJobGRHaGxjaUIwYUdVZ1oybDJaVzRnZFhObGNpQnBjeUJoYkd4dmQyVmtJSFJ2SUhKbFlXUWdkR2hwY3lCdlltcGxZM1F1WEc0Z0lDQXFJRUJ3WVhKaGJTQjFjMlZ5U1dRZ1FXNGdhVzV6ZEdGdVkyVWdiMllnVUdGeWMyVXVWWE5sY2lCdmNpQnBkSE1nYjJKcVpXTjBTV1F1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRbTl2YkdWaGJuMGdZV3hzYjNkbFpDQlhhR1YwYUdWeUlIUm9ZWFFnZFhObGNpQnphRzkxYkdRZ2FHRjJaU0J5WldGa0lHRmpZMlZ6Y3k1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGtGRFRDNXdjbTkwYjNSNWNHVXVjMlYwVW1WaFpFRmpZMlZ6Y3lBOUlHWjFibU4wYVc5dUtIVnpaWEpKWkN3Z1lXeHNiM2RsWkNrZ2UxeHVJQ0FnSUhSb2FYTXVYM05sZEVGalkyVnpjeWhjSW5KbFlXUmNJaXdnZFhObGNrbGtMQ0JoYkd4dmQyVmtLVHRjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1IyVjBJSGRvWlhSb1pYSWdkR2hsSUdkcGRtVnVJSFZ6WlhJZ2FXUWdhWE1nS21WNGNHeHBZMmwwYkhrcUlHRnNiRzkzWldRZ2RHOGdjbVZoWkNCMGFHbHpJRzlpYW1WamRDNWNiaUFnSUNvZ1JYWmxiaUJwWmlCMGFHbHpJSEpsZEhWeWJuTWdabUZzYzJVc0lIUm9aU0IxYzJWeUlHMWhlU0J6ZEdsc2JDQmlaU0JoWW14bElIUnZJR0ZqWTJWemN5QnBkQ0JwWmx4dUlDQWdLaUJuWlhSUWRXSnNhV05TWldGa1FXTmpaWE56SUhKbGRIVnlibk1nZEhKMVpTQnZjaUJoSUhKdmJHVWdkR2hoZENCMGFHVWdkWE5sY2lCaVpXeHZibWR6SUhSdklHaGhjMXh1SUNBZ0tpQjNjbWwwWlNCaFkyTmxjM011WEc0Z0lDQXFJRUJ3WVhKaGJTQjFjMlZ5U1dRZ1FXNGdhVzV6ZEdGdVkyVWdiMllnVUdGeWMyVXVWWE5sY2lCdmNpQnBkSE1nYjJKcVpXTjBTV1FzSUc5eUlHRWdVR0Z5YzJVdVVtOXNaUzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMWNiaUFnSUNvdlhHNGdJRkJoY25ObExrRkRUQzV3Y205MGIzUjVjR1V1WjJWMFVtVmhaRUZqWTJWemN5QTlJR1oxYm1OMGFXOXVLSFZ6WlhKSlpDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDluWlhSQlkyTmxjM01vWENKeVpXRmtYQ0lzSUhWelpYSkpaQ2s3WEc0Z0lIMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxkQ0IzYUdWMGFHVnlJSFJvWlNCbmFYWmxiaUIxYzJWeUlHbGtJR2x6SUdGc2JHOTNaV1FnZEc4Z2QzSnBkR1VnZEdocGN5QnZZbXBsWTNRdVhHNGdJQ0FxSUVCd1lYSmhiU0IxYzJWeVNXUWdRVzRnYVc1emRHRnVZMlVnYjJZZ1VHRnljMlV1VlhObGNpQnZjaUJwZEhNZ2IySnFaV04wU1dRc0lHOXlJR0VnVUdGeWMyVXVVbTlzWlM0dVhHNGdJQ0FxSUVCd1lYSmhiU0I3UW05dmJHVmhibjBnWVd4c2IzZGxaQ0JYYUdWMGFHVnlJSFJvWVhRZ2RYTmxjaUJ6YUc5MWJHUWdhR0YyWlNCM2NtbDBaU0JoWTJObGMzTXVYRzRnSUNBcUwxeHVJQ0JRWVhKelpTNUJRMHd1Y0hKdmRHOTBlWEJsTG5ObGRGZHlhWFJsUVdOalpYTnpJRDBnWm5WdVkzUnBiMjRvZFhObGNrbGtMQ0JoYkd4dmQyVmtLU0I3WEc0Z0lDQWdkR2hwY3k1ZmMyVjBRV05qWlhOektGd2lkM0pwZEdWY0lpd2dkWE5sY2tsa0xDQmhiR3h2ZDJWa0tUdGNiaUFnZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMElIZG9aWFJvWlhJZ2RHaGxJR2RwZG1WdUlIVnpaWElnYVdRZ2FYTWdLbVY0Y0d4cFkybDBiSGtxSUdGc2JHOTNaV1FnZEc4Z2QzSnBkR1VnZEdocGN5QnZZbXBsWTNRdVhHNGdJQ0FxSUVWMlpXNGdhV1lnZEdocGN5QnlaWFIxY201eklHWmhiSE5sTENCMGFHVWdkWE5sY2lCdFlYa2djM1JwYkd3Z1ltVWdZV0pzWlNCMGJ5QjNjbWwwWlNCcGRDQnBabHh1SUNBZ0tpQm5aWFJRZFdKc2FXTlhjbWwwWlVGalkyVnpjeUJ5WlhSMWNtNXpJSFJ5ZFdVZ2IzSWdZU0J5YjJ4bElIUm9ZWFFnZEdobElIVnpaWElnWW1Wc2IyNW5jeUIwYnlCb1lYTmNiaUFnSUNvZ2QzSnBkR1VnWVdOalpYTnpMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2RYTmxja2xrSUVGdUlHbHVjM1JoYm1ObElHOW1JRkJoY25ObExsVnpaWElnYjNJZ2FYUnpJRzlpYW1WamRFbGtMQ0J2Y2lCaElGQmhjbk5sTGxKdmJHVXVYRzRnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1QlEwd3VjSEp2ZEc5MGVYQmxMbWRsZEZkeWFYUmxRV05qWlhOeklEMGdablZ1WTNScGIyNG9kWE5sY2tsa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmRsZEVGalkyVnpjeWhjSW5keWFYUmxYQ0lzSUhWelpYSkpaQ2s3WEc0Z0lIMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxkQ0IzYUdWMGFHVnlJSFJvWlNCd2RXSnNhV01nYVhNZ1lXeHNiM2RsWkNCMGJ5QnlaV0ZrSUhSb2FYTWdiMkpxWldOMExseHVJQ0FnS2lCQWNHRnlZVzBnZTBKdmIyeGxZVzU5SUdGc2JHOTNaV1JjYmlBZ0lDb3ZYRzRnSUZCaGNuTmxMa0ZEVEM1d2NtOTBiM1I1Y0dVdWMyVjBVSFZpYkdsalVtVmhaRUZqWTJWemN5QTlJR1oxYm1OMGFXOXVLR0ZzYkc5M1pXUXBJSHRjYmlBZ0lDQjBhR2x6TG5ObGRGSmxZV1JCWTJObGMzTW9VRlZDVEVsRFgwdEZXU3dnWVd4c2IzZGxaQ2s3WEc0Z0lIMDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkQ0IzYUdWMGFHVnlJSFJvWlNCd2RXSnNhV01nYVhNZ1lXeHNiM2RsWkNCMGJ5QnlaV0ZrSUhSb2FYTWdiMkpxWldOMExseHVJQ0FnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdLaTljYmlBZ1VHRnljMlV1UVVOTUxuQnliM1J2ZEhsd1pTNW5aWFJRZFdKc2FXTlNaV0ZrUVdOalpYTnpJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBVbVZoWkVGalkyVnpjeWhRVlVKTVNVTmZTMFZaS1R0Y2JpQWdmVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwSUhkb1pYUm9aWElnZEdobElIQjFZbXhwWXlCcGN5QmhiR3h2ZDJWa0lIUnZJSGR5YVhSbElIUm9hWE1nYjJKcVpXTjBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwSnZiMnhsWVc1OUlHRnNiRzkzWldSY2JpQWdJQ292WEc0Z0lGQmhjbk5sTGtGRFRDNXdjbTkwYjNSNWNHVXVjMlYwVUhWaWJHbGpWM0pwZEdWQlkyTmxjM01nUFNCbWRXNWpkR2x2YmloaGJHeHZkMlZrS1NCN1hHNGdJQ0FnZEdocGN5NXpaWFJYY21sMFpVRmpZMlZ6Y3loUVZVSk1TVU5mUzBWWkxDQmhiR3h2ZDJWa0tUdGNiaUFnZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMElIZG9aWFJvWlhJZ2RHaGxJSEIxWW14cFl5QnBjeUJoYkd4dmQyVmtJSFJ2SUhkeWFYUmxJSFJvYVhNZ2IySnFaV04wTGx4dUlDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmVnh1SUNBZ0tpOWNiaUFnVUdGeWMyVXVRVU5NTG5CeWIzUnZkSGx3WlM1blpYUlFkV0pzYVdOWGNtbDBaVUZqWTJWemN5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRGZHlhWFJsUVdOalpYTnpLRkJWUWt4SlExOUxSVmtwTzF4dUlDQjlPMXh1SUNCY2JpQWdMeW9xWEc0Z0lDQXFJRWRsZENCM2FHVjBhR1Z5SUhWelpYSnpJR0psYkc5dVoybHVaeUIwYnlCMGFHVWdaMmwyWlc0Z2NtOXNaU0JoY21VZ1lXeHNiM2RsWkZ4dUlDQWdLaUIwYnlCeVpXRmtJSFJvYVhNZ2IySnFaV04wTGlCRmRtVnVJR2xtSUhSb2FYTWdjbVYwZFhKdWN5Qm1ZV3h6WlN3Z2RHaGxJSEp2YkdVZ2JXRjVYRzRnSUNBcUlITjBhV3hzSUdKbElHRmliR1VnZEc4Z2QzSnBkR1VnYVhRZ2FXWWdZU0J3WVhKbGJuUWdjbTlzWlNCb1lYTWdjbVZoWkNCaFkyTmxjM011WEc0Z0lDQXFJRnh1SUNBZ0tpQkFjR0Z5WVcwZ2NtOXNaU0JVYUdVZ2JtRnRaU0J2WmlCMGFHVWdjbTlzWlN3Z2IzSWdZU0JRWVhKelpTNVNiMnhsSUc5aWFtVmpkQzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMGdkSEoxWlNCcFppQjBhR1VnY205c1pTQm9ZWE1nY21WaFpDQmhZMk5sYzNNdUlHWmhiSE5sSUc5MGFHVnlkMmx6WlM1Y2JpQWdJQ29nUUhSb2NtOTNjeUI3VTNSeWFXNW5mU0JKWmlCeWIyeGxJR2x6SUc1bGFYUm9aWElnWVNCUVlYSnpaUzVTYjJ4bElHNXZjaUJoSUZOMGNtbHVaeTVjYmlBZ0lDb3ZYRzRnSUZCaGNuTmxMa0ZEVEM1d2NtOTBiM1I1Y0dVdVoyVjBVbTlzWlZKbFlXUkJZMk5sYzNNZ1BTQm1kVzVqZEdsdmJpaHliMnhsS1NCN1hHNGdJQ0FnYVdZZ0tISnZiR1VnYVc1emRHRnVZMlZ2WmlCUVlYSnpaUzVTYjJ4bEtTQjdYRzRnSUNBZ0lDQXZMeUJPYjNKdFlXeHBlbVVnZEc4Z2RHaGxJRk4wY21sdVp5QnVZVzFsWEc0Z0lDQWdJQ0J5YjJ4bElEMGdjbTlzWlM1blpYUk9ZVzFsS0NrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoZkxtbHpVM1J5YVc1bktISnZiR1VwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJTWldGa1FXTmpaWE56S0Z3aWNtOXNaVHBjSWlBcklISnZiR1VwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhSEp2ZHlCY0luSnZiR1VnYlhWemRDQmlaU0JoSUZCaGNuTmxMbEp2YkdVZ2IzSWdZU0JUZEhKcGJtZGNJanRjYmlBZ2ZUdGNiaUFnWEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFFnZDJobGRHaGxjaUIxYzJWeWN5QmlaV3h2Ym1kcGJtY2dkRzhnZEdobElHZHBkbVZ1SUhKdmJHVWdZWEpsSUdGc2JHOTNaV1JjYmlBZ0lDb2dkRzhnZDNKcGRHVWdkR2hwY3lCdlltcGxZM1F1SUVWMlpXNGdhV1lnZEdocGN5QnlaWFIxY201eklHWmhiSE5sTENCMGFHVWdjbTlzWlNCdFlYbGNiaUFnSUNvZ2MzUnBiR3dnWW1VZ1lXSnNaU0IwYnlCM2NtbDBaU0JwZENCcFppQmhJSEJoY21WdWRDQnliMnhsSUdoaGN5QjNjbWwwWlNCaFkyTmxjM011WEc0Z0lDQXFJRnh1SUNBZ0tpQkFjR0Z5WVcwZ2NtOXNaU0JVYUdVZ2JtRnRaU0J2WmlCMGFHVWdjbTlzWlN3Z2IzSWdZU0JRWVhKelpTNVNiMnhsSUc5aWFtVmpkQzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMGdkSEoxWlNCcFppQjBhR1VnY205c1pTQm9ZWE1nZDNKcGRHVWdZV05qWlhOekxpQm1ZV3h6WlNCdmRHaGxjbmRwYzJVdVhHNGdJQ0FxSUVCMGFISnZkM01nZTFOMGNtbHVaMzBnU1dZZ2NtOXNaU0JwY3lCdVpXbDBhR1Z5SUdFZ1VHRnljMlV1VW05c1pTQnViM0lnWVNCVGRISnBibWN1WEc0Z0lDQXFMMXh1SUNCUVlYSnpaUzVCUTB3dWNISnZkRzkwZVhCbExtZGxkRkp2YkdWWGNtbDBaVUZqWTJWemN5QTlJR1oxYm1OMGFXOXVLSEp2YkdVcElIdGNiaUFnSUNCcFppQW9jbTlzWlNCcGJuTjBZVzVqWlc5bUlGQmhjbk5sTGxKdmJHVXBJSHRjYmlBZ0lDQWdJQzh2SUU1dmNtMWhiR2w2WlNCMGJ5QjBhR1VnVTNSeWFXNW5JRzVoYldWY2JpQWdJQ0FnSUhKdmJHVWdQU0J5YjJ4bExtZGxkRTVoYldVb0tUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tGOHVhWE5UZEhKcGJtY29jbTlzWlNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEZkeWFYUmxRV05qWlhOektGd2ljbTlzWlRwY0lpQXJJSEp2YkdVcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUhKdmR5QmNJbkp2YkdVZ2JYVnpkQ0JpWlNCaElGQmhjbk5sTGxKdmJHVWdiM0lnWVNCVGRISnBibWRjSWp0Y2JpQWdmVHRjYmlBZ1hHNGdJQzhxS2x4dUlDQWdLaUJUWlhRZ2QyaGxkR2hsY2lCMWMyVnljeUJpWld4dmJtZHBibWNnZEc4Z2RHaGxJR2RwZG1WdUlISnZiR1VnWVhKbElHRnNiRzkzWldSY2JpQWdJQ29nZEc4Z2NtVmhaQ0IwYUdseklHOWlhbVZqZEM1Y2JpQWdJQ29nWEc0Z0lDQXFJRUJ3WVhKaGJTQnliMnhsSUZSb1pTQnVZVzFsSUc5bUlIUm9aU0J5YjJ4bExDQnZjaUJoSUZCaGNuTmxMbEp2YkdVZ2IySnFaV04wTGx4dUlDQWdLaUJBY0dGeVlXMGdlMEp2YjJ4bFlXNTlJR0ZzYkc5M1pXUWdWMmhsZEdobGNpQjBhR1VnWjJsMlpXNGdjbTlzWlNCallXNGdjbVZoWkNCMGFHbHpJRzlpYW1WamRDNWNiaUFnSUNvZ1FIUm9jbTkzY3lCN1UzUnlhVzVuZlNCSlppQnliMnhsSUdseklHNWxhWFJvWlhJZ1lTQlFZWEp6WlM1U2IyeGxJRzV2Y2lCaElGTjBjbWx1Wnk1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGtGRFRDNXdjbTkwYjNSNWNHVXVjMlYwVW05c1pWSmxZV1JCWTJObGMzTWdQU0JtZFc1amRHbHZiaWh5YjJ4bExDQmhiR3h2ZDJWa0tTQjdYRzRnSUNBZ2FXWWdLSEp2YkdVZ2FXNXpkR0Z1WTJWdlppQlFZWEp6WlM1U2IyeGxLU0I3WEc0Z0lDQWdJQ0F2THlCT2IzSnRZV3hwZW1VZ2RHOGdkR2hsSUZOMGNtbHVaeUJ1WVcxbFhHNGdJQ0FnSUNCeWIyeGxJRDBnY205c1pTNW5aWFJPWVcxbEtDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGZMbWx6VTNSeWFXNW5LSEp2YkdVcEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGSmxZV1JCWTJObGMzTW9YQ0p5YjJ4bE9sd2lJQ3NnY205c1pTd2dZV3hzYjNkbFpDazdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSFJvY205M0lGd2ljbTlzWlNCdGRYTjBJR0psSUdFZ1VHRnljMlV1VW05c1pTQnZjaUJoSUZOMGNtbHVaMXdpTzF4dUlDQjlPMXh1SUNCY2JpQWdMeW9xWEc0Z0lDQXFJRk5sZENCM2FHVjBhR1Z5SUhWelpYSnpJR0psYkc5dVoybHVaeUIwYnlCMGFHVWdaMmwyWlc0Z2NtOXNaU0JoY21VZ1lXeHNiM2RsWkZ4dUlDQWdLaUIwYnlCM2NtbDBaU0IwYUdseklHOWlhbVZqZEM1Y2JpQWdJQ29nWEc0Z0lDQXFJRUJ3WVhKaGJTQnliMnhsSUZSb1pTQnVZVzFsSUc5bUlIUm9aU0J5YjJ4bExDQnZjaUJoSUZCaGNuTmxMbEp2YkdVZ2IySnFaV04wTGx4dUlDQWdLaUJBY0dGeVlXMGdlMEp2YjJ4bFlXNTlJR0ZzYkc5M1pXUWdWMmhsZEdobGNpQjBhR1VnWjJsMlpXNGdjbTlzWlNCallXNGdkM0pwZEdVZ2RHaHBjeUJ2WW1wbFkzUXVYRzRnSUNBcUlFQjBhSEp2ZDNNZ2UxTjBjbWx1WjMwZ1NXWWdjbTlzWlNCcGN5QnVaV2wwYUdWeUlHRWdVR0Z5YzJVdVVtOXNaU0J1YjNJZ1lTQlRkSEpwYm1jdVhHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1QlEwd3VjSEp2ZEc5MGVYQmxMbk5sZEZKdmJHVlhjbWwwWlVGalkyVnpjeUE5SUdaMWJtTjBhVzl1S0hKdmJHVXNJR0ZzYkc5M1pXUXBJSHRjYmlBZ0lDQnBaaUFvY205c1pTQnBibk4wWVc1alpXOW1JRkJoY25ObExsSnZiR1VwSUh0Y2JpQWdJQ0FnSUM4dklFNXZjbTFoYkdsNlpTQjBieUIwYUdVZ1UzUnlhVzVuSUc1aGJXVmNiaUFnSUNBZ0lISnZiR1VnUFNCeWIyeGxMbWRsZEU1aGJXVW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRjh1YVhOVGRISnBibWNvY205c1pTa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWMyVjBWM0pwZEdWQlkyTmxjM01vWENKeWIyeGxPbHdpSUNzZ2NtOXNaU3dnWVd4c2IzZGxaQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2NtOTNJRndpY205c1pTQnRkWE4wSUdKbElHRWdVR0Z5YzJVdVVtOXNaU0J2Y2lCaElGTjBjbWx1WjF3aU8xeHVJQ0I5TzF4dVhHNTlLSFJvYVhNcEtUdGNibHh1S0daMWJtTjBhVzl1S0hKdmIzUXBJSHRjYmlBZ2NtOXZkQzVRWVhKelpTQTlJSEp2YjNRdVVHRnljMlVnZkh3Z2UzMDdYRzRnSUhaaGNpQlFZWEp6WlNBOUlISnZiM1F1VUdGeWMyVTdYRzRnSUhaaGNpQmZJRDBnVUdGeWMyVXVYenRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR05zWVhOelhHNGdJQ0FxSUVFZ1VHRnljMlV1VDNBZ2FYTWdZVzRnWVhSdmJXbGpJRzl3WlhKaGRHbHZiaUIwYUdGMElHTmhiaUJpWlNCaGNIQnNhV1ZrSUhSdklHRWdabWxsYkdRZ2FXNGdZVnh1SUNBZ0tpQlFZWEp6WlM1UFltcGxZM1F1SUVadmNpQmxlR0Z0Y0d4bExDQmpZV3hzYVc1bklEeGpiMlJsUG05aWFtVmpkQzV6WlhRb1hDSm1iMjljSWl3Z1hDSmlZWEpjSWlrOEwyTnZaR1UrWEc0Z0lDQXFJR2x6SUdGdUlHVjRZVzF3YkdVZ2IyWWdZU0JRWVhKelpTNVBjQzVUWlhRdUlFTmhiR3hwYm1jZ1BHTnZaR1UrYjJKcVpXTjBMblZ1YzJWMEtGd2labTl2WENJcFBDOWpiMlJsUGx4dUlDQWdLaUJwY3lCaElGQmhjbk5sTGs5d0xsVnVjMlYwTGlCVWFHVnpaU0J2Y0dWeVlYUnBiMjV6SUdGeVpTQnpkRzl5WldRZ2FXNGdZU0JRWVhKelpTNVBZbXBsWTNRZ1lXNWtYRzRnSUNBcUlITmxiblFnZEc4Z2RHaGxJSE5sY25abGNpQmhjeUJ3WVhKMElHOW1JRHhqYjJSbFBtOWlhbVZqZEM1ellYWmxLQ2s4TDJOdlpHVStJRzl3WlhKaGRHbHZibk11WEc0Z0lDQXFJRWx1YzNSaGJtTmxjeUJ2WmlCUVlYSnpaUzVQY0NCemFHOTFiR1FnWW1VZ2FXMXRkWFJoWW14bExseHVJQ0FnS2x4dUlDQWdLaUJaYjNVZ2MyaHZkV3hrSUc1dmRDQmpjbVZoZEdVZ2MzVmlZMnhoYzNObGN5QnZaaUJRWVhKelpTNVBjQ0J2Y2lCcGJuTjBZVzUwYVdGMFpTQlFZWEp6WlM1UGNGeHVJQ0FnS2lCa2FYSmxZM1JzZVM1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGs5d0lEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdkR2hwY3k1ZmFXNXBkR2xoYkdsNlpTNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQjlPMXh1WEc0Z0lGQmhjbk5sTGs5d0xuQnliM1J2ZEhsd1pTQTlJSHRjYmlBZ0lDQmZhVzVwZEdsaGJHbDZaVG9nWm5WdVkzUnBiMjRvS1NCN2ZWeHVJQ0I5TzF4dVhHNGdJRjh1WlhoMFpXNWtLRkJoY25ObExrOXdMQ0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkc4Z1kzSmxZWFJsSUdFZ2JtVjNJRTl3TENCallXeHNJRkJoY25ObExrOXdMbDlsZUhSbGJtUW9LVHRjYmlBZ0lDQWdLaTljYmlBZ0lDQmZaWGgwWlc1a09pQlFZWEp6WlM1ZlpYaDBaVzVrTEZ4dVhHNGdJQ0FnTHk4Z1FTQnRZWEFnYjJZZ1gxOXZjQ0J6ZEhKcGJtY2dkRzhnWkdWamIyUmxjaUJtZFc1amRHbHZiaTVjYmlBZ0lDQmZiM0JFWldOdlpHVnlUV0Z3T2lCN2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsWjJsemRHVnljeUJoSUdaMWJtTjBhVzl1SUhSdklHTnZiblpsY25RZ1lTQnFjMjl1SUc5aWFtVmpkQ0IzYVhSb0lHRnVJRjlmYjNBZ1ptbGxiR1FnYVc1MGJ5QmhibHh1SUNBZ0lDQXFJR2x1YzNSaGJtTmxJRzltSUdFZ2MzVmlZMnhoYzNNZ2IyWWdVR0Z5YzJVdVQzQXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gzSmxaMmx6ZEdWeVJHVmpiMlJsY2pvZ1puVnVZM1JwYjI0b2IzQk9ZVzFsTENCa1pXTnZaR1Z5S1NCN1hHNGdJQ0FnSUNCUVlYSnpaUzVQY0M1ZmIzQkVaV052WkdWeVRXRndXMjl3VG1GdFpWMGdQU0JrWldOdlpHVnlPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYjI1MlpYSjBjeUJoSUdwemIyNGdiMkpxWldOMElHbHVkRzhnWVc0Z2FXNXpkR0Z1WTJVZ2IyWWdZU0J6ZFdKamJHRnpjeUJ2WmlCUVlYSnpaUzVQY0M1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmWkdWamIyUmxPaUJtZFc1amRHbHZiaWhxYzI5dUtTQjdYRzRnSUNBZ0lDQjJZWElnWkdWamIyUmxjaUE5SUZCaGNuTmxMazl3TGw5dmNFUmxZMjlrWlhKTllYQmJhbk52Ymk1ZlgyOXdYVHRjYmlBZ0lDQWdJR2xtSUNoa1pXTnZaR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCa1pXTnZaR1Z5S0dwemIyNHBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBwTzF4dVhHNGdJQzhxWEc0Z0lDQXFJRUZrWkNCaElHaGhibVJzWlhJZ1ptOXlJRUpoZEdOb0lHOXdjeTVjYmlBZ0lDb3ZYRzRnSUZCaGNuTmxMazl3TGw5eVpXZHBjM1JsY2tSbFkyOWtaWElvWENKQ1lYUmphRndpTENCbWRXNWpkR2x2YmlocWMyOXVLU0I3WEc0Z0lDQWdkbUZ5SUc5d0lEMGdiblZzYkR0Y2JpQWdJQ0JRWVhKelpTNWZZWEp5WVhsRllXTm9LR3B6YjI0dWIzQnpMQ0JtZFc1amRHbHZiaWh1WlhoMFQzQXBJSHRjYmlBZ0lDQWdJRzVsZUhSUGNDQTlJRkJoY25ObExrOXdMbDlrWldOdlpHVW9ibVY0ZEU5d0tUdGNiaUFnSUNBZ0lHOXdJRDBnYm1WNGRFOXdMbDl0WlhKblpWZHBkR2hRY21WMmFXOTFjeWh2Y0NrN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnY21WMGRYSnVJRzl3TzF4dUlDQjlLVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR05zWVhOelhHNGdJQ0FxSUVFZ1UyVjBJRzl3WlhKaGRHbHZiaUJwYm1ScFkyRjBaWE1nZEdoaGRDQmxhWFJvWlhJZ2RHaGxJR1pwWld4a0lIZGhjeUJqYUdGdVoyVmtJSFZ6YVc1blhHNGdJQ0FxSUZCaGNuTmxMazlpYW1WamRDNXpaWFFzSUc5eUlHbDBJR2x6SUdFZ2JYVjBZV0pzWlNCamIyNTBZV2x1WlhJZ2RHaGhkQ0IzWVhNZ1pHVjBaV04wWldRZ1lYTWdZbVZwYm1kY2JpQWdJQ29nWTJoaGJtZGxaQzVjYmlBZ0lDb3ZYRzRnSUZCaGNuTmxMazl3TGxObGRDQTlJRkJoY25ObExrOXdMbDlsZUhSbGJtUW9MeW9xSUVCc1pXNWtjeUJRWVhKelpTNVBjQzVUWlhRdWNISnZkRzkwZVhCbElDb3ZJSHRjYmlBZ0lDQmZhVzVwZEdsaGJHbDZaVG9nWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzWmhiSFZsSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRIVnlibk1nZEdobElHNWxkeUIyWVd4MVpTQnZaaUIwYUdseklHWnBaV3hrSUdGbWRHVnlJSFJvWlNCelpYUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM1poYkhWbE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklHRWdTbE5QVGlCMlpYSnphVzl1SUc5bUlIUm9aU0J2Y0dWeVlYUnBiMjRnYzNWcGRHRmliR1VnWm05eUlITmxibVJwYm1jZ2RHOGdVR0Z5YzJVdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJ2U2xOUFRqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVgyVnVZMjlrWlNoMGFHbHpMblpoYkhWbEtDa3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZiV1Z5WjJWWGFYUm9VSEpsZG1sdmRYTTZJR1oxYm1OMGFXOXVLSEJ5WlhacGIzVnpLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDJWemRHbHRZWFJsT2lCbWRXNWpkR2x2YmlodmJHUldZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkbUZzZFdVb0tUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUhObGJuUnBibVZzSUhaaGJIVmxJSFJvWVhRZ2FYTWdjbVYwZFhKdVpXUWdZbmtnVUdGeWMyVXVUM0F1Vlc1elpYUXVYMlZ6ZEdsdFlYUmxJSFJ2WEc0Z0lDQXFJR2x1WkdsallYUmxJSFJvWlNCbWFXVnNaQ0J6YUc5MWJHUWdZbVVnWkdWc1pYUmxaQzRnUW1GemFXTmhiR3g1TENCcFppQjViM1VnWm1sdVpDQmZWVTVUUlZRZ1lYTWdZVnh1SUNBZ0tpQjJZV3gxWlNCcGJpQjViM1Z5SUc5aWFtVmpkQ3dnZVc5MUlITm9iM1ZzWkNCeVpXMXZkbVVnZEdoaGRDQnJaWGt1WEc0Z0lDQXFMMXh1SUNCUVlYSnpaUzVQY0M1ZlZVNVRSVlFnUFNCN2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1FHTnNZWE56WEc0Z0lDQXFJRUZ1SUZWdWMyVjBJRzl3WlhKaGRHbHZiaUJwYm1ScFkyRjBaWE1nZEdoaGRDQjBhR2x6SUdacFpXeGtJR2hoY3lCaVpXVnVJR1JsYkdWMFpXUWdabkp2YlNCMGFHVmNiaUFnSUNvZ2IySnFaV04wTGx4dUlDQWdLaTljYmlBZ1VHRnljMlV1VDNBdVZXNXpaWFFnUFNCUVlYSnpaUzVQY0M1ZlpYaDBaVzVrS0M4cUtpQkFiR1Z1WkhNZ1VHRnljMlV1VDNBdVZXNXpaWFF1Y0hKdmRHOTBlWEJsSUNvdklIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklHRWdTbE5QVGlCMlpYSnphVzl1SUc5bUlIUm9aU0J2Y0dWeVlYUnBiMjRnYzNWcGRHRmliR1VnWm05eUlITmxibVJwYm1jZ2RHOGdVR0Z5YzJVdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJ2U2xOUFRqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdleUJmWDI5d09pQmNJa1JsYkdWMFpWd2lJSDA3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjl0WlhKblpWZHBkR2hRY21WMmFXOTFjem9nWm5WdVkzUnBiMjRvY0hKbGRtbHZkWE1wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZlpYTjBhVzFoZEdVNklHWjFibU4wYVc5dUtHOXNaRlpoYkhWbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1VDNBdVgxVk9VMFZVTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzVjYmlBZ1VHRnljMlV1VDNBdVgzSmxaMmx6ZEdWeVJHVmpiMlJsY2loY0lrUmxiR1YwWlZ3aUxDQm1kVzVqZEdsdmJpaHFjMjl1S1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUVlYSnpaUzVQY0M1VmJuTmxkQ2dwTzF4dUlDQjlLVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR05zWVhOelhHNGdJQ0FxSUVGdUlFbHVZM0psYldWdWRDQnBjeUJoYmlCaGRHOXRhV01nYjNCbGNtRjBhVzl1SUhkb1pYSmxJSFJvWlNCdWRXMWxjbWxqSUhaaGJIVmxJR1p2Y2lCMGFHVWdabWxsYkdSY2JpQWdJQ29nZDJsc2JDQmlaU0JwYm1OeVpXRnpaV1FnWW5rZ1lTQm5hWFpsYmlCaGJXOTFiblF1WEc0Z0lDQXFMMXh1SUNCUVlYSnpaUzVQY0M1SmJtTnlaVzFsYm5RZ1BTQlFZWEp6WlM1UGNDNWZaWGgwWlc1a0tGeHVJQ0FnSUNBZ0x5b3FJRUJzWlc1a2N5QlFZWEp6WlM1UGNDNUpibU55WlcxbGJuUXVjSEp2ZEc5MGVYQmxJQ292SUh0Y2JseHVJQ0FnSUY5cGJtbDBhV0ZzYVhwbE9pQm1kVzVqZEdsdmJpaGhiVzkxYm5RcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJGdGIzVnVkQ0E5SUdGdGIzVnVkRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ1lXMXZkVzUwSUhSdklHbHVZM0psYldWdWRDQmllUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRPZFcxaVpYSjlJSFJvWlNCaGJXOTFiblFnZEc4Z2FXNWpjbVZ0Wlc1MElHSjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHRnRiM1Z1ZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVcxdmRXNTBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJR0VnU2xOUFRpQjJaWEp6YVc5dUlHOW1JSFJvWlNCdmNHVnlZWFJwYjI0Z2MzVnBkR0ZpYkdVZ1ptOXlJSE5sYm1ScGJtY2dkRzhnVUdGeWMyVXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUMkpxWldOMGZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSdlNsTlBUam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZXlCZlgyOXdPaUJjSWtsdVkzSmxiV1Z1ZEZ3aUxDQmhiVzkxYm5RNklIUm9hWE11WDJGdGIzVnVkQ0I5TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmYldWeVoyVlhhWFJvVUhKbGRtbHZkWE02SUdaMWJtTjBhVzl1S0hCeVpYWnBiM1Z6S1NCN1hHNGdJQ0FnSUNCcFppQW9JWEJ5WlhacGIzVnpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHdjbVYyYVc5MWN5QnBibk4wWVc1alpXOW1JRkJoY25ObExrOXdMbFZ1YzJWMEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUdGeWMyVXVUM0F1VTJWMEtIUm9hWE11WVcxdmRXNTBLQ2twTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNod2NtVjJhVzkxY3lCcGJuTjBZVzVqWlc5bUlGQmhjbk5sTGs5d0xsTmxkQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQmhjbk5sTGs5d0xsTmxkQ2h3Y21WMmFXOTFjeTUyWVd4MVpTZ3BJQ3NnZEdocGN5NWhiVzkxYm5Rb0tTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEJ5WlhacGIzVnpJR2x1YzNSaGJtTmxiMllnVUdGeWMyVXVUM0F1U1c1amNtVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVR0Z5YzJVdVQzQXVTVzVqY21WdFpXNTBLSFJvYVhNdVlXMXZkVzUwS0NrZ0t5QndjbVYyYVc5MWN5NWhiVzkxYm5Rb0tTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCY0lrOXdJR2x6SUdsdWRtRnNhV1FnWVdaMFpYSWdjSEpsZG1sdmRYTWdiM0F1WENJN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5bGMzUnBiV0YwWlRvZ1puVnVZM1JwYjI0b2IyeGtWbUZzZFdVcElIdGNiaUFnSUNBZ0lHbG1JQ2doYjJ4a1ZtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZVzF2ZFc1MEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2IyeGtWbUZzZFdVZ0t5QjBhR2x6TG1GdGIzVnVkQ2dwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzVjYmlBZ1VHRnljMlV1VDNBdVgzSmxaMmx6ZEdWeVJHVmpiMlJsY2loY0lrbHVZM0psYldWdWRGd2lMQ0JtZFc1amRHbHZiaWhxYzI5dUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFZWEp6WlM1UGNDNUpibU55WlcxbGJuUW9hbk52Ymk1aGJXOTFiblFwTzF4dUlDQjlLVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR05zWVhOelhHNGdJQ0FxSUVGa1pDQnBjeUJoYmlCaGRHOXRhV01nYjNCbGNtRjBhVzl1SUhkb1pYSmxJSFJvWlNCbmFYWmxiaUJ2WW1wbFkzUnpJSGRwYkd3Z1ltVWdZWEJ3Wlc1a1pXUWdkRzhnZEdobFhHNGdJQ0FxSUdGeWNtRjVJSFJvWVhRZ2FYTWdjM1J2Y21Wa0lHbHVJSFJvYVhNZ1ptbGxiR1F1WEc0Z0lDQXFMMXh1SUNCUVlYSnpaUzVQY0M1QlpHUWdQU0JRWVhKelpTNVBjQzVmWlhoMFpXNWtLQzhxS2lCQWJHVnVaSE1nVUdGeWMyVXVUM0F1UVdSa0xuQnliM1J2ZEhsd1pTQXFMeUI3WEc0Z0lDQWdYMmx1YVhScFlXeHBlbVU2SUdaMWJtTjBhVzl1S0c5aWFtVmpkSE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMjlpYW1WamRITWdQU0J2WW1wbFkzUnpPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJSFJvWlNCdlltcGxZM1J6SUhSdklHSmxJR0ZrWkdWa0lIUnZJSFJvWlNCaGNuSmhlUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRCY25KaGVYMGdWR2hsSUc5aWFtVmpkSE1nZEc4Z1ltVWdZV1JrWldRZ2RHOGdkR2hsSUdGeWNtRjVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHOWlhbVZqZEhNNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDI5aWFtVmpkSE03WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRIVnlibk1nWVNCS1UwOU9JSFpsY25OcGIyNGdiMllnZEdobElHOXdaWEpoZEdsdmJpQnpkV2wwWVdKc1pTQm1iM0lnYzJWdVpHbHVaeUIwYnlCUVlYSnpaUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRQWW1wbFkzUjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHOUtVMDlPT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCN0lGOWZiM0E2SUZ3aVFXUmtYQ0lzSUc5aWFtVmpkSE02SUZCaGNuTmxMbDlsYm1OdlpHVW9kR2hwY3k1dlltcGxZM1J6S0NrcElIMDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXRaWEpuWlZkcGRHaFFjbVYyYVc5MWN6b2dablZ1WTNScGIyNG9jSEpsZG1sdmRYTXBJSHRjYmlBZ0lDQWdJR2xtSUNnaGNISmxkbWx2ZFhNcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hCeVpYWnBiM1Z6SUdsdWMzUmhibU5sYjJZZ1VHRnljMlV1VDNBdVZXNXpaWFFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFZWEp6WlM1UGNDNVRaWFFvZEdocGN5NXZZbXBsWTNSektDa3BPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h3Y21WMmFXOTFjeUJwYm5OMFlXNWpaVzltSUZCaGNuTmxMazl3TGxObGRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCaGNuTmxMazl3TGxObGRDaDBhR2x6TGw5bGMzUnBiV0YwWlNod2NtVjJhVzkxY3k1MllXeDFaU2dwS1NrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIQnlaWFpwYjNWeklHbHVjM1JoYm1ObGIyWWdVR0Z5YzJVdVQzQXVRV1JrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVR0Z5YzJVdVQzQXVRV1JrS0hCeVpYWnBiM1Z6TG05aWFtVmpkSE1vS1M1amIyNWpZWFFvZEdocGN5NXZZbXBsWTNSektDa3BLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lGd2lUM0FnYVhNZ2FXNTJZV3hwWkNCaFpuUmxjaUJ3Y21WMmFXOTFjeUJ2Y0M1Y0lqdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gyVnpkR2x0WVhSbE9pQm1kVzVqZEdsdmJpaHZiR1JXWVd4MVpTa2dlMXh1SUNBZ0lDQWdhV1lnS0NGdmJHUldZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1h5NWpiRzl1WlNoMGFHbHpMbTlpYW1WamRITW9LU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiMnhrVm1Gc2RXVXVZMjl1WTJGMEtIUm9hWE11YjJKcVpXTjBjeWdwS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMHBPMXh1WEc0Z0lGQmhjbk5sTGs5d0xsOXlaV2RwYzNSbGNrUmxZMjlrWlhJb1hDSkJaR1JjSWl3Z1puVnVZM1JwYjI0b2FuTnZiaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUdGeWMyVXVUM0F1UVdSa0tGQmhjbk5sTGw5a1pXTnZaR1VvZFc1a1pXWnBibVZrTENCcWMyOXVMbTlpYW1WamRITXBLVHRjYmlBZ2ZTazdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQmpiR0Z6YzF4dUlDQWdLaUJCWkdSVmJtbHhkV1VnYVhNZ1lXNGdZWFJ2YldsaklHOXdaWEpoZEdsdmJpQjNhR1Z5WlNCMGFHVWdaMmwyWlc0Z2FYUmxiWE1nZDJsc2JDQmlaU0JoY0hCbGJtUmxaQ0IwYjF4dUlDQWdLaUIwYUdVZ1lYSnlZWGtnZEdoaGRDQnBjeUJ6ZEc5eVpXUWdhVzRnZEdocGN5Qm1hV1ZzWkNCdmJteDVJR2xtSUhSb1pYa2dkMlZ5WlNCdWIzUWdZV3h5WldGa2VWeHVJQ0FnS2lCd2NtVnpaVzUwSUdsdUlIUm9aU0JoY25KaGVTNWNiaUFnSUNvdlhHNGdJRkJoY25ObExrOXdMa0ZrWkZWdWFYRjFaU0E5SUZCaGNuTmxMazl3TGw5bGVIUmxibVFvWEc0Z0lDQWdJQ0F2S2lvZ1FHeGxibVJ6SUZCaGNuTmxMazl3TGtGa1pGVnVhWEYxWlM1d2NtOTBiM1I1Y0dVZ0tpOGdlMXh1WEc0Z0lDQWdYMmx1YVhScFlXeHBlbVU2SUdaMWJtTjBhVzl1S0c5aWFtVmpkSE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMjlpYW1WamRITWdQU0JmTG5WdWFYRW9iMkpxWldOMGN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdkR2hsSUc5aWFtVmpkSE1nZEc4Z1ltVWdZV1JrWldRZ2RHOGdkR2hsSUdGeWNtRjVMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNWZTQlVhR1VnYjJKcVpXTjBjeUIwYnlCaVpTQmhaR1JsWkNCMGJ5QjBhR1VnWVhKeVlYa3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IySnFaV04wY3pvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYjJKcVpXTjBjenRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUJoSUVwVFQwNGdkbVZ5YzJsdmJpQnZaaUIwYUdVZ2IzQmxjbUYwYVc5dUlITjFhWFJoWW14bElHWnZjaUJ6Wlc1a2FXNW5JSFJ2SUZCaGNuTmxMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMDlpYW1WamRIMWNiaUFnSUNBZ0tpOWNiaUFnSUNCMGIwcFRUMDQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhzZ1gxOXZjRG9nWENKQlpHUlZibWx4ZFdWY0lpd2diMkpxWldOMGN6b2dVR0Z5YzJVdVgyVnVZMjlrWlNoMGFHbHpMbTlpYW1WamRITW9LU2tnZlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDIxbGNtZGxWMmwwYUZCeVpYWnBiM1Z6T2lCbWRXNWpkR2x2Ymlod2NtVjJhVzkxY3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0Z3Y21WMmFXOTFjeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jSEpsZG1sdmRYTWdhVzV6ZEdGdVkyVnZaaUJRWVhKelpTNVBjQzVWYm5ObGRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCaGNuTmxMazl3TGxObGRDaDBhR2x6TG05aWFtVmpkSE1vS1NrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIQnlaWFpwYjNWeklHbHVjM1JoYm1ObGIyWWdVR0Z5YzJVdVQzQXVVMlYwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVR0Z5YzJVdVQzQXVVMlYwS0hSb2FYTXVYMlZ6ZEdsdFlYUmxLSEJ5WlhacGIzVnpMblpoYkhWbEtDa3BLVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvY0hKbGRtbHZkWE1nYVc1emRHRnVZMlZ2WmlCUVlYSnpaUzVQY0M1QlpHUlZibWx4ZFdVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRWVhKelpTNVBjQzVCWkdSVmJtbHhkV1VvZEdocGN5NWZaWE4wYVcxaGRHVW9jSEpsZG1sdmRYTXViMkpxWldOMGN5Z3BLU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QmNJazl3SUdseklHbHVkbUZzYVdRZ1lXWjBaWElnY0hKbGRtbHZkWE1nYjNBdVhDSTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOWxjM1JwYldGMFpUb2dablZ1WTNScGIyNG9iMnhrVm1Gc2RXVXBJSHRjYmlBZ0lDQWdJR2xtSUNnaGIyeGtWbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOHVZMnh2Ym1Vb2RHaHBjeTV2WW1wbFkzUnpLQ2twTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdZMkZ1SjNRZ2FuVnpkQ0IwWVd0bElIUm9aU0JmTG5WdWFYRW9YeTUxYm1sdmJpZ3VMaTRwS1NCdlppQnZiR1JXWVd4MVpTQmhibVJjYmlBZ0lDQWdJQ0FnTHk4Z2RHaHBjeTV2WW1wbFkzUnpMQ0JpWldOaGRYTmxJSFJvWlNCMWJtbHhkV1Z1WlhOeklHMWhlU0J1YjNRZ1lYQndiSGtnZEc4Z2IyeGtWbUZzZFdWY2JpQWdJQ0FnSUNBZ0x5OGdLR1Z6Y0dWamFXRnNiSGtnYVdZZ2RHaGxJRzlzWkZaaGJIVmxJSGRoY3lCelpYUWdkbWxoSUM1elpYUW9LU2xjYmlBZ0lDQWdJQ0FnZG1GeUlHNWxkMVpoYkhWbElEMGdYeTVqYkc5dVpTaHZiR1JXWVd4MVpTazdYRzRnSUNBZ0lDQWdJRkJoY25ObExsOWhjbkpoZVVWaFkyZ29kR2hwY3k1dlltcGxZM1J6S0Nrc0lHWjFibU4wYVc5dUtHOWlhaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h2WW1vZ2FXNXpkR0Z1WTJWdlppQlFZWEp6WlM1UFltcGxZM1FnSmlZZ2IySnFMbWxrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JXRjBZMmhwYm1kUFltb2dQU0JmTG1acGJtUW9ibVYzVm1Gc2RXVXNJR1oxYm1OMGFXOXVLR0Z1VDJKcUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1lXNVBZbW9nYVc1emRHRnVZMlZ2WmlCUVlYSnpaUzVQWW1wbFkzUXBJQ1ltSUNoaGJrOWlhaTVwWkNBOVBUMGdiMkpxTG1sa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnRZWFJqYUdsdVowOWlhaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhkV1lXeDFaUzV3ZFhOb0tHOWlhaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhVzVrWlhnZ1BTQmZMbWx1WkdWNFQyWW9ibVYzVm1Gc2RXVXNJRzFoZEdOb2FXNW5UMkpxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1ZtRnNkV1ZiYVc1a1pYaGRJRDBnYjJKcU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9JVjh1WTI5dWRHRnBibk1vYm1WM1ZtRnNkV1VzSUc5aWFpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkMVpoYkhWbExuQjFjMmdvYjJKcUtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNWbUZzZFdVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlLVHRjYmx4dUlDQlFZWEp6WlM1UGNDNWZjbVZuYVhOMFpYSkVaV052WkdWeUtGd2lRV1JrVlc1cGNYVmxYQ0lzSUdaMWJtTjBhVzl1S0dwemIyNHBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJoY25ObExrOXdMa0ZrWkZWdWFYRjFaU2hRWVhKelpTNWZaR1ZqYjJSbEtIVnVaR1ZtYVc1bFpDd2dhbk52Ymk1dlltcGxZM1J6S1NrN1hHNGdJSDBwTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJBWTJ4aGMzTmNiaUFnSUNvZ1VtVnRiM1psSUdseklHRnVJR0YwYjIxcFl5QnZjR1Z5WVhScGIyNGdkMmhsY21VZ2RHaGxJR2RwZG1WdUlHOWlhbVZqZEhNZ2QybHNiQ0JpWlNCeVpXMXZkbVZrSUdaeWIyMWNiaUFnSUNvZ2RHaGxJR0Z5Y21GNUlIUm9ZWFFnYVhNZ2MzUnZjbVZrSUdsdUlIUm9hWE1nWm1sbGJHUXVYRzRnSUNBcUwxeHVJQ0JRWVhKelpTNVBjQzVTWlcxdmRtVWdQU0JRWVhKelpTNVBjQzVmWlhoMFpXNWtLQzhxS2lCQWJHVnVaSE1nVUdGeWMyVXVUM0F1VW1WdGIzWmxMbkJ5YjNSdmRIbHdaU0FxTHlCN1hHNGdJQ0FnWDJsdWFYUnBZV3hwZW1VNklHWjFibU4wYVc5dUtHOWlhbVZqZEhNcElIdGNiaUFnSUNBZ0lIUm9hWE11WDI5aWFtVmpkSE1nUFNCZkxuVnVhWEVvYjJKcVpXTjBjeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRIVnlibk1nZEdobElHOWlhbVZqZEhNZ2RHOGdZbVVnY21WdGIzWmxaQ0JtY205dElIUm9aU0JoY25KaGVTNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdEJjbkpoZVgwZ1ZHaGxJRzlpYW1WamRITWdkRzhnWW1VZ2NtVnRiM1psWkNCbWNtOXRJSFJvWlNCaGNuSmhlUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnZZbXBsWTNSek9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dlltcGxZM1J6TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUdFZ1NsTlBUaUIyWlhKemFXOXVJRzltSUhSb1pTQnZjR1Z5WVhScGIyNGdjM1ZwZEdGaWJHVWdabTl5SUhObGJtUnBibWNnZEc4Z1VHRnljMlV1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VDJKcVpXTjBmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUnZTbE5QVGpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2V5QmZYMjl3T2lCY0lsSmxiVzkyWlZ3aUxDQnZZbXBsWTNSek9pQlFZWEp6WlM1ZlpXNWpiMlJsS0hSb2FYTXViMkpxWldOMGN5Z3BLU0I5TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmYldWeVoyVlhhWFJvVUhKbGRtbHZkWE02SUdaMWJtTjBhVzl1S0hCeVpYWnBiM1Z6S1NCN1hHNGdJQ0FnSUNCcFppQW9JWEJ5WlhacGIzVnpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHdjbVYyYVc5MWN5QnBibk4wWVc1alpXOW1JRkJoY25ObExrOXdMbFZ1YzJWMEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndjbVYyYVc5MWN6dGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jSEpsZG1sdmRYTWdhVzV6ZEdGdVkyVnZaaUJRWVhKelpTNVBjQzVUWlhRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRWVhKelpTNVBjQzVUWlhRb2RHaHBjeTVmWlhOMGFXMWhkR1VvY0hKbGRtbHZkWE11ZG1Gc2RXVW9LU2twTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNod2NtVjJhVzkxY3lCcGJuTjBZVzVqWlc5bUlGQmhjbk5sTGs5d0xsSmxiVzkyWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJoY25ObExrOXdMbEpsYlc5MlpTaGZMblZ1YVc5dUtIQnlaWFpwYjNWekxtOWlhbVZqZEhNb0tTd2dkR2hwY3k1dlltcGxZM1J6S0NrcEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUZ3aVQzQWdhWE1nYVc1MllXeHBaQ0JoWm5SbGNpQndjbVYyYVc5MWN5QnZjQzVjSWp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDJWemRHbHRZWFJsT2lCbWRXNWpkR2x2YmlodmJHUldZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0Z2YkdSV1lXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzEwN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMllYSWdibVYzVm1Gc2RXVWdQU0JmTG1ScFptWmxjbVZ1WTJVb2IyeGtWbUZzZFdVc0lIUm9hWE11YjJKcVpXTjBjeWdwS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdTV1lnZEdobGNtVWdZWEpsSUhOaGRtVmtJRkJoY25ObElFOWlhbVZqZEhNZ1ltVnBibWNnY21WdGIzWmxaQ3dnWVd4emJ5QnlaVzF2ZG1VZ2RHaGxiUzVjYmlBZ0lDQWdJQ0FnVUdGeWMyVXVYMkZ5Y21GNVJXRmphQ2gwYUdsekxtOWlhbVZqZEhNb0tTd2dablZ1WTNScGIyNG9iMkpxS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0c5aWFpQnBibk4wWVc1alpXOW1JRkJoY25ObExrOWlhbVZqZENBbUppQnZZbW91YVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGQxWmhiSFZsSUQwZ1h5NXlaV3BsWTNRb2JtVjNWbUZzZFdVc0lHWjFibU4wYVc5dUtHOTBhR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFvYjNSb1pYSWdhVzV6ZEdGdVkyVnZaaUJRWVhKelpTNVBZbXBsWTNRcElDWW1JQ2h2ZEdobGNpNXBaQ0E5UFQwZ2IySnFMbWxrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhkV1lXeDFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwcE8xeHVYRzRnSUZCaGNuTmxMazl3TGw5eVpXZHBjM1JsY2tSbFkyOWtaWElvWENKU1pXMXZkbVZjSWl3Z1puVnVZM1JwYjI0b2FuTnZiaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUdGeWMyVXVUM0F1VW1WdGIzWmxLRkJoY25ObExsOWtaV052WkdVb2RXNWtaV1pwYm1Wa0xDQnFjMjl1TG05aWFtVmpkSE1wS1R0Y2JpQWdmU2s3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJqYkdGemMxeHVJQ0FnS2lCQklGSmxiR0YwYVc5dUlHOXdaWEpoZEdsdmJpQnBibVJwWTJGMFpYTWdkR2hoZENCMGFHVWdabWxsYkdRZ2FYTWdZVzRnYVc1emRHRnVZMlVnYjJaY2JpQWdJQ29nVUdGeWMyVXVVbVZzWVhScGIyNHNJR0Z1WkNCdlltcGxZM1J6SUdGeVpTQmlaV2x1WnlCaFpHUmxaQ0IwYnl3Z2IzSWdjbVZ0YjNabFpDQm1jbTl0TENCMGFHRjBYRzRnSUNBcUlISmxiR0YwYVc5dUxseHVJQ0FnS2k5Y2JpQWdVR0Z5YzJVdVQzQXVVbVZzWVhScGIyNGdQU0JRWVhKelpTNVBjQzVmWlhoMFpXNWtLRnh1SUNBZ0lDQWdMeW9xSUVCc1pXNWtjeUJRWVhKelpTNVBjQzVTWld4aGRHbHZiaTV3Y205MGIzUjVjR1VnS2k4Z2UxeHVYRzRnSUNBZ1gybHVhWFJwWVd4cGVtVTZJR1oxYm1OMGFXOXVLR0ZrWkhNc0lISmxiVzkyWlhNcElIdGNiaUFnSUNBZ0lIUm9hWE11WDNSaGNtZGxkRU5zWVhOelRtRnRaU0E5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN6dGNibHh1SUNBZ0lDQWdkbUZ5SUhCdmFXNTBaWEpVYjBsa0lEMGdablZ1WTNScGIyNG9iMkpxWldOMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNodlltcGxZM1FnYVc1emRHRnVZMlZ2WmlCUVlYSnpaUzVQWW1wbFkzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JVzlpYW1WamRDNXBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1hDSlpiM1VnWTJGdUozUWdZV1JrSUdGdUlIVnVjMkYyWldRZ1VHRnljMlV1VDJKcVpXTjBJSFJ2SUdFZ2NtVnNZWFJwYjI0dVhDSTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doYzJWc1ppNWZkR0Z5WjJWMFEyeGhjM05PWVcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbDkwWVhKblpYUkRiR0Z6YzA1aGJXVWdQU0J2WW1wbFkzUXVZMnhoYzNOT1lXMWxPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZkR0Z5WjJWMFEyeGhjM05PWVcxbElDRTlQU0J2WW1wbFkzUXVZMnhoYzNOT1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCY0lsUnlhV1ZrSUhSdklHTnlaV0YwWlNCaElGQmhjbk5sTGxKbGJHRjBhVzl1SUhkcGRHZ2dNaUJrYVdabVpYSmxiblFnZEhsd1pYTTZJRndpSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDNSaGNtZGxkRU5zWVhOelRtRnRaU0FySUZ3aUlHRnVaQ0JjSWlBcklHOWlhbVZqZEM1amJHRnpjMDVoYldVZ0t5QmNJaTVjSWp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzlpYW1WamRDNXBaRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjJKcVpXTjBPMXh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnZEdocGN5NXlaV3hoZEdsdmJuTlViMEZrWkNBOUlGOHVkVzVwY1NoZkxtMWhjQ2hoWkdSekxDQndiMmx1ZEdWeVZHOUpaQ2twTzF4dUlDQWdJQ0FnZEdocGN5NXlaV3hoZEdsdmJuTlViMUpsYlc5MlpTQTlJRjh1ZFc1cGNTaGZMbTFoY0NoeVpXMXZkbVZ6TENCd2IybHVkR1Z5Vkc5SlpDa3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJR0Z1SUdGeWNtRjVJRzltSUhWdVptVjBZMmhsWkNCUVlYSnpaUzVQWW1wbFkzUWdkR2hoZENCaGNtVWdZbVZwYm1jZ1lXUmtaV1FnZEc4Z2RHaGxYRzRnSUNBZ0lDb2djbVZzWVhScGIyNHVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRWEp5WVhsOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdSa1pXUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdjbVYwZFhKdUlGOHViV0Z3S0hSb2FYTXVjbVZzWVhScGIyNXpWRzlCWkdRc0lHWjFibU4wYVc5dUtHOWlhbVZqZEVsa0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdlltcGxZM1FnUFNCUVlYSnpaUzVQWW1wbFkzUXVYMk55WldGMFpTaHpaV3htTGw5MFlYSm5aWFJEYkdGemMwNWhiV1VwTzF4dUlDQWdJQ0FnSUNCdlltcGxZM1F1YVdRZ1BTQnZZbXBsWTNSSlpEdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOWlhbVZqZER0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklHRnVJR0Z5Y21GNUlHOW1JSFZ1Wm1WMFkyaGxaQ0JRWVhKelpTNVBZbXBsWTNRZ2RHaGhkQ0JoY21VZ1ltVnBibWNnY21WdGIzWmxaQ0JtY205dFhHNGdJQ0FnSUNvZ2RHaGxJSEpsYkdGMGFXOXVMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGJXOTJaV1E2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnY21WMGRYSnVJRjh1YldGd0tIUm9hWE11Y21Wc1lYUnBiMjV6Vkc5U1pXMXZkbVVzSUdaMWJtTjBhVzl1S0c5aWFtVmpkRWxrS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ2WW1wbFkzUWdQU0JRWVhKelpTNVBZbXBsWTNRdVgyTnlaV0YwWlNoelpXeG1MbDkwWVhKblpYUkRiR0Z6YzA1aGJXVXBPMXh1SUNBZ0lDQWdJQ0J2WW1wbFkzUXVhV1FnUFNCdlltcGxZM1JKWkR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5aWFtVmpkRHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUdFZ1NsTlBUaUIyWlhKemFXOXVJRzltSUhSb1pTQnZjR1Z5WVhScGIyNGdjM1ZwZEdGaWJHVWdabTl5SUhObGJtUnBibWNnZEc4Z1VHRnljMlV1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VDJKcVpXTjBmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUnZTbE5QVGpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnWVdSa2N5QTlJRzUxYkd3N1hHNGdJQ0FnSUNCMllYSWdjbVZ0YjNabGN5QTlJRzUxYkd3N1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0IyWVhJZ2FXUlViMUJ2YVc1MFpYSWdQU0JtZFc1amRHbHZiaWhwWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2V5QmZYM1I1Y0dVNklDZFFiMmx1ZEdWeUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxPaUJ6Wld4bUxsOTBZWEpuWlhSRGJHRnpjMDVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOWlhbVZqZEVsa09pQnBaQ0I5TzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUhaaGNpQndiMmx1ZEdWeWN5QTlJRzUxYkd3N1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1eVpXeGhkR2x2Ym5OVWIwRmtaQzVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lIQnZhVzUwWlhKeklEMGdYeTV0WVhBb2RHaHBjeTV5Wld4aGRHbHZibk5VYjBGa1pDd2dhV1JVYjFCdmFXNTBaWElwTzF4dUlDQWdJQ0FnSUNCaFpHUnpJRDBnZXlCY0lsOWZiM0JjSWpvZ1hDSkJaR1JTWld4aGRHbHZibHdpTENCY0ltOWlhbVZqZEhOY0lqb2djRzlwYm5SbGNuTWdmVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Y21Wc1lYUnBiMjV6Vkc5U1pXMXZkbVV1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQndiMmx1ZEdWeWN5QTlJRjh1YldGd0tIUm9hWE11Y21Wc1lYUnBiMjV6Vkc5U1pXMXZkbVVzSUdsa1ZHOVFiMmx1ZEdWeUtUdGNiaUFnSUNBZ0lDQWdjbVZ0YjNabGN5QTlJSHNnWENKZlgyOXdYQ0k2SUZ3aVVtVnRiM1psVW1Wc1lYUnBiMjVjSWl3Z1hDSnZZbXBsWTNSelhDSTZJSEJ2YVc1MFpYSnpJSDA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaGhaR1J6SUNZbUlISmxiVzkyWlhNcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIc2dYQ0pmWDI5d1hDSTZJRndpUW1GMFkyaGNJaXdnWENKdmNITmNJam9nVzJGa1pITXNJSEpsYlc5MlpYTmRmVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJR0ZrWkhNZ2ZId2djbVZ0YjNabGN5QjhmQ0I3ZlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDIxbGNtZGxWMmwwYUZCeVpYWnBiM1Z6T2lCbWRXNWpkR2x2Ymlod2NtVjJhVzkxY3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0Z3Y21WMmFXOTFjeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jSEpsZG1sdmRYTWdhVzV6ZEdGdVkyVnZaaUJRWVhKelpTNVBjQzVWYm5ObGRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QmNJbGx2ZFNCallXNG5kQ0J0YjJScFpua2dZU0J5Wld4aGRHbHZiaUJoWm5SbGNpQmtaV3hsZEdsdVp5QnBkQzVjSWp0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NISmxkbWx2ZFhNZ2FXNXpkR0Z1WTJWdlppQlFZWEp6WlM1UGNDNVNaV3hoZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2NISmxkbWx2ZFhNdVgzUmhjbWRsZEVOc1lYTnpUbUZ0WlNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGRtbHZkWE11WDNSaGNtZGxkRU5zWVhOelRtRnRaU0FoUFQwZ2RHaHBjeTVmZEdGeVoyVjBRMnhoYzNOT1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnWENKU1pXeGhkR1ZrSUc5aWFtVmpkQ0J0ZFhOMElHSmxJRzltSUdOc1lYTnpJRndpSUNzZ2NISmxkbWx2ZFhNdVgzUmhjbWRsZEVOc1lYTnpUbUZ0WlNBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aUxDQmlkWFFnWENJZ0t5QjBhR2x6TGw5MFlYSm5aWFJEYkdGemMwNWhiV1VnS3lCY0lpQjNZWE1nY0dGemMyVmtJR2x1TGx3aU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCdVpYZEJaR1FnUFNCZkxuVnVhVzl1S0Y4dVpHbG1abVZ5Wlc1alpTaHdjbVYyYVc5MWN5NXlaV3hoZEdsdmJuTlViMEZrWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZzWVhScGIyNXpWRzlTWlcxdmRtVXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYkdGMGFXOXVjMVJ2UVdSa0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUc1bGQxSmxiVzkyWlNBOUlGOHVkVzVwYjI0b1h5NWthV1ptWlhKbGJtTmxLSEJ5WlhacGIzVnpMbkpsYkdGMGFXOXVjMVJ2VW1WdGIzWmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaV3hoZEdsdmJuTlViMEZrWkNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZzWVhScGIyNXpWRzlTWlcxdmRtVXBPMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnVaWGRTWld4aGRHbHZiaUE5SUc1bGR5QlFZWEp6WlM1UGNDNVNaV3hoZEdsdmJpaHVaWGRCWkdRc0lHNWxkMUpsYlc5MlpTazdYRzRnSUNBZ0lDQWdJRzVsZDFKbGJHRjBhVzl1TGw5MFlYSm5aWFJEYkdGemMwNWhiV1VnUFNCMGFHbHpMbDkwWVhKblpYUkRiR0Z6YzA1aGJXVTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGRTWld4aGRHbHZianRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lGd2lUM0FnYVhNZ2FXNTJZV3hwWkNCaFpuUmxjaUJ3Y21WMmFXOTFjeUJ2Y0M1Y0lqdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gyVnpkR2x0WVhSbE9pQm1kVzVqZEdsdmJpaHZiR1JXWVd4MVpTd2diMkpxWldOMExDQnJaWGtwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hiMnhrVm1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxiR0YwYVc5dUlEMGdibVYzSUZCaGNuTmxMbEpsYkdGMGFXOXVLRzlpYW1WamRDd2dhMlY1S1R0Y2JpQWdJQ0FnSUNBZ2NtVnNZWFJwYjI0dWRHRnlaMlYwUTJ4aGMzTk9ZVzFsSUQwZ2RHaHBjeTVmZEdGeVoyVjBRMnhoYzNOT1lXMWxPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h2YkdSV1lXeDFaU0JwYm5OMFlXNWpaVzltSUZCaGNuTmxMbEpsYkdGMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5MFlYSm5aWFJEYkdGemMwNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYjJ4a1ZtRnNkV1V1ZEdGeVoyVjBRMnhoYzNOT1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjJ4a1ZtRnNkV1V1ZEdGeVoyVjBRMnhoYzNOT1lXMWxJQ0U5UFNCMGFHbHpMbDkwWVhKblpYUkRiR0Z6YzA1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1hDSlNaV3hoZEdWa0lHOWlhbVZqZENCdGRYTjBJR0psSUdFZ1hDSWdLeUJ2YkdSV1lXeDFaUzUwWVhKblpYUkRiR0Z6YzA1aGJXVWdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENJc0lHSjFkQ0JoSUZ3aUlDc2dkR2hwY3k1ZmRHRnlaMlYwUTJ4aGMzTk9ZVzFsSUNzZ1hDSWdkMkZ6SUhCaGMzTmxaQ0JwYmk1Y0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJ4a1ZtRnNkV1V1ZEdGeVoyVjBRMnhoYzNOT1lXMWxJRDBnZEdocGN5NWZkR0Z5WjJWMFEyeGhjM05PWVcxbE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjJ4a1ZtRnNkV1U3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QmNJazl3SUdseklHbHVkbUZzYVdRZ1lXWjBaWElnY0hKbGRtbHZkWE1nYjNBdVhDSTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JseHVJQ0JRWVhKelpTNVBjQzVmY21WbmFYTjBaWEpFWldOdlpHVnlLRndpUVdSa1VtVnNZWFJwYjI1Y0lpd2dablZ1WTNScGIyNG9hbk52YmlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VHRnljMlV1VDNBdVVtVnNZWFJwYjI0b1VHRnljMlV1WDJSbFkyOWtaU2gxYm1SbFptbHVaV1FzSUdwemIyNHViMkpxWldOMGN5a3NJRnRkS1R0Y2JpQWdmU2s3WEc0Z0lGQmhjbk5sTGs5d0xsOXlaV2RwYzNSbGNrUmxZMjlrWlhJb1hDSlNaVzF2ZG1WU1pXeGhkR2x2Ymx3aUxDQm1kVzVqZEdsdmJpaHFjMjl1S1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUVlYSnpaUzVQY0M1U1pXeGhkR2x2YmloYlhTd2dVR0Z5YzJVdVgyUmxZMjlrWlNoMWJtUmxabWx1WldRc0lHcHpiMjR1YjJKcVpXTjBjeWtwTzF4dUlDQjlLVHRjYmx4dWZTaDBhR2x6S1NrN1hHNWNiaWhtZFc1amRHbHZiaWh5YjI5MEtTQjdYRzRnSUhKdmIzUXVVR0Z5YzJVZ1BTQnliMjkwTGxCaGNuTmxJSHg4SUh0OU8xeHVJQ0IyWVhJZ1VHRnljMlVnUFNCeWIyOTBMbEJoY25ObE8xeHVJQ0IyWVhJZ1h5QTlJRkJoY25ObExsODdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlhNZ1lTQnVaWGNnVW1Wc1lYUnBiMjRnWm05eUlIUm9aU0JuYVhabGJpQndZWEpsYm5RZ2IySnFaV04wSUdGdVpDQnJaWGt1SUZSb2FYTmNiaUFnSUNvZ1kyOXVjM1J5ZFdOMGIzSWdjMmh2ZFd4a0lISmhjbVZzZVNCaVpTQjFjMlZrSUdScGNtVmpkR3g1TENCaWRYUWdjbUYwYUdWeUlHTnlaV0YwWldRZ1lubGNiaUFnSUNvZ1VHRnljMlV1VDJKcVpXTjBMbkpsYkdGMGFXOXVMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxQmhjbk5sTGs5aWFtVmpkSDBnY0dGeVpXNTBJRlJvWlNCd1lYSmxiblFnYjJZZ2RHaHBjeUJ5Wld4aGRHbHZiaTVjYmlBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHdGxlU0JVYUdVZ2EyVjVJR1p2Y2lCMGFHbHpJSEpsYkdGMGFXOXVJRzl1SUhSb1pTQndZWEpsYm5RdVhHNGdJQ0FxSUVCelpXVWdVR0Z5YzJVdVQySnFaV04wSTNKbGJHRjBhVzl1WEc0Z0lDQXFJRUJqYkdGemMxeHVJQ0FnS2x4dUlDQWdLaUE4Y0Q1Y2JpQWdJQ29nUVNCamJHRnpjeUIwYUdGMElHbHpJSFZ6WldRZ2RHOGdZV05qWlhOeklHRnNiQ0J2WmlCMGFHVWdZMmhwYkdSeVpXNGdiMllnWVNCdFlXNTVMWFJ2TFcxaGJubGNiaUFnSUNvZ2NtVnNZWFJwYjI1emFHbHdMaUFnUldGamFDQnBibk4wWVc1alpTQnZaaUJRWVhKelpTNVNaV3hoZEdsdmJpQnBjeUJoYzNOdlkybGhkR1ZrSUhkcGRHZ2dZVnh1SUNBZ0tpQndZWEowYVdOMWJHRnlJSEJoY21WdWRDQnZZbXBsWTNRZ1lXNWtJR3RsZVM1Y2JpQWdJQ29nUEM5d1BseHVJQ0FnS2k5Y2JpQWdVR0Z5YzJVdVVtVnNZWFJwYjI0Z1BTQm1kVzVqZEdsdmJpaHdZWEpsYm5Rc0lHdGxlU2tnZTF4dUlDQWdJSFJvYVhNdWNHRnlaVzUwSUQwZ2NHRnlaVzUwTzF4dUlDQWdJSFJvYVhNdWEyVjVJRDBnYTJWNU8xeHVJQ0FnSUhSb2FYTXVkR0Z5WjJWMFEyeGhjM05PWVcxbElEMGdiblZzYkR0Y2JpQWdmVHRjYmx4dUlDQlFZWEp6WlM1U1pXeGhkR2x2Ymk1d2NtOTBiM1I1Y0dVZ1BTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUV0ZyWlhNZ2MzVnlaU0IwYUdGMElIUm9hWE1nY21Wc1lYUnBiMjRnYUdGeklIUm9aU0J5YVdkb2RDQndZWEpsYm5RZ1lXNWtJR3RsZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmWlc1emRYSmxVR0Z5Wlc1MFFXNWtTMlY1T2lCbWRXNWpkR2x2Ymlod1lYSmxiblFzSUd0bGVTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1d1lYSmxiblFnUFNCMGFHbHpMbkJoY21WdWRDQjhmQ0J3WVhKbGJuUTdYRzRnSUNBZ0lDQjBhR2x6TG10bGVTQTlJSFJvYVhNdWEyVjVJSHg4SUd0bGVUdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuQmhjbVZ1ZENBaFBUMGdjR0Z5Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lGd2lTVzUwWlhKdVlXd2dSWEp5YjNJdUlGSmxiR0YwYVc5dUlISmxkSEpwWlhabFpDQm1jbTl0SUhSM2J5QmthV1ptWlhKbGJuUWdUMkpxWldOMGN5NWNJanRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbXRsZVNBaFBUMGdhMlY1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUZ3aVNXNTBaWEp1WVd3Z1JYSnliM0l1SUZKbGJHRjBhVzl1SUhKbGRISnBaWFpsWkNCbWNtOXRJSFIzYnlCa2FXWm1aWEpsYm5RZ2EyVjVjeTVjSWp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXUmtjeUJoSUZCaGNuTmxMazlpYW1WamRDQnZjaUJoYmlCaGNuSmhlU0J2WmlCUVlYSnpaUzVQWW1wbFkzUnpJSFJ2SUhSb1pTQnlaV3hoZEdsdmJpNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UzMGdiMkpxWldOMGN5QlVhR1VnYVhSbGJTQnZjaUJwZEdWdGN5QjBieUJoWkdRdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdSa09pQm1kVzVqZEdsdmJpaHZZbXBsWTNSektTQjdYRzRnSUNBZ0lDQnBaaUFvSVY4dWFYTkJjbkpoZVNodlltcGxZM1J6S1NrZ2UxeHVJQ0FnSUNBZ0lDQnZZbXBsWTNSeklEMGdXMjlpYW1WamRITmRPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ1kyaGhibWRsSUQwZ2JtVjNJRkJoY25ObExrOXdMbEpsYkdGMGFXOXVLRzlpYW1WamRITXNJRnRkS1R0Y2JpQWdJQ0FnSUhSb2FYTXVjR0Z5Wlc1MExuTmxkQ2gwYUdsekxtdGxlU3dnWTJoaGJtZGxLVHRjYmlBZ0lDQWdJSFJvYVhNdWRHRnlaMlYwUTJ4aGMzTk9ZVzFsSUQwZ1kyaGhibWRsTGw5MFlYSm5aWFJEYkdGemMwNWhiV1U3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGJXOTJaWE1nWVNCUVlYSnpaUzVQWW1wbFkzUWdiM0lnWVc0Z1lYSnlZWGtnYjJZZ1VHRnljMlV1VDJKcVpXTjBjeUJtY205dElIUm9hWE1nY21Wc1lYUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHQ5SUc5aWFtVmpkSE1nVkdobElHbDBaVzBnYjNJZ2FYUmxiWE1nZEc4Z2NtVnRiM1psTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsYlc5MlpUb2dablZ1WTNScGIyNG9iMkpxWldOMGN5a2dlMXh1SUNBZ0lDQWdhV1lnS0NGZkxtbHpRWEp5WVhrb2IySnFaV04wY3lrcElIdGNiaUFnSUNBZ0lDQWdiMkpxWldOMGN5QTlJRnR2WW1wbFkzUnpYVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZG1GeUlHTm9ZVzVuWlNBOUlHNWxkeUJRWVhKelpTNVBjQzVTWld4aGRHbHZiaWhiWFN3Z2IySnFaV04wY3lrN1hHNGdJQ0FnSUNCMGFHbHpMbkJoY21WdWRDNXpaWFFvZEdocGN5NXJaWGtzSUdOb1lXNW5aU2s3WEc0Z0lDQWdJQ0IwYUdsekxuUmhjbWRsZEVOc1lYTnpUbUZ0WlNBOUlHTm9ZVzVuWlM1ZmRHRnlaMlYwUTJ4aGMzTk9ZVzFsTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUdFZ1NsTlBUaUIyWlhKemFXOXVJRzltSUhSb1pTQnZZbXBsWTNRZ2MzVnBkR0ZpYkdVZ1ptOXlJSE5oZG1sdVp5QjBieUJrYVhOckxseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYjBwVFQwNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSHNnWENKZlgzUjVjR1ZjSWpvZ1hDSlNaV3hoZEdsdmJsd2lMQ0JjSW1Oc1lYTnpUbUZ0WlZ3aU9pQjBhR2x6TG5SaGNtZGxkRU5zWVhOelRtRnRaU0I5TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUdFZ1VHRnljMlV1VVhWbGNua2dkR2hoZENCcGN5QnNhVzFwZEdWa0lIUnZJRzlpYW1WamRITWdhVzRnZEdocGMxeHVJQ0FnSUNBcUlISmxiR0YwYVc5dUxseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGxGMVpYSjVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIRjFaWEo1T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUIwWVhKblpYUkRiR0Z6Y3p0Y2JpQWdJQ0FnSUhaaGNpQnhkV1Z5ZVR0Y2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1MFlYSm5aWFJEYkdGemMwNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHRnlaMlYwUTJ4aGMzTWdQU0JRWVhKelpTNVBZbXBsWTNRdVgyZGxkRk4xWW1Oc1lYTnpLSFJvYVhNdWNHRnlaVzUwTG1Oc1lYTnpUbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lIRjFaWEo1SUQwZ2JtVjNJRkJoY25ObExsRjFaWEo1S0hSaGNtZGxkRU5zWVhOektUdGNiaUFnSUNBZ0lDQWdjWFZsY25rdVgyVjRkSEpoVDNCMGFXOXVjeTV5WldScGNtVmpkRU5zWVhOelRtRnRaVVp2Y2t0bGVTQTlJSFJvYVhNdWEyVjVPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR0Z5WjJWMFEyeGhjM01nUFNCUVlYSnpaUzVQWW1wbFkzUXVYMmRsZEZOMVltTnNZWE56S0hSb2FYTXVkR0Z5WjJWMFEyeGhjM05PWVcxbEtUdGNiaUFnSUNBZ0lDQWdjWFZsY25rZ1BTQnVaWGNnVUdGeWMyVXVVWFZsY25rb2RHRnlaMlYwUTJ4aGMzTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjWFZsY25rdVgyRmtaRU52Ym1ScGRHbHZiaWhjSWlSeVpXeGhkR1ZrVkc5Y0lpd2dYQ0p2WW1wbFkzUmNJaXdnZEdocGN5NXdZWEpsYm5RdVgzUnZVRzlwYm5SbGNpZ3BLVHRjYmlBZ0lDQWdJSEYxWlhKNUxsOWhaR1JEYjI1a2FYUnBiMjRvWENJa2NtVnNZWFJsWkZSdlhDSXNJRndpYTJWNVhDSXNJSFJvYVhNdWEyVjVLVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSEYxWlhKNU8xeHVJQ0FnSUgxY2JpQWdmVHRjYm4wb2RHaHBjeWtwTzF4dVhHNHZLbWRzYjJKaGJDQjNhVzVrYjNjNklHWmhiSE5sTENCd2NtOWpaWE56T2lCbVlXeHpaU0FxTDF4dUtHWjFibU4wYVc5dUtISnZiM1FwSUh0Y2JpQWdjbTl2ZEM1UVlYSnpaU0E5SUhKdmIzUXVVR0Z5YzJVZ2ZId2dlMzA3WEc0Z0lIWmhjaUJRWVhKelpTQTlJSEp2YjNRdVVHRnljMlU3WEc0Z0lIWmhjaUJmSUQwZ1VHRnljMlV1WHp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUVNCUWNtOXRhWE5sSUdseklISmxkSFZ5Ym1Wa0lHSjVJR0Z6ZVc1aklHMWxkR2h2WkhNZ1lYTWdZU0JvYjI5cklIUnZJSEJ5YjNacFpHVWdZMkZzYkdKaFkydHpJSFJ2SUdKbFhHNGdJQ0FxSUdOaGJHeGxaQ0IzYUdWdUlIUm9aU0JoYzNsdVl5QjBZWE5ySUdseklHWjFiR1pwYkd4bFpDNWNiaUFnSUNwY2JpQWdJQ29nUEhBK1ZIbHdhV05oYkNCMWMyRm5aU0IzYjNWc1pDQmlaU0JzYVd0bE9qeHdjbVUrWEc0Z0lDQXFJQ0FnSUhGMVpYSjVMbVpwYm1Rb0tTNTBhR1Z1S0daMWJtTjBhVzl1S0hKbGMzVnNkSE1wSUh0Y2JpQWdJQ29nSUNBZ0lDQnlaWE4xYkhSeld6QmRMbk5sZENoY0ltWnZiMXdpTENCY0ltSmhjbHdpS1R0Y2JpQWdJQ29nSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwYzFzd1hTNXpZWFpsUVhONWJtTW9LVHRjYmlBZ0lDb2dJQ0FnZlNrdWRHaGxiaWhtZFc1amRHbHZiaWh5WlhOMWJIUXBJSHRjYmlBZ0lDb2dJQ0FnSUNCamIyNXpiMnhsTG14dlp5aGNJbFZ3WkdGMFpXUWdYQ0lnS3lCeVpYTjFiSFF1YVdRcE8xeHVJQ0FnS2lBZ0lDQjlLVHRjYmlBZ0lDb2dQQzl3Y21VK1BDOXdQbHh1SUNBZ0tseHVJQ0FnS2lCQWMyVmxJRkJoY25ObExsQnliMjFwYzJVdWNISnZkRzkwZVhCbExuUm9aVzVjYmlBZ0lDb2dRR05zWVhOelhHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1UWNtOXRhWE5sSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2RHaHBjeTVmY21WemIyeDJaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TGw5eVpXcGxZM1JsWkNBOUlHWmhiSE5sTzF4dUlDQWdJSFJvYVhNdVgzSmxjMjlzZG1Wa1EyRnNiR0poWTJ0eklEMGdXMTA3WEc0Z0lDQWdkR2hwY3k1ZmNtVnFaV04wWldSRFlXeHNZbUZqYTNNZ1BTQmJYVHRjYmlBZ2ZUdGNibHh1SUNCZkxtVjRkR1Z1WkNoUVlYSnpaUzVRY205dGFYTmxMQ0F2S2lvZ1FHeGxibVJ6SUZCaGNuTmxMbEJ5YjIxcGMyVWdLaThnZTF4dVhHNGdJQ0FnWDJselVISnZiV2x6WlhOQlVHeDFjME52YlhCc2FXRnVkRG9nWm1Gc2MyVXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJSFJ5ZFdVZ2FXWm1JSFJvWlNCbmFYWmxiaUJ2WW1wbFkzUWdablZzWm1sc2N5QjBhR1VnVUhKdmJXbHpaU0JwYm5SbGNtWmhZMlV1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjFjYmlBZ0lDQWdLaTljYmlBZ0lDQnBjem9nWm5WdVkzUnBiMjRvY0hKdmJXbHpaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMyVWdKaVlnY0hKdmJXbHpaUzUwYUdWdUlDWW1JRjh1YVhOR2RXNWpkR2x2Ymlod2NtOXRhWE5sTG5Sb1pXNHBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJR0VnYm1WM0lIQnliMjFwYzJVZ2RHaGhkQ0JwY3lCeVpYTnZiSFpsWkNCM2FYUm9JR0VnWjJsMlpXNGdkbUZzZFdVdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VHRnljMlV1VUhKdmJXbHpaWDBnZEdobElHNWxkeUJ3Y205dGFYTmxMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHRnpPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQndjbTl0YVhObElEMGdibVYzSUZCaGNuTmxMbEJ5YjIxcGMyVW9LVHRjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVjbVZ6YjJ4MlpTNWhjSEJzZVNod2NtOXRhWE5sTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhCeWIyMXBjMlU3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRIVnlibk1nWVNCdVpYY2djSEp2YldselpTQjBhR0YwSUdseklISmxhbVZqZEdWa0lIZHBkR2dnWVNCbmFYWmxiaUJsY25KdmNpNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UWNtOXRhWE5sZlNCMGFHVWdibVYzSUhCeWIyMXBjMlV1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaWEp5YjNJNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhCeWIyMXBjMlVnUFNCdVpYY2dVR0Z5YzJVdVVISnZiV2x6WlNncE8xeHVJQ0FnSUNBZ2NISnZiV2x6WlM1eVpXcGxZM1F1WVhCd2JIa29jSEp2YldselpTd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQndjbTl0YVhObE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklHRWdibVYzSUhCeWIyMXBjMlVnZEdoaGRDQnBjeUJtZFd4bWFXeHNaV1FnZDJobGJpQmhiR3dnYjJZZ2RHaGxJR2x1Y0hWMElIQnliMjFwYzJWelhHNGdJQ0FnSUNvZ1lYSmxJSEpsYzI5c2RtVmtMaUJKWmlCaGJua2djSEp2YldselpTQnBiaUIwYUdVZ2JHbHpkQ0JtWVdsc2N5d2dkR2hsYmlCMGFHVWdjbVYwZFhKdVpXUWdjSEp2YldselpWeHVJQ0FnSUNBcUlIZHBiR3dnWm1GcGJDQjNhWFJvSUhSb1pTQnNZWE4wSUdWeWNtOXlMaUJKWmlCMGFHVjVJR0ZzYkNCemRXTmpaV1ZrTENCMGFHVnVJSFJvWlNCeVpYUjFjbTVsWkZ4dUlDQWdJQ0FxSUhCeWIyMXBjMlVnZDJsc2JDQnpkV05qWldWa0xDQjNhWFJvSUhSb1pTQnlaWE4xYkhSeklHSmxhVzVuSUhSb1pTQnlaWE4xYkhSeklHOW1JR0ZzYkNCMGFHVWdhVzV3ZFhSY2JpQWdJQ0FnS2lCd2NtOXRhWE5sY3k0Z1JtOXlJR1Y0WVcxd2JHVTZJRHh3Y21VK1hHNGdJQ0FnSUNvZ0lDQjJZWElnY0RFZ1BTQlFZWEp6WlM1UWNtOXRhWE5sTG1GektERXBPMXh1SUNBZ0lDQXFJQ0FnZG1GeUlIQXlJRDBnVUdGeWMyVXVVSEp2YldselpTNWhjeWd5S1R0Y2JpQWdJQ0FnS2lBZ0lIWmhjaUJ3TXlBOUlGQmhjbk5sTGxCeWIyMXBjMlV1WVhNb015azdYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQWdJRkJoY25ObExsQnliMjFwYzJVdWQyaGxiaWh3TVN3Z2NESXNJSEF6S1M1MGFHVnVLR1oxYm1OMGFXOXVLSEl4TENCeU1pd2djak1wSUh0Y2JpQWdJQ0FnS2lBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvY2pFcE95QWdMeThnY0hKcGJuUnpJREZjYmlBZ0lDQWdLaUFnSUNBZ1kyOXVjMjlzWlM1c2IyY29jaklwT3lBZ0x5OGdjSEpwYm5SeklESmNiaUFnSUNBZ0tpQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb2NqTXBPeUFnTHk4Z2NISnBiblJ6SUROY2JpQWdJQ0FnS2lBZ0lIMHBPend2Y0hKbFBseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1ZHaGxJR2x1Y0hWMElIQnliMjFwYzJWeklHTmhiaUJoYkhOdklHSmxJSE53WldOcFptbGxaQ0JoY3lCaGJpQmhjbkpoZVRvZ1BIQnlaVDVjYmlBZ0lDQWdLaUFnSUhaaGNpQndjbTl0YVhObGN5QTlJRnR3TVN3Z2NESXNJSEF6WFR0Y2JpQWdJQ0FnS2lBZ0lGQmhjbk5sTGxCeWIyMXBjMlV1ZDJobGJpaHdjbTl0YVhObGN5a3VkR2hsYmlobWRXNWpkR2x2YmloeU1Td2djaklzSUhJektTQjdYRzRnSUNBZ0lDb2dJQ0FnSUdOdmJuTnZiR1V1Ykc5bktISXhLVHNnSUM4dklIQnlhVzUwY3lBeFhHNGdJQ0FnSUNvZ0lDQWdJR052Ym5OdmJHVXViRzluS0hJeUtUc2dJQzh2SUhCeWFXNTBjeUF5WEc0Z0lDQWdJQ29nSUNBZ0lHTnZibk52YkdVdWJHOW5LSEl6S1RzZ0lDOHZJSEJ5YVc1MGN5QXpYRzRnSUNBZ0lDb2dJQ0I5S1R0Y2JpQWdJQ0FnS2lBOEwzQnlaVDVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQndjbTl0YVhObGN5QmhJR3hwYzNRZ2IyWWdjSEp2YldselpYTWdkRzhnZDJGcGRDQm1iM0l1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVSEp2YldselpYMGdkR2hsSUc1bGR5QndjbTl0YVhObExseHVJQ0FnSUNBcUwxeHVJQ0FnSUhkb1pXNDZJR1oxYm1OMGFXOXVLSEJ5YjIxcGMyVnpLU0I3WEc0Z0lDQWdJQ0F2THlCQmJHeHZkeUJ3WVhOemFXNW5JR2x1SUZCeWIyMXBjMlZ6SUdGeklITmxjR0Z5WVhSbElHRnlaM1Z0Wlc1MGN5QnBibk4wWldGa0lHOW1JR0Z1SUVGeWNtRjVMbHh1SUNBZ0lDQWdkbUZ5SUc5aWFtVmpkSE03WEc0Z0lDQWdJQ0JwWmlBb2NISnZiV2x6WlhNZ0ppWWdVR0Z5YzJVdVgybHpUblZzYkU5eVZXNWtaV1pwYm1Wa0tIQnliMjFwYzJWekxteGxibWQwYUNrcElIdGNiaUFnSUNBZ0lDQWdiMkpxWldOMGN5QTlJR0Z5WjNWdFpXNTBjenRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJRzlpYW1WamRITWdQU0J3Y205dGFYTmxjenRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZG1GeUlIUnZkR0ZzSUQwZ2IySnFaV04wY3k1c1pXNW5kR2c3WEc0Z0lDQWdJQ0IyWVhJZ2FHRmtSWEp5YjNJZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUhaaGNpQnlaWE4xYkhSeklEMGdXMTA3WEc0Z0lDQWdJQ0IyWVhJZ1pYSnliM0p6SUQwZ1cxMDdYRzRnSUNBZ0lDQnlaWE4xYkhSekxteGxibWQwYUNBOUlHOWlhbVZqZEhNdWJHVnVaM1JvTzF4dUlDQWdJQ0FnWlhKeWIzSnpMbXhsYm1kMGFDQTlJRzlpYW1WamRITXViR1Z1WjNSb08xeHVYRzRnSUNBZ0lDQnBaaUFvZEc5MFlXd2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQmhjbk5sTGxCeWIyMXBjMlV1WVhNdVlYQndiSGtvZEdocGN5d2djbVZ6ZFd4MGN5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFpoY2lCd2NtOXRhWE5sSUQwZ2JtVjNJRkJoY25ObExsQnliMjFwYzJVb0tUdGNibHh1SUNBZ0lDQWdkbUZ5SUhKbGMyOXNkbVZQYm1VZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEc5MFlXd2dQU0IwYjNSaGJDQXRJREU3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBiM1JoYkNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hvWVdSRmNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2YldselpTNXlaV3BsWTNRb1pYSnliM0p6S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmJXbHpaUzV5WlhOdmJIWmxMbUZ3Y0d4NUtIQnliMjFwYzJVc0lISmxjM1ZzZEhNcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ1VHRnljMlV1WDJGeWNtRjVSV0ZqYUNodlltcGxZM1J6TENCbWRXNWpkR2x2YmlodlltcGxZM1FzSUdrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0ZCaGNuTmxMbEJ5YjIxcGMyVXVhWE1vYjJKcVpXTjBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHOWlhbVZqZEM1MGFHVnVLR1oxYm1OMGFXOXVLSEpsYzNWc2RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwYzF0cFhTQTlJSEpsYzNWc2REdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVZQYm1Vb0tUdGNiaUFnSUNBZ0lDQWdJQ0I5TENCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNKelcybGRJRDBnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lXUkZjbkp2Y2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabFQyNWxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WemRXeDBjMXRwWFNBOUlHOWlhbVZqZER0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabFQyNWxLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2NISnZiV2x6WlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VuVnVjeUIwYUdVZ1oybDJaVzRnWVhONWJtTkdkVzVqZEdsdmJpQnlaWEJsWVhSbFpHeDVMQ0JoY3lCc2IyNW5JR0Z6SUhSb1pTQndjbVZrYVdOaGRHVmNiaUFnSUNBZ0tpQm1kVzVqZEdsdmJpQnlaWFIxY201eklHRWdkSEoxZEdoNUlIWmhiSFZsTGlCVGRHOXdjeUJ5WlhCbFlYUnBibWNnYVdZZ1lYTjVibU5HZFc1amRHbHZiaUJ5WlhSMWNtNXpYRzRnSUNBZ0lDb2dZU0J5WldwbFkzUmxaQ0J3Y205dGFYTmxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJSEJ5WldScFkyRjBaU0J6YUc5MWJHUWdjbVYwZFhKdUlHWmhiSE5sSUhkb1pXNGdjbVZoWkhrZ2RHOGdjM1J2Y0M1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCaGMzbHVZMFoxYm1OMGFXOXVJSE5vYjNWc1pDQnlaWFIxY200Z1lTQlFjbTl0YVhObExseHVJQ0FnSUNBcUwxeHVJQ0FnSUY5amIyNTBhVzUxWlZkb2FXeGxPaUJtZFc1amRHbHZiaWh3Y21Wa2FXTmhkR1VzSUdGemVXNWpSblZ1WTNScGIyNHBJSHRjYmlBZ0lDQWdJR2xtSUNod2NtVmthV05oZEdVb0tTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWE41Ym1OR2RXNWpkR2x2YmlncExuUm9aVzRvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQmhjbk5sTGxCeWIyMXBjMlV1WDJOdmJuUnBiblZsVjJocGJHVW9jSEpsWkdsallYUmxMQ0JoYzNsdVkwWjFibU4wYVc5dUtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVVISnZiV2x6WlM1aGN5Z3BPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNWNiaUFnWHk1bGVIUmxibVFvVUdGeWMyVXVVSEp2YldselpTNXdjbTkwYjNSNWNHVXNJQzhxS2lCQWJHVnVaSE1nVUdGeWMyVXVVSEp2YldselpTNXdjbTkwYjNSNWNHVWdLaThnZTF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1RXRnlhM01nZEdocGN5QndjbTl0YVhObElHRnpJR1oxYkdacGJHeGxaQ3dnWm1seWFXNW5JR0Z1ZVNCallXeHNZbUZqYTNNZ2QyRnBkR2x1WnlCdmJpQnBkQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdjbVZ6ZFd4MElIUm9aU0J5WlhOMWJIUWdkRzhnY0dGemN5QjBieUIwYUdVZ1kyRnNiR0poWTJ0ekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGMyOXNkbVU2SUdaMWJtTjBhVzl1S0hKbGMzVnNkQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDNKbGMyOXNkbVZrSUh4OElIUm9hWE11WDNKbGFtVmpkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUZ3aVFTQndjbTl0YVhObElIZGhjeUJ5WlhOdmJIWmxaQ0JsZG1WdUlIUm9iM1ZuYUNCcGRDQm9ZV1FnWVd4eVpXRmtlU0JpWldWdUlGd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNBb2RHaHBjeTVmY21WemIyeDJaV1FnUHlCY0luSmxjMjlzZG1Wa1hDSWdPaUJjSW5KbGFtVmpkR1ZrWENJcElDc2dYQ0l1WENJN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMGFHbHpMbDl5WlhOdmJIWmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQjBhR2x6TGw5eVpYTjFiSFFnUFNCaGNtZDFiV1Z1ZEhNN1hHNGdJQ0FnSUNCMllYSWdjbVZ6ZFd4MGN5QTlJR0Z5WjNWdFpXNTBjenRjYmlBZ0lDQWdJRkJoY25ObExsOWhjbkpoZVVWaFkyZ29kR2hwY3k1ZmNtVnpiMngyWldSRFlXeHNZbUZqYTNNc0lHWjFibU4wYVc5dUtISmxjMjlzZG1Wa1EyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpXUkRZV3hzWW1GamF5NWhjSEJzZVNoMGFHbHpMQ0J5WlhOMWJIUnpLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZEdocGN5NWZjbVZ6YjJ4MlpXUkRZV3hzWW1GamEzTWdQU0JiWFR0Y2JpQWdJQ0FnSUhSb2FYTXVYM0psYW1WamRHVmtRMkZzYkdKaFkydHpJRDBnVzEwN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFMWhjbXR6SUhSb2FYTWdjSEp2YldselpTQmhjeUJtZFd4bWFXeHNaV1FzSUdacGNtbHVaeUJoYm5rZ1kyRnNiR0poWTJ0eklIZGhhWFJwYm1jZ2IyNGdhWFF1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1Z5Y205eUlIUm9aU0JsY25KdmNpQjBieUJ3WVhOeklIUnZJSFJvWlNCallXeHNZbUZqYTNNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WcVpXTjBPaUJtZFc1amRHbHZiaWhsY25KdmNpa2dlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVYM0psYzI5c2RtVmtJSHg4SUhSb2FYTXVYM0psYW1WamRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRndpUVNCd2NtOXRhWE5sSUhkaGN5QnlaV3BsWTNSbFpDQmxkbVZ1SUhSb2IzVm5hQ0JwZENCb1lXUWdZV3h5WldGa2VTQmlaV1Z1SUZ3aUlDdGNiaUFnSUNBZ0lDQWdJQ0FvZEdocGN5NWZjbVZ6YjJ4MlpXUWdQeUJjSW5KbGMyOXNkbVZrWENJZ09pQmNJbkpsYW1WamRHVmtYQ0lwSUNzZ1hDSXVYQ0k3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUdsekxsOXlaV3BsWTNSbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCMGFHbHpMbDlsY25KdmNpQTlJR1Z5Y205eU8xeHVJQ0FnSUNBZ1VHRnljMlV1WDJGeWNtRjVSV0ZqYUNoMGFHbHpMbDl5WldwbFkzUmxaRU5oYkd4aVlXTnJjeXdnWm5WdVkzUnBiMjRvY21WcVpXTjBaV1JEWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1JsWkVOaGJHeGlZV05yS0dWeWNtOXlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZEdocGN5NWZjbVZ6YjJ4MlpXUkRZV3hzWW1GamEzTWdQU0JiWFR0Y2JpQWdJQ0FnSUhSb2FYTXVYM0psYW1WamRHVmtRMkZzYkdKaFkydHpJRDBnVzEwN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaSE1nWTJGc2JHSmhZMnR6SUhSdklHSmxJR05oYkd4bFpDQjNhR1Z1SUhSb2FYTWdjSEp2YldselpTQnBjeUJtZFd4bWFXeHNaV1F1SUZKbGRIVnlibk1nWVNCdVpYZGNiaUFnSUNBZ0tpQlFjbTl0YVhObElIUm9ZWFFnZDJsc2JDQmlaU0JtZFd4bWFXeHNaV1FnZDJobGJpQjBhR1VnWTJGc2JHSmhZMnNnYVhNZ1kyOXRjR3hsZEdVdUlFbDBJR0ZzYkc5M2MxeHVJQ0FnSUNBcUlHTm9ZV2x1YVc1bkxpQkpaaUIwYUdVZ1kyRnNiR0poWTJzZ2FYUnpaV3htSUhKbGRIVnlibk1nWVNCUWNtOXRhWE5sTENCMGFHVnVJSFJvWlNCdmJtVWdjbVYwZFhKdVpXUmNiaUFnSUNBZ0tpQmllU0JjSW5Sb1pXNWNJaUIzYVd4c0lHNXZkQ0JpWlNCbWRXeG1hV3hzWldRZ2RXNTBhV3dnZEdoaGRDQnZibVVnY21WMGRYSnVaV1FnWW5rZ2RHaGxJR05oYkd4aVlXTnJYRzRnSUNBZ0lDb2dhWE1nWm5Wc1ptbHNiR1ZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUhKbGMyOXNkbVZrUTJGc2JHSmhZMnNnUm5WdVkzUnBiMjRnZEdoaGRDQnBjeUJqWVd4c1pXUWdkMmhsYmlCMGFHbHpYRzRnSUNBZ0lDb2dVSEp2YldselpTQnBjeUJ5WlhOdmJIWmxaQzRnVDI1alpTQjBhR1VnWTJGc2JHSmhZMnNnYVhNZ1kyOXRjR3hsZEdVc0lIUm9aVzRnZEdobElGQnliMjFwYzJWY2JpQWdJQ0FnS2lCeVpYUjFjbTVsWkNCaWVTQmNJblJvWlc1Y0lpQjNhV3hzSUdGc2MyOGdZbVVnWm5Wc1ptbHNiR1ZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUhKbGFtVmpkR1ZrUTJGc2JHSmhZMnNnUm5WdVkzUnBiMjRnZEdoaGRDQnBjeUJqWVd4c1pXUWdkMmhsYmlCMGFHbHpYRzRnSUNBZ0lDb2dVSEp2YldselpTQnBjeUJ5WldwbFkzUmxaQ0IzYVhSb0lHRnVJR1Z5Y205eUxpQlBibU5sSUhSb1pTQmpZV3hzWW1GamF5QnBjeUJqYjIxd2JHVjBaU3dnZEdobGJseHVJQ0FnSUNBcUlIUm9aU0J3Y205dGFYTmxJSEpsZEhWeWJtVmtJR0o1SUZ3aWRHaGxibHdpSUhkcGRHZ2dZbVVnY21WemIyeDJaV1FnYzNWalkyVnpjMloxYkd4NUxpQkpabHh1SUNBZ0lDQXFJSEpsYW1WamRHVmtRMkZzYkdKaFkyc2dhWE1nYm5Wc2JDd2diM0lnYVhRZ2NtVjBkWEp1Y3lCaElISmxhbVZqZEdWa0lGQnliMjFwYzJVc0lIUm9aVzRnZEdobFhHNGdJQ0FnSUNvZ1VISnZiV2x6WlNCeVpYUjFjbTVsWkNCaWVTQmNJblJvWlc1Y0lpQjNhV3hzSUdKbElISmxhbVZqZEdWa0lIZHBkR2dnZEdoaGRDQmxjbkp2Y2k1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVRY205dGFYTmxmU0JCSUc1bGR5QlFjbTl0YVhObElIUm9ZWFFnZDJsc2JDQmlaU0JtZFd4bWFXeHNaV1FnWVdaMFpYSWdkR2hwYzF4dUlDQWdJQ0FxSUZCeWIyMXBjMlVnYVhNZ1puVnNabWxzYkdWa0lHRnVaQ0JsYVhSb1pYSWdZMkZzYkdKaFkyc2dhR0Z6SUdOdmJYQnNaWFJsWkM0Z1NXWWdkR2hsSUdOaGJHeGlZV05yWEc0Z0lDQWdJQ29nY21WMGRYSnVaV1FnWVNCUWNtOXRhWE5sTENCMGFHVnVJSFJvYVhNZ1VISnZiV2x6WlNCM2FXeHNJRzV2ZENCaVpTQm1kV3htYVd4c1pXUWdkVzUwYVd3Z2RHaGhkRnh1SUNBZ0lDQXFJRzl1WlNCcGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHVnVPaUJtZFc1amRHbHZiaWh5WlhOdmJIWmxaRU5oYkd4aVlXTnJMQ0J5WldwbFkzUmxaRU5oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2NISnZiV2x6WlNBOUlHNWxkeUJRWVhKelpTNVFjbTl0YVhObEtDazdYRzVjYmlBZ0lDQWdJSFpoY2lCM2NtRndjR1ZrVW1WemIyeDJaV1JEWVd4c1ltRmpheUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnWVhKbmRXMWxiblJ6TzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6YjJ4MlpXUkRZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaFFZWEp6WlM1UWNtOXRhWE5sTGw5cGMxQnliMjFwYzJWelFWQnNkWE5EYjIxd2JHbGhiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUZ0eVpYTnZiSFpsWkVOaGJHeGlZV05yTG1Gd2NHeDVLSFJvYVhNc0lISmxjM1ZzZENsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCYlVHRnljMlV1VUhKdmJXbHpaUzVsY25KdmNpaGxLVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlGdHlaWE52YkhabFpFTmhiR3hpWVdOckxtRndjR3g1S0hSb2FYTXNJSEpsYzNWc2RDbGRPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvY21WemRXeDBMbXhsYm1kMGFDQTlQVDBnTVNBbUppQlFZWEp6WlM1UWNtOXRhWE5sTG1sektISmxjM1ZzZEZzd1hTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJiTUYwdWRHaGxiaWhtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjIxcGMyVXVjbVZ6YjJ4MlpTNWhjSEJzZVNod2NtOXRhWE5sTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQWdJSDBzSUdaMWJtTjBhVzl1S0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl0YVhObExuSmxhbVZqZENobGNuSnZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY0hKdmJXbHpaUzV5WlhOdmJIWmxMbUZ3Y0d4NUtIQnliMjFwYzJVc0lISmxjM1ZzZENrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJSFpoY2lCM2NtRndjR1ZrVW1WcVpXTjBaV1JEWVd4c1ltRmpheUE5SUdaMWJtTjBhVzl1S0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxhbVZqZEdWa1EyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1VHRnljMlV1VUhKdmJXbHpaUzVmYVhOUWNtOXRhWE5sYzBGUWJIVnpRMjl0Y0d4cFlXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JiY21WcVpXTjBaV1JEWVd4c1ltRmpheWhsY25KdmNpbGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQmJVR0Z5YzJVdVVISnZiV2x6WlM1bGNuSnZjaWhsS1YwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJRnR5WldwbFkzUmxaRU5oYkd4aVlXTnJLR1Z5Y205eUtWMDdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUXViR1Z1WjNSb0lEMDlQU0F4SUNZbUlGQmhjbk5sTGxCeWIyMXBjMlV1YVhNb2NtVnpkV3gwV3pCZEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwV3pCZExuUm9aVzRvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIyMXBjMlV1Y21WemIyeDJaUzVoY0hCc2VTaHdjbTl0YVhObExDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dablZ1WTNScGIyNG9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZiV2x6WlM1eVpXcGxZM1FvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hRWVhKelpTNVFjbTl0YVhObExsOXBjMUJ5YjIxcGMyVnpRVkJzZFhORGIyMXdiR2xoYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZiV2x6WlM1eVpYTnZiSFpsTG1Gd2NHeDVLSEJ5YjIxcGMyVXNJSEpsYzNWc2RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205dGFYTmxMbkpsYW1WamRDaHlaWE4xYkhSYk1GMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCd2NtOXRhWE5sTG5KbGFtVmpkQ2hsY25KdmNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUhaaGNpQnlkVzVNWVhSbGNpQTlJR1oxYm1OMGFXOXVLR1oxYm1NcElIdGNiaUFnSUNBZ0lDQWdablZ1WXk1allXeHNLQ2s3WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJQ0FnYVdZZ0tGQmhjbk5sTGxCeWIyMXBjMlV1WDJselVISnZiV2x6WlhOQlVHeDFjME52YlhCc2FXRnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUtIZHBibVJ2ZHlrZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIZHBibVJ2ZHk1elpYUlVhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY25WdVRHRjBaWElnUFNCbWRXNWpkR2x2YmlobWRXNWpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdWMyVjBWR2x0Wlc5MWRDaG1kVzVqTENBd0tUdGNiaUFnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2Wmlod2NtOWpaWE56S1NBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEoxYmt4aGRHVnlJRDBnWm5WdVkzUnBiMjRvWm5WdVl5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXlobWRXNWpLVHRjYmlBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN6dGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOXlaWE52YkhabFpDa2dlMXh1SUNBZ0lDQWdJQ0J5ZFc1TVlYUmxjaWhtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjNjbUZ3Y0dWa1VtVnpiMngyWldSRFlXeHNZbUZqYXk1aGNIQnNlU2h6Wld4bUxDQnpaV3htTGw5eVpYTjFiSFFwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1ZmNtVnFaV04wWldRcElIdGNiaUFnSUNBZ0lDQWdjblZ1VEdGMFpYSW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2QzSmhjSEJsWkZKbGFtVmpkR1ZrUTJGc2JHSmhZMnNvYzJWc1ppNWZaWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxjMjlzZG1Wa1EyRnNiR0poWTJ0ekxuQjFjMmdvZDNKaGNIQmxaRkpsYzI5c2RtVmtRMkZzYkdKaFkyc3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaV3BsWTNSbFpFTmhiR3hpWVdOcmN5NXdkWE5vS0hkeVlYQndaV1JTWldwbFkzUmxaRU5oYkd4aVlXTnJLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMyVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZrWkNCb1lXNWtiR1Z5Y3lCMGJ5QmlaU0JqWVd4c1pXUWdkMmhsYmlCMGFHVWdjSEp2YldselpTQmNiaUFnSUNBZ0tpQnBjeUJsYVhSb1pYSWdjbVZ6YjJ4MlpXUWdiM0lnY21WcVpXTjBaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQmhiSGRoZVhNNklHWjFibU4wYVc5dUtHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwYUdWdUtHTmhiR3hpWVdOckxDQmpZV3hzWW1GamF5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZrWkNCb1lXNWtiR1Z5Y3lCMGJ5QmlaU0JqWVd4c1pXUWdkMmhsYmlCMGFHVWdVSEp2YldselpTQnZZbXBsWTNRZ2FYTWdjbVZ6YjJ4MlpXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCa2IyNWxPaUJtZFc1amRHbHZiaWhqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRHaGxiaWhqWVd4c1ltRmpheWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGa1pDQm9ZVzVrYkdWeWN5QjBieUJpWlNCallXeHNaV1FnZDJobGJpQjBhR1VnVUhKdmJXbHpaU0J2WW1wbFkzUWdhWE1nY21WcVpXTjBaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQm1ZV2xzT2lCbWRXNWpkR2x2YmloallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkR2hsYmlodWRXeHNMQ0JqWVd4c1ltRmpheWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKMWJpQjBhR1VnWjJsMlpXNGdZMkZzYkdKaFkydHpJR0ZtZEdWeUlIUm9hWE1nY0hKdmJXbHpaU0JwY3lCbWRXeG1hV3hzWldRdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUc5d2RHbHZibk5QY2tOaGJHeGlZV05ySUh0OUlFRWdRbUZqYTJKdmJtVXRjM1I1YkdVZ2IzQjBhVzl1Y3lCallXeHNZbUZqYXl3Z2IzSWdZVnh1SUNBZ0lDQXFJR05oYkd4aVlXTnJJR1oxYm1OMGFXOXVMaUJKWmlCMGFHbHpJR2x6SUdGdUlHOXdkR2x2Ym5NZ2IySnFaV04wSUdGdVpDQmpiMjUwWVdsdWN5QmhJRndpYlc5a1pXeGNJbHh1SUNBZ0lDQXFJR0YwZEhKcFluVjBaWE1zSUhSb1lYUWdkMmxzYkNCaVpTQndZWE56WldRZ2RHOGdaWEp5YjNJZ1kyRnNiR0poWTJ0eklHRnpJSFJvWlNCbWFYSnpkQ0JoY21kMWJXVnVkQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiVzlrWld3Z2UzMGdTV1lnZEhKMWRHaDVMQ0IwYUdseklIZHBiR3dnWW1VZ2NHRnpjMlZrSUdGeklIUm9aU0JtYVhKemRDQnlaWE4xYkhRZ2IyWmNiaUFnSUNBZ0tpQmxjbkp2Y2lCallXeHNZbUZqYTNNdUlGUm9hWE1nYVhNZ1ptOXlJRUpoWTJ0aWIyNWxMV052YlhCaGRHRmlhV3hwZEhrdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VHRnljMlV1VUhKdmJXbHpaWDBnUVNCd2NtOXRhWE5sSUhSb1lYUWdkMmxzYkNCaVpTQnlaWE52YkhabFpDQmhablJsY2lCMGFHVmNiaUFnSUNBZ0tpQmpZV3hzWW1GamEzTWdZWEpsSUhKMWJpd2dkMmwwYUNCMGFHVWdjMkZ0WlNCeVpYTjFiSFFnWVhNZ2RHaHBjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmZkR2hsYmxKMWJrTmhiR3hpWVdOcmN6b2dablZ1WTNScGIyNG9iM0IwYVc5dWMwOXlRMkZzYkdKaFkyc3NJRzF2WkdWc0tTQjdYRzRnSUNBZ0lDQjJZWElnYjNCMGFXOXVjenRjYmlBZ0lDQWdJR2xtSUNoZkxtbHpSblZ1WTNScGIyNG9iM0IwYVc5dWMwOXlRMkZzYkdKaFkyc3BLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpZV3hzWW1GamF5QTlJRzl3ZEdsdmJuTlBja05oYkd4aVlXTnJPMXh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lITjFZMk5sYzNNNklHWjFibU4wYVc5dUtISmxjM1ZzZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNvY21WemRXeDBMQ0J1ZFd4c0tUdGNiaUFnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lHVnljbTl5T2lCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc29iblZzYkN3Z1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTWdQU0JmTG1Oc2IyNWxLRzl3ZEdsdmJuTlBja05oYkd4aVlXTnJLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJRzl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwYUdWdUtHWjFibU4wYVc5dUtISmxjM1ZzZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTV6ZFdOalpYTnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1emRXTmpaWE56TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYlc5a1pXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlhhR1Z1SUhSb1pYSmxKM01nYm04Z1kyRnNiR0poWTJzc0lHRWdjM2x1WXlCbGRtVnVkQ0J6YUc5MWJHUWdZbVVnZEhKcFoyZGxjbVZrTGx4dUlDQWdJQ0FnSUNBZ0lHMXZaR1ZzTG5SeWFXZG5aWElvSjNONWJtTW5MQ0J0YjJSbGJDd2djbVZ6ZFd4MExDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVVISnZiV2x6WlM1aGN5NWhjSEJzZVNoUVlYSnpaUzVRY205dGFYTmxMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0b1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVaWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lWOHVhWE5WYm1SbFptbHVaV1FvYlc5a1pXd3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtVnljbTl5S0cxdlpHVnNMQ0JsY25KdmNpazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdVpYSnliM0lvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHRiMlJsYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUZkb1pXNGdkR2hsY21VbmN5QnVieUJsY25KdmNpQmpZV3hzWW1GamF5d2dZVzRnWlhKeWIzSWdaWFpsYm5RZ2MyaHZkV3hrSUdKbElIUnlhV2RuWlhKbFpDNWNiaUFnSUNBZ0lDQWdJQ0J0YjJSbGJDNTBjbWxuWjJWeUtDZGxjbkp2Y2ljc0lHMXZaR1ZzTENCbGNuSnZjaXdnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdRbmtnWlhod2JHbGphWFJzZVNCeVpYUjFjbTVwYm1jZ1lTQnlaV3BsWTNSbFpDQlFjbTl0YVhObExDQjBhR2x6SUhkcGJHd2dkMjl5YXlCM2FYUm9YRzRnSUNBZ0lDQWdJQzh2SUdWcGRHaGxjaUJxVVhWbGNua2diM0lnVUhKdmJXbHpaWE12UVNCelpXMWhiblJwWTNNdVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUVlYSnpaUzVRY205dGFYTmxMbVZ5Y205eUtHVnljbTl5S1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJaR1J6SUdFZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI0Z2RHaGhkQ0J6YUc5MWJHUWdZbVVnWTJGc2JHVmtJSEpsWjJGeVpHeGxjM01nYjJZZ2QyaGxkR2hsY2x4dUlDQWdJQ0FxSUhSb2FYTWdjSEp2YldselpTQm1ZV2xzWldRZ2IzSWdjM1ZqWTJWbFpHVmtMaUJVYUdVZ1kyRnNiR0poWTJzZ2QybHNiQ0JpWlNCbmFYWmxiaUJsYVhSb1pYSWdkR2hsWEc0Z0lDQWdJQ29nWVhKeVlYa2diMllnY21WemRXeDBjeUJtYjNJZ2FYUnpJR1pwY25OMElHRnlaM1Z0Wlc1MExDQnZjaUIwYUdVZ1pYSnliM0lnWVhNZ2FYUnpJSE5sWTI5dVpDeGNiaUFnSUNBZ0tpQmtaWEJsYm1ScGJtY2diMjRnZDJobGRHaGxjaUIwYUdseklGQnliMjFwYzJVZ2QyRnpJSEpsYW1WamRHVmtJRzl5SUhKbGMyOXNkbVZrTGlCU1pYUjFjbTV6SUdGY2JpQWdJQ0FnS2lCdVpYY2dVSEp2YldselpTd2diR2xyWlNCY0luUm9aVzVjSWlCM2IzVnNaQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JqYjI1MGFXNTFZWFJwYjI0Z2RHaGxJR05oYkd4aVlXTnJMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lGOWpiMjUwYVc1MVpWZHBkR2c2SUdaMWJtTjBhVzl1S0dOdmJuUnBiblZoZEdsdmJpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZEdobGJpaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR052Ym5ScGJuVmhkR2x2YmloaGNtZDFiV1Z1ZEhNc0lHNTFiR3dwTzF4dUlDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0b1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuUnBiblZoZEdsdmJpaHVkV3hzTENCbGNuSnZjaWs3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdmU2s3WEc1Y2JuMG9kR2hwY3lrcE8xeHVYRzR2S21wemFHbHVkQ0JpYVhSM2FYTmxPbVpoYkhObElDb3ZMeXBuYkc5aVlXd2dSbWxzWlZKbFlXUmxjam9nZEhKMVpTd2dSbWxzWlRvZ2RISjFaU0FxTDF4dUtHWjFibU4wYVc5dUtISnZiM1FwSUh0Y2JpQWdjbTl2ZEM1UVlYSnpaU0E5SUhKdmIzUXVVR0Z5YzJVZ2ZId2dlMzA3WEc0Z0lIWmhjaUJRWVhKelpTQTlJSEp2YjNRdVVHRnljMlU3WEc0Z0lIWmhjaUJmSUQwZ1VHRnljMlV1WHp0Y2JseHVJQ0IyWVhJZ1lqWTBSR2xuYVhRZ1BTQm1kVzVqZEdsdmJpaHVkVzFpWlhJcElIdGNiaUFnSUNCcFppQW9iblZ0WW1WeUlEd2dNallwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0RZMUlDc2diblZ0WW1WeUtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHNTFiV0psY2lBOElEVXlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2c1TnlBcklDaHVkVzFpWlhJZ0xTQXlOaWtwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYm5WdFltVnlJRHdnTmpJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtEUTRJQ3NnS0c1MWJXSmxjaUF0SURVeUtTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHVkVzFpWlhJZ1BUMDlJRFl5S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWENJclhDSTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHVkVzFpWlhJZ1BUMDlJRFl6S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWENJdlhDSTdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2NtOTNJRndpVkhKcFpXUWdkRzhnWlc1amIyUmxJR3hoY21kbElHUnBaMmwwSUZ3aUlDc2diblZ0WW1WeUlDc2dYQ0lnYVc0Z1ltRnpaVFkwTGx3aU8xeHVJQ0I5TzF4dVhHNGdJSFpoY2lCbGJtTnZaR1ZDWVhObE5qUWdQU0JtZFc1amRHbHZiaWhoY25KaGVTa2dlMXh1SUNBZ0lIWmhjaUJqYUhWdWEzTWdQU0JiWFR0Y2JpQWdJQ0JqYUhWdWEzTXViR1Z1WjNSb0lEMGdUV0YwYUM1alpXbHNLR0Z5Y21GNUxteGxibWQwYUNBdklETXBPMXh1SUNBZ0lGOHVkR2x0WlhNb1kyaDFibXR6TG14bGJtZDBhQ3dnWm5WdVkzUnBiMjRvYVNrZ2UxeHVJQ0FnSUNBZ2RtRnlJR0l4SUQwZ1lYSnlZWGxiYVNBcUlETmRPMXh1SUNBZ0lDQWdkbUZ5SUdJeUlEMGdZWEp5WVhsYmFTQXFJRE1nS3lBeFhTQjhmQ0F3TzF4dUlDQWdJQ0FnZG1GeUlHSXpJRDBnWVhKeVlYbGJhU0FxSURNZ0t5QXlYU0I4ZkNBd08xeHVYRzRnSUNBZ0lDQjJZWElnYUdGek1pQTlJQ2hwSUNvZ015QXJJREVwSUR3Z1lYSnlZWGt1YkdWdVozUm9PMXh1SUNBZ0lDQWdkbUZ5SUdoaGN6TWdQU0FvYVNBcUlETWdLeUF5S1NBOElHRnljbUY1TG14bGJtZDBhRHRjYmx4dUlDQWdJQ0FnWTJoMWJtdHpXMmxkSUQwZ1cxeHVJQ0FnSUNBZ0lDQmlOalJFYVdkcGRDZ29ZakVnUGo0Z01pa2dKaUF3ZUROR0tTeGNiaUFnSUNBZ0lDQWdZalkwUkdsbmFYUW9LQ2hpTVNBOFBDQTBLU0FtSURCNE16QXBJSHdnS0NoaU1pQStQaUEwS1NBbUlEQjRNRVlwS1N4Y2JpQWdJQ0FnSUNBZ2FHRnpNaUEvSUdJMk5FUnBaMmwwS0Nnb1lqSWdQRHdnTWlrZ0ppQXdlRE5ES1NCOElDZ29Zak1nUGo0Z05pa2dKaUF3ZURBektTa2dPaUJjSWoxY0lpeGNiaUFnSUNBZ0lDQWdhR0Z6TXlBL0lHSTJORVJwWjJsMEtHSXpJQ1lnTUhnelJpa2dPaUJjSWoxY0lseHVJQ0FnSUNBZ1hTNXFiMmx1S0Z3aVhDSXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCamFIVnVhM011YW05cGJpaGNJbHdpS1R0Y2JpQWdmVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZoWkhNZ1lTQkdhV3hsSUhWemFXNW5JR0VnUm1sc1pWSmxZV1JsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJR1pwYkdVZ2UwWnBiR1Y5SUhSb1pTQkdhV3hsSUhSdklISmxZV1F1WEc0Z0lDQXFJRUJ3WVhKaGJTQjBlWEJsSUh0VGRISnBibWQ5SUNodmNIUnBiMjVoYkNrZ2RHaGxJRzFwYldWMGVYQmxJSFJ2SUc5MlpYSnlhV1JsSUhkcGRHZ3VYRzRnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGxCeWIyMXBjMlY5SUVFZ1VISnZiV2x6WlNCMGFHRjBJSGRwYkd3Z1ltVWdablZzWm1sc2JHVmtJSGRwZEdnZ1lWeHVJQ0FnS2lBZ0lDQWdZbUZ6WlRZMExXVnVZMjlrWldRZ2MzUnlhVzVuSUc5bUlIUm9aU0JrWVhSaElHRnVaQ0JwZEhNZ2JXbHRaU0IwZVhCbExseHVJQ0FnS2k5Y2JpQWdkbUZ5SUhKbFlXUkJjM2x1WXlBOUlHWjFibU4wYVc5dUtHWnBiR1VzSUhSNWNHVXBJSHRjYmlBZ0lDQjJZWElnY0hKdmJXbHpaU0E5SUc1bGR5QlFZWEp6WlM1UWNtOXRhWE5sS0NrN1hHNWNiaUFnSUNCcFppQW9kSGx3Wlc5bUtFWnBiR1ZTWldGa1pYSXBJRDA5UFNCY0luVnVaR1ZtYVc1bFpGd2lLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVVISnZiV2x6WlM1bGNuSnZjaWh1WlhjZ1VHRnljMlV1UlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnVUdGeWMyVXVSWEp5YjNJdVJrbE1SVjlTUlVGRVgwVlNVazlTTEZ4dUlDQWdJQ0FnSUNBZ0lGd2lRWFIwWlcxd2RHVmtJSFJ2SUhWelpTQmhJRVpwYkdWU1pXRmtaWElnYjI0Z1lXNGdkVzV6ZFhCd2IzSjBaV1FnWW5KdmQzTmxjaTVjSWlrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnlaV0ZrWlhJZ1BTQnVaWGNnUm1sc1pWSmxZV1JsY2lncE8xeHVJQ0FnSUhKbFlXUmxjaTV2Ym14dllXUmxibVFnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lHbG1JQ2h5WldGa1pYSXVjbVZoWkhsVGRHRjBaU0FoUFQwZ01pa2dlMXh1SUNBZ0lDQWdJQ0J3Y205dGFYTmxMbkpsYW1WamRDaHVaWGNnVUdGeWMyVXVSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JRWVhKelpTNUZjbkp2Y2k1R1NVeEZYMUpGUVVSZlJWSlNUMUlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJa1Z5Y205eUlISmxZV1JwYm1jZ1ptbHNaUzVjSWlrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIWmhjaUJrWVhSaFZWSk1JRDBnY21WaFpHVnlMbkpsYzNWc2REdGNiaUFnSUNBZ0lIWmhjaUJ0WVhSamFHVnpJRDBnTDE1a1lYUmhPaWhiWGp0ZEtpazdZbUZ6WlRZMExDZ3VLaWtrTHk1bGVHVmpLR1JoZEdGVlVrd3BPMXh1SUNBZ0lDQWdhV1lnS0NGdFlYUmphR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lIQnliMjFwYzJVdWNtVnFaV04wS0c1bGR5QlFZWEp6WlM1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lGQmhjbk5sTGtWeWNtOXlMa1pKVEVWZlVrVkJSRjlGVWxKUFVpeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aVZXNWhZbXhsSUhSdklHbHVkR1Z5Y0hKbGRDQmtZWFJoSUZWU1REb2dYQ0lnS3lCa1lYUmhWVkpNS1NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NISnZiV2x6WlM1eVpYTnZiSFpsS0cxaGRHTm9aWE5iTWwwc0lIUjVjR1VnZkh3Z2JXRjBZMmhsYzFzeFhTazdYRzRnSUNBZ2ZUdGNiaUFnSUNCeVpXRmtaWEl1Y21WaFpFRnpSR0YwWVZWU1RDaG1hV3hsS1R0Y2JpQWdJQ0J5WlhSMWNtNGdjSEp2YldselpUdGNiaUFnZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUVNCUVlYSnpaUzVHYVd4bElHbHpJR0VnYkc5allXd2djbVZ3Y21WelpXNTBZWFJwYjI0Z2IyWWdZU0JtYVd4bElIUm9ZWFFnYVhNZ2MyRjJaV1FnZEc4Z2RHaGxJRkJoY25ObFhHNGdJQ0FxSUdOc2IzVmtMbHh1SUNBZ0tpQkFZMnhoYzNOY2JpQWdJQ29nUUhCaGNtRnRJRzVoYldVZ2UxTjBjbWx1WjMwZ1ZHaGxJR1pwYkdVbmN5QnVZVzFsTGlCVWFHbHpJSGRwYkd3Z1ltVWdjSEpsWm1sNFpXUWdZbmtnWVNCMWJtbHhkV1ZjYmlBZ0lDb2dJQ0FnSUhaaGJIVmxJRzl1WTJVZ2RHaGxJR1pwYkdVZ2FHRnpJR1pwYm1semFHVmtJSE5oZG1sdVp5NGdWR2hsSUdacGJHVWdibUZ0WlNCdGRYTjBJR0psWjJsdUlIZHBkR2hjYmlBZ0lDb2dJQ0FnSUdGdUlHRnNjR2hoYm5WdFpYSnBZeUJqYUdGeVlXTjBaWElzSUdGdVpDQmpiMjV6YVhOMElHOW1JR0ZzY0doaGJuVnRaWEpwWXlCamFHRnlZV04wWlhKekxGeHVJQ0FnS2lBZ0lDQWdjR1Z5YVc5a2N5d2djM0JoWTJWekxDQjFibVJsY25OamIzSmxjeXdnYjNJZ1pHRnphR1Z6TGx4dUlDQWdLaUJBY0dGeVlXMGdaR0YwWVNCN1FYSnlZWGw5SUZSb1pTQmtZWFJoSUdadmNpQjBhR1VnWm1sc1pTd2dZWE1nWldsMGFHVnlPbHh1SUNBZ0tpQWdJQ0FnTVM0Z1lXNGdRWEp5WVhrZ2IyWWdZbmwwWlNCMllXeDFaU0JPZFcxaVpYSnpMQ0J2Y2x4dUlDQWdLaUFnSUNBZ01pNGdZVzRnVDJKcVpXTjBJR3hwYTJVZ2V5QmlZWE5sTmpRNklGd2lMaTR1WENJZ2ZTQjNhWFJvSUdFZ1ltRnpaVFkwTFdWdVkyOWtaV1FnVTNSeWFXNW5MbHh1SUNBZ0tpQWdJQ0FnTXk0Z1lTQkdhV3hsSUc5aWFtVmpkQ0J6Wld4bFkzUmxaQ0IzYVhSb0lHRWdabWxzWlNCMWNHeHZZV1FnWTI5dWRISnZiQzRnS0RNcElHOXViSGtnZDI5eWEzTmNiaUFnSUNvZ0lDQWdJQ0FnSUdsdUlFWnBjbVZtYjNnZ015NDJLeXdnVTJGbVlYSnBJRFl1TUM0eUt5d2dRMmh5YjIxbElEY3JMQ0JoYm1RZ1NVVWdNVEFyTGx4dUlDQWdLaUFnSUNBZ0lDQWdSbTl5SUdWNFlXMXdiR1U2UEhCeVpUNWNiaUFnSUNvZ2RtRnlJR1pwYkdWVmNHeHZZV1JEYjI1MGNtOXNJRDBnSkNoY0lpTndjbTltYVd4bFVHaHZkRzlHYVd4bFZYQnNiMkZrWENJcFd6QmRPMXh1SUNBZ0tpQnBaaUFvWm1sc1pWVndiRzloWkVOdmJuUnliMnd1Wm1sc1pYTXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdLaUFnSUhaaGNpQm1hV3hsSUQwZ1ptbHNaVlZ3Ykc5aFpFTnZiblJ5YjJ3dVptbHNaWE5iTUYwN1hHNGdJQ0FxSUNBZ2RtRnlJRzVoYldVZ1BTQmNJbkJvYjNSdkxtcHdaMXdpTzF4dUlDQWdLaUFnSUhaaGNpQndZWEp6WlVacGJHVWdQU0J1WlhjZ1VHRnljMlV1Um1sc1pTaHVZVzFsTENCbWFXeGxLVHRjYmlBZ0lDb2dJQ0J3WVhKelpVWnBiR1V1YzJGMlpTZ3BMblJvWlc0b1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBcUlDQWdJQ0F2THlCVWFHVWdabWxzWlNCb1lYTWdZbVZsYmlCellYWmxaQ0IwYnlCUVlYSnpaUzVjYmlBZ0lDb2dJQ0I5TENCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4dUlDQWdLaUFnSUNBZ0x5OGdWR2hsSUdacGJHVWdaV2wwYUdWeUlHTnZkV3hrSUc1dmRDQmlaU0J5WldGa0xDQnZjaUJqYjNWc1pDQnViM1FnWW1VZ2MyRjJaV1FnZEc4Z1VHRnljMlV1WEc0Z0lDQXFJQ0FnZlNrN1hHNGdJQ0FxSUgwOEwzQnlaVDVjYmlBZ0lDb2dRSEJoY21GdElIUjVjR1VnZTFOMGNtbHVaMzBnVDNCMGFXOXVZV3dnUTI5dWRHVnVkQzFVZVhCbElHaGxZV1JsY2lCMGJ5QjFjMlVnWm05eUlIUm9aU0JtYVd4bExpQkpabHh1SUNBZ0tpQWdJQ0FnZEdocGN5QnBjeUJ2YldsMGRHVmtMQ0IwYUdVZ1kyOXVkR1Z1ZENCMGVYQmxJSGRwYkd3Z1ltVWdhVzVtWlhKeVpXUWdabkp2YlNCMGFHVWdibUZ0WlNkelhHNGdJQ0FxSUNBZ0lDQmxlSFJsYm5OcGIyNHVYRzRnSUNBcUwxeHVJQ0JRWVhKelpTNUdhV3hsSUQwZ1puVnVZM1JwYjI0b2JtRnRaU3dnWkdGMFlTd2dkSGx3WlNrZ2UxeHVJQ0FnSUhSb2FYTXVYMjVoYldVZ1BTQnVZVzFsTzF4dVhHNGdJQ0FnTHk4Z1IzVmxjM01nZEdobElHTnZiblJsYm5RZ2RIbHdaU0JtY205dElIUm9aU0JsZUhSbGJuTnBiMjRnYVdZZ2QyVWdibVZsWkNCMGJ5NWNiaUFnSUNCMllYSWdaWGgwWlc1emFXOXVJRDBnTDF4Y0xpaGJYaTVkS2lra0x5NWxlR1ZqS0c1aGJXVXBPMXh1SUNBZ0lHbG1JQ2hsZUhSbGJuTnBiMjRwSUh0Y2JpQWdJQ0FnSUdWNGRHVnVjMmx2YmlBOUlHVjRkR1Z1YzJsdmJsc3hYUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2MzQmxZMmxtYVdWa1ZIbHdaU0E5SUhSNWNHVWdmSHdnSnljN1hHNWNiaUFnSUNCcFppQW9YeTVwYzBGeWNtRjVLR1JoZEdFcEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5emIzVnlZMlVnUFNCUVlYSnpaUzVRY205dGFYTmxMbUZ6S0dWdVkyOWtaVUpoYzJVMk5DaGtZWFJoS1N3Z2MzQmxZMmxtYVdWa1ZIbHdaU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hrWVhSaElDWW1JR1JoZEdFdVltRnpaVFkwS1NCN1hHNGdJQ0FnSUNBdkx5QnBaaUJwZENCamIyNTBZV2x1Y3lCa1lYUmhJSFZ5YVN3Z1pYaDBjbUZqZENCaVlYTmxaRFkwSUdGdVpDQjBhR1VnZEhsd1pTQnZkWFFnYjJZZ2FYUXVYRzRnSUNBZ0lDQXZLbXB6YkdsdWRDQnRZWGhzWlc0NklERXdNREFxTDF4dUlDQWdJQ0FnZG1GeUlHUmhkR0ZWY21sU1pXZGxlSEFnUFNBdlhtUmhkR0U2S0Z0aExYcEJMVnBkS2x4Y0wxdGhMWHBCTFZvckxpMWRLaWs3S0dOb1lYSnpaWFE5VzJFdGVrRXRXakF0T1Z4Y0xWeGNMMXhjYzEwcUxDay9ZbUZ6WlRZMExDaGNYRk1yS1M4N1hHNGdJQ0FnSUNBdkttcHpiR2x1ZENCdFlYaHNaVzQ2SURnd0tpOWNibHh1SUNBZ0lDQWdkbUZ5SUcxaGRHTm9aWE1nUFNCa1lYUmhWWEpwVW1WblpYaHdMbVY0WldNb1pHRjBZUzVpWVhObE5qUXBPMXh1SUNBZ0lDQWdhV1lnS0cxaGRHTm9aWE1nSmlZZ2JXRjBZMmhsY3k1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUdsbUlHUmhkR0VnVlZKSklIZHBkR2dnWTJoaGNuTmxkQ3dnZEdobGNtVWdkMmxzYkNCb1lYWmxJRFFnYldGMFkyaGxjeTVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjMjkxY21ObElEMGdVR0Z5YzJVdVVISnZiV2x6WlM1aGN5aGNiaUFnSUNBZ0lDQWdJQ0FvYldGMFkyaGxjeTVzWlc1bmRHZ2dQVDA5SURRZ1B5QnRZWFJqYUdWeld6TmRJRG9nYldGMFkyaGxjMXN5WFNrc0lHMWhkR05vWlhOYk1WMWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTnZkWEpqWlNBOUlGQmhjbk5sTGxCeWIyMXBjMlV1WVhNb1pHRjBZUzVpWVhObE5qUXNJSE53WldOcFptbGxaRlI1Y0dVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltS0VacGJHVXBJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJQ1ltSUdSaGRHRWdhVzV6ZEdGdVkyVnZaaUJHYVd4bEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5emIzVnlZMlVnUFNCeVpXRmtRWE41Ym1Nb1pHRjBZU3dnZEhsd1pTazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGZMbWx6VTNSeWFXNW5LR1JoZEdFcEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCY0lrTnlaV0YwYVc1bklHRWdVR0Z5YzJVdVJtbHNaU0JtY205dElHRWdVM1J5YVc1bklHbHpJRzV2ZENCNVpYUWdjM1Z3Y0c5eWRHVmtMbHdpTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCUVlYSnpaUzVHYVd4bExuQnliM1J2ZEhsd1pTQTlJSHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdkR2hsSUc1aGJXVWdiMllnZEdobElHWnBiR1V1SUVKbFptOXlaU0J6WVhabElHbHpJR05oYkd4bFpDd2dkR2hwY3lCcGN5QjBhR1VnWm1sc1pXNWhiV1ZjYmlBZ0lDQWdLaUJuYVhabGJpQmllU0IwYUdVZ2RYTmxjaTRnUVdaMFpYSWdjMkYyWlNCcGN5QmpZV3hzWldRc0lIUm9ZWFFnYm1GdFpTQm5aWFJ6SUhCeVpXWnBlR1ZrSUhkcGRHZ2dZVnh1SUNBZ0lDQXFJSFZ1YVhGMVpTQnBaR1Z1ZEdsbWFXVnlMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHNWhiV1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjVoYldVN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkSE1nZEdobElIVnliQ0J2WmlCMGFHVWdabWxzWlM0Z1NYUWdhWE1nYjI1c2VTQmhkbUZwYkdGaWJHVWdZV1owWlhJZ2VXOTFJSE5oZG1VZ2RHaGxJR1pwYkdVZ2IzSmNiaUFnSUNBZ0tpQmhablJsY2lCNWIzVWdaMlYwSUhSb1pTQm1hV3hsSUdaeWIyMGdZU0JRWVhKelpTNVBZbXBsWTNRdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1UzUnlhVzVuZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFZ5YkRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZFhKc08xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRZWFpsY3lCMGFHVWdabWxzWlNCMGJ5QjBhR1VnVUdGeWMyVWdZMnh2ZFdRdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nUVNCQ1lXTnJZbTl1WlMxemRIbHNaU0J2Y0hScGIyNXpJRzlpYW1WamRDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UWNtOXRhWE5sZlNCUWNtOXRhWE5sSUhSb1lYUWdhWE1nY21WemIyeDJaV1FnZDJobGJpQjBhR1VnYzJGMlpTQm1hVzVwYzJobGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCellYWmxPaUJtZFc1amRHbHZiaWh2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCcFppQW9JWE5sYkdZdVgzQnlaWFpwYjNWelUyRjJaU2tnZTF4dUlDQWdJQ0FnSUNCelpXeG1MbDl3Y21WMmFXOTFjMU5oZG1VZ1BTQnpaV3htTGw5emIzVnlZMlV1ZEdobGJpaG1kVzVqZEdsdmJpaGlZWE5sTmpRc0lIUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnWkdGMFlTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSmhjMlUyTkRvZ1ltRnpaVFkwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYME52Ym5SbGJuUlVlWEJsT2lCMGVYQmxYRzRnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1WDNKbGNYVmxjM1FvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbTkxZEdVNklGd2labWxzWlhOY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlRvZ2MyVnNaaTVmYm1GdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGRHaHZaRG9nSjFCUFUxUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWkdGMFlTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhWelpVMWhjM1JsY2t0bGVUb2diM0IwYVc5dWN5NTFjMlZOWVhOMFpYSkxaWGxjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVLSEpsYzNCdmJuTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaaTVmYm1GdFpTQTlJSEpsYzNCdmJuTmxMbTVoYldVN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmRYSnNJRDBnY21WemNHOXVjMlV1ZFhKc08xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaV3htTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCelpXeG1MbDl3Y21WMmFXOTFjMU5oZG1VdVgzUm9aVzVTZFc1RFlXeHNZbUZqYTNNb2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc1OUtIUm9hWE1wS1R0Y2JseHVMeThnVUdGeWMyVXVUMkpxWldOMElHbHpJR0Z1WVd4dloyOTFjeUIwYnlCMGFHVWdTbUYyWVNCUVlYSnpaVTlpYW1WamRDNWNiaTh2SUVsMElHRnNjMjhnYVcxd2JHVnRaVzUwY3lCMGFHVWdjMkZ0WlNCcGJuUmxjbVpoWTJVZ1lYTWdZU0JDWVdOclltOXVaU0J0YjJSbGJDNWNiaTh2SUZSUFJFODZJRzExYkhScGNHeGxJR1JwYzNCaGRHTm9JR1p2Y2lCallXeHNZbUZqYTNOY2JpaG1kVzVqZEdsdmJpaHliMjkwS1NCN1hHNGdJSEp2YjNRdVVHRnljMlVnUFNCeWIyOTBMbEJoY25ObElIeDhJSHQ5TzF4dUlDQjJZWElnVUdGeWMyVWdQU0J5YjI5MExsQmhjbk5sTzF4dUlDQjJZWElnWHlBOUlGQmhjbk5sTGw4N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaWE1nWVNCdVpYY2diVzlrWld3Z2QybDBhQ0JrWldacGJtVmtJR0YwZEhKcFluVjBaWE11SUVFZ1kyeHBaVzUwSUdsa0lDaGphV1FwSUdselhHNGdJQ0FxSUdGMWRHOXRZWFJwWTJGc2JIa2daMlZ1WlhKaGRHVmtJR0Z1WkNCaGMzTnBaMjVsWkNCbWIzSWdlVzkxTGx4dUlDQWdLbHh1SUNBZ0tpQThjRDVaYjNVZ2QyOXVKM1FnYm05eWJXRnNiSGtnWTJGc2JDQjBhR2x6SUcxbGRHaHZaQ0JrYVhKbFkzUnNlUzRnSUVsMElHbHpJSEpsWTI5dGJXVnVaR1ZrSUhSb1lYUmNiaUFnSUNvZ2VXOTFJSFZ6WlNCaElITjFZbU5zWVhOeklHOW1JRHhqYjJSbFBsQmhjbk5sTGs5aWFtVmpkRHd2WTI5a1pUNGdhVzV6ZEdWaFpDd2dZM0psWVhSbFpDQmllU0JqWVd4c2FXNW5YRzRnSUNBcUlEeGpiMlJsUG1WNGRHVnVaRHd2WTI5a1pUNHVQQzl3UGx4dUlDQWdLbHh1SUNBZ0tpQThjRDVJYjNkbGRtVnlMQ0JwWmlCNWIzVWdaRzl1SjNRZ2QyRnVkQ0IwYnlCMWMyVWdZU0J6ZFdKamJHRnpjeXdnYjNJZ1lYSmxiaWQwSUhOMWNtVWdkMmhwWTJoY2JpQWdJQ29nYzNWaVkyeGhjM01nYVhNZ1lYQndjbTl3Y21saGRHVXNJSGx2ZFNCallXNGdkWE5sSUhSb2FYTWdabTl5YlRvOGNISmxQbHh1SUNBZ0tpQWdJQ0FnZG1GeUlHOWlhbVZqZENBOUlHNWxkeUJRWVhKelpTNVBZbXBsWTNRb1hDSkRiR0Z6YzA1aGJXVmNJaWs3WEc0Z0lDQXFJRHd2Y0hKbFBseHVJQ0FnS2lCVWFHRjBJR2x6SUdKaGMybGpZV3hzZVNCbGNYVnBkbUZzWlc1MElIUnZPanh3Y21VK1hHNGdJQ0FxSUNBZ0lDQjJZWElnVFhsRGJHRnpjeUE5SUZCaGNuTmxMazlpYW1WamRDNWxlSFJsYm1Rb1hDSkRiR0Z6YzA1aGJXVmNJaWs3WEc0Z0lDQXFJQ0FnSUNCMllYSWdiMkpxWldOMElEMGdibVYzSUUxNVEyeGhjM01vS1R0Y2JpQWdJQ29nUEM5d2NtVStQQzl3UGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1lYUjBjbWxpZFhSbGN5QlVhR1VnYVc1cGRHbGhiQ0J6WlhRZ2IyWWdaR0YwWVNCMGJ5QnpkRzl5WlNCcGJpQjBhR1VnYjJKcVpXTjBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lCQklITmxkQ0J2WmlCQ1lXTnJZbTl1WlMxc2FXdGxJRzl3ZEdsdmJuTWdabTl5SUdOeVpXRjBhVzVuSUhSb1pWeHVJQ0FnS2lBZ0lDQWdiMkpxWldOMExpQWdWR2hsSUc5dWJIa2diM0IwYVc5dUlHTjFjbkpsYm5Sc2VTQnpkWEJ3YjNKMFpXUWdhWE1nWENKamIyeHNaV04wYVc5dVhDSXVYRzRnSUNBcUlFQnpaV1VnVUdGeWMyVXVUMkpxWldOMExtVjRkR1Z1WkZ4dUlDQWdLbHh1SUNBZ0tpQkFZMnhoYzNOY2JpQWdJQ3BjYmlBZ0lDb2dQSEErVkdobElHWjFibVJoYldWdWRHRnNJSFZ1YVhRZ2IyWWdVR0Z5YzJVZ1pHRjBZU3dnZDJocFkyZ2dhVzF3YkdWdFpXNTBjeUIwYUdVZ1FtRmphMkp2Ym1VZ1RXOWtaV3hjYmlBZ0lDb2dhVzUwWlhKbVlXTmxMand2Y0Q1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGs5aWFtVmpkQ0E5SUdaMWJtTjBhVzl1S0dGMGRISnBZblYwWlhNc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNBdkx5QkJiR3h2ZHlCdVpYY2dVR0Z5YzJVdVQySnFaV04wS0Z3aVEyeGhjM05PWVcxbFhDSXBJR0Z6SUdFZ2MyaHZjblJqZFhRZ2RHOGdYMk55WldGMFpTNWNiaUFnSUNCcFppQW9YeTVwYzFOMGNtbHVaeWhoZEhSeWFXSjFkR1Z6S1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMazlpYW1WamRDNWZZM0psWVhSbExtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZWFIwY21saWRYUmxjeUE5SUdGMGRISnBZblYwWlhNZ2ZId2dlMzA3WEc0Z0lDQWdhV1lnS0c5d2RHbHZibk1nSmlZZ2IzQjBhVzl1Y3k1d1lYSnpaU2tnZTF4dUlDQWdJQ0FnWVhSMGNtbGlkWFJsY3lBOUlIUm9hWE11Y0dGeWMyVW9ZWFIwY21saWRYUmxjeWs3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJrWldaaGRXeDBjeUE5SUZCaGNuTmxMbDluWlhSV1lXeDFaU2gwYUdsekxDQW5aR1ZtWVhWc2RITW5LVHRjYmlBZ0lDQnBaaUFvWkdWbVlYVnNkSE1wSUh0Y2JpQWdJQ0FnSUdGMGRISnBZblYwWlhNZ1BTQmZMbVY0ZEdWdVpDaDdmU3dnWkdWbVlYVnNkSE1zSUdGMGRISnBZblYwWlhNcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3lBbUppQnZjSFJwYjI1ekxtTnZiR3hsWTNScGIyNHBJSHRjYmlBZ0lDQWdJSFJvYVhNdVkyOXNiR1ZqZEdsdmJpQTlJRzl3ZEdsdmJuTXVZMjlzYkdWamRHbHZianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGw5elpYSjJaWEpFWVhSaElEMGdlMzA3SUNBdkx5QlVhR1VnYkdGemRDQnJibTkzYmlCa1lYUmhJR1p2Y2lCMGFHbHpJRzlpYW1WamRDQm1jbTl0SUdOc2IzVmtMbHh1SUNBZ0lIUm9hWE11WDI5d1UyVjBVWFZsZFdVZ1BTQmJlMzFkT3lBZ0x5OGdUR2x6ZENCdlppQnpaWFJ6SUc5bUlHTm9ZVzVuWlhNZ2RHOGdkR2hsSUdSaGRHRXVYRzRnSUNBZ2RHaHBjeTVoZEhSeWFXSjFkR1Z6SUQwZ2UzMDdJQ0F2THlCVWFHVWdZbVZ6ZENCbGMzUnBiV0YwWlNCdlppQjBhR2x6SjNNZ1kzVnljbVZ1ZENCa1lYUmhMbHh1WEc0Z0lDQWdkR2hwY3k1ZmFHRnphR1ZrU2xOUFRpQTlJSHQ5T3lBZ0x5OGdTR0Z6YUNCdlppQjJZV3gxWlhNZ2IyWWdZMjl1ZEdGcGJtVnljeUJoZENCc1lYTjBJSE5oZG1VdVhHNGdJQ0FnZEdocGN5NWZaWE5qWVhCbFpFRjBkSEpwWW5WMFpYTWdQU0I3ZlR0Y2JpQWdJQ0IwYUdsekxtTnBaQ0E5SUY4dWRXNXBjWFZsU1dRb0oyTW5LVHRjYmlBZ0lDQjBhR2x6TG1Ob1lXNW5aV1FnUFNCN2ZUdGNiaUFnSUNCMGFHbHpMbDl6YVd4bGJuUWdQU0I3ZlR0Y2JpQWdJQ0IwYUdsekxsOXdaVzVrYVc1bklEMGdlMzA3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbk5sZENoaGRIUnlhV0oxZEdWekxDQjdjMmxzWlc1ME9pQjBjblZsZlNrcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrTmhiaWQwSUdOeVpXRjBaU0JoYmlCcGJuWmhiR2xrSUZCaGNuTmxMazlpYW1WamRGd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVqYUdGdVoyVmtJRDBnZTMwN1hHNGdJQ0FnZEdocGN5NWZjMmxzWlc1MElEMGdlMzA3WEc0Z0lDQWdkR2hwY3k1ZmNHVnVaR2x1WnlBOUlIdDlPMXh1SUNBZ0lIUm9hWE11WDJoaGMwUmhkR0VnUFNCMGNuVmxPMXh1SUNBZ0lIUm9hWE11WDNCeVpYWnBiM1Z6UVhSMGNtbGlkWFJsY3lBOUlGOHVZMnh2Ym1Vb2RHaHBjeTVoZEhSeWFXSjFkR1Z6S1R0Y2JpQWdJQ0IwYUdsekxtbHVhWFJwWVd4cGVtVXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUVsRUlHOW1JSFJvYVhNZ2IySnFaV04wTENCMWJtbHhkV1VnZDJsMGFHbHVJR2wwY3lCamJHRnpjeTVjYmlBZ0lDb2dRRzVoYldVZ2FXUmNiaUFnSUNvZ1FIUjVjR1VnVTNSeWFXNW5YRzRnSUNBcUlFQm1hV1ZzWkZ4dUlDQWdLaUJBYldWdFltVnlUMllnVUdGeWMyVXVUMkpxWldOMExuQnliM1J2ZEhsd1pWeHVJQ0FnS2k5Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVkdobElHWnBjbk4wSUhScGJXVWdkR2hwY3lCdlltcGxZM1FnZDJGeklITmhkbVZrSUc5dUlIUm9aU0J6WlhKMlpYSXVYRzRnSUNBcUlFQnVZVzFsSUdOeVpXRjBaV1JCZEZ4dUlDQWdLaUJBZEhsd1pTQkVZWFJsWEc0Z0lDQXFJRUJtYVdWc1pGeHVJQ0FnS2lCQWJXVnRZbVZ5VDJZZ1VHRnljMlV1VDJKcVpXTjBMbkJ5YjNSdmRIbHdaVnh1SUNBZ0tpOWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJR3hoYzNRZ2RHbHRaU0IwYUdseklHOWlhbVZqZENCM1lYTWdkWEJrWVhSbFpDQnZiaUIwYUdVZ2MyVnlkbVZ5TGx4dUlDQWdLaUJBYm1GdFpTQjFjR1JoZEdWa1FYUmNiaUFnSUNvZ1FIUjVjR1VnUkdGMFpWeHVJQ0FnS2lCQVptbGxiR1JjYmlBZ0lDb2dRRzFsYldKbGNrOW1JRkJoY25ObExrOWlhbVZqZEM1d2NtOTBiM1I1Y0dWY2JpQWdJQ292WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5oZG1WeklIUm9aU0JuYVhabGJpQnNhWE4wSUc5bUlGQmhjbk5sTGs5aWFtVmpkQzVjYmlBZ0lDb2dTV1lnWVc1NUlHVnljbTl5SUdseklHVnVZMjkxYm5SbGNtVmtMQ0J6ZEc5d2N5QmhibVFnWTJGc2JITWdkR2hsSUdWeWNtOXlJR2hoYm1Sc1pYSXVYRzRnSUNBcVhHNGdJQ0FxSUR4d2NtVStYRzRnSUNBcUlDQWdVR0Z5YzJVdVQySnFaV04wTG5OaGRtVkJiR3dvVzI5aWFtVmpkREVzSUc5aWFtVmpkRElzSUM0dUxsMHNJSHRjYmlBZ0lDb2dJQ0FnSUhOMVkyTmxjM002SUdaMWJtTjBhVzl1S0d4cGMzUXBJSHRjYmlBZ0lDb2dJQ0FnSUNBZ0x5OGdRV3hzSUhSb1pTQnZZbXBsWTNSeklIZGxjbVVnYzJGMlpXUXVYRzRnSUNBcUlDQWdJQ0I5TEZ4dUlDQWdLaUFnSUNBZ1pYSnliM0k2SUdaMWJtTjBhVzl1S0dWeWNtOXlLU0I3WEc0Z0lDQXFJQ0FnSUNBZ0lDOHZJRUZ1SUdWeWNtOXlJRzlqWTNWeWNtVmtJSGRvYVd4bElITmhkbWx1WnlCdmJtVWdiMllnZEdobElHOWlhbVZqZEhNdVhHNGdJQ0FxSUNBZ0lDQjlMRnh1SUNBZ0tpQWdJSDBwTzF4dUlDQWdLaUE4TDNCeVpUNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdiR2x6ZENCQklHeHBjM1FnYjJZZ1BHTnZaR1UrVUdGeWMyVXVUMkpxWldOMFBDOWpiMlJsUGk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdRU0JDWVdOclltOXVaUzF6ZEhsc1pTQmpZV3hzWW1GamF5QnZZbXBsWTNRdVhHNGdJQ0FxSUZaaGJHbGtJRzl3ZEdsdmJuTWdZWEpsT2p4MWJENWNiaUFnSUNvZ0lDQThiR2srZFhObFRXRnpkR1Z5UzJWNU9pQkpiaUJEYkc5MVpDQkRiMlJsSUdGdVpDQk9iMlJsSUc5dWJIa3NJR05oZFhObGN5QjBhR1VnVFdGemRHVnlJRXRsZVNCMGIxeHVJQ0FnS2lBZ0lDQWdZbVVnZFhObFpDQm1iM0lnZEdocGN5QnlaWEYxWlhOMExseHVJQ0FnS2lBZ0lEeHNhVDV6WlhOemFXOXVWRzlyWlc0NklFRWdkbUZzYVdRZ2MyVnpjMmx2YmlCMGIydGxiaXdnZFhObFpDQm1iM0lnYldGcmFXNW5JR0VnY21WeGRXVnpkQ0J2Ymx4dUlDQWdLaUFnSUNBZ0lDQmlaV2hoYkdZZ2IyWWdZU0J6Y0dWamFXWnBZeUIxYzJWeUxseHVJQ0FnS2lBOEwzVnNQbHh1SUNBZ0tpOWNiaUFnVUdGeWMyVXVUMkpxWldOMExuTmhkbVZCYkd3Z1BTQm1kVzVqZEdsdmJpaHNhWE4wTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzRnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMazlpYW1WamRDNWZaR1ZsY0ZOaGRtVkJjM2x1WXloc2FYTjBMQ0I3WEc0Z0lDQWdJQ0IxYzJWTllYTjBaWEpMWlhrNklHOXdkR2x2Ym5NdWRYTmxUV0Z6ZEdWeVMyVjVMRnh1SUNBZ0lDQWdjMlZ6YzJsdmJsUnZhMlZ1T2lCdmNIUnBiMjV6TG5ObGMzTnBiMjVVYjJ0bGJseHVJQ0FnSUgwcExsOTBhR1Z1VW5WdVEyRnNiR0poWTJ0ektHOXdkR2x2Ym5NcE8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJFWlhOMGNtOTVJSFJvWlNCbmFYWmxiaUJzYVhOMElHOW1JRzF2WkdWc2N5QnZiaUIwYUdVZ2MyVnlkbVZ5SUdsbUlHbDBJSGRoY3lCaGJISmxZV1I1SUhCbGNuTnBjM1JsWkM1Y2JpQWdJQ29nVDNCMGFXMXBjM1JwWTJGc2JIa2djbVZ0YjNabGN5QmxZV05vSUcxdlpHVnNJR1p5YjIwZ2FYUnpJR052Ykd4bFkzUnBiMjRzSUdsbUlHbDBJR2hoY3lCdmJtVXVYRzRnSUNBcUlFbG1JR0IzWVdsME9pQjBjblZsWUNCcGN5QndZWE56WldRc0lIZGhhWFJ6SUdadmNpQjBhR1VnYzJWeWRtVnlJSFJ2SUhKbGMzQnZibVFnWW1WbWIzSmxJSEpsYlc5MllXd3VYRzRnSUNBcVhHNGdJQ0FxSUR4d1BsVnViR2xyWlNCellYWmxRV3hzTENCcFppQmhiaUJsY25KdmNpQnZZMk4xY25NZ2QyaHBiR1VnWkdWc1pYUnBibWNnWVc0Z2FXNWthWFpwWkhWaGJDQnRiMlJsYkN4Y2JpQWdJQ29nZEdocGN5QnRaWFJvYjJRZ2QybHNiQ0JqYjI1MGFXNTFaU0IwY25scGJtY2dkRzhnWkdWc1pYUmxJSFJvWlNCeVpYTjBJRzltSUhSb1pTQnRiMlJsYkhNZ2FXWmNiaUFnSUNvZ2NHOXpjMmxpYkdVc0lHVjRZMlZ3ZENCcGJpQjBhR1VnWTJGelpTQnZaaUJoSUdaaGRHRnNJR1Z5Y205eUlHeHBhMlVnWVNCamIyNXVaV04wYVc5dUlHVnljbTl5TGx4dUlDQWdLbHh1SUNBZ0tpQThjRDVKYmlCd1lYSjBhV04xYkdGeUxDQjBhR1VnVUdGeWMyVXVSWEp5YjNJZ2IySnFaV04wSUhKbGRIVnlibVZrSUdsdUlIUm9aU0JqWVhObElHOW1JR1Z5Y205eUlHMWhlVnh1SUNBZ0tpQmlaU0J2Ym1VZ2IyWWdkSGR2SUhSNWNHVnpPbHh1SUNBZ0tseHVJQ0FnS2lBOGRXdytYRzRnSUNBcUlDQWdQR3hwUGtFZ1VHRnljMlV1UlhKeWIzSXVRVWRIVWtWSFFWUkZYMFZTVWs5U0xpQlVhR2x6SUc5aWFtVmpkQ2R6SUZ3aVpYSnliM0p6WENJZ2NISnZjR1Z5ZEhrZ2FYTWdZVzVjYmlBZ0lDb2dJQ0FnSUNBZ1lYSnlZWGtnYjJZZ2IzUm9aWElnVUdGeWMyVXVSWEp5YjNJZ2IySnFaV04wY3k0Z1JXRmphQ0JsY25KdmNpQnZZbXBsWTNRZ2FXNGdkR2hwY3lCaGNuSmhlVnh1SUNBZ0tpQWdJQ0FnSUNCb1lYTWdZVzRnWENKdlltcGxZM1JjSWlCd2NtOXdaWEowZVNCMGFHRjBJSEpsWm1WeVpXNWpaWE1nZEdobElHOWlhbVZqZENCMGFHRjBJR052ZFd4a0lHNXZkQ0JpWlZ4dUlDQWdLaUFnSUNBZ0lDQmtaV3hsZEdWa0lDaG1iM0lnYVc1emRHRnVZMlVzSUdKbFkyRjFjMlVnZEdoaGRDQnZZbXBsWTNRZ1kyOTFiR1FnYm05MElHSmxJR1p2ZFc1a0tTNDhMMnhwUGx4dUlDQWdLaUFnSUR4c2FUNUJJRzV2YmkxaFoyZHlaV2RoZEdVZ1VHRnljMlV1UlhKeWIzSXVJRlJvYVhNZ2FXNWthV05oZEdWeklHRWdjMlZ5YVc5MWN5Qmxjbkp2Y2lCMGFHRjBYRzRnSUNBcUlDQWdJQ0FnSUdOaGRYTmxaQ0IwYUdVZ1pHVnNaWFJsSUc5d1pYSmhkR2x2YmlCMGJ5QmlaU0JoWW05eWRHVmtJSEJoY25SM1lYa2dkR2h5YjNWbmFDQW9abTl5WEc0Z0lDQXFJQ0FnSUNBZ0lHbHVjM1JoYm1ObExDQmhJR052Ym01bFkzUnBiMjRnWm1GcGJIVnlaU0JwYmlCMGFHVWdiV2xrWkd4bElHOW1JSFJvWlNCa1pXeGxkR1VwTGp3dmJHaytYRzRnSUNBcUlEd3ZkV3crWEc0Z0lDQXFYRzRnSUNBcUlEeHdjbVUrWEc0Z0lDQXFJQ0FnVUdGeWMyVXVUMkpxWldOMExtUmxjM1J5YjNsQmJHd29XMjlpYW1WamRERXNJRzlpYW1WamRESXNJQzR1TGwwc0lIdGNiaUFnSUNvZ0lDQWdJSE4xWTJObGMzTTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdLaUFnSUNBZ0lDQXZMeUJCYkd3Z2RHaGxJRzlpYW1WamRITWdkMlZ5WlNCa1pXeGxkR1ZrTGx4dUlDQWdLaUFnSUNBZ2ZTeGNiaUFnSUNvZ0lDQWdJR1Z5Y205eU9pQm1kVzVqZEdsdmJpaGxjbkp2Y2lrZ2UxeHVJQ0FnS2lBZ0lDQWdJQ0F2THlCQmJpQmxjbkp2Y2lCdlkyTjFjbkpsWkNCM2FHbHNaU0JrWld4bGRHbHVaeUJ2Ym1VZ2IzSWdiVzl5WlNCdlppQjBhR1VnYjJKcVpXTjBjeTVjYmlBZ0lDb2dJQ0FnSUNBZ0x5OGdTV1lnZEdocGN5QnBjeUJoYmlCaFoyZHlaV2RoZEdVZ1pYSnliM0lzSUhSb1pXNGdkMlVnWTJGdUlHbHVjM0JsWTNRZ1pXRmphQ0JsY25KdmNseHVJQ0FnS2lBZ0lDQWdJQ0F2THlCdlltcGxZM1FnYVc1a2FYWnBaSFZoYkd4NUlIUnZJR1JsZEdWeWJXbHVaU0IwYUdVZ2NtVmhjMjl1SUhkb2VTQmhJSEJoY25ScFkzVnNZWEpjYmlBZ0lDb2dJQ0FnSUNBZ0x5OGdiMkpxWldOMElIZGhjeUJ1YjNRZ1pHVnNaWFJsWkM1Y2JpQWdJQ29nSUNBZ0lDQWdhV1lnS0dWeWNtOXlMbU52WkdVZ1BUMGdVR0Z5YzJVdVJYSnliM0l1UVVkSFVrVkhRVlJGWDBWU1VrOVNLU0I3WEc0Z0lDQXFJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JsY25KdmNpNWxjbkp2Y25NdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Z3aVEyOTFiR1J1SjNRZ1pHVnNaWFJsSUZ3aUlDc2daWEp5YjNJdVpYSnliM0p6VzJsZExtOWlhbVZqZEM1cFpDQXJYRzRnSUNBcUlDQWdJQ0FnSUNBZ0lDQWdJRndpWkhWbElIUnZJRndpSUNzZ1pYSnliM0l1WlhKeWIzSnpXMmxkTG0xbGMzTmhaMlVwTzF4dUlDQWdLaUFnSUNBZ0lDQWdJSDFjYmlBZ0lDb2dJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ29nSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnloY0lrUmxiR1YwWlNCaFltOXlkR1ZrSUdKbFkyRjFjMlVnYjJZZ1hDSWdLeUJsY25KdmNpNXRaWE56WVdkbEtUdGNiaUFnSUNvZ0lDQWdJQ0FnZlZ4dUlDQWdLaUFnSUNBZ2ZTeGNiaUFnSUNvZ0lDQjlLVHRjYmlBZ0lDb2dQQzl3Y21VK1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlHeHBjM1FnUVNCc2FYTjBJRzltSUR4amIyUmxQbEJoY25ObExrOWlhbVZqZER3dlkyOWtaVDR1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklFRWdRbUZqYTJKdmJtVXRjM1I1YkdVZ1kyRnNiR0poWTJzZ2IySnFaV04wTGx4dUlDQWdLaUJXWVd4cFpDQnZjSFJwYjI1eklHRnlaVG84ZFd3K1hHNGdJQ0FxSUNBZ1BHeHBQblZ6WlUxaGMzUmxja3RsZVRvZ1NXNGdRMnh2ZFdRZ1EyOWtaU0JoYm1RZ1RtOWtaU0J2Ym14NUxDQmpZWFZ6WlhNZ2RHaGxJRTFoYzNSbGNpQkxaWGtnZEc5Y2JpQWdJQ29nSUNBZ0lHSmxJSFZ6WldRZ1ptOXlJSFJvYVhNZ2NtVnhkV1Z6ZEM1Y2JpQWdJQ29nSUNBOGJHaytjMlZ6YzJsdmJsUnZhMlZ1T2lCQklIWmhiR2xrSUhObGMzTnBiMjRnZEc5clpXNHNJSFZ6WldRZ1ptOXlJRzFoYTJsdVp5QmhJSEpsY1hWbGMzUWdiMjVjYmlBZ0lDb2dJQ0FnSUNBZ1ltVm9ZV3htSUc5bUlHRWdjM0JsWTJsbWFXTWdkWE5sY2k1Y2JpQWdJQ29nUEM5MWJENWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1VHRnljMlV1VUhKdmJXbHpaWDBnUVNCd2NtOXRhWE5sSUhSb1lYUWdhWE1nWm5Wc1ptbHNiR1ZrSUhkb1pXNGdkR2hsSUdSbGMzUnliM2xCYkd4Y2JpQWdJQ29nSUNBZ0lHTnZiWEJzWlhSbGN5NWNiaUFnSUNvdlhHNGdJRkJoY25ObExrOWlhbVZqZEM1a1pYTjBjbTk1UVd4c0lEMGdablZ1WTNScGIyNG9iR2x6ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1WEc0Z0lDQWdkbUZ5SUhSeWFXZG5aWEpFWlhOMGNtOTVJRDBnWm5WdVkzUnBiMjRvYjJKcVpXTjBLU0I3WEc0Z0lDQWdJQ0J2WW1wbFkzUXVkSEpwWjJkbGNpZ25aR1Z6ZEhKdmVTY3NJRzlpYW1WamRDd2diMkpxWldOMExtTnZiR3hsWTNScGIyNHNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQjJZWElnWlhKeWIzSnpJRDBnVzEwN1hHNGdJQ0FnZG1GeUlHUmxjM1J5YjNsQ1lYUmphQ0E5SUdaMWJtTjBhVzl1S0dKaGRHTm9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2NISnZiV2x6WlNBOUlGQmhjbk5sTGxCeWIyMXBjMlV1WVhNb0tUdGNibHh1SUNBZ0lDQWdhV1lnS0dKaGRHTm9MbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ2NISnZiV2x6WlNBOUlIQnliMjFwYzJVdWRHaGxiaWhtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1WDNKbGNYVmxjM1FvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbTkxZEdVNklGd2lZbUYwWTJoY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGRHaHZaRG9nWENKUVQxTlVYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjMlZOWVhOMFpYSkxaWGs2SUc5d2RHbHZibk11ZFhObFRXRnpkR1Z5UzJWNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWemMybHZibFJ2YTJWdU9pQnZjSFJwYjI1ekxuTmxjM05wYjI1VWIydGxiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkSE02SUY4dWJXRndLR0poZEdOb0xDQm1kVzVqZEdsdmJpaHZZbXBsWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1YwYUc5a09pQmNJa1JGVEVWVVJWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFEb2dYQ0l2TVM5amJHRnpjMlZ6TDF3aUlDc2diMkpxWldOMExtTnNZWE56VG1GdFpTQXJJRndpTDF3aUlDc2diMkpxWldOMExtbGtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmloeVpYTndiMjV6WlhNc0lITjBZWFIxY3l3Z2VHaHlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1VHRnljMlV1WDJGeWNtRjVSV0ZqYUNoaVlYUmphQ3dnWm5WdVkzUnBiMjRvYjJKcVpXTjBMQ0JwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpjRzl1YzJWelcybGRMbk4xWTJObGMzTWdKaVlnYjNCMGFXOXVjeTUzWVdsMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlhV2RuWlhKRVpYTjBjbTk1S0c5aWFtVmpkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsYzNCdmJuTmxjMXRwWFM1bGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pYSnliM0lnUFNCdVpYY2dVR0Z5YzJVdVJYSnliM0lvY21WemNHOXVjMlZ6VzJsZExtVnljbTl5TG1OdlpHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE53YjI1elpYTmJhVjB1WlhKeWIzSXVaWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjaTV2WW1wbFkzUWdQU0J2WW1wbFkzUTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNKekxuQjFjMmdvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIQnliMjFwYzJVN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhaaGNpQndjbTl0YVhObElEMGdVR0Z5YzJVdVVISnZiV2x6WlM1aGN5Z3BPMXh1SUNBZ0lIWmhjaUJpWVhSamFDQTlJRnRkTzF4dUlDQWdJRkJoY25ObExsOWhjbkpoZVVWaFkyZ29iR2x6ZEN3Z1puVnVZM1JwYjI0b2IySnFaV04wTENCcEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVc5aWFtVmpkQzVwWkNCOGZDQWhiM0IwYVc5dWN5NTNZV2wwS1NCN1hHNGdJQ0FnSUNBZ0lIUnlhV2RuWlhKRVpYTjBjbTk1S0c5aWFtVmpkQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaHZZbXBsWTNRdWFXUXBJSHRjYmlBZ0lDQWdJQ0FnWW1GMFkyZ3VjSFZ6YUNodlltcGxZM1FwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9ZbUYwWTJndWJHVnVaM1JvSUQwOVBTQXlNQ0I4ZkNCcEt6RWdQVDA5SUd4cGMzUXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMGFHbHpRbUYwWTJnZ1BTQmlZWFJqYUR0Y2JpQWdJQ0FnSUNBZ1ltRjBZMmdnUFNCYlhUdGNibHh1SUNBZ0lDQWdJQ0J3Y205dGFYTmxJRDBnY0hKdmJXbHpaUzUwYUdWdUtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrWlhOMGNtOTVRbUYwWTJnb2RHaHBjMEpoZEdOb0tUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjSEp2YldselpTNTBhR1Z1S0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1Z5Y205eWN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlhKeWIzSWdQU0J1WlhjZ1VHRnljMlV1UlhKeWIzSW9VR0Z5YzJVdVJYSnliM0l1UVVkSFVrVkhRVlJGWDBWU1VrOVNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKRmNuSnZjaUJrWld4bGRHbHVaeUJoYmlCdlltcGxZM1FnYVc0Z1pHVnpkSEp2ZVVGc2JGd2lLVHRjYmlBZ0lDQWdJQ0FnWlhKeWIzSXVaWEp5YjNKeklEMGdaWEp5YjNKek8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlFZWEp6WlM1UWNtOXRhWE5sTG1WeWNtOXlLR1Z5Y205eUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtTNWZkR2hsYmxKMWJrTmhiR3hpWVdOcmN5aHZjSFJwYjI1ektUdGNiaUFnZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUm1WMFkyaGxjeUIwYUdVZ1oybDJaVzRnYkdsemRDQnZaaUJRWVhKelpTNVBZbXBsWTNRdVhHNGdJQ0FxSUVsbUlHRnVlU0JsY25KdmNpQnBjeUJsYm1OdmRXNTBaWEpsWkN3Z2MzUnZjSE1nWVc1a0lHTmhiR3h6SUhSb1pTQmxjbkp2Y2lCb1lXNWtiR1Z5TGx4dUlDQWdLbHh1SUNBZ0tpQThjSEpsUGx4dUlDQWdLaUFnSUZCaGNuTmxMazlpYW1WamRDNW1aWFJqYUVGc2JDaGJiMkpxWldOME1Td2diMkpxWldOME1pd2dMaTR1WFN3Z2UxeHVJQ0FnS2lBZ0lDQWdjM1ZqWTJWemN6b2dablZ1WTNScGIyNG9iR2x6ZENrZ2UxeHVJQ0FnS2lBZ0lDQWdJQ0F2THlCQmJHd2dkR2hsSUc5aWFtVmpkSE1nZDJWeVpTQm1aWFJqYUdWa0xseHVJQ0FnS2lBZ0lDQWdmU3hjYmlBZ0lDb2dJQ0FnSUdWeWNtOXlPaUJtZFc1amRHbHZiaWhsY25KdmNpa2dlMXh1SUNBZ0tpQWdJQ0FnSUNBdkx5QkJiaUJsY25KdmNpQnZZMk4xY25KbFpDQjNhR2xzWlNCbVpYUmphR2x1WnlCdmJtVWdiMllnZEdobElHOWlhbVZqZEhNdVhHNGdJQ0FxSUNBZ0lDQjlMRnh1SUNBZ0tpQWdJSDBwTzF4dUlDQWdLaUE4TDNCeVpUNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdiR2x6ZENCQklHeHBjM1FnYjJZZ1BHTnZaR1UrVUdGeWMyVXVUMkpxWldOMFBDOWpiMlJsUGk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdRU0JDWVdOclltOXVaUzF6ZEhsc1pTQmpZV3hzWW1GamF5QnZZbXBsWTNRdVhHNGdJQ0FxSUZaaGJHbGtJRzl3ZEdsdmJuTWdZWEpsT2p4MWJENWNiaUFnSUNvZ0lDQThiR2srYzNWalkyVnpjem9nUVNCQ1lXTnJZbTl1WlMxemRIbHNaU0J6ZFdOalpYTnpJR05oYkd4aVlXTnJMbHh1SUNBZ0tpQWdJRHhzYVQ1bGNuSnZjam9nUVc0Z1FtRmphMkp2Ym1VdGMzUjViR1VnWlhKeWIzSWdZMkZzYkdKaFkyc3VYRzRnSUNBcUlEd3ZkV3crWEc0Z0lDQXFMMXh1SUNCUVlYSnpaUzVQWW1wbFkzUXVabVYwWTJoQmJHd2dQU0JtZFc1amRHbHZiaWhzYVhOMExDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMazlpYW1WamRDNWZabVYwWTJoQmJHd29YRzRnSUNBZ0lDQnNhWE4wTEZ4dUlDQWdJQ0FnZEhKMVpWeHVJQ0FnSUNrdVgzUm9aVzVTZFc1RFlXeHNZbUZqYTNNb2IzQjBhVzl1Y3lrN1hHNGdJSDA3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVpsZEdOb1pYTWdkR2hsSUdkcGRtVnVJR3hwYzNRZ2IyWWdVR0Z5YzJVdVQySnFaV04wSUdsbUlHNWxaV1JsWkM1Y2JpQWdJQ29nU1dZZ1lXNTVJR1Z5Y205eUlHbHpJR1Z1WTI5MWJuUmxjbVZrTENCemRHOXdjeUJoYm1RZ1kyRnNiSE1nZEdobElHVnljbTl5SUdoaGJtUnNaWEl1WEc0Z0lDQXFYRzRnSUNBcUlEeHdjbVUrWEc0Z0lDQXFJQ0FnVUdGeWMyVXVUMkpxWldOMExtWmxkR05vUVd4c1NXWk9aV1ZrWldRb1cyOWlhbVZqZERFc0lDNHVMbDBzSUh0Y2JpQWdJQ29nSUNBZ0lITjFZMk5sYzNNNklHWjFibU4wYVc5dUtHeHBjM1FwSUh0Y2JpQWdJQ29nSUNBZ0lDQWdMeThnVDJKcVpXTjBjeUIzWlhKbElHWmxkR05vWldRZ1lXNWtJSFZ3WkdGMFpXUXVYRzRnSUNBcUlDQWdJQ0I5TEZ4dUlDQWdLaUFnSUNBZ1pYSnliM0k2SUdaMWJtTjBhVzl1S0dWeWNtOXlLU0I3WEc0Z0lDQXFJQ0FnSUNBZ0lDOHZJRUZ1SUdWeWNtOXlJRzlqWTNWeWNtVmtJSGRvYVd4bElHWmxkR05vYVc1bklHOXVaU0J2WmlCMGFHVWdiMkpxWldOMGN5NWNiaUFnSUNvZ0lDQWdJSDBzWEc0Z0lDQXFJQ0FnZlNrN1hHNGdJQ0FxSUR3dmNISmxQbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JzYVhOMElFRWdiR2x6ZENCdlppQThZMjlrWlQ1UVlYSnpaUzVQWW1wbFkzUThMMk52WkdVK0xseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUJCSUVKaFkydGliMjVsTFhOMGVXeGxJR05oYkd4aVlXTnJJRzlpYW1WamRDNWNiaUFnSUNvZ1ZtRnNhV1FnYjNCMGFXOXVjeUJoY21VNlBIVnNQbHh1SUNBZ0tpQWdJRHhzYVQ1emRXTmpaWE56T2lCQklFSmhZMnRpYjI1bExYTjBlV3hsSUhOMVkyTmxjM01nWTJGc2JHSmhZMnN1WEc0Z0lDQXFJQ0FnUEd4cFBtVnljbTl5T2lCQmJpQkNZV05yWW05dVpTMXpkSGxzWlNCbGNuSnZjaUJqWVd4c1ltRmpheTVjYmlBZ0lDb2dQQzkxYkQ1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGs5aWFtVmpkQzVtWlhSamFFRnNiRWxtVG1WbFpHVmtJRDBnWm5WdVkzUnBiMjRvYkdsemRDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCUVlYSnpaUzVQWW1wbFkzUXVYMlpsZEdOb1FXeHNLRnh1SUNBZ0lDQWdiR2x6ZEN4Y2JpQWdJQ0FnSUdaaGJITmxYRzRnSUNBZ0tTNWZkR2hsYmxKMWJrTmhiR3hpWVdOcmN5aHZjSFJwYjI1ektUdGNiaUFnZlR0Y2JseHVJQ0F2THlCQmRIUmhZMmdnWVd4c0lHbHVhR1Z5YVhSaFlteGxJRzFsZEdodlpITWdkRzhnZEdobElGQmhjbk5sTGs5aWFtVmpkQ0J3Y205MGIzUjVjR1V1WEc0Z0lGOHVaWGgwWlc1a0tGQmhjbk5sTGs5aWFtVmpkQzV3Y205MGIzUjVjR1VzSUZCaGNuTmxMa1YyWlc1MGN5eGNiaUFnSUNBZ0lDQWdJQ0FnTHlvcUlFQnNaVzVrY3lCUVlYSnpaUzVQWW1wbFkzUXVjSEp2ZEc5MGVYQmxJQ292SUh0Y2JpQWdJQ0JmWlhocGMzUmxaRG9nWm1Gc2MyVXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYm1sMGFXRnNhWHBsSUdseklHRnVJR1Z0Y0hSNUlHWjFibU4wYVc5dUlHSjVJR1JsWm1GMWJIUXVJRTkyWlhKeWFXUmxJR2wwSUhkcGRHZ2dlVzkxY2lCdmQyNWNiaUFnSUNBZ0tpQnBibWwwYVdGc2FYcGhkR2x2YmlCc2IyZHBZeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQnBibWwwYVdGc2FYcGxPaUJtZFc1amRHbHZiaWdwZTMwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklHRWdTbE5QVGlCMlpYSnphVzl1SUc5bUlIUm9aU0J2WW1wbFkzUWdjM1ZwZEdGaWJHVWdabTl5SUhOaGRtbHVaeUIwYnlCUVlYSnpaUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRQWW1wbFkzUjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHOUtVMDlPT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJxYzI5dUlEMGdkR2hwY3k1ZmRHOUdkV3hzU2xOUFRpZ3BPMXh1SUNBZ0lDQWdVR0Z5YzJVdVgyRnljbUY1UldGamFDaGJYQ0pmWDNSNWNHVmNJaXdnWENKamJHRnpjMDVoYldWY0lsMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUtHdGxlU2tnZXlCa1pXeGxkR1VnYW5OdmJsdHJaWGxkT3lCOUtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcWMyOXVPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZkRzlHZFd4c1NsTlBUam9nWm5WdVkzUnBiMjRvYzJWbGJrOWlhbVZqZEhNcElIdGNiaUFnSUNBZ0lIWmhjaUJxYzI5dUlEMGdYeTVqYkc5dVpTaDBhR2x6TG1GMGRISnBZblYwWlhNcE8xeHVJQ0FnSUNBZ1VHRnljMlV1WDI5aWFtVmpkRVZoWTJnb2FuTnZiaXdnWm5WdVkzUnBiMjRvZG1Gc0xDQnJaWGtwSUh0Y2JpQWdJQ0FnSUNBZ2FuTnZibHRyWlhsZElEMGdVR0Z5YzJVdVgyVnVZMjlrWlNoMllXd3NJSE5sWlc1UFltcGxZM1J6S1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ1VHRnljMlV1WDI5aWFtVmpkRVZoWTJnb2RHaHBjeTVmYjNCbGNtRjBhVzl1Y3l3Z1puVnVZM1JwYjI0b2RtRnNMQ0JyWlhrcElIdGNiaUFnSUNBZ0lDQWdhbk52Ymx0clpYbGRJRDBnZG1Gc08xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJR2xtSUNoZkxtaGhjeWgwYUdsekxDQmNJbWxrWENJcEtTQjdYRzRnSUNBZ0lDQWdJR3B6YjI0dWIySnFaV04wU1dRZ1BTQjBhR2x6TG1sa08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLRjh1YUdGektIUm9hWE1zSUZ3aVkzSmxZWFJsWkVGMFhDSXBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGZMbWx6UkdGMFpTaDBhR2x6TG1OeVpXRjBaV1JCZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0JxYzI5dUxtTnlaV0YwWldSQmRDQTlJSFJvYVhNdVkzSmxZWFJsWkVGMExuUnZTbE5QVGlncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR3B6YjI0dVkzSmxZWFJsWkVGMElEMGdkR2hwY3k1amNtVmhkR1ZrUVhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0Y4dWFHRnpLSFJvYVhNc0lGd2lkWEJrWVhSbFpFRjBYQ0lwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hmTG1selJHRjBaU2gwYUdsekxuVndaR0YwWldSQmRDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcWMyOXVMblZ3WkdGMFpXUkJkQ0E5SUhSb2FYTXVkWEJrWVhSbFpFRjBMblJ2U2xOUFRpZ3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUdwemIyNHVkWEJrWVhSbFpFRjBJRDBnZEdocGN5NTFjR1JoZEdWa1FYUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR3B6YjI0dVgxOTBlWEJsSUQwZ1hDSlBZbXBsWTNSY0lqdGNiaUFnSUNBZ0lHcHpiMjR1WTJ4aGMzTk9ZVzFsSUQwZ2RHaHBjeTVqYkdGemMwNWhiV1U3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhbk52Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZYQmtZWFJsY3lCZmFHRnphR1ZrU2xOUFRpQjBieUJ5Wldac1pXTjBJSFJvWlNCamRYSnlaVzUwSUhOMFlYUmxJRzltSUhSb2FYTWdiMkpxWldOMExseHVJQ0FnSUNBcUlFRmtaSE1nWVc1NUlHTm9ZVzVuWldRZ2FHRnphQ0IyWVd4MVpYTWdkRzhnZEdobElITmxkQ0J2WmlCd1pXNWthVzVuSUdOb1lXNW5aWE11WEc0Z0lDQWdJQ292WEc0Z0lDQWdYM0psWm5KbGMyaERZV05vWlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCcFppQW9jMlZzWmk1ZmNtVm1jbVZ6YUdsdVowTmhZMmhsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhObGJHWXVYM0psWm5KbGMyaHBibWREWVdOb1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCUVlYSnpaUzVmYjJKcVpXTjBSV0ZqYUNoMGFHbHpMbUYwZEhKcFluVjBaWE1zSUdaMWJtTjBhVzl1S0haaGJIVmxMQ0JyWlhrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxJR2x1YzNSaGJtTmxiMllnVUdGeWMyVXVUMkpxWldOMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVXVYM0psWm5KbGMyaERZV05vWlNncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRjh1YVhOUFltcGxZM1FvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJRzlpYW1WamRFRnljbUY1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRjh1YVhOQmNuSmhlU2gyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRsSUdSdmJpZDBJR05oWTJobElHRnljbUY1Y3lCdlppQlFZWEp6WlM1UFltcGxZM1J6WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZMbVZoWTJnb2RtRnNkV1VzSUdaMWJtTjBhVzl1S0dGeWNsWmhiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYSnlWbUZzSUdsdWMzUmhibU5sYjJZZ1VHRnljMlV1VDJKcVpXTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBRWEp5WVhrZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeWNsWmhiQzVmY21WbWNtVnphRU5oWTJobEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JVzlpYW1WamRFRnljbUY1SUNZbUlITmxiR1l1WDNKbGMyVjBRMkZqYUdWR2IzSkxaWGtvYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTV6WlhRb2EyVjVMQ0J1WlhjZ1VHRnljMlV1VDNBdVUyVjBLSFpoYkhWbEtTd2dleUJ6YVd4bGJuUTZJSFJ5ZFdVZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lHUmxiR1YwWlNCelpXeG1MbDl5WldaeVpYTm9hVzVuUTJGamFHVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdkSEoxWlNCcFppQjBhR2x6SUc5aWFtVmpkQ0JvWVhNZ1ltVmxiaUJ0YjJScFptbGxaQ0J6YVc1alpTQnBkSE1nYkdGemRGeHVJQ0FnSUNBcUlITmhkbVV2Y21WbWNtVnphQzRnSUVsbUlHRnVJR0YwZEhKcFluVjBaU0JwY3lCemNHVmphV1pwWldRc0lHbDBJSEpsZEhWeWJuTWdkSEoxWlNCdmJteDVJR2xtSUhSb1lYUmNiaUFnSUNBZ0tpQndZWEowYVdOMWJHRnlJR0YwZEhKcFluVjBaU0JvWVhNZ1ltVmxiaUJ0YjJScFptbGxaQ0J6YVc1alpTQjBhR1VnYkdGemRDQnpZWFpsTDNKbFpuSmxjMmd1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR0YwZEhJZ1FXNGdZWFIwY21saWRYUmxJRzVoYldVZ0tHOXdkR2x2Ym1Gc0tTNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdENiMjlzWldGdWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdScGNuUjVPaUJtZFc1amRHbHZiaWhoZEhSeUtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5eVpXWnlaWE5vUTJGamFHVW9LVHRjYmx4dUlDQWdJQ0FnZG1GeUlHTjFjbkpsYm5SRGFHRnVaMlZ6SUQwZ1h5NXNZWE4wS0hSb2FYTXVYMjl3VTJWMFVYVmxkV1VwTzF4dVhHNGdJQ0FnSUNCcFppQW9ZWFIwY2lrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tHTjFjbkpsYm5SRGFHRnVaMlZ6VzJGMGRISmRJRDhnZEhKMVpTQTZJR1poYkhObEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2doZEdocGN5NXBaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2hmTG10bGVYTW9ZM1Z5Y21WdWRFTm9ZVzVuWlhNcExteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdZVzRnWVhKeVlYa2diMllnYTJWNWN5QjBhR0YwSUdoaGRtVWdZbVZsYmlCdGIyUnBabWxsWkNCemFXNWpaU0JzWVhOMElITmhkbVV2Y21WbWNtVnphRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNUlHOW1JSE4wY21sdVozMWNiaUFnSUNBZ0tpOWNiaUFnSUNCa2FYSjBlVXRsZVhNNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlGOHVhMlY1Y3loZkxteGhjM1FvZEdocGN5NWZiM0JUWlhSUmRXVjFaU2twTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUnpJR0VnVUc5cGJuUmxjaUJ5WldabGNtVnVZMmx1WnlCMGFHbHpJRTlpYW1WamRDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCZmRHOVFiMmx1ZEdWeU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVwWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkRZVzRuZENCelpYSnBZV3hwZW1VZ1lXNGdkVzV6WVhabFpDQlFZWEp6WlM1UFltcGxZM1JjSWlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnZXlCZlgzUjVjR1U2SUZ3aVVHOXBiblJsY2x3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbE9pQjBhR2x6TG1Oc1lYTnpUbUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWFtVmpkRWxrT2lCMGFHbHpMbWxrSUgwN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkSE1nZEdobElIWmhiSFZsSUc5bUlHRnVJR0YwZEhKcFluVjBaUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdZWFIwY2lCVWFHVWdjM1J5YVc1bklHNWhiV1VnYjJZZ1lXNGdZWFIwY21saWRYUmxMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvWVhSMGNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVhSMGNtbGlkWFJsYzF0aGRIUnlYVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMGN5QmhJSEpsYkdGMGFXOXVJRzl1SUhSb1pTQm5hWFpsYmlCamJHRnpjeUJtYjNJZ2RHaGxJR0YwZEhKcFluVjBaUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdVM1J5YVc1bklHRjBkSElnVkdobElHRjBkSEpwWW5WMFpTQjBieUJuWlhRZ2RHaGxJSEpsYkdGMGFXOXVJR1p2Y2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5Wld4aGRHbHZiam9nWm5WdVkzUnBiMjRvWVhSMGNpa2dlMXh1SUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnZEdocGN5NW5aWFFvWVhSMGNpazdYRzRnSUNBZ0lDQnBaaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRW9kbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQlFZWEp6WlM1U1pXeGhkR2x2YmlrcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QmNJa05oYkd4bFpDQnlaV3hoZEdsdmJpZ3BJRzl1SUc1dmJpMXlaV3hoZEdsdmJpQm1hV1ZzWkNCY0lpQXJJR0YwZEhJN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZzZFdVdVgyVnVjM1Z5WlZCaGNtVnVkRUZ1WkV0bGVTaDBhR2x6TENCaGRIUnlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFZWEp6WlM1U1pXeGhkR2x2YmloMGFHbHpMQ0JoZEhSeUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdTRlJOVEMxbGMyTmhjR1ZrSUhaaGJIVmxJRzltSUdGdUlHRjBkSEpwWW5WMFpTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCbGMyTmhjR1U2SUdaMWJtTjBhVzl1S0dGMGRISXBJSHRjYmlBZ0lDQWdJSFpoY2lCb2RHMXNJRDBnZEdocGN5NWZaWE5qWVhCbFpFRjBkSEpwWW5WMFpYTmJZWFIwY2wwN1hHNGdJQ0FnSUNCcFppQW9hSFJ0YkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FIUnRiRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFpoY2lCMllXd2dQU0IwYUdsekxtRjBkSEpwWW5WMFpYTmJZWFIwY2wwN1hHNGdJQ0FnSUNCMllYSWdaWE5qWVhCbFpEdGNiaUFnSUNBZ0lHbG1JQ2hRWVhKelpTNWZhWE5PZFd4c1QzSlZibVJsWm1sdVpXUW9kbUZzS1NrZ2UxeHVJQ0FnSUNBZ0lDQmxjMk5oY0dWa0lEMGdKeWM3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JsYzJOaGNHVmtJRDBnWHk1bGMyTmhjR1VvZG1Gc0xuUnZVM1J5YVc1bktDa3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k1ZlpYTmpZWEJsWkVGMGRISnBZblYwWlhOYllYUjBjbDBnUFNCbGMyTmhjR1ZrTzF4dUlDQWdJQ0FnY21WMGRYSnVJR1Z6WTJGd1pXUTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdQR052WkdVK2RISjFaVHd2WTI5a1pUNGdhV1lnZEdobElHRjBkSEpwWW5WMFpTQmpiMjUwWVdsdWN5QmhJSFpoYkhWbElIUm9ZWFFnYVhNZ2JtOTBYRzRnSUNBZ0lDb2diblZzYkNCdmNpQjFibVJsWm1sdVpXUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHRjBkSElnVkdobElITjBjbWx1WnlCdVlXMWxJRzltSUhSb1pTQmhkSFJ5YVdKMWRHVXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lYTTZJR1oxYm1OMGFXOXVLR0YwZEhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBaFVHRnljMlV1WDJselRuVnNiRTl5Vlc1a1pXWnBibVZrS0hSb2FYTXVZWFIwY21saWRYUmxjMXRoZEhSeVhTazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkIxYkd4eklGd2ljM0JsWTJsaGJGd2lJR1pwWld4a2N5QnNhV3RsSUc5aWFtVmpkRWxrTENCamNtVmhkR1ZrUVhRc0lHVjBZeTRnYjNWMElHOW1JR0YwZEhKelhHNGdJQ0FnSUNvZ1lXNWtJSEIxZEhNZ2RHaGxiU0J2YmlCY0luUm9hWE5jSWlCa2FYSmxZM1JzZVM0Z0lGSmxiVzkyWlhNZ2RHaGxiU0JtY205dElHRjBkSEp6TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JoZEhSeWN5QXRJRUVnWkdsamRHbHZibUZ5ZVNCM2FYUm9JSFJvWlNCa1lYUmhJR1p2Y2lCMGFHbHpJRkJoY25ObExrOWlhbVZqZEM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYldWeVoyVk5ZV2RwWTBacFpXeGtjem9nWm5WdVkzUnBiMjRvWVhSMGNuTXBJSHRjYmlBZ0lDQWdJQzh2SUVOb1pXTnJJR1p2Y2lCamFHRnVaMlZ6SUc5bUlHMWhaMmxqSUdacFpXeGtjeTVjYmlBZ0lDQWdJSFpoY2lCdGIyUmxiQ0E5SUhSb2FYTTdYRzRnSUNBZ0lDQjJZWElnYzNCbFkybGhiRVpwWld4a2N5QTlJRnRjSW1sa1hDSXNJRndpYjJKcVpXTjBTV1JjSWl3Z1hDSmpjbVZoZEdWa1FYUmNJaXdnWENKMWNHUmhkR1ZrUVhSY0lsMDdYRzRnSUNBZ0lDQlFZWEp6WlM1ZllYSnlZWGxGWVdOb0tITndaV05wWVd4R2FXVnNaSE1zSUdaMWJtTjBhVzl1S0dGMGRISXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHRjBkSEp6VzJGMGRISmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR0YwZEhJZ1BUMDlJRndpYjJKcVpXTjBTV1JjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5a1pXd3VhV1FnUFNCaGRIUnljMXRoZEhSeVhUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NoaGRIUnlJRDA5UFNCY0ltTnlaV0YwWldSQmRGd2lJSHg4SUdGMGRISWdQVDA5SUZ3aWRYQmtZWFJsWkVGMFhDSXBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhYeTVwYzBSaGRHVW9ZWFIwY25OYllYUjBjbDBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjJSbGJGdGhkSFJ5WFNBOUlGQmhjbk5sTGw5d1lYSnpaVVJoZEdVb1lYUjBjbk5iWVhSMGNsMHBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiMlJsYkZ0aGRIUnlYU0E5SUdGMGRISnpXMkYwZEhKZE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnWVhSMGNuTmJZWFIwY2wwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYjNCcFpYTWdkR2hsSUdkcGRtVnVJSE5sY25abGNrUmhkR0VnZEc4Z1hDSjBhR2x6WENJc0lISmxabkpsYzJobGN5QmhkSFJ5YVdKMWRHVnpMQ0JoYm1SY2JpQWdJQ0FnS2lCamJHVmhjbk1nY0dWdVpHbHVaeUJqYUdGdVoyVnpPMXh1SUNBZ0lDQXFMMXh1SUNBZ0lGOWpiM0I1VTJWeWRtVnlSR0YwWVRvZ1puVnVZM1JwYjI0b2MyVnlkbVZ5UkdGMFlTa2dlMXh1SUNBZ0lDQWdMeThnUTI5d2VTQnpaWEoyWlhJZ1pHRjBZVnh1SUNBZ0lDQWdkbUZ5SUhSbGJYQlRaWEoyWlhKRVlYUmhJRDBnZTMwN1hHNGdJQ0FnSUNCUVlYSnpaUzVmYjJKcVpXTjBSV0ZqYUNoelpYSjJaWEpFWVhSaExDQm1kVzVqZEdsdmJpaDJZV3gxWlN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUhSbGJYQlRaWEoyWlhKRVlYUmhXMnRsZVYwZ1BTQlFZWEp6WlM1ZlpHVmpiMlJsS0d0bGVTd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjBhR2x6TGw5elpYSjJaWEpFWVhSaElEMGdkR1Z0Y0ZObGNuWmxja1JoZEdFN1hHNWNiaUFnSUNBZ0lDOHZJRkpsWm5KbGMyZ2dkR2hsSUdGMGRISnBZblYwWlhNdVhHNGdJQ0FnSUNCMGFHbHpMbDl5WldKMWFXeGtRV3hzUlhOMGFXMWhkR1ZrUkdGMFlTZ3BPMXh1WEc0Z0lDQWdJQ0F2THlCVVQwUlBJQ2hpYTJ4cGJYUXBPaUJTWlhacGMybDBJR05zWldGeWFXNW5JRzl3WlhKaGRHbHZibk1zSUhCbGNtaGhjSE1nYlc5MlpTQjBieUJ5WlhabGNuUXVYRzRnSUNBZ0lDQXZMeUJEYkdWaGNpQnZkWFFnWVc1NUlHTm9ZVzVuWlhNZ2RHaGxJSFZ6WlhJZ2JXbG5hSFFnYUdGMlpTQnRZV1JsSUhCeVpYWnBiM1Z6YkhrdVhHNGdJQ0FnSUNCMGFHbHpMbDl5WldaeVpYTm9RMkZqYUdVb0tUdGNiaUFnSUNBZ0lIUm9hWE11WDI5d1UyVjBVWFZsZFdVZ1BTQmJlMzFkTzF4dVhHNGdJQ0FnSUNBdkx5QlNaV1p5WlhOb0lIUm9aU0JoZEhSeWFXSjFkR1Z6SUdGbllXbHVMbHh1SUNBZ0lDQWdkR2hwY3k1ZmNtVmlkV2xzWkVGc2JFVnpkR2x0WVhSbFpFUmhkR0VvS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1RXVnlaMlZ6SUdGdWIzUm9aWElnYjJKcVpXTjBKM01nWVhSMGNtbGlkWFJsY3lCcGJuUnZJSFJvYVhNZ2IySnFaV04wTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRjl0WlhKblpVWnliMjFQWW1wbFkzUTZJR1oxYm1OMGFXOXVLRzkwYUdWeUtTQjdYRzRnSUNBZ0lDQnBaaUFvSVc5MGFHVnlLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1ZHaHBjeUJrYjJWeklIUm9aU0JwYm5abGNuTmxJRzltSUY5dFpYSm5aVTFoWjJsalJtbGxiR1J6TGx4dUlDQWdJQ0FnZEdocGN5NXBaQ0E5SUc5MGFHVnlMbWxrTzF4dUlDQWdJQ0FnZEdocGN5NWpjbVZoZEdWa1FYUWdQU0J2ZEdobGNpNWpjbVZoZEdWa1FYUTdYRzRnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaV1JCZENBOUlHOTBhR1Z5TG5Wd1pHRjBaV1JCZER0Y2JseHVJQ0FnSUNBZ2RHaHBjeTVmWTI5d2VWTmxjblpsY2tSaGRHRW9iM1JvWlhJdVgzTmxjblpsY2tSaGRHRXBPMXh1WEc0Z0lDQWdJQ0IwYUdsekxsOW9ZWE5FWVhSaElEMGdkSEoxWlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdhbk52YmlCMGJ5QmlaU0J6Wlc1MElIUnZJSFJvWlNCelpYSjJaWEl1WEc0Z0lDQWdJQ292WEc0Z0lDQWdYM04wWVhKMFUyRjJaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDl2Y0ZObGRGRjFaWFZsTG5CMWMyZ29lMzBwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRFlXeHNaV1FnZDJobGJpQmhJSE5oZG1VZ1ptRnBiSE1nWW1WallYVnpaU0J2WmlCaGJpQmxjbkp2Y2k0Z1FXNTVJR05vWVc1blpYTWdkR2hoZENCM1pYSmxJSEJoY25SY2JpQWdJQ0FnS2lCdlppQjBhR1VnYzJGMlpTQnVaV1ZrSUhSdklHSmxJRzFsY21kbFpDQjNhWFJvSUdOb1lXNW5aWE1nYldGa1pTQmhablJsY2lCMGFHVWdjMkYyWlM0Z1ZHaHBjMXh1SUNBZ0lDQXFJRzFwWjJoMElIUm9jbTkzSUdGdUlHVjRZMlZ3ZEdsdmJpQnBjeUI1YjNVZ1pHOGdZMjl1Wm14cFkzUnBibWNnYjNCbGNtRjBhVzl1Y3k0Z1JtOXlJR1Y0WVcxd2JHVXNYRzRnSUNBZ0lDb2dhV1lnZVc5MUlHUnZPbHh1SUNBZ0lDQXFJQ0FnYjJKcVpXTjBMbk5sZENoY0ltWnZiMXdpTENCY0ltSmhjbHdpS1R0Y2JpQWdJQ0FnS2lBZ0lHOWlhbVZqZEM1elpYUW9YQ0pwYm5aaGJHbGtJR1pwWld4a0lHNWhiV1ZjSWl3Z1hDSmlZWHBjSWlrN1hHNGdJQ0FnSUNvZ0lDQnZZbXBsWTNRdWMyRjJaU2dwTzF4dUlDQWdJQ0FxSUNBZ2IySnFaV04wTG1sdVkzSmxiV1Z1ZENoY0ltWnZiMXdpS1R0Y2JpQWdJQ0FnS2lCMGFHVnVJSFJvYVhNZ2QybHNiQ0IwYUhKdmR5QjNhR1Z1SUhSb1pTQnpZWFpsSUdaaGFXeHpJR0Z1WkNCMGFHVWdZMnhwWlc1MElIUnlhV1Z6SUhSdklHMWxjbWRsWEc0Z0lDQWdJQ29nWENKaVlYSmNJaUIzYVhSb0lIUm9aU0FyTVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmWTJGdVkyVnNVMkYyWlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCMllYSWdabUZwYkdWa1EyaGhibWRsY3lBOUlGOHVabWx5YzNRb2RHaHBjeTVmYjNCVFpYUlJkV1YxWlNrN1hHNGdJQ0FnSUNCMGFHbHpMbDl2Y0ZObGRGRjFaWFZsSUQwZ1h5NXlaWE4wS0hSb2FYTXVYMjl3VTJWMFVYVmxkV1VwTzF4dUlDQWdJQ0FnZG1GeUlHNWxlSFJEYUdGdVoyVnpJRDBnWHk1bWFYSnpkQ2gwYUdsekxsOXZjRk5sZEZGMVpYVmxLVHRjYmlBZ0lDQWdJRkJoY25ObExsOXZZbXBsWTNSRllXTm9LR1poYVd4bFpFTm9ZVzVuWlhNc0lHWjFibU4wYVc5dUtHOXdMQ0JyWlhrcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5d01TQTlJR1poYVd4bFpFTm9ZVzVuWlhOYmEyVjVYVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHOXdNaUE5SUc1bGVIUkRhR0Z1WjJWelcydGxlVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaHZjREVnSmlZZ2IzQXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtVjRkRU5vWVc1blpYTmJhMlY1WFNBOUlHOXdNaTVmYldWeVoyVlhhWFJvVUhKbGRtbHZkWE1vYjNBeEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h2Y0RFcElIdGNiaUFnSUNBZ0lDQWdJQ0J1WlhoMFEyaGhibWRsYzF0clpYbGRJRDBnYjNBeE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSFJvYVhNdVgzTmhkbWx1WnlBOUlIUm9hWE11WDNOaGRtbHVaeUF0SURFN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTmhiR3hsWkNCM2FHVnVJR0VnYzJGMlpTQmpiMjF3YkdWMFpYTWdjM1ZqWTJWemMyWjFiR3g1TGlCVWFHbHpJRzFsY21kbGN5QjBhR1VnWTJoaGJtZGxjeUIwYUdGMFhHNGdJQ0FnSUNvZ2QyVnlaU0J6WVhabFpDQnBiblJ2SUhSb1pTQnJibTkzYmlCelpYSjJaWElnWkdGMFlTd2dZVzVrSUc5MlpYSnlhV1JsY3lCcGRDQjNhWFJvSUdGdWVTQmtZWFJoWEc0Z0lDQWdJQ29nYzJWdWRDQmthWEpsWTNSc2VTQm1jbTl0SUhSb1pTQnpaWEoyWlhJdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJacGJtbHphRk5oZG1VNklHWjFibU4wYVc5dUtITmxjblpsY2tSaGRHRXBJSHRjYmlBZ0lDQWdJQzh2SUVkeVlXSWdZU0JqYjNCNUlHOW1JR0Z1ZVNCdlltcGxZM1FnY21WbVpYSmxibU5sWkNCaWVTQjBhR2x6SUc5aWFtVmpkQzRnVkdobGMyVWdhVzV6ZEdGdVkyVnpYRzRnSUNBZ0lDQXZMeUJ0WVhrZ2FHRjJaU0JoYkhKbFlXUjVJR0psWlc0Z1ptVjBZMmhsWkN3Z1lXNWtJSGRsSUdSdmJpZDBJSGRoYm5RZ2RHOGdiRzl6WlNCMGFHVnBjaUJrWVhSaExseHVJQ0FnSUNBZ0x5OGdUbTkwWlNCMGFHRjBJR1J2YVc1bklHbDBJR3hwYTJVZ2RHaHBjeUJ0WldGdWN5QjNaU0IzYVd4c0lIVnVhV1o1SUhObGNHRnlZWFJsSUdOdmNHbGxjeUJ2WmlCMGFHVmNiaUFnSUNBZ0lDOHZJSE5oYldVZ2IySnFaV04wTENCaWRYUWdkR2hoZENkeklHRWdjbWx6YXlCM1pTQm9ZWFpsSUhSdklIUmhhMlV1WEc0Z0lDQWdJQ0IyWVhJZ1ptVjBZMmhsWkU5aWFtVmpkSE1nUFNCN2ZUdGNiaUFnSUNBZ0lGQmhjbk5sTGw5MGNtRjJaWEp6WlNoMGFHbHpMbUYwZEhKcFluVjBaWE1zSUdaMWJtTjBhVzl1S0c5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9iMkpxWldOMElHbHVjM1JoYm1ObGIyWWdVR0Z5YzJVdVQySnFaV04wSUNZbUlHOWlhbVZqZEM1cFpDQW1KaUJ2WW1wbFkzUXVYMmhoYzBSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnSUNCbVpYUmphR1ZrVDJKcVpXTjBjMXR2WW1wbFkzUXVhV1JkSUQwZ2IySnFaV04wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdkbUZ5SUhOaGRtVmtRMmhoYm1kbGN5QTlJRjh1Wm1seWMzUW9kR2hwY3k1ZmIzQlRaWFJSZFdWMVpTazdYRzRnSUNBZ0lDQjBhR2x6TGw5dmNGTmxkRkYxWlhWbElEMGdYeTV5WlhOMEtIUm9hWE11WDI5d1UyVjBVWFZsZFdVcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmWVhCd2JIbFBjRk5sZENoellYWmxaRU5vWVc1blpYTXNJSFJvYVhNdVgzTmxjblpsY2tSaGRHRXBPMXh1SUNBZ0lDQWdkR2hwY3k1ZmJXVnlaMlZOWVdkcFkwWnBaV3hrY3loelpYSjJaWEpFWVhSaEtUdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUZCaGNuTmxMbDl2WW1wbFkzUkZZV05vS0hObGNuWmxja1JoZEdFc0lHWjFibU4wYVc5dUtIWmhiSFZsTENCclpYa3BJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNWZjMlZ5ZG1WeVJHRjBZVnRyWlhsZElEMGdVR0Z5YzJVdVgyUmxZMjlrWlNoclpYa3NJSFpoYkhWbEtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCTWIyOXJJR1p2Y2lCaGJua2diMkpxWldOMGN5QjBhR0YwSUcxcFoyaDBJR2hoZG1VZ1ltVmpiMjFsSUhWdVptVjBZMmhsWkNCaGJtUWdabWw0SUhSb1pXMWNiaUFnSUNBZ0lDQWdMeThnWW5rZ2NtVndiR0ZqYVc1bklIUm9aV2x5SUhaaGJIVmxjeUIzYVhSb0lIUm9aU0J3Y21WMmFXOTFjMng1SUc5aWMyVnlkbVZrSUhaaGJIVmxjeTVjYmlBZ0lDQWdJQ0FnZG1GeUlHWmxkR05vWldRZ1BTQlFZWEp6WlM1ZmRISmhkbVZ5YzJVb2MyVnNaaTVmYzJWeWRtVnlSR0YwWVZ0clpYbGRMQ0JtZFc1amRHbHZiaWh2WW1wbFkzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9iMkpxWldOMElHbHVjM1JoYm1ObGIyWWdVR0Z5YzJVdVQySnFaV04wSUNZbUlHWmxkR05vWldSUFltcGxZM1J6VzI5aWFtVmpkQzVwWkYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWlhSamFHVmtUMkpxWldOMGMxdHZZbXBsWTNRdWFXUmRPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJR2xtSUNobVpYUmphR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmMyVnlkbVZ5UkdGMFlWdHJaWGxkSUQwZ1ptVjBZMmhsWkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjBhR2x6TGw5eVpXSjFhV3hrUVd4c1JYTjBhVzFoZEdWa1JHRjBZU2dwTzF4dUlDQWdJQ0FnZEdocGN5NWZjMkYyYVc1bklEMGdkR2hwY3k1ZmMyRjJhVzVuSUMwZ01UdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMkZzYkdWa0lIZG9aVzRnWVNCbVpYUmphQ0J2Y2lCc2IyZHBiaUJwY3lCamIyMXdiR1YwWlNCMGJ5QnpaWFFnZEdobElHdHViM2R1SUhObGNuWmxjaUJrWVhSaElIUnZYRzRnSUNBZ0lDb2dkR2hsSUdkcGRtVnVJRzlpYW1WamRDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCZlptbHVhWE5vUm1WMFkyZzZJR1oxYm1OMGFXOXVLSE5sY25abGNrUmhkR0VzSUdoaGMwUmhkR0VwSUh0Y2JpQWdJQ0FnSUM4dklGUlBSRThnS0dKcmJHbHRkQ2s2SUZKbGRtbHphWFFnWTJ4bFlYSnBibWNnYjNCbGNtRjBhVzl1Y3l3Z2NHVnlhR0Z3Y3lCdGIzWmxJSFJ2SUhKbGRtVnlkQzVjYmlBZ0lDQWdJSFJvYVhNdVgyOXdVMlYwVVhWbGRXVWdQU0JiZTMxZE8xeHVYRzRnSUNBZ0lDQXZMeUJDY21sdVp5QnBiaUJoYkd3Z2RHaGxJRzVsZHlCelpYSjJaWElnWkdGMFlTNWNiaUFnSUNBZ0lIUm9hWE11WDIxbGNtZGxUV0ZuYVdOR2FXVnNaSE1vYzJWeWRtVnlSR0YwWVNrN1hHNGdJQ0FnSUNCMGFHbHpMbDlqYjNCNVUyVnlkbVZ5UkdGMFlTaHpaWEoyWlhKRVlYUmhLVHRjYmx4dUlDQWdJQ0FnZEdocGN5NWZhR0Z6UkdGMFlTQTlJR2hoYzBSaGRHRTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZ3Y0d4cFpYTWdkR2hsSUhObGRDQnZaaUJRWVhKelpTNVBjQ0JwYmlCdmNGTmxkQ0IwYnlCMGFHVWdiMkpxWldOMElIUmhjbWRsZEM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmWVhCd2JIbFBjRk5sZERvZ1puVnVZM1JwYjI0b2IzQlRaWFFzSUhSaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdVR0Z5YzJVdVgyOWlhbVZqZEVWaFkyZ29iM0JUWlhRc0lHWjFibU4wYVc5dUtHTm9ZVzVuWlN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUhSaGNtZGxkRnRyWlhsZElEMGdZMmhoYm1kbExsOWxjM1JwYldGMFpTaDBZWEpuWlhSYmEyVjVYU3dnYzJWc1ppd2dhMlY1S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJoY21kbGRGdHJaWGxkSUQwOVBTQlFZWEp6WlM1UGNDNWZWVTVUUlZRcElIdGNiaUFnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkR0Z5WjJWMFcydGxlVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWEJzWVdObGN5QjBhR1VnWTJGamFHVmtJSFpoYkhWbElHWnZjaUJyWlhrZ2QybDBhQ0IwYUdVZ1kzVnljbVZ1ZENCMllXeDFaUzVjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJSFJ5ZFdVZ2FXWWdkR2hsSUc1bGR5QjJZV3gxWlNCcGN5QmthV1ptWlhKbGJuUWdkR2hoYmlCMGFHVWdiMnhrSUhaaGJIVmxMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXlaWE5sZEVOaFkyaGxSbTl5UzJWNU9pQm1kVzVqZEdsdmJpaHJaWGtwSUh0Y2JpQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlIUm9hWE11WVhSMGNtbGlkWFJsYzF0clpYbGRPMXh1SUNBZ0lDQWdhV1lnS0Y4dWFYTlBZbXBsWTNRb2RtRnNkV1VwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJU2gyWVd4MVpTQnBibk4wWVc1alpXOW1JRkJoY25ObExrOWlhbVZqZENrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FoS0haaGJIVmxJR2x1YzNSaGJtTmxiMllnVUdGeWMyVXVSbWxzWlNrcElIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQjJZV3gxWlM1MGIwcFRUMDRnUHlCMllXeDFaUzUwYjBwVFQwNG9LU0E2SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FuTnZiaUE5SUVwVFQwNHVjM1J5YVc1bmFXWjVLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMmhoYzJobFpFcFRUMDViYTJWNVhTQWhQVDBnYW5OdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQjNZWE5UWlhRZ1BTQWhJWFJvYVhNdVgyaGhjMmhsWkVwVFQwNWJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lYTm9aV1JLVTA5T1cydGxlVjBnUFNCcWMyOXVPMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIzWVhOVFpYUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VHOXdkV3hoZEdWeklHRjBkSEpwWW5WMFpYTmJhMlY1WFNCaWVTQnpkR0Z5ZEdsdVp5QjNhWFJvSUhSb1pTQnNZWE4wSUd0dWIzZHVJR1JoZEdFZ1puSnZiU0IwYUdWY2JpQWdJQ0FnS2lCelpYSjJaWElzSUdGdVpDQmhjSEJzZVdsdVp5QmhiR3dnYjJZZ2RHaGxJR3h2WTJGc0lHTm9ZVzVuWlhNZ2RHaGhkQ0JvWVhabElHSmxaVzRnYldGa1pTQjBieUIwYUdGMFhHNGdJQ0FnSUNvZ2EyVjVJSE5wYm1ObElIUm9aVzR1WEc0Z0lDQWdJQ292WEc0Z0lDQWdYM0psWW5WcGJHUkZjM1JwYldGMFpXUkVZWFJoUm05eVMyVjVPaUJtZFc1amRHbHZiaWhyWlhrcElIdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxtRjBkSEpwWW5WMFpYTmJhMlY1WFR0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5elpYSjJaWEpFWVhSaFcydGxlVjBwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoZEhSeWFXSjFkR1Z6VzJ0bGVWMGdQU0IwYUdsekxsOXpaWEoyWlhKRVlYUmhXMnRsZVYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCUVlYSnpaUzVmWVhKeVlYbEZZV05vS0hSb2FYTXVYMjl3VTJWMFVYVmxkV1VzSUdaMWJtTjBhVzl1S0c5d1UyVjBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZjQ0E5SUc5d1UyVjBXMnRsZVYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdVlYUjBjbWxpZFhSbGMxdHJaWGxkSUQwZ2IzQXVYMlZ6ZEdsdFlYUmxLSE5sYkdZdVlYUjBjbWxpZFhSbGMxdHJaWGxkTENCelpXeG1MQ0JyWlhrcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoelpXeG1MbUYwZEhKcFluVjBaWE5iYTJWNVhTQTlQVDBnVUdGeWMyVXVUM0F1WDFWT1UwVlVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2MyVnNaaTVoZEhSeWFXSjFkR1Z6VzJ0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDNKbGMyVjBRMkZqYUdWR2IzSkxaWGtvYTJWNUtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFiM0IxYkdGMFpYTWdZWFIwY21saWRYUmxjeUJpZVNCemRHRnlkR2x1WnlCM2FYUm9JSFJvWlNCc1lYTjBJR3R1YjNkdUlHUmhkR0VnWm5KdmJTQjBhR1ZjYmlBZ0lDQWdLaUJ6WlhKMlpYSXNJR0Z1WkNCaGNIQnNlV2x1WnlCaGJHd2diMllnZEdobElHeHZZMkZzSUdOb1lXNW5aWE1nZEdoaGRDQm9ZWFpsSUdKbFpXNGdiV0ZrWlNCemFXNWpaVnh1SUNBZ0lDQXFJSFJvWlc0dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDNKbFluVnBiR1JCYkd4RmMzUnBiV0YwWldSRVlYUmhPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnZG1GeUlIQnlaWFpwYjNWelFYUjBjbWxpZFhSbGN5QTlJRjh1WTJ4dmJtVW9kR2hwY3k1aGRIUnlhV0oxZEdWektUdGNibHh1SUNBZ0lDQWdkR2hwY3k1aGRIUnlhV0oxZEdWeklEMGdYeTVqYkc5dVpTaDBhR2x6TGw5elpYSjJaWEpFWVhSaEtUdGNiaUFnSUNBZ0lGQmhjbk5sTGw5aGNuSmhlVVZoWTJnb2RHaHBjeTVmYjNCVFpYUlJkV1YxWlN3Z1puVnVZM1JwYjI0b2IzQlRaWFFwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVmWVhCd2JIbFBjRk5sZENodmNGTmxkQ3dnYzJWc1ppNWhkSFJ5YVdKMWRHVnpLVHRjYmlBZ0lDQWdJQ0FnVUdGeWMyVXVYMjlpYW1WamRFVmhZMmdvYjNCVFpYUXNJR1oxYm1OMGFXOXVLRzl3TENCclpYa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbDl5WlhObGRFTmhZMmhsUm05eVMyVjVLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUM4dklGUnlhV2RuWlhJZ1kyaGhibWRsSUdWMlpXNTBjeUJtYjNJZ1lXNTVkR2hwYm1jZ2RHaGhkQ0JqYUdGdVoyVmtJR0psWTJGMWMyVWdiMllnZEdobElHWmxkR05vTGx4dUlDQWdJQ0FnVUdGeWMyVXVYMjlpYW1WamRFVmhZMmdvY0hKbGRtbHZkWE5CZEhSeWFXSjFkR1Z6TENCbWRXNWpkR2x2YmlodmJHUldZV3gxWlN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV3htTG1GMGRISnBZblYwWlhOYmEyVjVYU0FoUFQwZ2IyeGtWbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0J6Wld4bUxuUnlhV2RuWlhJb0oyTm9ZVzVuWlRvbklDc2dhMlY1TENCelpXeG1MQ0J6Wld4bUxtRjBkSEpwWW5WMFpYTmJhMlY1WFN3Z2UzMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUZCaGNuTmxMbDl2WW1wbFkzUkZZV05vS0hSb2FYTXVZWFIwY21saWRYUmxjeXdnWm5WdVkzUnBiMjRvYm1WM1ZtRnNkV1VzSUd0bGVTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lWOHVhR0Z6S0hCeVpYWnBiM1Z6UVhSMGNtbGlkWFJsY3l3Z2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1ZEhKcFoyZGxjaWduWTJoaGJtZGxPaWNnS3lCclpYa3NJSE5sYkdZc0lHNWxkMVpoYkhWbExDQjdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUdFZ2FHRnphQ0J2WmlCdGIyUmxiQ0JoZEhSeWFXSjFkR1Z6SUc5dUlIUm9aU0J2WW1wbFkzUXNJR1pwY21sdVoxeHVJQ0FnSUNBcUlEeGpiMlJsUGx3aVkyaGhibWRsWENJOEwyTnZaR1UrSUhWdWJHVnpjeUI1YjNVZ1kyaHZiM05sSUhSdklITnBiR1Z1WTJVZ2FYUXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQThjRDVaYjNVZ1kyRnVJR05oYkd3Z2FYUWdkMmwwYUNCaGJpQnZZbXBsWTNRZ1kyOXVkR0ZwYm1sdVp5QnJaWGx6SUdGdVpDQjJZV3gxWlhNc0lHOXlJSGRwZEdnZ2IyNWxYRzRnSUNBZ0lDb2dhMlY1SUdGdVpDQjJZV3gxWlM0Z0lFWnZjaUJsZUdGdGNHeGxPanh3Y21VK1hHNGdJQ0FnSUNvZ0lDQm5ZVzFsVkhWeWJpNXpaWFFvZTF4dUlDQWdJQ0FxSUNBZ0lDQndiR0Y1WlhJNklIQnNZWGxsY2pFc1hHNGdJQ0FnSUNvZ0lDQWdJR1JwWTJWU2IyeHNPaUF5WEc0Z0lDQWdJQ29nSUNCOUxDQjdYRzRnSUNBZ0lDb2dJQ0FnSUdWeWNtOXlPaUJtZFc1amRHbHZiaWhuWVcxbFZIVnlia0ZuWVdsdUxDQmxjbkp2Y2lrZ2UxeHVJQ0FnSUNBcUlDQWdJQ0FnSUM4dklGUm9aU0J6WlhRZ1ptRnBiR1ZrSUhaaGJHbGtZWFJwYjI0dVhHNGdJQ0FnSUNvZ0lDQWdJSDFjYmlBZ0lDQWdLaUFnSUgwcE8xeHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ0lDQm5ZVzFsTG5ObGRDaGNJbU4xY25KbGJuUlFiR0Y1WlhKY0lpd2djR3hoZVdWeU1pd2dlMXh1SUNBZ0lDQXFJQ0FnSUNCbGNuSnZjam9nWm5WdVkzUnBiMjRvWjJGdFpWUjFjbTVCWjJGcGJpd2daWEp5YjNJcElIdGNiaUFnSUNBZ0tpQWdJQ0FnSUNBdkx5QlVhR1VnYzJWMElHWmhhV3hsWkNCMllXeHBaR0YwYVc5dUxseHVJQ0FnSUNBcUlDQWdJQ0I5WEc0Z0lDQWdJQ29nSUNCOUtUdGNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlDQWdaMkZ0WlM1elpYUW9YQ0ptYVc1cGMyaGxaRndpTENCMGNuVmxLVHM4TDNCeVpUNDhMM0ErWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdhMlY1SUZSb1pTQnJaWGtnZEc4Z2MyVjBMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdmU0IyWVd4MVpTQlVhR1VnZG1Gc2RXVWdkRzhnWjJsMlpTQnBkQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QkJJSE5sZENCdlppQkNZV05yWW05dVpTMXNhV3RsSUc5d2RHbHZibk1nWm05eUlIUm9aU0J6WlhRdVhHNGdJQ0FnSUNvZ0lDQWdJRlJvWlNCdmJteDVJSE4xY0hCdmNuUmxaQ0J2Y0hScGIyNXpJR0Z5WlNBOFkyOWtaVDV6YVd4bGJuUThMMk52WkdVK0xGeHVJQ0FnSUNBcUlDQWdJQ0E4WTI5a1pUNWxjbkp2Y2p3dlkyOWtaVDRzSUdGdVpDQThZMjlrWlQ1d2NtOXRhWE5sUEM5amIyUmxQaTVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmU0IwY25WbElHbG1JSFJvWlNCelpYUWdjM1ZqWTJWbFpHVmtMbHh1SUNBZ0lDQXFJRUJ6WldVZ1VHRnljMlV1VDJKcVpXTjBJM1poYkdsa1lYUmxYRzRnSUNBZ0lDb2dRSE5sWlNCUVlYSnpaUzVGY25KdmNseHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGREb2dablZ1WTNScGIyNG9hMlY1TENCMllXeDFaU3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnZG1GeUlHRjBkSEp6TENCaGRIUnlPMXh1SUNBZ0lDQWdhV1lnS0Y4dWFYTlBZbXBsWTNRb2EyVjVLU0I4ZkNCUVlYSnpaUzVmYVhOT2RXeHNUM0pWYm1SbFptbHVaV1FvYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0JoZEhSeWN5QTlJR3RsZVR0Y2JpQWdJQ0FnSUNBZ1VHRnljMlV1WDI5aWFtVmpkRVZoWTJnb1lYUjBjbk1zSUdaMWJtTjBhVzl1S0hZc0lHc3BJSHRjYmlBZ0lDQWdJQ0FnSUNCaGRIUnljMXRyWFNBOUlGQmhjbk5sTGw5a1pXTnZaR1VvYXl3Z2RpazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JoZEhSeWN5QTlJSHQ5TzF4dUlDQWdJQ0FnSUNCaGRIUnljMXRyWlhsZElEMGdVR0Z5YzJVdVgyUmxZMjlrWlNoclpYa3NJSFpoYkhWbEtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnUlhoMGNtRmpkQ0JoZEhSeWFXSjFkR1Z6SUdGdVpDQnZjSFJwYjI1ekxseHVJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc0Z0lDQWdJQ0JwWmlBb0lXRjBkSEp6S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0dGMGRISnpJR2x1YzNSaGJtTmxiMllnVUdGeWMyVXVUMkpxWldOMEtTQjdYRzRnSUNBZ0lDQWdJR0YwZEhKeklEMGdZWFIwY25NdVlYUjBjbWxpZFhSbGN6dGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVJQ0FnSUNBZ1VHRnljMlV1WDI5aWFtVmpkRVZoWTJnb1lYUjBjbk1zSUdaMWJtTjBhVzl1S0hWdWRYTmxaRjkyWVd4MVpTd2dhMlY1S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bUxtTnZibk4wY25WamRHOXlMbkpsWVdSUGJteDVRWFIwY21saWRYUmxjeUFtSmx4dUlDQWdJQ0FnSUNBZ0lITmxiR1l1WTI5dWMzUnlkV04wYjNJdWNtVmhaRTl1YkhsQmRIUnlhV0oxZEdWelcydGxlVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owTmhibTV2ZENCdGIyUnBabmtnY21WaFpHOXViSGtnYTJWNU9pQW5JQ3NnYTJWNUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUM4dklFbG1JSFJvWlNCMWJuTmxkQ0J2Y0hScGIyNGdhWE1nZFhObFpDd2daWFpsY25rZ1lYUjBjbWxpZFhSbElITm9iM1ZzWkNCaVpTQmhJRlZ1YzJWMExseHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVkVzV6WlhRcElIdGNiaUFnSUNBZ0lDQWdVR0Z5YzJVdVgyOWlhbVZqZEVWaFkyZ29ZWFIwY25Nc0lHWjFibU4wYVc5dUtIVnVkWE5sWkY5MllXeDFaU3dnYTJWNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWVhSMGNuTmJhMlY1WFNBOUlHNWxkeUJRWVhKelpTNVBjQzVWYm5ObGRDZ3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdRWEJ3YkhrZ1lXeHNJSFJvWlNCaGRIUnlhV0oxZEdWeklIUnZJR2RsZENCMGFHVWdaWE4wYVcxaGRHVmtJSFpoYkhWbGN5NWNiaUFnSUNBZ0lIWmhjaUJrWVhSaFZHOVdZV3hwWkdGMFpTQTlJRjh1WTJ4dmJtVW9ZWFIwY25NcE8xeHVJQ0FnSUNBZ1VHRnljMlV1WDI5aWFtVmpkRVZoWTJnb1pHRjBZVlJ2Vm1Gc2FXUmhkR1VzSUdaMWJtTjBhVzl1S0haaGJIVmxMQ0JyWlhrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxJR2x1YzNSaGJtTmxiMllnVUdGeWMyVXVUM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmtZWFJoVkc5V1lXeHBaR0YwWlZ0clpYbGRJRDBnZG1Gc2RXVXVYMlZ6ZEdsdFlYUmxLSE5sYkdZdVlYUjBjbWxpZFhSbGMxdHJaWGxkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWml3Z2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aR0YwWVZSdlZtRnNhV1JoZEdWYmEyVjVYU0E5UFQwZ1VHRnljMlV1VDNBdVgxVk9VMFZVS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdaR0YwWVZSdlZtRnNhV1JoZEdWYmEyVjVYVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0F2THlCU2RXNGdkbUZzYVdSaGRHbHZiaTVjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmZG1Gc2FXUmhkR1VvWVhSMGNuTXNJRzl3ZEdsdmJuTXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkR2hwY3k1ZmJXVnlaMlZOWVdkcFkwWnBaV3hrY3loaGRIUnljeWs3WEc1Y2JpQWdJQ0FnSUc5d2RHbHZibk11WTJoaGJtZGxjeUE5SUh0OU8xeHVJQ0FnSUNBZ2RtRnlJR1Z6WTJGd1pXUWdQU0IwYUdsekxsOWxjMk5oY0dWa1FYUjBjbWxpZFhSbGN6dGNiaUFnSUNBZ0lIWmhjaUJ3Y21WMklEMGdkR2hwY3k1ZmNISmxkbWx2ZFhOQmRIUnlhV0oxZEdWeklIeDhJSHQ5TzF4dVhHNGdJQ0FnSUNBdkx5QlZjR1JoZEdVZ1lYUjBjbWxpZFhSbGN5NWNiaUFnSUNBZ0lGQmhjbk5sTGw5aGNuSmhlVVZoWTJnb1h5NXJaWGx6S0dGMGRISnpLU3dnWm5WdVkzUnBiMjRvWVhSMGNpa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnNJRDBnWVhSMGNuTmJZWFIwY2wwN1hHNWNiaUFnSUNBZ0lDQWdMeThnU1dZZ2RHaHBjeUJwY3lCaElISmxiR0YwYVc5dUlHOWlhbVZqZENCM1pTQnVaV1ZrSUhSdklITmxkQ0IwYUdVZ2NHRnlaVzUwSUdOdmNuSmxZM1JzZVN4Y2JpQWdJQ0FnSUNBZ0x5OGdjMmx1WTJVZ2RHaGxJR3h2WTJGMGFXOXVJSGRvWlhKbElHbDBJSGRoY3lCd1lYSnpaV1FnWkc5bGN5QnViM1FnYUdGMlpTQmhZMk5sYzNNZ2RHOWNiaUFnSUNBZ0lDQWdMeThnZEdocGN5QnZZbXBsWTNRdVhHNGdJQ0FnSUNBZ0lHbG1JQ2gyWVd3Z2FXNXpkR0Z1WTJWdlppQlFZWEp6WlM1U1pXeGhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoYkM1d1lYSmxiblFnUFNCelpXeG1PMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0VvZG1Gc0lHbHVjM1JoYm1ObGIyWWdVR0Z5YzJVdVQzQXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNJRDBnYm1WM0lGQmhjbk5sTGs5d0xsTmxkQ2gyWVd3cE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1UyVmxJR2xtSUhSb2FYTWdZMmhoYm1kbElIZHBiR3dnWVdOMGRXRnNiSGtnYUdGMlpTQmhibmtnWldabVpXTjBMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2FYTlNaV0ZzUTJoaGJtZGxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdhV1lnS0haaGJDQnBibk4wWVc1alpXOW1JRkJoY25ObExrOXdMbE5sZENBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnWHk1cGMwVnhkV0ZzS0hObGJHWXVZWFIwY21saWRYUmxjMXRoZEhSeVhTd2dkbUZzTG5aaGJIVmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbHpVbVZoYkVOb1lXNW5aU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6VW1WaGJFTm9ZVzVuWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQmxjMk5oY0dWa1cyRjBkSEpkTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbk5wYkdWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTVmYzJsc1pXNTBXMkYwZEhKZElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVqYUdGdVoyVnpXMkYwZEhKZElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdZM1Z5Y21WdWRFTm9ZVzVuWlhNZ1BTQmZMbXhoYzNRb2MyVnNaaTVmYjNCVFpYUlJkV1YxWlNrN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SRGFHRnVaMlZ6VzJGMGRISmRJRDBnZG1Gc0xsOXRaWEpuWlZkcGRHaFFjbVYyYVc5MWN5aGpkWEp5Wlc1MFEyaGhibWRsYzF0aGRIUnlYU2s3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYM0psWW5WcGJHUkZjM1JwYldGMFpXUkVZWFJoUm05eVMyVjVLR0YwZEhJcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNocGMxSmxZV3hEYUdGdVoyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbU5vWVc1blpXUmJZWFIwY2wwZ1BTQnpaV3htTG1GMGRISnBZblYwWlhOYllYUjBjbDA3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z2Y0hScGIyNXpMbk5wYkdWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTVmY0dWdVpHbHVaMXRoZEhSeVhTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0J6Wld4bUxtTm9ZVzVuWldSYllYUjBjbDA3WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhObGJHWXVYM0JsYm1ScGJtZGJZWFIwY2wwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NdWMybHNaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTJoaGJtZGxLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGJXOTJaU0JoYmlCaGRIUnlhV0oxZEdVZ1puSnZiU0IwYUdVZ2JXOWtaV3dzSUdacGNtbHVaeUE4WTI5a1pUNWNJbU5vWVc1blpWd2lQQzlqYjJSbFBpQjFibXhsYzNOY2JpQWdJQ0FnS2lCNWIzVWdZMmh2YjNObElIUnZJSE5wYkdWdVkyVWdhWFF1SUZSb2FYTWdhWE1nWVNCdWIyOXdJR2xtSUhSb1pTQmhkSFJ5YVdKMWRHVWdaRzlsYzI0bmRGeHVJQ0FnSUNBcUlHVjRhWE4wTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSFZ1YzJWME9pQm1kVzVqZEdsdmJpaGhkSFJ5TENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmVHRjYmlBZ0lDQWdJRzl3ZEdsdmJuTXVkVzV6WlhRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBLR0YwZEhJc0lHNTFiR3dzSUc5d2RHbHZibk1wTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmRHOXRhV05oYkd4NUlHbHVZM0psYldWdWRITWdkR2hsSUhaaGJIVmxJRzltSUhSb1pTQm5hWFpsYmlCaGRIUnlhV0oxZEdVZ2RHaGxJRzVsZUhRZ2RHbHRaU0IwYUdWY2JpQWdJQ0FnS2lCdlltcGxZM1FnYVhNZ2MyRjJaV1F1SUVsbUlHNXZJR0Z0YjNWdWRDQnBjeUJ6Y0dWamFXWnBaV1FzSURFZ2FYTWdkWE5sWkNCaWVTQmtaV1poZFd4MExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdGMGRISWdlMU4wY21sdVozMGdWR2hsSUd0bGVTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1lXMXZkVzUwSUh0T2RXMWlaWEo5SUZSb1pTQmhiVzkxYm5RZ2RHOGdhVzVqY21WdFpXNTBJR0o1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJR2x1WTNKbGJXVnVkRG9nWm5WdVkzUnBiMjRvWVhSMGNpd2dZVzF2ZFc1MEtTQjdYRzRnSUNBZ0lDQnBaaUFvWHk1cGMxVnVaR1ZtYVc1bFpDaGhiVzkxYm5RcElIeDhJRjh1YVhOT2RXeHNLR0Z0YjNWdWRDa3BJSHRjYmlBZ0lDQWdJQ0FnWVcxdmRXNTBJRDBnTVR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkQ2hoZEhSeUxDQnVaWGNnVUdGeWMyVXVUM0F1U1c1amNtVnRaVzUwS0dGdGIzVnVkQ2twTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmRHOXRhV05oYkd4NUlHRmtaQ0JoYmlCdlltcGxZM1FnZEc4Z2RHaGxJR1Z1WkNCdlppQjBhR1VnWVhKeVlYa2dZWE56YjJOcFlYUmxaQ0IzYVhSb0lHRWdaMmwyWlc1Y2JpQWdJQ0FnS2lCclpYa3VYRzRnSUNBZ0lDb2dRSEJoY21GdElHRjBkSElnZTFOMGNtbHVaMzBnVkdobElHdGxlUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhWFJsYlNCN2ZTQlVhR1VnYVhSbGJTQjBieUJoWkdRdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdSa09pQm1kVzVqZEdsdmJpaGhkSFJ5TENCcGRHVnRLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUW9ZWFIwY2l3Z2JtVjNJRkJoY25ObExrOXdMa0ZrWkNoYmFYUmxiVjBwS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FYUnZiV2xqWVd4c2VTQmhaR1FnWVc0Z2IySnFaV04wSUhSdklIUm9aU0JoY25KaGVTQmhjM052WTJsaGRHVmtJSGRwZEdnZ1lTQm5hWFpsYmlCclpYa3NJRzl1YkhsY2JpQWdJQ0FnS2lCcFppQnBkQ0JwY3lCdWIzUWdZV3h5WldGa2VTQndjbVZ6Wlc1MElHbHVJSFJvWlNCaGNuSmhlUzRnVkdobElIQnZjMmwwYVc5dUlHOW1JSFJvWlNCcGJuTmxjblFnYVhOY2JpQWdJQ0FnS2lCdWIzUWdaM1ZoY21GdWRHVmxaQzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmhkSFJ5SUh0VGRISnBibWQ5SUZSb1pTQnJaWGt1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR2wwWlcwZ2UzMGdWR2hsSUc5aWFtVmpkQ0IwYnlCaFpHUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1lXUmtWVzVwY1hWbE9pQm1kVzVqZEdsdmJpaGhkSFJ5TENCcGRHVnRLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUW9ZWFIwY2l3Z2JtVjNJRkJoY25ObExrOXdMa0ZrWkZWdWFYRjFaU2hiYVhSbGJWMHBLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVhSdmJXbGpZV3hzZVNCeVpXMXZkbVVnWVd4c0lHbHVjM1JoYm1ObGN5QnZaaUJoYmlCdlltcGxZM1FnWm5KdmJTQjBhR1VnWVhKeVlYa2dZWE56YjJOcFlYUmxaRnh1SUNBZ0lDQXFJSGRwZEdnZ1lTQm5hWFpsYmlCclpYa3VYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1lYUjBjaUI3VTNSeWFXNW5mU0JVYUdVZ2EyVjVMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBkR1Z0SUh0OUlGUm9aU0J2WW1wbFkzUWdkRzhnY21WdGIzWmxMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lISmxiVzkyWlRvZ1puVnVZM1JwYjI0b1lYUjBjaXdnYVhSbGJTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtHRjBkSElzSUc1bGR5QlFZWEp6WlM1UGNDNVNaVzF2ZG1Vb1cybDBaVzFkS1NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ1lXNGdhVzV6ZEdGdVkyVWdiMllnWVNCemRXSmpiR0Z6Y3lCdlppQlFZWEp6WlM1UGNDQmtaWE5qY21saWFXNW5JSGRvWVhRZ2EybHVaQ0J2Wmx4dUlDQWdJQ0FxSUcxdlpHbG1hV05oZEdsdmJpQm9ZWE1nWW1WbGJpQndaWEptYjNKdFpXUWdiMjRnZEdocGN5Qm1hV1ZzWkNCemFXNWpaU0IwYUdVZ2JHRnpkQ0IwYVcxbElHbDBJSGRoYzF4dUlDQWdJQ0FxSUhOaGRtVmtMaUJHYjNJZ1pYaGhiWEJzWlN3Z1lXWjBaWElnWTJGc2JHbHVaeUJ2WW1wbFkzUXVhVzVqY21WdFpXNTBLRndpZUZ3aUtTd2dZMkZzYkdsdVoxeHVJQ0FnSUNBcUlHOWlhbVZqZEM1dmNDaGNJbmhjSWlrZ2QyOTFiR1FnY21WMGRYSnVJR0Z1SUdsdWMzUmhibU5sSUc5bUlGQmhjbk5sTGs5d0xrbHVZM0psYldWdWRDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCaGRIUnlJSHRUZEhKcGJtZDlJRlJvWlNCclpYa3VYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdlMUJoY25ObExrOXdmU0JVYUdVZ2IzQmxjbUYwYVc5dUxDQnZjaUIxYm1SbFptbHVaV1FnYVdZZ2JtOXVaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnZjRG9nWm5WdVkzUnBiMjRvWVhSMGNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlGOHViR0Z6ZENoMGFHbHpMbDl2Y0ZObGRGRjFaWFZsS1Z0aGRIUnlYVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJ4bFlYSWdZV3hzSUdGMGRISnBZblYwWlhNZ2IyNGdkR2hsSUcxdlpHVnNMQ0JtYVhKcGJtY2dQR052WkdVK1hDSmphR0Z1WjJWY0lqd3ZZMjlrWlQ0Z2RXNXNaWE56WEc0Z0lDQWdJQ29nZVc5MUlHTm9iMjl6WlNCMGJ5QnphV3hsYm1ObElHbDBMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnNaV0Z5T2lCbWRXNWpkR2x2YmlodmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmVHRjYmlBZ0lDQWdJRzl3ZEdsdmJuTXVkVzV6WlhRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZG1GeUlHdGxlWE5VYjBOc1pXRnlJRDBnWHk1bGVIUmxibVFvZEdocGN5NWhkSFJ5YVdKMWRHVnpMQ0IwYUdsekxsOXZjR1Z5WVhScGIyNXpLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRDaHJaWGx6Vkc5RGJHVmhjaXdnYjNCMGFXOXVjeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRIVnlibk1nWVNCS1UwOU9MV1Z1WTI5a1pXUWdjMlYwSUc5bUlHOXdaWEpoZEdsdmJuTWdkRzhnWW1VZ2MyVnVkQ0IzYVhSb0lIUm9aU0J1WlhoMElITmhkbVZjYmlBZ0lDQWdLaUJ5WlhGMVpYTjBMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lGOW5aWFJUWVhabFNsTlBUam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdhbk52YmlBOUlGOHVZMnh2Ym1Vb1h5NW1hWEp6ZENoMGFHbHpMbDl2Y0ZObGRGRjFaWFZsS1NrN1hHNGdJQ0FnSUNCUVlYSnpaUzVmYjJKcVpXTjBSV0ZqYUNocWMyOXVMQ0JtZFc1amRHbHZiaWh2Y0N3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUdwemIyNWJhMlY1WFNBOUlHOXdMblJ2U2xOUFRpZ3BPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhbk52Ymp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCMGNuVmxJR2xtSUhSb2FYTWdiMkpxWldOMElHTmhiaUJpWlNCelpYSnBZV3hwZW1Wa0lHWnZjaUJ6WVhacGJtY3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyTmhia0psVTJWeWFXRnNhWHBsWkRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1VDJKcVpXTjBMbDlqWVc1Q1pWTmxjbWxoYkdsNlpXUkJjMVpoYkhWbEtIUm9hWE11WVhSMGNtbGlkWFJsY3lrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFWmxkR05vSUhSb1pTQnRiMlJsYkNCbWNtOXRJSFJvWlNCelpYSjJaWEl1SUVsbUlIUm9aU0J6WlhKMlpYSW5jeUJ5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUIwYUdWY2JpQWdJQ0FnS2lCdGIyUmxiQ0JrYVdabVpYSnpJR1p5YjIwZ2FYUnpJR04xY25KbGJuUWdZWFIwY21saWRYUmxjeXdnZEdobGVTQjNhV3hzSUdKbElHOTJaWEp5YVdSbGJpeGNiaUFnSUNBZ0tpQjBjbWxuWjJWeWFXNW5JR0VnUEdOdlpHVStYQ0pqYUdGdVoyVmNJand2WTI5a1pUNGdaWFpsYm5RdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUJCSUVKaFkydGliMjVsTFhOMGVXeGxJR05oYkd4aVlXTnJJRzlpYW1WamRDNWNiaUFnSUNBZ0tpQldZV3hwWkNCdmNIUnBiMjV6SUdGeVpUbzhkV3crWEc0Z0lDQWdJQ29nSUNBOGJHaytjM1ZqWTJWemN6b2dRU0JDWVdOclltOXVaUzF6ZEhsc1pTQnpkV05qWlhOeklHTmhiR3hpWVdOckxseHVJQ0FnSUNBcUlDQWdQR3hwUG1WeWNtOXlPaUJCYmlCQ1lXTnJZbTl1WlMxemRIbHNaU0JsY25KdmNpQmpZV3hzWW1GamF5NWNiaUFnSUNBZ0tpQWdJRHhzYVQ1MWMyVk5ZWE4wWlhKTFpYazZJRWx1SUVOc2IzVmtJRU52WkdVZ1lXNWtJRTV2WkdVZ2IyNXNlU3dnWTJGMWMyVnpJSFJvWlNCTllYTjBaWElnUzJWNUlIUnZYRzRnSUNBZ0lDb2dJQ0FnSUdKbElIVnpaV1FnWm05eUlIUm9hWE1nY21WeGRXVnpkQzVjYmlBZ0lDQWdLaUFnSUR4c2FUNXpaWE56YVc5dVZHOXJaVzQ2SUVFZ2RtRnNhV1FnYzJWemMybHZiaUIwYjJ0bGJpd2dkWE5sWkNCbWIzSWdiV0ZyYVc1bklHRWdjbVZ4ZFdWemRDQnZibHh1SUNBZ0lDQXFJQ0FnSUNBZ0lHSmxhR0ZzWmlCdlppQmhJSE53WldOcFptbGpJSFZ6WlhJdVhHNGdJQ0FnSUNvZ1BDOTFiRDVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRRWVhKelpTNVFjbTl0YVhObGZTQkJJSEJ5YjIxcGMyVWdkR2hoZENCcGN5Qm1kV3htYVd4c1pXUWdkMmhsYmlCMGFHVWdabVYwWTJoY2JpQWdJQ0FnS2lBZ0lDQWdZMjl0Y0d4bGRHVnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHWmxkR05vT2lCbWRXNWpkR2x2YmlodmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNiaUFnSUNBZ0lIWmhjaUJ5WlhGMVpYTjBJRDBnVUdGeWMyVXVYM0psY1hWbGMzUW9lMXh1SUNBZ0lDQWdJQ0J0WlhSb2IyUTZJQ2RIUlZRbkxGeHVJQ0FnSUNBZ0lDQnliM1YwWlRvZ1hDSmpiR0Z6YzJWelhDSXNYRzRnSUNBZ0lDQWdJR05zWVhOelRtRnRaVG9nZEdocGN5NWpiR0Z6YzA1aGJXVXNYRzRnSUNBZ0lDQWdJRzlpYW1WamRFbGtPaUIwYUdsekxtbGtMRnh1SUNBZ0lDQWdJQ0IxYzJWTllYTjBaWEpMWlhrNklHOXdkR2x2Ym5NdWRYTmxUV0Z6ZEdWeVMyVjVMRnh1SUNBZ0lDQWdJQ0J6WlhOemFXOXVWRzlyWlc0NklHOXdkR2x2Ym5NdWMyVnpjMmx2YmxSdmEyVnVYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWEYxWlhOMExuUm9aVzRvWm5WdVkzUnBiMjRvY21WemNHOXVjMlVzSUhOMFlYUjFjeXdnZUdoeUtTQjdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyWnBibWx6YUVabGRHTm9LSE5sYkdZdWNHRnljMlVvY21WemNHOXVjMlVzSUhOMFlYUjFjeXdnZUdoeUtTd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXeG1PMXh1SUNBZ0lDQWdmU2t1WDNSb1pXNVNkVzVEWVd4c1ltRmphM01vYjNCMGFXOXVjeXdnZEdocGN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCaElHaGhjMmdnYjJZZ2JXOWtaV3dnWVhSMGNtbGlkWFJsY3l3Z1lXNWtJSE5oZG1VZ2RHaGxJRzF2WkdWc0lIUnZJSFJvWlNCelpYSjJaWEl1WEc0Z0lDQWdJQ29nZFhCa1lYUmxaRUYwSUhkcGJHd2dZbVVnZFhCa1lYUmxaQ0IzYUdWdUlIUm9aU0J5WlhGMVpYTjBJSEpsZEhWeWJuTXVYRzRnSUNBZ0lDb2dXVzkxSUdOaGJpQmxhWFJvWlhJZ1kyRnNiQ0JwZENCaGN6bzhjSEpsUGx4dUlDQWdJQ0FxSUNBZ2IySnFaV04wTG5OaGRtVW9LVHM4TDNCeVpUNWNiaUFnSUNBZ0tpQnZjanh3Y21VK1hHNGdJQ0FnSUNvZ0lDQnZZbXBsWTNRdWMyRjJaU2h1ZFd4c0xDQnZjSFJwYjI1ektUczhMM0J5WlQ1Y2JpQWdJQ0FnS2lCdmNqeHdjbVUrWEc0Z0lDQWdJQ29nSUNCdlltcGxZM1F1YzJGMlpTaGhkSFJ5Y3l3Z2IzQjBhVzl1Y3lrN1BDOXdjbVUrWEc0Z0lDQWdJQ29nYjNJOGNISmxQbHh1SUNBZ0lDQXFJQ0FnYjJKcVpXTjBMbk5oZG1Vb2EyVjVMQ0IyWVd4MVpTd2diM0IwYVc5dWN5azdQQzl3Y21VK1hHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCR2IzSWdaWGhoYlhCc1pTd2dQSEJ5WlQ1Y2JpQWdJQ0FnS2lBZ0lHZGhiV1ZVZFhKdUxuTmhkbVVvZTF4dUlDQWdJQ0FxSUNBZ0lDQndiR0Y1WlhJNklGd2lTbUZyWlNCRGRYUjBaWEpjSWl4Y2JpQWdJQ0FnS2lBZ0lDQWdaR2xqWlZKdmJHdzZJREpjYmlBZ0lDQWdLaUFnSUgwc0lIdGNiaUFnSUNBZ0tpQWdJQ0FnYzNWalkyVnpjem9nWm5WdVkzUnBiMjRvWjJGdFpWUjFjbTVCWjJGcGJpa2dlMXh1SUNBZ0lDQXFJQ0FnSUNBZ0lDOHZJRlJvWlNCellYWmxJSGRoY3lCemRXTmpaWE56Wm5Wc0xseHVJQ0FnSUNBcUlDQWdJQ0I5TEZ4dUlDQWdJQ0FxSUNBZ0lDQmxjbkp2Y2pvZ1puVnVZM1JwYjI0b1oyRnRaVlIxY201QloyRnBiaXdnWlhKeWIzSXBJSHRjYmlBZ0lDQWdLaUFnSUNBZ0lDQXZMeUJVYUdVZ2MyRjJaU0JtWVdsc1pXUXVJQ0JGY25KdmNpQnBjeUJoYmlCcGJuTjBZVzVqWlNCdlppQlFZWEp6WlM1RmNuSnZjaTVjYmlBZ0lDQWdLaUFnSUNBZ2ZWeHVJQ0FnSUNBcUlDQWdmU2s3UEM5d2NtVStYRzRnSUNBZ0lDb2diM0lnZDJsMGFDQndjbTl0YVhObGN6bzhjSEpsUGx4dUlDQWdJQ0FxSUNBZ1oyRnRaVlIxY200dWMyRjJaU2g3WEc0Z0lDQWdJQ29nSUNBZ0lIQnNZWGxsY2pvZ1hDSktZV3RsSUVOMWRIUmxjbHdpTEZ4dUlDQWdJQ0FxSUNBZ0lDQmthV05sVW05c2JEb2dNbHh1SUNBZ0lDQXFJQ0FnZlNrdWRHaGxiaWhtZFc1amRHbHZiaWhuWVcxbFZIVnlia0ZuWVdsdUtTQjdYRzRnSUNBZ0lDb2dJQ0FnSUM4dklGUm9aU0J6WVhabElIZGhjeUJ6ZFdOalpYTnpablZzTGx4dUlDQWdJQ0FxSUNBZ2ZTd2dablZ1WTNScGIyNG9aWEp5YjNJcElIdGNiaUFnSUNBZ0tpQWdJQ0FnTHk4Z1ZHaGxJSE5oZG1VZ1ptRnBiR1ZrTGlBZ1JYSnliM0lnYVhNZ1lXNGdhVzV6ZEdGdVkyVWdiMllnVUdGeWMyVXVSWEp5YjNJdVhHNGdJQ0FnSUNvZ0lDQjlLVHM4TDNCeVpUNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUVFZ1FtRmphMkp2Ym1VdGMzUjViR1VnWTJGc2JHSmhZMnNnYjJKcVpXTjBMbHh1SUNBZ0lDQXFJRlpoYkdsa0lHOXdkR2x2Ym5NZ1lYSmxPangxYkQ1Y2JpQWdJQ0FnS2lBZ0lEeHNhVDUzWVdsME9pQlRaWFFnZEc4Z2RISjFaU0IwYnlCM1lXbDBJR1p2Y2lCMGFHVWdjMlZ5ZG1WeUlIUnZJR052Ym1acGNtMGdZU0J6ZFdOalpYTnpablZzWEc0Z0lDQWdJQ29nSUNCellYWmxJR0psWm05eVpTQnRiMlJwWm5scGJtY2dkR2hsSUdGMGRISnBZblYwWlhNZ2IyNGdkR2hsSUc5aWFtVmpkQzVjYmlBZ0lDQWdLaUFnSUR4c2FUNXphV3hsYm5RNklGTmxkQ0IwYnlCMGNuVmxJSFJ2SUdGMmIybGtJR1pwY21sdVp5QjBhR1VnWUhObGRHQWdaWFpsYm5RdVhHNGdJQ0FnSUNvZ0lDQThiR2srYzNWalkyVnpjem9nUVNCQ1lXTnJZbTl1WlMxemRIbHNaU0J6ZFdOalpYTnpJR05oYkd4aVlXTnJMbHh1SUNBZ0lDQXFJQ0FnUEd4cFBtVnljbTl5T2lCQmJpQkNZV05yWW05dVpTMXpkSGxzWlNCbGNuSnZjaUJqWVd4c1ltRmpheTVjYmlBZ0lDQWdLaUFnSUR4c2FUNTFjMlZOWVhOMFpYSkxaWGs2SUVsdUlFTnNiM1ZrSUVOdlpHVWdZVzVrSUU1dlpHVWdiMjVzZVN3Z1kyRjFjMlZ6SUhSb1pTQk5ZWE4wWlhJZ1MyVjVJSFJ2WEc0Z0lDQWdJQ29nSUNBZ0lHSmxJSFZ6WldRZ1ptOXlJSFJvYVhNZ2NtVnhkV1Z6ZEM1Y2JpQWdJQ0FnS2lBZ0lEeHNhVDV6WlhOemFXOXVWRzlyWlc0NklFRWdkbUZzYVdRZ2MyVnpjMmx2YmlCMGIydGxiaXdnZFhObFpDQm1iM0lnYldGcmFXNW5JR0VnY21WeGRXVnpkQ0J2Ymx4dUlDQWdJQ0FxSUNBZ0lDQWdJR0psYUdGc1ppQnZaaUJoSUhOd1pXTnBabWxqSUhWelpYSXVYRzRnSUNBZ0lDb2dQQzkxYkQ1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVRY205dGFYTmxmU0JCSUhCeWIyMXBjMlVnZEdoaGRDQnBjeUJtZFd4bWFXeHNaV1FnZDJobGJpQjBhR1VnYzJGMlpWeHVJQ0FnSUNBcUlDQWdJQ0JqYjIxd2JHVjBaWE11WEc0Z0lDQWdJQ29nUUhObFpTQlFZWEp6WlM1RmNuSnZjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lITmhkbVU2SUdaMWJtTjBhVzl1S0dGeVp6RXNJR0Z5WnpJc0lHRnlaek1wSUh0Y2JpQWdJQ0FnSUhaaGNpQnBMQ0JoZEhSeWN5d2dZM1Z5Y21WdWRDd2diM0IwYVc5dWN5d2djMkYyWldRN1hHNGdJQ0FnSUNCcFppQW9YeTVwYzA5aWFtVmpkQ2hoY21jeEtTQjhmQ0JRWVhKelpTNWZhWE5PZFd4c1QzSlZibVJsWm1sdVpXUW9ZWEpuTVNrcElIdGNiaUFnSUNBZ0lDQWdZWFIwY25NZ1BTQmhjbWN4TzF4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ1lYSm5NanRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR0YwZEhKeklEMGdlMzA3WEc0Z0lDQWdJQ0FnSUdGMGRISnpXMkZ5WnpGZElEMGdZWEpuTWp0Y2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHRnlaek03WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFMWhhMlVnYzJGMlpTaDdJSE4xWTJObGMzTTZJR1oxYm1OMGFXOXVLQ2tnZTMwZ2ZTa2dkMjl5YXk1Y2JpQWdJQ0FnSUdsbUlDZ2hiM0IwYVc5dWN5QW1KaUJoZEhSeWN5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pYaDBjbUZmYTJWNWN5QTlJRjh1Y21WcVpXTjBLR0YwZEhKekxDQm1kVzVqZEdsdmJpaDJZV3gxWlN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY4dWFXNWpiSFZrWlNoYlhDSnpkV05qWlhOelhDSXNJRndpWlhKeWIzSmNJaXdnWENKM1lXbDBYQ0pkTENCclpYa3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Y0ZEhKaFgydGxlWE11YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHRnNiRjltZFc1amRHbHZibk1nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGZMbWhoY3loaGRIUnljeXdnWENKemRXTmpaWE56WENJcElDWW1JQ0ZmTG1selJuVnVZM1JwYjI0b1lYUjBjbk11YzNWalkyVnpjeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZzYkY5bWRXNWpkR2x2Ym5NZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tGOHVhR0Z6S0dGMGRISnpMQ0JjSW1WeWNtOXlYQ0lwSUNZbUlDRmZMbWx6Um5WdVkzUnBiMjRvWVhSMGNuTXVaWEp5YjNJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJHeGZablZ1WTNScGIyNXpJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hoYkd4ZlpuVnVZM1JwYjI1ektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR2x6SUdGMGRISnpJRzlpYW1WamRDQnNiMjlyY3lCc2FXdGxJR2wwSjNNZ2NtVmhiR3g1SUdGdUlHOXdkR2x2Ym5NZ2IySnFaV04wTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWVc1a0lIUm9aWEpsSjNNZ2JtOGdiM1JvWlhJZ2IzQjBhVzl1Y3lCdlltcGxZM1FzSUhOdklHeGxkQ2R6SUdwMWMzUWdkWE5sSUdsMExseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyRjJaU2h1ZFd4c0xDQmhkSFJ5Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCZkxtTnNiMjVsS0c5d2RHbHZibk1wSUh4OElIdDlPMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11ZDJGcGRDa2dlMXh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBJRDBnWHk1amJHOXVaU2gwYUdsekxtRjBkSEpwWW5WMFpYTXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ2MyVjBUM0IwYVc5dWN5QTlJRjh1WTJ4dmJtVW9iM0IwYVc5dWN5a2dmSHdnZTMwN1hHNGdJQ0FnSUNCcFppQW9jMlYwVDNCMGFXOXVjeTUzWVdsMEtTQjdYRzRnSUNBZ0lDQWdJSE5sZEU5d2RHbHZibk11YzJsc1pXNTBJRDBnZEhKMVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJ6WlhSRmNuSnZjanRjYmlBZ0lDQWdJSE5sZEU5d2RHbHZibk11WlhKeWIzSWdQU0JtZFc1amRHbHZiaWh0YjJSbGJDd2daWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdjMlYwUlhKeWIzSWdQU0JsY25KdmNqdGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ0lDQnBaaUFvWVhSMGNuTWdKaVlnSVhSb2FYTXVjMlYwS0dGMGRISnpMQ0J6WlhSUGNIUnBiMjV6S1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1VUhKdmJXbHpaUzVsY25KdmNpaHpaWFJGY25KdmNpa3VYM1JvWlc1U2RXNURZV3hzWW1GamEzTW9iM0IwYVc5dWN5d2dkR2hwY3lrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIWmhjaUJ0YjJSbGJDQTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lDOHZJRWxtSUhSb1pYSmxJR2x6SUdGdWVTQjFibk5oZG1Wa0lHTm9hV3hrTENCellYWmxJR2wwSUdacGNuTjBMbHh1SUNBZ0lDQWdiVzlrWld3dVgzSmxabkpsYzJoRFlXTm9aU2dwTzF4dVhHNGdJQ0FnSUNBdkx5QlVUMFJQS0d0c2FXMTBLVG9nVW1WbVlXTjBiM0lnZEdocGN5QnpieUIwYUdGMElIUm9aU0J6WVhabElITjBZWEowY3lCdWIzY3NJRzV2ZENCc1lYUmxjaTVjYmx4dUlDQWdJQ0FnZG1GeUlIVnVjMkYyWldSRGFHbHNaSEpsYmlBOUlGdGRPMXh1SUNBZ0lDQWdkbUZ5SUhWdWMyRjJaV1JHYVd4bGN5QTlJRnRkTzF4dUlDQWdJQ0FnVUdGeWMyVXVUMkpxWldOMExsOW1hVzVrVlc1ellYWmxaRU5vYVd4a2NtVnVLRzF2WkdWc0xtRjBkSEpwWW5WMFpYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RXNXpZWFpsWkVOb2FXeGtjbVZ1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ1YzJGMlpXUkdhV3hsY3lrN1hHNGdJQ0FnSUNCcFppQW9kVzV6WVhabFpFTm9hV3hrY21WdUxteGxibWQwYUNBcklIVnVjMkYyWldSR2FXeGxjeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUVlYSnpaUzVQWW1wbFkzUXVYMlJsWlhCVFlYWmxRWE41Ym1Nb2RHaHBjeTVoZEhSeWFXSjFkR1Z6TENCN1hHNGdJQ0FnSUNBZ0lDQWdkWE5sVFdGemRHVnlTMlY1T2lCdmNIUnBiMjV6TG5WelpVMWhjM1JsY2t0bGVTeGNiaUFnSUNBZ0lDQWdJQ0J6WlhOemFXOXVWRzlyWlc0NklHOXdkR2x2Ym5NdWMyVnpjMmx2YmxSdmEyVnVYRzRnSUNBZ0lDQWdJSDBwTG5Sb1pXNG9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxdlpHVnNMbk5oZG1Vb2JuVnNiQ3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgwc0lHWjFibU4wYVc5dUtHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQmhjbk5sTGxCeWIyMXBjMlV1WlhKeWIzSW9aWEp5YjNJcExsOTBhR1Z1VW5WdVEyRnNiR0poWTJ0ektHOXdkR2x2Ym5Nc0lHMXZaR1ZzS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdVgzTjBZWEowVTJGMlpTZ3BPMXh1SUNBZ0lDQWdkR2hwY3k1ZmMyRjJhVzVuSUQwZ0tIUm9hWE11WDNOaGRtbHVaeUI4ZkNBd0tTQXJJREU3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYMkZzYkZCeVpYWnBiM1Z6VTJGMlpYTWdQU0IwYUdsekxsOWhiR3hRY21WMmFXOTFjMU5oZG1WeklIeDhJRkJoY25ObExsQnliMjFwYzJVdVlYTW9LVHRjYmlBZ0lDQWdJSFJvYVhNdVgyRnNiRkJ5WlhacGIzVnpVMkYyWlhNZ1BTQjBhR2x6TGw5aGJHeFFjbVYyYVc5MWMxTmhkbVZ6TGw5amIyNTBhVzUxWlZkcGRHZ29ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRaWFJvYjJRZ1BTQnRiMlJsYkM1cFpDQS9JQ2RRVlZRbklEb2dKMUJQVTFRbk8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCcWMyOXVJRDBnYlc5a1pXd3VYMmRsZEZOaGRtVktVMDlPS0NrN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhKdmRYUmxJRDBnWENKamJHRnpjMlZ6WENJN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqYkdGemMwNWhiV1VnUFNCdGIyUmxiQzVqYkdGemMwNWhiV1U3WEc0Z0lDQWdJQ0FnSUdsbUlDaHRiMlJsYkM1amJHRnpjMDVoYldVZ1BUMDlJRndpWDFWelpYSmNJaUFtSmlBaGJXOWtaV3d1YVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCVGNHVmphV0ZzTFdOaGMyVWdkWE5sY2lCemFXZHVMWFZ3TGx4dUlDQWdJQ0FnSUNBZ0lISnZkWFJsSUQwZ1hDSjFjMlZ5YzF3aU8xeHVJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjWFZsYzNRZ1BTQlFZWEp6WlM1ZmNtVnhkV1Z6ZENoN1hHNGdJQ0FnSUNBZ0lDQWdjbTkxZEdVNklISnZkWFJsTEZ4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUb2dZMnhoYzNOT1lXMWxMRnh1SUNBZ0lDQWdJQ0FnSUc5aWFtVmpkRWxrT2lCdGIyUmxiQzVwWkN4Y2JpQWdJQ0FnSUNBZ0lDQnRaWFJvYjJRNklHMWxkR2h2WkN4Y2JpQWdJQ0FnSUNBZ0lDQjFjMlZOWVhOMFpYSkxaWGs2SUc5d2RHbHZibk11ZFhObFRXRnpkR1Z5UzJWNUxGeHVJQ0FnSUNBZ0lDQWdJSE5sYzNOcGIyNVViMnRsYmpvZ2IzQjBhVzl1Y3k1elpYTnphVzl1Vkc5clpXNHNYRzRnSUNBZ0lDQWdJQ0FnWkdGMFlUb2dhbk52Ymx4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBJRDBnY21WeGRXVnpkQzUwYUdWdUtHWjFibU4wYVc5dUtISmxjM0FzSUhOMFlYUjFjeXdnZUdoeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlITmxjblpsY2tGMGRISnpJRDBnYlc5a1pXd3VjR0Z5YzJVb2NtVnpjQ3dnYzNSaGRIVnpMQ0I0YUhJcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG5kaGFYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxjblpsY2tGMGRISnpJRDBnWHk1bGVIUmxibVFvWVhSMGNuTWdmSHdnZTMwc0lITmxjblpsY2tGMGRISnpLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdiVzlrWld3dVgyWnBibWx6YUZOaGRtVW9jMlZ5ZG1WeVFYUjBjbk1wTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbmRoYVhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxdlpHVnNMbk5sZENoamRYSnlaVzUwTENCelpYUlBjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxdlpHVnNPMXh1WEc0Z0lDQWdJQ0FnSUgwc0lHWjFibU4wYVc5dUtHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdiVzlrWld3dVgyTmhibU5sYkZOaGRtVW9LVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVVSEp2YldselpTNWxjbkp2Y2lobGNuSnZjaWs3WEc1Y2JpQWdJQ0FnSUNBZ2ZTa3VYM1JvWlc1U2RXNURZV3hzWW1GamEzTW9iM0IwYVc5dWN5d2diVzlrWld3cE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWEYxWlhOME8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVd4c1VISmxkbWx2ZFhOVFlYWmxjenRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUkdWemRISnZlU0IwYUdseklHMXZaR1ZzSUc5dUlIUm9aU0J6WlhKMlpYSWdhV1lnYVhRZ2QyRnpJR0ZzY21WaFpIa2djR1Z5YzJsemRHVmtMbHh1SUNBZ0lDQXFJRTl3ZEdsdGFYTjBhV05oYkd4NUlISmxiVzkyWlhNZ2RHaGxJRzF2WkdWc0lHWnliMjBnYVhSeklHTnZiR3hsWTNScGIyNHNJR2xtSUdsMElHaGhjeUJ2Ym1VdVhHNGdJQ0FnSUNvZ1NXWWdZSGRoYVhRNklIUnlkV1ZnSUdseklIQmhjM05sWkN3Z2QyRnBkSE1nWm05eUlIUm9aU0J6WlhKMlpYSWdkRzhnY21WemNHOXVaRnh1SUNBZ0lDQXFJR0psWm05eVpTQnlaVzF2ZG1Gc0xseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nUVNCQ1lXTnJZbTl1WlMxemRIbHNaU0JqWVd4c1ltRmpheUJ2WW1wbFkzUXVYRzRnSUNBZ0lDb2dWbUZzYVdRZ2IzQjBhVzl1Y3lCaGNtVTZQSFZzUGx4dUlDQWdJQ0FxSUNBZ1BHeHBQbmRoYVhRNklGTmxkQ0IwYnlCMGNuVmxJSFJ2SUhkaGFYUWdabTl5SUhSb1pTQnpaWEoyWlhJZ2RHOGdZMjl1Wm1seWJTQnpkV05qWlhOelpuVnNYRzRnSUNBZ0lDb2dJQ0JrWld4bGRHbHZiaUJ2WmlCMGFHVWdiMkpxWldOMElHSmxabTl5WlNCMGNtbG5aMlZ5YVc1bklIUm9aU0JnWkdWemRISnZlV0FnWlhabGJuUXVYRzRnSUNBZ0lDb2dJQ0E4YkdrK2MzVmpZMlZ6Y3pvZ1FTQkNZV05yWW05dVpTMXpkSGxzWlNCemRXTmpaWE56SUdOaGJHeGlZV05yWEc0Z0lDQWdJQ29nSUNBOGJHaytaWEp5YjNJNklFRnVJRUpoWTJ0aWIyNWxMWE4wZVd4bElHVnljbTl5SUdOaGJHeGlZV05yTGx4dUlDQWdJQ0FxSUNBZ1BHeHBQblZ6WlUxaGMzUmxja3RsZVRvZ1NXNGdRMnh2ZFdRZ1EyOWtaU0JoYm1RZ1RtOWtaU0J2Ym14NUxDQmpZWFZ6WlhNZ2RHaGxJRTFoYzNSbGNpQkxaWGtnZEc5Y2JpQWdJQ0FnS2lBZ0lDQWdZbVVnZFhObFpDQm1iM0lnZEdocGN5QnlaWEYxWlhOMExseHVJQ0FnSUNBcUlDQWdQR3hwUG5ObGMzTnBiMjVVYjJ0bGJqb2dRU0IyWVd4cFpDQnpaWE56YVc5dUlIUnZhMlZ1TENCMWMyVmtJR1p2Y2lCdFlXdHBibWNnWVNCeVpYRjFaWE4wSUc5dVhHNGdJQ0FnSUNvZ0lDQWdJQ0FnWW1Wb1lXeG1JRzltSUdFZ2MzQmxZMmxtYVdNZ2RYTmxjaTVjYmlBZ0lDQWdLaUE4TDNWc1BseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGxCeWIyMXBjMlY5SUVFZ2NISnZiV2x6WlNCMGFHRjBJR2x6SUdaMWJHWnBiR3hsWkNCM2FHVnVJSFJvWlNCa1pYTjBjbTk1WEc0Z0lDQWdJQ29nSUNBZ0lHTnZiWEJzWlhSbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCa1pYTjBjbTk1T2lCbWRXNWpkR2x2YmlodmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmVHRjYmlBZ0lDQWdJSFpoY2lCdGIyUmxiQ0E5SUhSb2FYTTdYRzVjYmlBZ0lDQWdJSFpoY2lCMGNtbG5aMlZ5UkdWemRISnZlU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnRiMlJsYkM1MGNtbG5aMlZ5S0Nka1pYTjBjbTk1Snl3Z2JXOWtaV3dzSUcxdlpHVnNMbU52Ykd4bFkzUnBiMjRzSUc5d2RHbHZibk1wTzF4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtbGtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY21sbloyVnlSR1Z6ZEhKdmVTZ3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NdWQyRnBkQ2tnZTF4dUlDQWdJQ0FnSUNCMGNtbG5aMlZ5UkdWemRISnZlU2dwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMllYSWdjbVZ4ZFdWemRDQTlJRkJoY25ObExsOXlaWEYxWlhOMEtIdGNiaUFnSUNBZ0lDQWdjbTkxZEdVNklGd2lZMnhoYzNObGMxd2lMRnh1SUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U2SUhSb2FYTXVZMnhoYzNOT1lXMWxMRnh1SUNBZ0lDQWdJQ0J2WW1wbFkzUkpaRG9nZEdocGN5NXBaQ3hjYmlBZ0lDQWdJQ0FnYldWMGFHOWtPaUFuUkVWTVJWUkZKeXhjYmlBZ0lDQWdJQ0FnZFhObFRXRnpkR1Z5UzJWNU9pQnZjSFJwYjI1ekxuVnpaVTFoYzNSbGNrdGxlU3hjYmlBZ0lDQWdJQ0FnYzJWemMybHZibFJ2YTJWdU9pQnZjSFJwYjI1ekxuTmxjM05wYjI1VWIydGxibHh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ4ZFdWemRDNTBhR1Z1S0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTUzWVdsMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEhKcFoyZGxja1JsYzNSeWIza29LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYlc5a1pXdzdYRzRnSUNBZ0lDQjlLUzVmZEdobGJsSjFia05oYkd4aVlXTnJjeWh2Y0hScGIyNXpMQ0IwYUdsektUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMjl1ZG1WeWRITWdZU0J5WlhOd2IyNXpaU0JwYm5SdklIUm9aU0JvWVhOb0lHOW1JR0YwZEhKcFluVjBaWE1nZEc4Z1ltVWdjMlYwSUc5dUlIUm9aU0J0YjJSbGJDNWNiaUFnSUNBZ0tpQkFhV2R1YjNKbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0dGeWMyVTZJR1oxYm1OMGFXOXVLSEpsYzNBc0lITjBZWFIxY3l3Z2VHaHlLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2IzVjBjSFYwSUQwZ1h5NWpiRzl1WlNoeVpYTndLVHRjYmlBZ0lDQWdJRjhvVzF3aVkzSmxZWFJsWkVGMFhDSXNJRndpZFhCa1lYUmxaRUYwWENKZEtTNWxZV05vS0daMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2IzVjBjSFYwVzJ0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCdmRYUndkWFJiYTJWNVhTQTlJRkJoY25ObExsOXdZWEp6WlVSaGRHVW9iM1YwY0hWMFcydGxlVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lHbG1JQ2doYjNWMGNIVjBMblZ3WkdGMFpXUkJkQ2tnZTF4dUlDQWdJQ0FnSUNCdmRYUndkWFF1ZFhCa1lYUmxaRUYwSUQwZ2IzVjBjSFYwTG1OeVpXRjBaV1JCZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaHpkR0YwZFhNcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpYaHBjM1JsWkNBOUlDaHpkR0YwZFhNZ0lUMDlJREl3TVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnYjNWMGNIVjBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEY21WaGRHVnpJR0VnYm1WM0lHMXZaR1ZzSUhkcGRHZ2dhV1JsYm5ScFkyRnNJR0YwZEhKcFluVjBaWE1nZEc4Z2RHaHBjeUJ2Ym1VdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VHRnljMlV1VDJKcVpXTjBmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnNiMjVsT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpaDBhR2x6TG1GMGRISnBZblYwWlhNcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklIUnlkV1VnYVdZZ2RHaHBjeUJ2WW1wbFkzUWdhR0Z6SUc1bGRtVnlJR0psWlc0Z2MyRjJaV1FnZEc4Z1VHRnljMlV1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjFjYmlBZ0lDQWdLaTljYmlBZ0lDQnBjMDVsZHpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0lYUm9hWE11YVdRN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTmhiR3dnZEdocGN5QnRaWFJvYjJRZ2RHOGdiV0Z1ZFdGc2JIa2dabWx5WlNCaElHQmNJbU5vWVc1blpWd2lZQ0JsZG1WdWRDQm1iM0lnZEdocGN5QnRiMlJsYkNCaGJtUmNiaUFnSUNBZ0tpQmhJR0JjSW1Ob1lXNW5aVHBoZEhSeWFXSjFkR1ZjSW1BZ1pYWmxiblFnWm05eUlHVmhZMmdnWTJoaGJtZGxaQ0JoZEhSeWFXSjFkR1V1WEc0Z0lDQWdJQ29nUTJGc2JHbHVaeUIwYUdseklIZHBiR3dnWTJGMWMyVWdZV3hzSUc5aWFtVmpkSE1nYjJKelpYSjJhVzVuSUhSb1pTQnRiMlJsYkNCMGJ5QjFjR1JoZEdVdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTJoaGJtZGxPaUJtZFc1amRHbHZiaWh2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNiaUFnSUNBZ0lIWmhjaUJqYUdGdVoybHVaeUE5SUhSb2FYTXVYMk5vWVc1bmFXNW5PMXh1SUNBZ0lDQWdkR2hwY3k1ZlkyaGhibWRwYm1jZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNBdkx5QlRhV3hsYm5RZ1kyaGhibWRsY3lCaVpXTnZiV1VnY0dWdVpHbHVaeUJqYUdGdVoyVnpMbHh1SUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVJQ0FnSUNBZ1VHRnljMlV1WDI5aWFtVmpkRVZoWTJnb2RHaHBjeTVmYzJsc1pXNTBMQ0JtZFc1amRHbHZiaWhoZEhSeUtTQjdYRzRnSUNBZ0lDQWdJSE5sYkdZdVgzQmxibVJwYm1kYllYUjBjbDBnUFNCMGNuVmxPMXh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUM4dklGTnBiR1Z1ZENCamFHRnVaMlZ6SUdGeVpTQjBjbWxuWjJWeVpXUXVYRzRnSUNBZ0lDQjJZWElnWTJoaGJtZGxjeUE5SUY4dVpYaDBaVzVrS0h0OUxDQnZjSFJwYjI1ekxtTm9ZVzVuWlhNc0lIUm9hWE11WDNOcGJHVnVkQ2s3WEc0Z0lDQWdJQ0IwYUdsekxsOXphV3hsYm5RZ1BTQjdmVHRjYmlBZ0lDQWdJRkJoY25ObExsOXZZbXBsWTNSRllXTm9LR05vWVc1blpYTXNJR1oxYm1OMGFXOXVLSFZ1ZFhObFpGOTJZV3gxWlN3Z1lYUjBjaWtnZTF4dUlDQWdJQ0FnSUNCelpXeG1MblJ5YVdkblpYSW9KMk5vWVc1blpUb25JQ3NnWVhSMGNpd2djMlZzWml3Z2MyVnNaaTVuWlhRb1lYUjBjaWtzSUc5d2RHbHZibk1wTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCcFppQW9ZMmhoYm1kcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRlJvYVhNZ2FYTWdkRzhnWjJWMElHRnliM1Z1WkNCc2FXNTBJRzV2ZENCc1pYUjBhVzVuSUhWeklHMWhhMlVnWVNCbWRXNWpkR2x2YmlCcGJpQmhJR3h2YjNBdVhHNGdJQ0FnSUNCMllYSWdaR1ZzWlhSbFEyaGhibWRsWkNBOUlHWjFibU4wYVc5dUtIWmhiSFZsTENCaGRIUnlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjMlZzWmk1ZmNHVnVaR2x1WjF0aGRIUnlYU0FtSmlBaGMyVnNaaTVmYzJsc1pXNTBXMkYwZEhKZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSE5sYkdZdVkyaGhibWRsWkZ0aGRIUnlYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0x5OGdRMjl1ZEdsdWRXVWdabWx5YVc1bklHQmNJbU5vWVc1blpWd2lZQ0JsZG1WdWRITWdkMmhwYkdVZ2RHaGxjbVVnWVhKbElIQmxibVJwYm1jZ1kyaGhibWRsY3k1Y2JpQWdJQ0FnSUhkb2FXeGxJQ2doWHk1cGMwVnRjSFI1S0hSb2FYTXVYM0JsYm1ScGJtY3BLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0JsYm1ScGJtY2dQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwY21sbloyVnlLQ2RqYUdGdVoyVW5MQ0IwYUdsekxDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdMeThnVUdWdVpHbHVaeUJoYm1RZ2MybHNaVzUwSUdOb1lXNW5aWE1nYzNScGJHd2djbVZ0WVdsdUxseHVJQ0FnSUNBZ0lDQlFZWEp6WlM1ZmIySnFaV04wUldGamFDaDBhR2x6TG1Ob1lXNW5aV1FzSUdSbGJHVjBaVU5vWVc1blpXUXBPMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXdjbVYyYVc5MWMwRjBkSEpwWW5WMFpYTWdQU0JmTG1Oc2IyNWxLSFJvYVhNdVlYUjBjbWxpZFhSbGN5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdVgyTm9ZVzVuYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QjBjblZsSUdsbUlIUm9hWE1nYjJKcVpXTjBJSGRoY3lCamNtVmhkR1ZrSUdKNUlIUm9aU0JRWVhKelpTQnpaWEoyWlhJZ2QyaGxiaUIwYUdWY2JpQWdJQ0FnS2lCdlltcGxZM1FnYldsbmFIUWdhR0YyWlNCaGJISmxZV1I1SUdKbFpXNGdkR2hsY21VZ0tHVXVaeTRnYVc0Z2RHaGxJR05oYzJVZ2IyWWdZU0JHWVdObFltOXZhMXh1SUNBZ0lDQXFJR3h2WjJsdUtWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdWNGFYTjBaV1E2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMlY0YVhOMFpXUTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVJsZEdWeWJXbHVaU0JwWmlCMGFHVWdiVzlrWld3Z2FHRnpJR05vWVc1blpXUWdjMmx1WTJVZ2RHaGxJR3hoYzNRZ1BHTnZaR1UrWENKamFHRnVaMlZjSWp3dlkyOWtaVDVjYmlBZ0lDQWdLaUJsZG1WdWRDNGdJRWxtSUhsdmRTQnpjR1ZqYVdaNUlHRnVJR0YwZEhKcFluVjBaU0J1WVcxbExDQmtaWFJsY20xcGJtVWdhV1lnZEdoaGRDQmhkSFJ5YVdKMWRHVmNiaUFnSUNBZ0tpQm9ZWE1nWTJoaGJtZGxaQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdZWFIwY2lCUGNIUnBiMjVoYkNCaGRIUnlhV0oxZEdVZ2JtRnRaVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnpRMmhoYm1kbFpEb2dablZ1WTNScGIyNG9ZWFIwY2lrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0ZoY21kMWJXVnVkSE11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFoWHk1cGMwVnRjSFI1S0hSb2FYTXVZMmhoYm1kbFpDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYUdGdVoyVmtJQ1ltSUY4dWFHRnpLSFJvYVhNdVkyaGhibWRsWkN3Z1lYUjBjaWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRIVnlibk1nWVc0Z2IySnFaV04wSUdOdmJuUmhhVzVwYm1jZ1lXeHNJSFJvWlNCaGRIUnlhV0oxZEdWeklIUm9ZWFFnYUdGMlpTQmphR0Z1WjJWa0xDQnZjbHh1SUNBZ0lDQXFJR1poYkhObElHbG1JSFJvWlhKbElHRnlaU0J1YnlCamFHRnVaMlZrSUdGMGRISnBZblYwWlhNdUlGVnpaV1oxYkNCbWIzSWdaR1YwWlhKdGFXNXBibWNnZDJoaGRGeHVJQ0FnSUNBcUlIQmhjblJ6SUc5bUlHRWdkbWxsZHlCdVpXVmtJSFJ2SUdKbElIVndaR0YwWldRZ1lXNWtMMjl5SUhkb1lYUWdZWFIwY21saWRYUmxjeUJ1WldWa0lIUnZJR0psWEc0Z0lDQWdJQ29nY0dWeWMybHpkR1ZrSUhSdklIUm9aU0J6WlhKMlpYSXVJRlZ1YzJWMElHRjBkSEpwWW5WMFpYTWdkMmxzYkNCaVpTQnpaWFFnZEc4Z2RXNWtaV1pwYm1Wa0xseHVJQ0FnSUNBcUlGbHZkU0JqWVc0Z1lXeHpieUJ3WVhOeklHRnVJR0YwZEhKcFluVjBaWE1nYjJKcVpXTjBJSFJ2SUdScFptWWdZV2RoYVc1emRDQjBhR1VnYlc5a1pXd3NYRzRnSUNBZ0lDb2daR1YwWlhKdGFXNXBibWNnYVdZZ2RHaGxjbVVnS25kdmRXeGtJR0psS2lCaElHTm9ZVzVuWlM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYUdGdVoyVmtRWFIwY21saWRYUmxjem9nWm5WdVkzUnBiMjRvWkdsbVppa2dlMXh1SUNBZ0lDQWdhV1lnS0NGa2FXWm1LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtaGhjME5vWVc1blpXUW9LU0EvSUY4dVkyeHZibVVvZEdocGN5NWphR0Z1WjJWa0tTQTZJR1poYkhObE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtRnlJR05vWVc1blpXUWdQU0I3ZlR0Y2JpQWdJQ0FnSUhaaGNpQnZiR1FnUFNCMGFHbHpMbDl3Y21WMmFXOTFjMEYwZEhKcFluVjBaWE03WEc0Z0lDQWdJQ0JRWVhKelpTNWZiMkpxWldOMFJXRmphQ2hrYVdabUxDQm1kVzVqZEdsdmJpaGthV1ptVm1Gc0xDQmhkSFJ5S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWHk1cGMwVnhkV0ZzS0c5c1pGdGhkSFJ5WFN3Z1pHbG1abFpoYkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYUdGdVoyVmtXMkYwZEhKZElEMGdaR2xtWmxaaGJEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMmhoYm1kbFpEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdjSEpsZG1sdmRYTWdkbUZzZFdVZ2IyWWdZVzRnWVhSMGNtbGlkWFJsTENCeVpXTnZjbVJsWkNCaGRDQjBhR1VnZEdsdFpTQjBhR1VnYkdGemRGeHVJQ0FnSUNBcUlEeGpiMlJsUGx3aVkyaGhibWRsWENJOEwyTnZaR1UrSUdWMlpXNTBJSGRoY3lCbWFYSmxaQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdZWFIwY2lCT1lXMWxJRzltSUhSb1pTQmhkSFJ5YVdKMWRHVWdkRzhnWjJWMExseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCeVpYWnBiM1Z6T2lCbWRXNWpkR2x2YmloaGRIUnlLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ2ZId2dJWFJvYVhNdVgzQnlaWFpwYjNWelFYUjBjbWxpZFhSbGN5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXdjbVYyYVc5MWMwRjBkSEpwWW5WMFpYTmJZWFIwY2wwN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkSE1nWVd4c0lHOW1JSFJvWlNCaGRIUnlhV0oxZEdWeklHOW1JSFJvWlNCdGIyUmxiQ0JoZENCMGFHVWdkR2x0WlNCdlppQjBhR1VnY0hKbGRtbHZkWE5jYmlBZ0lDQWdLaUE4WTI5a1pUNWNJbU5vWVc1blpWd2lQQzlqYjJSbFBpQmxkbVZ1ZEM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UFltcGxZM1I5WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSEpsZG1sdmRYTkJkSFJ5YVdKMWRHVnpPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJmTG1Oc2IyNWxLSFJvYVhNdVgzQnlaWFpwYjNWelFYUjBjbWxpZFhSbGN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5vWldOcmN5QnBaaUIwYUdVZ2JXOWtaV3dnYVhNZ1kzVnljbVZ1ZEd4NUlHbHVJR0VnZG1Gc2FXUWdjM1JoZEdVdUlFbDBKM01nYjI1c2VTQndiM056YVdKc1pTQjBiMXh1SUNBZ0lDQXFJR2RsZENCcGJuUnZJR0Z1SUNwcGJuWmhiR2xrS2lCemRHRjBaU0JwWmlCNWIzVW5jbVVnZFhOcGJtY2djMmxzWlc1MElHTm9ZVzVuWlhNdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1FtOXZiR1ZoYm4xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JwYzFaaGJHbGtPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFoZEdocGN5NTJZV3hwWkdGMFpTaDBhR2x6TG1GMGRISnBZblYwWlhNcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlpiM1VnYzJodmRXeGtJRzV2ZENCallXeHNJSFJvYVhNZ1puVnVZM1JwYjI0Z1pHbHlaV04wYkhrZ2RXNXNaWE56SUhsdmRTQnpkV0pqYkdGemMxeHVJQ0FnSUNBcUlEeGpiMlJsUGxCaGNuTmxMazlpYW1WamREd3ZZMjlrWlQ0c0lHbHVJSGRvYVdOb0lHTmhjMlVnZVc5MUlHTmhiaUJ2ZG1WeWNtbGtaU0IwYUdseklHMWxkR2h2WkZ4dUlDQWdJQ0FxSUhSdklIQnliM1pwWkdVZ1lXUmthWFJwYjI1aGJDQjJZV3hwWkdGMGFXOXVJRzl1SUR4amIyUmxQbk5sZER3dlkyOWtaVDRnWVc1a1hHNGdJQ0FnSUNvZ1BHTnZaR1UrYzJGMlpUd3ZZMjlrWlQ0dUlDQlpiM1Z5SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJSE5vYjNWc1pDQnlaWFIxY201Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JoZEhSeWN5QlVhR1VnWTNWeWNtVnVkQ0JrWVhSaElIUnZJSFpoYkdsa1lYUmxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklFRWdRbUZqYTJKdmJtVXRiR2xyWlNCdmNIUnBiMjV6SUc5aWFtVmpkQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHQ5SUVaaGJITmxJR2xtSUhSb1pTQmtZWFJoSUdseklIWmhiR2xrTGlBZ1FXNGdaWEp5YjNJZ2IySnFaV04wSUc5MGFHVnlkMmx6WlM1Y2JpQWdJQ0FnS2lCQWMyVmxJRkJoY25ObExrOWlhbVZqZENOelpYUmNiaUFnSUNBZ0tpOWNiaUFnSUNCMllXeHBaR0YwWlRvZ1puVnVZM1JwYjI0b1lYUjBjbk1zSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUdsbUlDaGZMbWhoY3loaGRIUnljeXdnWENKQlEweGNJaWtnSmlZZ0lTaGhkSFJ5Y3k1QlEwd2dhVzV6ZEdGdVkyVnZaaUJRWVhKelpTNUJRMHdwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVR0Z5YzJVdVJYSnliM0lvVUdGeWMyVXVSWEp5YjNJdVQxUklSVkpmUTBGVlUwVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSkJRMHdnYlhWemRDQmlaU0JoSUZCaGNuTmxMa0ZEVEM1Y0lpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjJZWElnWTI5eWNtVmpkQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQlFZWEp6WlM1ZmIySnFaV04wUldGamFDaGhkSFJ5Y3l3Z1puVnVZM1JwYjI0b2RXNTFjMlZrWDNaaGJIVmxMQ0JyWlhrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NFb0wxNWJRUzFhWVMxNlhWc3dMVGxCTFZwaExYcGZYU29rTHlrdWRHVnpkQ2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5eWNtVmpkQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUdsbUlDZ2hZMjl5Y21WamRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCaGNuTmxMa1Z5Y205eUtGQmhjbk5sTGtWeWNtOXlMa2xPVmtGTVNVUmZTMFZaWDA1QlRVVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU2RXNGdkbUZzYVdSaGRHbHZiaUJoWjJGcGJuTjBJR0VnYzJWMElHOW1JR2x1WTI5dGFXNW5JR0YwZEhKcFluVjBaWE1zSUhKbGRIVnlibWx1WnlCZ2RISjFaV0JjYmlBZ0lDQWdLaUJwWmlCaGJHd2dhWE1nZDJWc2JDNGdTV1lnWVNCemNHVmphV1pwWXlCZ1pYSnliM0pnSUdOaGJHeGlZV05ySUdoaGN5QmlaV1Z1SUhCaGMzTmxaQ3hjYmlBZ0lDQWdLaUJqWVd4c0lIUm9ZWFFnYVc1emRHVmhaQ0J2WmlCbWFYSnBibWNnZEdobElHZGxibVZ5WVd3Z1lGd2laWEp5YjNKY0ltQWdaWFpsYm5RdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDNaaGJHbGtZWFJsT2lCbWRXNWpkR2x2YmloaGRIUnljeXdnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWMybHNaVzUwSUh4OElDRjBhR2x6TG5aaGJHbGtZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZWFIwY25NZ1BTQmZMbVY0ZEdWdVpDaDdmU3dnZEdocGN5NWhkSFJ5YVdKMWRHVnpMQ0JoZEhSeWN5azdYRzRnSUNBZ0lDQjJZWElnWlhKeWIzSWdQU0IwYUdsekxuWmhiR2xrWVhSbEtHRjBkSEp6TENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUdsbUlDZ2haWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3lBbUppQnZjSFJwYjI1ekxtVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdVpYSnliM0lvZEdocGN5d2daWEp5YjNJc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwY21sbloyVnlLQ2RsY25KdmNpY3NJSFJvYVhNc0lHVnljbTl5TENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnUVVOTUlHWnZjaUIwYUdseklHOWlhbVZqZEM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VHRnljMlV1UVVOTWZTQkJiaUJwYm5OMFlXNWpaU0J2WmlCUVlYSnpaUzVCUTB3dVhHNGdJQ0FnSUNvZ1FITmxaU0JRWVhKelpTNVBZbXBsWTNRaloyVjBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBRVU5NT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZENoY0lrRkRURndpS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ1FVTk1JSFJ2SUdKbElIVnpaV1FnWm05eUlIUm9hWE1nYjJKcVpXTjBMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVR0Z5YzJVdVFVTk1mU0JoWTJ3Z1FXNGdhVzV6ZEdGdVkyVWdiMllnVUdGeWMyVXVRVU5NTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJRTl3ZEdsdmJtRnNJRUpoWTJ0aWIyNWxMV3hwYTJVZ2IzQjBhVzl1Y3lCdlltcGxZM1FnZEc4Z1ltVmNiaUFnSUNBZ0tpQWdJQ0FnY0dGemMyVmtJR2x1SUhSdklITmxkQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmU0JYYUdWMGFHVnlJSFJvWlNCelpYUWdjR0Z6YzJWa0lIWmhiR2xrWVhScGIyNHVYRzRnSUNBZ0lDb2dRSE5sWlNCUVlYSnpaUzVQWW1wbFkzUWpjMlYwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwUVVOTU9pQm1kVzVqZEdsdmJpaGhZMndzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkQ2hjSWtGRFRGd2lMQ0JoWTJ3c0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUgxY2JseHVJQ0I5S1R0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ1lYQndjbTl3Y21saGRHVWdjM1ZpWTJ4aGMzTWdabTl5SUcxaGEybHVaeUJ1WlhjZ2FXNXpkR0Z1WTJWeklHOW1JSFJvWlNCbmFYWmxibHh1SUNBZ0tpQmpiR0Z6YzA1aGJXVWdjM1J5YVc1bkxseHVJQ0FnS2k5Y2JpQWdVR0Z5YzJVdVQySnFaV04wTGw5blpYUlRkV0pqYkdGemN5QTlJR1oxYm1OMGFXOXVLR05zWVhOelRtRnRaU2tnZTF4dUlDQWdJR2xtSUNnaFh5NXBjMU4wY21sdVp5aGpiR0Z6YzA1aGJXVXBLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QmNJbEJoY25ObExrOWlhbVZqZEM1ZloyVjBVM1ZpWTJ4aGMzTWdjbVZ4ZFdseVpYTWdZU0J6ZEhKcGJtY2dZWEpuZFcxbGJuUXVYQ0k3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJQWW1wbFkzUkRiR0Z6Y3lBOUlGQmhjbk5sTGs5aWFtVmpkQzVmWTJ4aGMzTk5ZWEJiWTJ4aGMzTk9ZVzFsWFR0Y2JpQWdJQ0JwWmlBb0lVOWlhbVZqZEVOc1lYTnpLU0I3WEc0Z0lDQWdJQ0JQWW1wbFkzUkRiR0Z6Y3lBOUlGQmhjbk5sTGs5aWFtVmpkQzVsZUhSbGJtUW9ZMnhoYzNOT1lXMWxLVHRjYmlBZ0lDQWdJRkJoY25ObExrOWlhbVZqZEM1ZlkyeGhjM05OWVhCYlkyeGhjM05PWVcxbFhTQTlJRTlpYW1WamRFTnNZWE56TzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wUTJ4aGMzTTdYRzRnSUgwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaWE1nWVc0Z2FXNXpkR0Z1WTJVZ2IyWWdZU0J6ZFdKamJHRnpjeUJ2WmlCUVlYSnpaUzVQWW1wbFkzUWdabTl5SUhSb1pTQm5hWFpsYmlCamJHRnpjMjVoYldVdVhHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1UFltcGxZM1F1WDJOeVpXRjBaU0E5SUdaMWJtTjBhVzl1S0dOc1lYTnpUbUZ0WlN3Z1lYUjBjbWxpZFhSbGN5d2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lIWmhjaUJQWW1wbFkzUkRiR0Z6Y3lBOUlGQmhjbk5sTGs5aWFtVmpkQzVmWjJWMFUzVmlZMnhoYzNNb1kyeGhjM05PWVcxbEtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFOWlhbVZqZEVOc1lYTnpLR0YwZEhKcFluVjBaWE1zSUc5d2RHbHZibk1wTzF4dUlDQjlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklHRWdiR2x6ZENCdlppQnZZbXBsWTNRZ2FXUnpJR2RwZG1WdUlHRWdiR2x6ZENCdlppQnZZbXBsWTNSekxseHVJQ0FnS2k5Y2JpQWdVR0Z5YzJVdVQySnFaV04wTGw5MGIwOWlhbVZqZEVsa1FYSnlZWGtnUFNCbWRXNWpkR2x2Ymloc2FYTjBMQ0J2YldsMFQySnFaV04wYzFkcGRHaEVZWFJoS1NCN1hHNGdJQ0FnYVdZZ0tHeHBjM1F1YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1VUhKdmJXbHpaUzVoY3loc2FYTjBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnWlhKeWIzSTdYRzRnSUNBZ2RtRnlJR05zWVhOelRtRnRaU0E5SUd4cGMzUmJNRjB1WTJ4aGMzTk9ZVzFsTzF4dUlDQWdJSFpoY2lCdlltcGxZM1JKWkhNZ1BTQmJYVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hwYzNRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFpoY2lCdlltcGxZM1FnUFNCc2FYTjBXMmxkTzF4dUlDQWdJQ0FnYVdZZ0tHTnNZWE56VG1GdFpTQWhQVDBnYjJKcVpXTjBMbU5zWVhOelRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCbGNuSnZjaUE5SUc1bGR5QlFZWEp6WlM1RmNuSnZjaWhRWVhKelpTNUZjbkp2Y2k1SlRsWkJURWxFWDBOTVFWTlRYMDVCVFVVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVFXeHNJRzlpYW1WamRITWdjMmh2ZFd4a0lHSmxJRzltSUhSb1pTQnpZVzFsSUdOc1lYTnpYQ0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVVSEp2YldselpTNWxjbkp2Y2lobGNuSnZjaWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGdlltcGxZM1F1YVdRcElIdGNiaUFnSUNBZ0lDQWdaWEp5YjNJZ1BTQnVaWGNnVUdGeWMyVXVSWEp5YjNJb1VHRnljMlV1UlhKeWIzSXVUVWxUVTBsT1IxOVBRa3BGUTFSZlNVUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lRV3hzSUc5aWFtVmpkSE1nYlhWemRDQm9ZWFpsSUdGdUlFbEVYQ0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVVSEp2YldselpTNWxjbkp2Y2lobGNuSnZjaWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c5dGFYUlBZbXBsWTNSelYybDBhRVJoZEdFZ0ppWWdiMkpxWldOMExsOW9ZWE5FWVhSaEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdiMkpxWldOMFNXUnpMbkIxYzJnb2IySnFaV04wTG1sa0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnVUdGeWMyVXVVSEp2YldselpTNWhjeWh2WW1wbFkzUkpaSE1wTzF4dUlDQjlPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZjR1JoZEdWeklHRWdiR2x6ZENCdlppQnZZbXBsWTNSeklIZHBkR2dnWm1WMFkyaGxaQ0J5WlhOMWJIUnpMbHh1SUNBZ0tpOWNiaUFnVUdGeWMyVXVUMkpxWldOMExsOTFjR1JoZEdWWGFYUm9SbVYwWTJobFpGSmxjM1ZzZEhNZ1BTQm1kVzVqZEdsdmJpaHNhWE4wTENCbVpYUmphR1ZrTENCbWIzSmpaVVpsZEdOb0tTQjdYRzRnSUNBZ2RtRnlJR1psZEdOb1pXUlBZbXBsWTNSelFubEpaQ0E5SUh0OU8xeHVJQ0FnSUZCaGNuTmxMbDloY25KaGVVVmhZMmdvWm1WMFkyaGxaQ3dnWm5WdVkzUnBiMjRvYjJKcVpXTjBMQ0JwS1NCN1hHNGdJQ0FnSUNCbVpYUmphR1ZrVDJKcVpXTjBjMEo1U1dSYmIySnFaV04wTG1sa1hTQTlJRzlpYW1WamREdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR2x6ZEM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUc5aWFtVmpkQ0E5SUd4cGMzUmJhVjA3WEc0Z0lDQWdJQ0IyWVhJZ1ptVjBZMmhsWkU5aWFtVmpkQ0E5SUdabGRHTm9aV1JQWW1wbFkzUnpRbmxKWkZ0dlltcGxZM1F1YVdSZE8xeHVJQ0FnSUNBZ2FXWWdLQ0ZtWlhSamFHVmtUMkpxWldOMElDWW1JR1p2Y21ObFJtVjBZMmdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z5Y205eUlEMGdibVYzSUZCaGNuTmxMa1Z5Y205eUtGQmhjbk5sTGtWeWNtOXlMazlDU2tWRFZGOU9UMVJmUms5VlRrUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lRV3hzSUc5aWFtVmpkSE1nYlhWemRDQmxlR2x6ZENCdmJpQjBhR1VnYzJWeWRtVnlYQ0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVVSEp2YldselpTNWxjbkp2Y2lobGNuSnZjaWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUc5aWFtVmpkQzVmYldWeVoyVkdjbTl0VDJKcVpXTjBLR1psZEdOb1pXUlBZbXBsWTNRcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJRWVhKelpTNVFjbTl0YVhObExtRnpLR3hwYzNRcE8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJHWlhSamFHVnpJSFJvWlNCdlltcGxZM1J6SUdkcGRtVnVJR2x1SUd4cGMzUXVJQ0JVYUdVZ1ptOXlZMlZHWlhSamFDQnZjSFJwYjI0Z2QybHNiQ0JtWlhSamFDQmhiR3hjYmlBZ0lDb2diMkpxWldOMGN5QnBaaUIwY25WbElHRnVaQ0JwWjI1dmNtVWdiMkpxWldOMGN5QjNhWFJvSUdSaGRHRWdhV1lnWm1Gc2MyVXVYRzRnSUNBcUwxeHVJQ0JRWVhKelpTNVBZbXBsWTNRdVgyWmxkR05vUVd4c0lEMGdablZ1WTNScGIyNG9iR2x6ZEN3Z1ptOXlZMlZHWlhSamFDa2dlMXh1SUNBZ0lHbG1JQ2hzYVhOMExteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRkJoY25ObExsQnliMjFwYzJVdVlYTW9iR2x6ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHOXRhWFJQWW1wbFkzUnpWMmwwYUVSaGRHRWdQU0FoWm05eVkyVkdaWFJqYUR0Y2JpQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVQySnFaV04wTGw5MGIwOWlhbVZqZEVsa1FYSnlZWGtvWEc0Z0lDQWdJQ0JzYVhOMExGeHVJQ0FnSUNBZ2IyMXBkRTlpYW1WamRITlhhWFJvUkdGMFlWeHVJQ0FnSUNrdWRHaGxiaWhtZFc1amRHbHZiaWh2WW1wbFkzUkpaSE1wSUh0Y2JpQWdJQ0FnSUhaaGNpQmpiR0Z6YzA1aGJXVWdQU0JzYVhOMFd6QmRMbU5zWVhOelRtRnRaVHRjYmlBZ0lDQWdJSFpoY2lCeGRXVnllU0E5SUc1bGR5QlFZWEp6WlM1UmRXVnllU2hqYkdGemMwNWhiV1VwTzF4dUlDQWdJQ0FnY1hWbGNua3VZMjl1ZEdGcGJtVmtTVzRvWENKdlltcGxZM1JKWkZ3aUxDQnZZbXBsWTNSSlpITXBPMXh1SUNBZ0lDQWdjWFZsY25rdWJHbHRhWFFnUFNCdlltcGxZM1JKWkhNdWJHVnVaM1JvTzF4dUlDQWdJQ0FnY21WMGRYSnVJSEYxWlhKNUxtWnBibVFvS1R0Y2JpQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVLSEpsYzNWc2RITXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQlFZWEp6WlM1UFltcGxZM1F1WDNWd1pHRjBaVmRwZEdoR1pYUmphR1ZrVW1WemRXeDBjeWhjYmlBZ0lDQWdJQ0FnYkdsemRDeGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MGN5eGNiaUFnSUNBZ0lDQWdabTl5WTJWR1pYUmphRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlRaWFFnZFhBZ1lTQnRZWEFnYjJZZ1kyeGhjM05PWVcxbElIUnZJR05zWVhOeklITnZJSFJvWVhRZ2QyVWdZMkZ1SUdOeVpXRjBaU0J1WlhjZ2FXNXpkR0Z1WTJWeklHOW1YRzRnSUM4dklGQmhjbk5sSUU5aWFtVmpkSE1nWm5KdmJTQktVMDlPSUdGMWRHOXRZWFJwWTJGc2JIa3VYRzRnSUZCaGNuTmxMazlpYW1WamRDNWZZMnhoYzNOTllYQWdQU0I3ZlR0Y2JseHVJQ0JRWVhKelpTNVBZbXBsWTNRdVgyVjRkR1Z1WkNBOUlGQmhjbk5sTGw5bGVIUmxibVE3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpYTWdZU0J1WlhjZ2MzVmlZMnhoYzNNZ2IyWWdVR0Z5YzJVdVQySnFaV04wSUdadmNpQjBhR1VnWjJsMlpXNGdVR0Z5YzJVZ1kyeGhjM01nYm1GdFpTNWNiaUFnSUNwY2JpQWdJQ29nUEhBK1JYWmxjbmtnWlhoMFpXNXphVzl1SUc5bUlHRWdVR0Z5YzJVZ1kyeGhjM01nZDJsc2JDQnBibWhsY21sMElHWnliMjBnZEdobElHMXZjM1FnY21WalpXNTBYRzRnSUNBcUlIQnlaWFpwYjNWeklHVjRkR1Z1YzJsdmJpQnZaaUIwYUdGMElHTnNZWE56TGlCWGFHVnVJR0VnVUdGeWMyVXVUMkpxWldOMElHbHpJR0YxZEc5dFlYUnBZMkZzYkhsY2JpQWdJQ29nWTNKbFlYUmxaQ0JpZVNCd1lYSnphVzVuSUVwVFQwNHNJR2wwSUhkcGJHd2dkWE5sSUhSb1pTQnRiM04wSUhKbFkyVnVkQ0JsZUhSbGJuTnBiMjRnYjJZZ2RHaGhkRnh1SUNBZ0tpQmpiR0Z6Y3k0OEwzQStYRzRnSUNBcVhHNGdJQ0FxSUR4d1BsbHZkU0J6YUc5MWJHUWdZMkZzYkNCbGFYUm9aWEk2UEhCeVpUNWNiaUFnSUNvZ0lDQWdJSFpoY2lCTmVVTnNZWE56SUQwZ1VHRnljMlV1VDJKcVpXTjBMbVY0ZEdWdVpDaGNJazE1UTJ4aGMzTmNJaXdnZTF4dUlDQWdLaUFnSUNBZ0lDQWdJRHhwUGtsdWMzUmhibU5sSUcxbGRHaHZaSE04TDJrK0xGeHVJQ0FnS2lBZ0lDQWdJQ0FnSUdsdWFYUnBZV3hwZW1VNklHWjFibU4wYVc5dUtHRjBkSEp6TENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzI5dFpVbHVjM1JoYm1ObFVISnZjR1Z5ZEhrZ1BTQmJYU3hjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnUEdrK1QzUm9aWElnYVc1emRHRnVZMlVnY0hKdmNHVnlkR2xsY3p3dmFUNWNiaUFnSUNvZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FxSUNBZ0lDQjlMQ0I3WEc0Z0lDQXFJQ0FnSUNBZ0lDQWdQR2srUTJ4aGMzTWdjSEp2Y0dWeWRHbGxjend2YVQ1Y2JpQWdJQ29nSUNBZ0lIMHBPend2Y0hKbFBseHVJQ0FnS2lCdmNpd2dabTl5SUVKaFkydGliMjVsSUdOdmJYQmhkR2xpYVd4cGRIazZQSEJ5WlQ1Y2JpQWdJQ29nSUNBZ0lIWmhjaUJOZVVOc1lYTnpJRDBnVUdGeWMyVXVUMkpxWldOMExtVjRkR1Z1WkNoN1hHNGdJQ0FxSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsT2lCY0lrMTVRMnhoYzNOY0lpeGNiaUFnSUNvZ0lDQWdJQ0FnSUNBOGFUNUpibk4wWVc1alpTQnRaWFJvYjJSelBDOXBQaXhjYmlBZ0lDb2dJQ0FnSUNBZ0lDQnBibWwwYVdGc2FYcGxPaUJtZFc1amRHbHZiaWhoZEhSeWN5d2diM0IwYVc5dWN5a2dlMXh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTnZiV1ZKYm5OMFlXNWpaVkJ5YjNCbGNuUjVJRDBnVzEwc1hHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lEeHBQazkwYUdWeUlHbHVjM1JoYm1ObElIQnliM0JsY25ScFpYTThMMmsrWEc0Z0lDQXFJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0tpQWdJQ0FnZlN3Z2UxeHVJQ0FnS2lBZ0lDQWdJQ0FnSUR4cFBrTnNZWE56SUhCeWIzQmxjblJwWlhNOEwyaytYRzRnSUNBcUlDQWdJQ0I5S1RzOEwzQnlaVDQ4TDNBK1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQmpiR0Z6YzA1aGJXVWdWR2hsSUc1aGJXVWdiMllnZEdobElGQmhjbk5sSUdOc1lYTnpJR0poWTJ0cGJtY2dkR2hwY3lCdGIyUmxiQzVjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIQnliM1J2VUhKdmNITWdTVzV6ZEdGdVkyVWdjSEp2Y0dWeWRHbGxjeUIwYnlCaFpHUWdkRzhnYVc1emRHRnVZMlZ6SUc5bUlIUm9aVnh1SUNBZ0tpQWdJQ0FnWTJ4aGMzTWdjbVYwZFhKdVpXUWdabkp2YlNCMGFHbHpJRzFsZEdodlpDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdOc1lYTnpVSEp2Y0hNZ1EyeGhjM01nY0hKdmNHVnlkR2xsY3lCMGJ5QmhaR1FnZEdobElHTnNZWE56SUhKbGRIVnlibVZrSUdaeWIyMWNiaUFnSUNvZ0lDQWdJSFJvYVhNZ2JXVjBhRzlrTGx4dUlDQWdLaUJBY21WMGRYSnVJSHREYkdGemMzMGdRU0J1WlhjZ2MzVmlZMnhoYzNNZ2IyWWdVR0Z5YzJVdVQySnFaV04wTGx4dUlDQWdLaTljYmlBZ1VHRnljMlV1VDJKcVpXTjBMbVY0ZEdWdVpDQTlJR1oxYm1OMGFXOXVLR05zWVhOelRtRnRaU3dnY0hKdmRHOVFjbTl3Y3l3Z1kyeGhjM05RY205d2N5a2dlMXh1SUNBZ0lDOHZJRWhoYm1Sc1pTQjBhR1VnWTJGelpTQjNhWFJvSUc5dWJIa2dkSGR2SUdGeVozTXVYRzRnSUNBZ2FXWWdLQ0ZmTG1selUzUnlhVzVuS0dOc1lYTnpUbUZ0WlNrcElIdGNiaUFnSUNBZ0lHbG1JQ2hqYkdGemMwNWhiV1VnSmlZZ1h5NW9ZWE1vWTJ4aGMzTk9ZVzFsTENCY0ltTnNZWE56VG1GdFpWd2lLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVUMkpxWldOMExtVjRkR1Z1WkNoamJHRnpjMDVoYldVdVkyeGhjM05PWVcxbExDQmpiR0Z6YzA1aGJXVXNJSEJ5YjNSdlVISnZjSE1wTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSlFZWEp6WlM1UFltcGxZM1F1WlhoMFpXNWtKM01nWm1seWMzUWdZWEpuZFcxbGJuUWdjMmh2ZFd4a0lHSmxJSFJvWlNCamJHRnpjMDVoYldVdVhDSXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRWxtSUhOdmJXVnZibVVnZEhKcFpYTWdkRzhnYzNWaVkyeGhjM01nWENKVmMyVnlYQ0lzSUdOdlpYSmpaU0JwZENCMGJ5QjBhR1VnY21sbmFIUWdkSGx3WlM1Y2JpQWdJQ0JwWmlBb1kyeGhjM05PWVcxbElEMDlQU0JjSWxWelpYSmNJaUFtSmlCUVlYSnpaUzVWYzJWeUxsOXdaWEptYjNKdFZYTmxjbEpsZDNKcGRHVXBJSHRjYmlBZ0lDQWdJR05zWVhOelRtRnRaU0E5SUZ3aVgxVnpaWEpjSWp0Y2JpQWdJQ0I5WEc0Z0lDQWdjSEp2ZEc5UWNtOXdjeUE5SUhCeWIzUnZVSEp2Y0hNZ2ZId2dlMzA3WEc0Z0lDQWdjSEp2ZEc5UWNtOXdjeTVqYkdGemMwNWhiV1VnUFNCamJHRnpjMDVoYldVN1hHNWNiaUFnSUNCMllYSWdUbVYzUTJ4aGMzTlBZbXBsWTNRZ1BTQnVkV3hzTzF4dUlDQWdJR2xtSUNoZkxtaGhjeWhRWVhKelpTNVBZbXBsWTNRdVgyTnNZWE56VFdGd0xDQmpiR0Z6YzA1aGJXVXBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1QyeGtRMnhoYzNOUFltcGxZM1FnUFNCUVlYSnpaUzVQWW1wbFkzUXVYMk5zWVhOelRXRndXMk5zWVhOelRtRnRaVjA3WEc0Z0lDQWdJQ0F2THlCVWFHbHpJRzVsZHlCemRXSmpiR0Z6Y3lCb1lYTWdZbVZsYmlCMGIyeGtJSFJ2SUdWNGRHVnVaQ0JpYjNSb0lHWnliMjBnWENKMGFHbHpYQ0lnWVc1a0lHWnliMjFjYmlBZ0lDQWdJQzh2SUU5c1pFTnNZWE56VDJKcVpXTjBMaUJVYUdseklHbHpJRzExYkhScGNHeGxJR2x1YUdWeWFYUmhibU5sTENCM2FHbGphQ0JwYzI0bmRDQnpkWEJ3YjNKMFpXUXVYRzRnSUNBZ0lDQXZMeUJHYjNJZ2JtOTNMQ0JzWlhRbmN5QnFkWE4wSUhCcFkyc2diMjVsTGx4dUlDQWdJQ0FnVG1WM1EyeGhjM05QWW1wbFkzUWdQU0JQYkdSRGJHRnpjMDlpYW1WamRDNWZaWGgwWlc1a0tIQnliM1J2VUhKdmNITXNJR05zWVhOelVISnZjSE1wTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQk9aWGREYkdGemMwOWlhbVZqZENBOUlIUm9hWE11WDJWNGRHVnVaQ2h3Y205MGIxQnliM0J6TENCamJHRnpjMUJ5YjNCektUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z1JYaDBaVzVrYVc1bklHRWdjM1ZpWTJ4aGMzTWdjMmh2ZFd4a0lISmxkWE5sSUhSb1pTQmpiR0Z6YzI1aGJXVWdZWFYwYjIxaGRHbGpZV3hzZVM1Y2JpQWdJQ0JPWlhkRGJHRnpjMDlpYW1WamRDNWxlSFJsYm1RZ1BTQm1kVzVqZEdsdmJpaGhjbWN3S1NCN1hHNGdJQ0FnSUNCcFppQW9YeTVwYzFOMGNtbHVaeWhoY21jd0tTQjhmQ0FvWVhKbk1DQW1KaUJmTG1oaGN5aGhjbWN3TENCY0ltTnNZWE56VG1GdFpWd2lLU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMazlpYW1WamRDNWxlSFJsYm1RdVlYQndiSGtvVG1WM1EyeGhjM05QWW1wbFkzUXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IyWVhJZ2JtVjNRWEpuZFcxbGJuUnpJRDBnVzJOc1lYTnpUbUZ0WlYwdVkyOXVZMkYwS0ZCaGNuTmxMbDh1ZEc5QmNuSmhlU2hoY21kMWJXVnVkSE1wS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJRWVhKelpTNVBZbXBsWTNRdVpYaDBaVzVrTG1Gd2NHeDVLRTVsZDBOc1lYTnpUMkpxWldOMExDQnVaWGRCY21kMWJXVnVkSE1wTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2NtVm1aWEpsYm1ObElIUnZJR0VnYzNWaVkyeGhjM01nYjJZZ1VHRnljMlV1VDJKcVpXTjBJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHbGtMaUJVYUdselhHNGdJQ0FnSUNvZ1pHOWxjeUJ1YjNRZ1pYaHBjM1FnYjI0Z1VHRnljMlV1VDJKcVpXTjBMQ0J2Ym14NUlHOXVJSE4xWW1Oc1lYTnpaWE11WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUE4Y0Q1QklITm9iM0owWTNWMElHWnZjam9nUEhCeVpUNWNiaUFnSUNBZ0tpQWdkbUZ5SUVadmJ5QTlJRkJoY25ObExrOWlhbVZqZEM1bGVIUmxibVFvWENKR2IyOWNJaWs3WEc0Z0lDQWdJQ29nSUhaaGNpQndiMmx1ZEdWeVZHOUdiMjhnUFNCdVpYY2dSbTl2S0NrN1hHNGdJQ0FnSUNvZ0lIQnZhVzUwWlhKVWIwWnZieTVwWkNBOUlGd2liWGxQWW1wbFkzUkpaRndpTzF4dUlDQWdJQ0FxSUR3dmNISmxQbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRRzVoYldVZ1kzSmxZWFJsVjJsMGFHOTFkRVJoZEdGY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYVdRZ1ZHaGxJRWxFSUc5bUlIUm9aU0J2WW1wbFkzUWdkRzhnWTNKbFlYUmxJR0VnY21WbVpYSmxibU5sSUhSdkxseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGs5aWFtVmpkSDBnUVNCUVlYSnpaUzVQWW1wbFkzUWdjbVZtWlhKbGJtTmxMbHh1SUNBZ0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0lDQXFJRUJ0WlcxaVpYSlBaaUJRWVhKelpTNVBZbXBsWTNSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JPWlhkRGJHRnpjMDlpYW1WamRDNWpjbVZoZEdWWGFYUm9iM1YwUkdGMFlTQTlJR1oxYm1OMGFXOXVLR2xrS1NCN1hHNGdJQ0FnSUNCMllYSWdiMkpxSUQwZ2JtVjNJRTVsZDBOc1lYTnpUMkpxWldOMEtDazdYRzRnSUNBZ0lDQnZZbW91YVdRZ1BTQnBaRHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnZZbW83WEc0Z0lDQWdmVHRjYmx4dUlDQWdJRkJoY25ObExrOWlhbVZqZEM1ZlkyeGhjM05OWVhCYlkyeGhjM05PWVcxbFhTQTlJRTVsZDBOc1lYTnpUMkpxWldOME8xeHVJQ0FnSUhKbGRIVnliaUJPWlhkRGJHRnpjMDlpYW1WamREdGNiaUFnZlR0Y2JseHVJQ0JRWVhKelpTNVBZbXBsWTNRdVgyWnBibVJWYm5OaGRtVmtRMmhwYkdSeVpXNGdQU0JtZFc1amRHbHZiaWh2WW1wbFkzUXNJR05vYVd4a2NtVnVMQ0JtYVd4bGN5a2dlMXh1SUNBZ0lGQmhjbk5sTGw5MGNtRjJaWEp6WlNodlltcGxZM1FzSUdaMWJtTjBhVzl1S0c5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tHOWlhbVZqZENCcGJuTjBZVzVqWlc5bUlGQmhjbk5sTGs5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNCdlltcGxZM1F1WDNKbFpuSmxjMmhEWVdOb1pTZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2IySnFaV04wTG1ScGNuUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR2xzWkhKbGJpNXdkWE5vS0c5aWFtVmpkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9iMkpxWldOMElHbHVjM1JoYm1ObGIyWWdVR0Z5YzJVdVJtbHNaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JVzlpYW1WamRDNTFjbXdvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1pwYkdWekxuQjFjMmdvYjJKcVpXTjBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMDdYRzVjYmlBZ1VHRnljMlV1VDJKcVpXTjBMbDlqWVc1Q1pWTmxjbWxoYkdsNlpXUkJjMVpoYkhWbElEMGdablZ1WTNScGIyNG9iMkpxWldOMEtTQjdYRzRnSUNBZ0x5OGdWRTlFVHlocmJHbHRkQ2s2SUZkbElITm9iM1ZzWkNCeVpYZHlhWFJsSUY5MGNtRjJaWEp6WlNCemJ5QjBhR0YwSUdsMElHTmhiaUJpWlNCMWMyVmtJR2hsY21VdVhHNGdJQ0FnYVdZZ0tHOWlhbVZqZENCcGJuTjBZVzVqWlc5bUlGQmhjbk5sTGs5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ0VoYjJKcVpXTjBMbWxrTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYjJKcVpXTjBJR2x1YzNSaGJtTmxiMllnVUdGeWMyVXVSbWxzWlNrZ2UxeHVJQ0FnSUNBZ0x5OGdSRzl1SjNRZ2NtVmpkWEp6WlNCcGJtUmxabWx1YVhSbGJIa2dhVzUwYnlCbWFXeGxjeTVjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCallXNUNaVk5sY21saGJHbDZaV1JCYzFaaGJIVmxJRDBnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2hmTG1selFYSnlZWGtvYjJKcVpXTjBLU2tnZTF4dUlDQWdJQ0FnVUdGeWMyVXVYMkZ5Y21GNVJXRmphQ2h2WW1wbFkzUXNJR1oxYm1OMGFXOXVLR05vYVd4a0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaFVHRnljMlV1VDJKcVpXTjBMbDlqWVc1Q1pWTmxjbWxoYkdsNlpXUkJjMVpoYkhWbEtHTm9hV3hrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05oYmtKbFUyVnlhV0ZzYVhwbFpFRnpWbUZzZFdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGZMbWx6VDJKcVpXTjBLRzlpYW1WamRDa3BJSHRjYmlBZ0lDQWdJRkJoY25ObExsOXZZbXBsWTNSRllXTm9LRzlpYW1WamRDd2dablZ1WTNScGIyNG9ZMmhwYkdRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGUVlYSnpaUzVQWW1wbFkzUXVYMk5oYmtKbFUyVnlhV0ZzYVhwbFpFRnpWbUZzZFdVb1kyaHBiR1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMkZ1UW1WVFpYSnBZV3hwZW1Wa1FYTldZV3gxWlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR05oYmtKbFUyVnlhV0ZzYVhwbFpFRnpWbUZzZFdVN1hHNGdJSDA3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZZbXBsWTNRZ1ZHaGxJSEp2YjNRZ2IySnFaV04wTGx4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN6b2dWR2hsSUc5dWJIa2dkbUZzYVdRZ2IzQjBhVzl1SUdseklIVnpaVTFoYzNSbGNrdGxlUzVjYmlBZ0lDb3ZYRzRnSUZCaGNuTmxMazlpYW1WamRDNWZaR1ZsY0ZOaGRtVkJjM2x1WXlBOUlHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUhaaGNpQjFibk5oZG1Wa1EyaHBiR1J5Wlc0Z1BTQmJYVHRjYmlBZ0lDQjJZWElnZFc1ellYWmxaRVpwYkdWeklEMGdXMTA3WEc0Z0lDQWdVR0Z5YzJVdVQySnFaV04wTGw5bWFXNWtWVzV6WVhabFpFTm9hV3hrY21WdUtHOWlhbVZqZEN3Z2RXNXpZWFpsWkVOb2FXeGtjbVZ1TENCMWJuTmhkbVZrUm1sc1pYTXBPMXh1WEc0Z0lDQWdkbUZ5SUhCeWIyMXBjMlVnUFNCUVlYSnpaUzVRY205dGFYTmxMbUZ6S0NrN1hHNGdJQ0FnWHk1bFlXTm9LSFZ1YzJGMlpXUkdhV3hsY3l3Z1puVnVZM1JwYjI0b1ptbHNaU2tnZTF4dUlDQWdJQ0FnY0hKdmJXbHpaU0E5SUhCeWIyMXBjMlV1ZEdobGJpaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1pwYkdVdWMyRjJaU2h2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnZG1GeUlHOWlhbVZqZEhNZ1BTQmZMblZ1YVhFb2RXNXpZWFpsWkVOb2FXeGtjbVZ1S1R0Y2JpQWdJQ0IyWVhJZ2NtVnRZV2x1YVc1bklEMGdYeTUxYm1seEtHOWlhbVZqZEhNcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyMXBjMlV1ZEdobGJpaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQlFZWEp6WlM1UWNtOXRhWE5sTGw5amIyNTBhVzUxWlZkb2FXeGxLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WdFlXbHVhVzVuTG14bGJtZDBhQ0ErSURBN1hHNGdJQ0FnSUNCOUxDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkhZWFJvWlhJZ2RYQWdZV3hzSUhSb1pTQnZZbXBsWTNSeklIUm9ZWFFnWTJGdUlHSmxJSE5oZG1Wa0lHbHVJSFJvYVhNZ1ltRjBZMmd1WEc0Z0lDQWdJQ0FnSUhaaGNpQmlZWFJqYUNBOUlGdGRPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JtVjNVbVZ0WVdsdWFXNW5JRDBnVzEwN1hHNGdJQ0FnSUNBZ0lGQmhjbk5sTGw5aGNuSmhlVVZoWTJnb2NtVnRZV2x1YVc1bkxDQm1kVzVqZEdsdmJpaHZZbXBsWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCTWFXMXBkQ0JpWVhSamFHVnpJSFJ2SURJd0lHOWlhbVZqZEhNdVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dKaGRHTm9MbXhsYm1kMGFDQStJREl3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhkU1pXMWhhVzVwYm1jdWNIVnphQ2h2WW1wbFkzUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHZZbXBsWTNRdVgyTmhia0psVTJWeWFXRnNhWHBsWkNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaVlYUmphQzV3ZFhOb0tHOWlhbVZqZENrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGQxSmxiV0ZwYm1sdVp5NXdkWE5vS0c5aWFtVmpkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WdFlXbHVhVzVuSUQwZ2JtVjNVbVZ0WVdsdWFXNW5PMXh1WEc0Z0lDQWdJQ0FnSUM4dklFbG1JSGRsSUdOaGJpZDBJSE5oZG1VZ1lXNTVJRzlpYW1WamRITXNJSFJvWlhKbElHMTFjM1FnWW1VZ1lTQmphWEpqZFd4aGNpQnlaV1psY21WdVkyVXVYRzRnSUNBZ0lDQWdJR2xtSUNoaVlYUmphQzVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVVISnZiV2x6WlM1bGNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJRWVhKelpTNUZjbkp2Y2loUVlYSnpaUzVGY25KdmNpNVBWRWhGVWw5RFFWVlRSU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0lsUnlhV1ZrSUhSdklITmhkbVVnWVNCaVlYUmphQ0IzYVhSb0lHRWdZM2xqYkdVdVhDSXBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRkpsYzJWeWRtVWdZU0J6Y0c5MElHbHVJR1YyWlhKNUlHOWlhbVZqZENkeklITmhkbVVnY1hWbGRXVXVYRzRnSUNBZ0lDQWdJSFpoY2lCeVpXRmtlVlJ2VTNSaGNuUWdQU0JRWVhKelpTNVFjbTl0YVhObExuZG9aVzRvWHk1dFlYQW9ZbUYwWTJnc0lHWjFibU4wYVc5dUtHOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZZbXBsWTNRdVgyRnNiRkJ5WlhacGIzVnpVMkYyWlhNZ2ZId2dVR0Z5YzJVdVVISnZiV2x6WlM1aGN5Z3BPMXh1SUNBZ0lDQWdJQ0I5S1NrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJpWVhSamFFWnBibWx6YUdWa0lEMGdibVYzSUZCaGNuTmxMbEJ5YjIxcGMyVW9LVHRjYmlBZ0lDQWdJQ0FnVUdGeWMyVXVYMkZ5Y21GNVJXRmphQ2hpWVhSamFDd2dablZ1WTNScGIyNG9iMkpxWldOMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBMbDloYkd4UWNtVjJhVzkxYzFOaGRtVnpJRDBnWW1GMFkyaEdhVzVwYzJobFpEdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdVMkYyWlNCaElITnBibWRzWlNCaVlYUmphQ3dnZDJobGRHaGxjaUJ3Y21WMmFXOTFjeUJ6WVhabGN5QnpkV05qWldWa1pXUWdiM0lnWm1GcGJHVmtMbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZoWkhsVWIxTjBZWEowTGw5amIyNTBhVzUxWlZkcGRHZ29ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbDl5WlhGMVpYTjBLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISnZkWFJsT2lCY0ltSmhkR05vWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhSb2IyUTZJRndpVUU5VFZGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RYTmxUV0Z6ZEdWeVMyVjVPaUJ2Y0hScGIyNXpMblZ6WlUxaGMzUmxja3RsZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYzNOcGIyNVViMnRsYmpvZ2IzQjBhVzl1Y3k1elpYTnphVzl1Vkc5clpXNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUnpPaUJmTG0xaGNDaGlZWFJqYUN3Z1puVnVZM1JwYjI0b2IySnFaV04wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR3B6YjI0Z1BTQnZZbXBsWTNRdVgyZGxkRk5oZG1WS1UwOU9LQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMWxkR2h2WkNBOUlGd2lVRTlUVkZ3aU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCaGRHZ2dQU0JjSWk4eEwyTnNZWE56WlhNdlhDSWdLeUJ2WW1wbFkzUXVZMnhoYzNOT1lXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodlltcGxZM1F1YVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZEdnZ1BTQndZWFJvSUNzZ1hDSXZYQ0lnS3lCdlltcGxZM1F1YVdRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWFJvYjJRZ1BTQmNJbEJWVkZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlpYW1WamRDNWZjM1JoY25SVFlYWmxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVjBhRzlrT2lCdFpYUm9iMlFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9PaUJ3WVhSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVRvZ2FuTnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlNrdWRHaGxiaWhtZFc1amRHbHZiaWh5WlhOd2IyNXpaU3dnYzNSaGRIVnpMQ0I0YUhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxjbkp2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJRkJoY25ObExsOWhjbkpoZVVWaFkyZ29ZbUYwWTJnc0lHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z2FTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WemNHOXVjMlZiYVYwdWMzVmpZMlZ6Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOWlhbVZqZEM1ZlptbHVhWE5vVTJGMlpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlpYW1WamRDNXdZWEp6WlNoeVpYTndiMjV6WlZ0cFhTNXpkV05qWlhOekxDQnpkR0YwZFhNc0lIaG9jaWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eUlEMGdaWEp5YjNJZ2ZId2djbVZ6Y0c5dWMyVmJhVjB1WlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMkpxWldOMExsOWpZVzVqWld4VFlYWmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUVlYSnpaUzVRY205dGFYTmxMbVZ5Y205eUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJRWVhKelpTNUZjbkp2Y2lobGNuSnZjaTVqYjJSbExDQmxjbkp2Y2k1bGNuSnZjaWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmloeVpYTjFiSFJ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpWVhSamFFWnBibWx6YUdWa0xuSmxjMjlzZG1Vb2NtVnpkV3gwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4MGN6dGNiaUFnSUNBZ0lDQWdJQ0I5TENCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZbUYwWTJoR2FXNXBjMmhsWkM1eVpXcGxZM1FvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbEJ5YjIxcGMyVXVaWEp5YjNJb1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYjJKcVpXTjBPMXh1SUNBZ0lIMHBPMXh1SUNCOU8xeHVYRzU5S0hSb2FYTXBLVHRjYmx4dUtHWjFibU4wYVc5dUtISnZiM1FwSUh0Y2JpQWdjbTl2ZEM1UVlYSnpaU0E5SUhKdmIzUXVVR0Z5YzJVZ2ZId2dlMzA3WEc0Z0lIWmhjaUJRWVhKelpTQTlJSEp2YjNRdVVHRnljMlU3WEc0Z0lIWmhjaUJmSUQwZ1VHRnljMlV1WHp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1Wd2NtVnpaVzUwY3lCaElGSnZiR1VnYjI0Z2RHaGxJRkJoY25ObElITmxjblpsY2k0Z1VtOXNaWE1nY21Wd2NtVnpaVzUwSUdkeWIzVndhVzVuY3lCdlpseHVJQ0FnS2lCVmMyVnljeUJtYjNJZ2RHaGxJSEIxY25CdmMyVnpJRzltSUdkeVlXNTBhVzVuSUhCbGNtMXBjM05wYjI1eklDaGxMbWN1SUhOd1pXTnBabmxwYm1jZ1lXNGdRVU5NWEc0Z0lDQXFJR1p2Y2lCaGJpQlBZbXBsWTNRcExpQlNiMnhsY3lCaGNtVWdjM0JsWTJsbWFXVmtJR0o1SUhSb1pXbHlJSE5sZEhNZ2IyWWdZMmhwYkdRZ2RYTmxjbk1nWVc1a1hHNGdJQ0FxSUdOb2FXeGtJSEp2YkdWekxDQmhiR3dnYjJZZ2QyaHBZMmdnWVhKbElHZHlZVzUwWldRZ1lXNTVJSEJsY20xcGMzTnBiMjV6SUhSb1lYUWdkR2hsSUhCaGNtVnVkRnh1SUNBZ0tpQnliMnhsSUdoaGN5NWNiaUFnSUNwY2JpQWdJQ29nUEhBK1VtOXNaWE1nYlhWemRDQm9ZWFpsSUdFZ2JtRnRaU0FvZDJocFkyZ2dZMkZ1Ym05MElHSmxJR05vWVc1blpXUWdZV1owWlhJZ1kzSmxZWFJwYjI0Z2IyWWdkR2hsWEc0Z0lDQXFJSEp2YkdVcExDQmhibVFnYlhWemRDQnpjR1ZqYVdaNUlHRnVJRUZEVEM0OEwzQStYRzRnSUNBcUlFQmpiR0Z6YzF4dUlDQWdLaUJCSUZCaGNuTmxMbEp2YkdVZ2FYTWdZU0JzYjJOaGJDQnlaWEJ5WlhObGJuUmhkR2x2YmlCdlppQmhJSEp2YkdVZ2NHVnljMmx6ZEdWa0lIUnZJSFJvWlNCUVlYSnpaVnh1SUNBZ0tpQmpiRzkxWkM1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGxKdmJHVWdQU0JRWVhKelpTNVBZbXBsWTNRdVpYaDBaVzVrS0Z3aVgxSnZiR1ZjSWl3Z0x5b3FJRUJzWlc1a2N5QlFZWEp6WlM1U2IyeGxMbkJ5YjNSdmRIbHdaU0FxTHlCN1hHNGdJQ0FnTHk4Z1NXNXpkR0Z1WTJVZ1RXVjBhRzlrYzF4dUlDQWdJRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU52Ym5OMGNuVmpkSE1nWVNCdVpYY2dVR0Z5YzJWU2IyeGxJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHNWhiV1VnWVc1a0lFRkRUQzVjYmlBZ0lDQWdLaUJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdibUZ0WlNCVWFHVWdibUZ0WlNCdlppQjBhR1VnVW05c1pTQjBieUJqY21WaGRHVXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFFZWEp6WlM1QlEweDlJR0ZqYkNCVWFHVWdRVU5NSUdadmNpQjBhR2x6SUhKdmJHVXVJRkp2YkdWeklHMTFjM1FnYUdGMlpTQmhiaUJCUTB3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJNklHWjFibU4wYVc5dUtHNWhiV1VzSUdGamJDa2dlMXh1SUNBZ0lDQWdhV1lnS0Y4dWFYTlRkSEpwYm1jb2JtRnRaU2tnSmlZZ0tHRmpiQ0JwYm5OMFlXNWpaVzltSUZCaGNuTmxMa0ZEVENrcElIdGNiaUFnSUNBZ0lDQWdVR0Z5YzJVdVQySnFaV04wTG5CeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hSb2FYTXNJRzUxYkd3c0lHNTFiR3dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEU1aGJXVW9ibUZ0WlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFFVTk1LR0ZqYkNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCUVlYSnpaUzVQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbU52Ym5OMGNuVmpkRzl5TG1OaGJHd29kR2hwY3l3Z2JtRnRaU3dnWVdOc0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRITWdkR2hsSUc1aGJXVWdiMllnZEdobElISnZiR1V1SUNCWmIzVWdZMkZ1SUdGc2RHVnlibUYwYVhabGJIa2dZMkZzYkNCeWIyeGxMbWRsZENoY0ltNWhiV1ZjSWlsY2JpQWdJQ0FnS2lCY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0VGRISnBibWQ5SUhSb1pTQnVZVzFsSUc5bUlIUm9aU0J5YjJ4bExseHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRFNWhiV1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwS0Z3aWJtRnRaVndpS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJRzVoYldVZ1ptOXlJR0VnY205c1pTNGdWR2hwY3lCMllXeDFaU0J0ZFhOMElHSmxJSE5sZENCaVpXWnZjbVVnZEdobElISnZiR1VnYUdGelhHNGdJQ0FnSUNvZ1ltVmxiaUJ6WVhabFpDQjBieUIwYUdVZ2MyVnlkbVZ5TENCaGJtUWdZMkZ1Ym05MElHSmxJSE5sZENCdmJtTmxJSFJvWlNCeWIyeGxJR2hoY3lCaVpXVnVYRzRnSUNBZ0lDb2djMkYyWldRdVhHNGdJQ0FnSUNvZ1hHNGdJQ0FnSUNvZ1BIQStYRzRnSUNBZ0lDb2dJQ0JCSUhKdmJHVW5jeUJ1WVcxbElHTmhiaUJ2Ym14NUlHTnZiblJoYVc0Z1lXeHdhR0Z1ZFcxbGNtbGpJR05vWVhKaFkzUmxjbk1zSUY4c0lDMHNJR0Z1WkZ4dUlDQWdJQ0FxSUNBZ2MzQmhZMlZ6TGx4dUlDQWdJQ0FxSUR3dmNENWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlEeHdQbFJvYVhNZ2FYTWdaWEYxYVhaaGJHVnVkQ0IwYnlCallXeHNhVzVuSUhKdmJHVXVjMlYwS0Z3aWJtRnRaVndpTENCdVlXMWxLVHd2Y0Q1Y2JpQWdJQ0FnS2lCY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYm1GdFpTQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ2NtOXNaUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QlRkR0Z1WkdGeVpDQnZjSFJwYjI1eklHOWlhbVZqZENCM2FYUm9JSE4xWTJObGMzTWdZVzVrSUdWeWNtOXlYRzRnSUNBZ0lDb2dJQ0FnSUdOaGJHeGlZV05yY3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WlhST1lXMWxPaUJtZFc1amRHbHZiaWh1WVcxbExDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhRb1hDSnVZVzFsWENJc0lHNWhiV1VzSUc5d2RHbHZibk1wTzF4dUlDQWdJSDBzWEc0Z0lDQWdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdVR0Z5YzJVdVVtVnNZWFJwYjI0Z1ptOXlJSFJvWlNCUVlYSnpaUzVWYzJWeWN5QjBhR0YwSUdGeVpTQmthWEpsWTNSY2JpQWdJQ0FnS2lCamFHbHNaSEpsYmlCdlppQjBhR2x6SUhKdmJHVXVJRlJvWlhObElIVnpaWEp6SUdGeVpTQm5jbUZ1ZEdWa0lHRnVlU0J3Y21sMmFXeGxaMlZ6SUhSb1lYUWdkR2hwYzF4dUlDQWdJQ0FxSUhKdmJHVWdhR0Z6SUdKbFpXNGdaM0poYm5SbFpDQW9aUzVuTGlCeVpXRmtJRzl5SUhkeWFYUmxJR0ZqWTJWemN5QjBhSEp2ZFdkb0lFRkRUSE1wTGlCWmIzVWdZMkZ1WEc0Z0lDQWdJQ29nWVdSa0lHOXlJSEpsYlc5MlpTQjFjMlZ5Y3lCbWNtOXRJSFJvWlNCeWIyeGxJSFJvY205MVoyZ2dkR2hwY3lCeVpXeGhkR2x2Ymk1Y2JpQWdJQ0FnS2lCY2JpQWdJQ0FnS2lBOGNENVVhR2x6SUdseklHVnhkV2wyWVd4bGJuUWdkRzhnWTJGc2JHbHVaeUJ5YjJ4bExuSmxiR0YwYVc5dUtGd2lkWE5sY25OY0lpazhMM0ErWEc0Z0lDQWdJQ29nWEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVbVZzWVhScGIyNTlJSFJvWlNCeVpXeGhkR2x2YmlCbWIzSWdkR2hsSUhWelpYSnpJR0psYkc5dVoybHVaeUIwYnlCMGFHbHpYRzRnSUNBZ0lDb2dJQ0FnSUhKdmJHVXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBWWE5sY25NNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21Wc1lYUnBiMjRvWENKMWMyVnljMXdpS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ2RHaGxJRkJoY25ObExsSmxiR0YwYVc5dUlHWnZjaUIwYUdVZ1VHRnljMlV1VW05c1pYTWdkR2hoZENCaGNtVWdaR2x5WldOMFhHNGdJQ0FnSUNvZ1kyaHBiR1J5Wlc0Z2IyWWdkR2hwY3lCeWIyeGxMaUJVYUdWelpTQnliMnhsY3ljZ2RYTmxjbk1nWVhKbElHZHlZVzUwWldRZ1lXNTVJSEJ5YVhacGJHVm5aWE1nZEdoaGRGeHVJQ0FnSUNBcUlIUm9hWE1nY205c1pTQm9ZWE1nWW1WbGJpQm5jbUZ1ZEdWa0lDaGxMbWN1SUhKbFlXUWdiM0lnZDNKcGRHVWdZV05qWlhOeklIUm9jbTkxWjJnZ1FVTk1jeWt1SUZsdmRWeHVJQ0FnSUNBcUlHTmhiaUJoWkdRZ2IzSWdjbVZ0YjNabElHTm9hV3hrSUhKdmJHVnpJR1p5YjIwZ2RHaHBjeUJ5YjJ4bElIUm9jbTkxWjJnZ2RHaHBjeUJ5Wld4aGRHbHZiaTVjYmlBZ0lDQWdLaUJjYmlBZ0lDQWdLaUE4Y0Q1VWFHbHpJR2x6SUdWeGRXbDJZV3hsYm5RZ2RHOGdZMkZzYkdsdVp5QnliMnhsTG5KbGJHRjBhVzl1S0Z3aWNtOXNaWE5jSWlrOEwzQStYRzRnSUNBZ0lDb2dYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdVR0Z5YzJVdVVtVnNZWFJwYjI1OUlIUm9aU0J5Wld4aGRHbHZiaUJtYjNJZ2RHaGxJSEp2YkdWeklHSmxiRzl1WjJsdVp5QjBieUIwYUdselhHNGdJQ0FnSUNvZ0lDQWdJSEp2YkdVdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFVtOXNaWE02SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZzWVhScGIyNG9YQ0p5YjJ4bGMxd2lLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lGeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQnBaMjV2Y21WY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IyWVd4cFpHRjBaVG9nWm5WdVkzUnBiMjRvWVhSMGNuTXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJR2xtSUNoY0ltNWhiV1ZjSWlCcGJpQmhkSFJ5Y3lBbUppQmhkSFJ5Y3k1dVlXMWxJQ0U5UFNCMGFHbHpMbWRsZEU1aGJXVW9LU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdibVYzVG1GdFpTQTlJR0YwZEhKekxtNWhiV1U3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1sa0lDWW1JSFJvYVhNdWFXUWdJVDA5SUdGMGRISnpMbTlpYW1WamRFbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdRMmhsWTJzZ2RHOGdjMlZsSUdsbUlIUm9aU0J2WW1wbFkzUkpaQ0JpWldsdVp5QnpaWFFnYldGMFkyaGxjeUIwYUdsekxtbGtMbHh1SUNBZ0lDQWdJQ0FnSUM4dklGUm9hWE1nYUdGd2NHVnVjeUJrZFhKcGJtY2dZU0JtWlhSamFDQXRMU0IwYUdVZ2FXUWdhWE1nYzJWMElHSmxabTl5WlNCallXeHNhVzVuSUdabGRHTm9MbHh1SUNBZ0lDQWdJQ0FnSUM4dklFeGxkQ0IwYUdVZ2JtRnRaU0JpWlNCelpYUWdhVzRnZEdocGN5QmpZWE5sTGx4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVR0Z5YzJVdVJYSnliM0lvVUdGeWMyVXVSWEp5YjNJdVQxUklSVkpmUTBGVlUwVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lRU0J5YjJ4bEozTWdibUZ0WlNCallXNGdiMjVzZVNCaVpTQnpaWFFnWW1WbWIzSmxJR2wwSUdoaGN5QmlaV1Z1SUhOaGRtVmtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVY4dWFYTlRkSEpwYm1jb2JtVjNUbUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCaGNuTmxMa1Z5Y205eUtGQmhjbk5sTGtWeWNtOXlMazlVU0VWU1gwTkJWVk5GTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWtFZ2NtOXNaU2R6SUc1aGJXVWdiWFZ6ZENCaVpTQmhJRk4wY21sdVp5NWNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLQ0VvTDE1Yk1DMDVZUzE2UVMxYVhGd3RYeUJkS3lRdktTNTBaWE4wS0c1bGQwNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRWVhKelpTNUZjbkp2Y2loUVlYSnpaUzVGY25KdmNpNVBWRWhGVWw5RFFWVlRSU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0pCSUhKdmJHVW5jeUJ1WVcxbElHTmhiaUJ2Ym14NUlHTnZiblJoYVc0Z1lXeHdhR0Z1ZFcxbGNtbGpJR05vWVhKaFkzUmxjbk1zSUY4c1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJaUF0TENCaGJtUWdjM0JoWTJWekxsd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tGQmhjbk5sTGs5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMazlpYW1WamRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVXVZMkZzYkNoMGFHbHpMQ0JoZEhSeWN5d2diM0IwYVc5dWN5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibjBvZEdocGN5a3BPMXh1WEc1Y2JpOHFaMnh2WW1Gc0lGODZJR1poYkhObElDb3ZYRzRvWm5WdVkzUnBiMjRvY205dmRDa2dlMXh1SUNCeWIyOTBMbEJoY25ObElEMGdjbTl2ZEM1UVlYSnpaU0I4ZkNCN2ZUdGNiaUFnZG1GeUlGQmhjbk5sSUQwZ2NtOXZkQzVRWVhKelpUdGNiaUFnZG1GeUlGOGdQU0JRWVhKelpTNWZPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdWeklHRWdibVYzSUdsdWMzUmhibU5sSUhkcGRHZ2dkR2hsSUdkcGRtVnVJRzF2WkdWc2N5QmhibVFnYjNCMGFXOXVjeTRnSUZSNWNHbGpZV3hzZVN3Z2VXOTFYRzRnSUNBcUlIZHBiR3dnYm05MElHTmhiR3dnZEdocGN5QnRaWFJvYjJRZ1pHbHlaV04wYkhrc0lHSjFkQ0IzYVd4c0lHbHVjM1JsWVdRZ2JXRnJaU0JoSUhOMVltTnNZWE56SUhWemFXNW5YRzRnSUNBcUlEeGpiMlJsUGxCaGNuTmxMa052Ykd4bFkzUnBiMjR1WlhoMFpXNWtQQzlqYjJSbFBpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdiVzlrWld4eklFRnVJR0Z5Y21GNUlHOW1JR2x1YzNSaGJtTmxjeUJ2WmlBOFkyOWtaVDVRWVhKelpTNVBZbXBsWTNROEwyTnZaR1UrTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lCQmJpQnZjSFJwYjI1aGJDQnZZbXBsWTNRZ2QybDBhQ0JDWVdOclltOXVaUzF6ZEhsc1pTQnZjSFJwYjI1ekxseHVJQ0FnS2lCV1lXeHBaQ0J2Y0hScGIyNXpJR0Z5WlRvOGRXdytYRzRnSUNBcUlDQWdQR3hwUG0xdlpHVnNPaUJVYUdVZ1VHRnljMlV1VDJKcVpXTjBJSE4xWW1Oc1lYTnpJSFJvWVhRZ2RHaHBjeUJqYjJ4c1pXTjBhVzl1SUdOdmJuUmhhVzV6TGx4dUlDQWdLaUFnSUR4c2FUNXhkV1Z5ZVRvZ1FXNGdhVzV6ZEdGdVkyVWdiMllnVUdGeWMyVXVVWFZsY25rZ2RHOGdkWE5sSUhkb1pXNGdabVYwWTJocGJtY2dhWFJsYlhNdVhHNGdJQ0FxSUNBZ1BHeHBQbU52YlhCaGNtRjBiM0k2SUVFZ2MzUnlhVzVuSUhCeWIzQmxjblI1SUc1aGJXVWdiM0lnWm5WdVkzUnBiMjRnZEc4Z2MyOXlkQ0JpZVM1Y2JpQWdJQ29nUEM5MWJENWNiaUFnSUNwY2JpQWdJQ29nUUhObFpTQlFZWEp6WlM1RGIyeHNaV04wYVc5dUxtVjRkR1Z1WkZ4dUlDQWdLbHh1SUNBZ0tpQkFZMnhoYzNOY2JpQWdJQ3BjYmlBZ0lDb2dQSEErVUhKdmRtbGtaWE1nWVNCemRHRnVaR0Z5WkNCamIyeHNaV04wYVc5dUlHTnNZWE56SUdadmNpQnZkWElnYzJWMGN5QnZaaUJ0YjJSbGJITXNJRzl5WkdWeVpXUmNiaUFnSUNvZ2IzSWdkVzV2Y21SbGNtVmtMaUFnUm05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0c0lITmxaU0IwYUdWY2JpQWdJQ29nUEdFZ2FISmxaajFjSW1oMGRIQTZMeTlrYjJOMWJXVnVkR05zYjNWa0xtZHBkR2gxWWk1amIyMHZZbUZqYTJKdmJtVXZJME52Ykd4bFkzUnBiMjVjSWo1Q1lXTnJZbTl1WlZ4dUlDQWdLaUJrYjJOMWJXVnVkR0YwYVc5dVBDOWhQaTQ4TDNBK1hHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1RGIyeHNaV04wYVc5dUlEMGdablZ1WTNScGIyNG9iVzlrWld4ekxDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc0Z0lDQWdhV1lnS0c5d2RHbHZibk11WTI5dGNHRnlZWFJ2Y2lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVqYjIxd1lYSmhkRzl5SUQwZ2IzQjBhVzl1Y3k1amIyMXdZWEpoZEc5eU8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1dGIyUmxiQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NXRiMlJsYkNBOUlHOXdkR2x2Ym5NdWJXOWtaV3c3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbkYxWlhKNUtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5GMVpYSjVJRDBnYjNCMGFXOXVjeTV4ZFdWeWVUdGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NWZjbVZ6WlhRb0tUdGNiaUFnSUNCMGFHbHpMbWx1YVhScFlXeHBlbVV1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNCcFppQW9iVzlrWld4ektTQjdYRzRnSUNBZ0lDQjBhR2x6TG5KbGMyVjBLRzF2WkdWc2N5d2dlM05wYkdWdWREb2dkSEoxWlN3Z2NHRnljMlU2SUc5d2RHbHZibk11Y0dGeWMyVjlLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnTHk4Z1JHVm1hVzVsSUhSb1pTQkRiMnhzWldOMGFXOXVKM01nYVc1b1pYSnBkR0ZpYkdVZ2JXVjBhRzlrY3k1Y2JpQWdYeTVsZUhSbGJtUW9VR0Z5YzJVdVEyOXNiR1ZqZEdsdmJpNXdjbTkwYjNSNWNHVXNJRkJoY25ObExrVjJaVzUwY3l4Y2JpQWdJQ0FnSUM4cUtpQkFiR1Z1WkhNZ1VHRnljMlV1UTI5c2JHVmpkR2x2Ymk1d2NtOTBiM1I1Y0dVZ0tpOGdlMXh1WEc0Z0lDQWdMeThnVkdobElHUmxabUYxYkhRZ2JXOWtaV3dnWm05eUlHRWdZMjlzYkdWamRHbHZiaUJwY3lCcWRYTjBJR0VnVUdGeWMyVXVUMkpxWldOMExseHVJQ0FnSUM4dklGUm9hWE1nYzJodmRXeGtJR0psSUc5MlpYSnlhV1JrWlc0Z2FXNGdiVzl6ZENCallYTmxjeTVjYmlBZ0lDQXZMeUJVVDBSUE9pQjBhR2x1YXlCb1lYSmtaWEl1SUhSb2FYTWdhWE1nYkdsclpXeDVJSFJ2SUdKbElIZGxhWEprTGx4dUlDQWdJRzF2WkdWc09pQlFZWEp6WlM1UFltcGxZM1FzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJtbDBhV0ZzYVhwbElHbHpJR0Z1SUdWdGNIUjVJR1oxYm1OMGFXOXVJR0o1SUdSbFptRjFiSFF1SUU5MlpYSnlhV1JsSUdsMElIZHBkR2dnZVc5MWNpQnZkMjVjYmlBZ0lDQWdLaUJwYm1sMGFXRnNhWHBoZEdsdmJpQnNiMmRwWXk1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JwYm1sMGFXRnNhWHBsT2lCbWRXNWpkR2x2YmlncGUzMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYUdVZ1NsTlBUaUJ5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUJoSUVOdmJHeGxZM1JwYjI0Z2FYTWdZVzRnWVhKeVlYa2diMllnZEdobFhHNGdJQ0FnSUNvZ2JXOWtaV3h6SnlCaGRIUnlhV0oxZEdWekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhSdlNsTlBUam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRZWEFvWm5WdVkzUnBiMjRvYlc5a1pXd3BleUJ5WlhSMWNtNGdiVzlrWld3dWRHOUtVMDlPS0NrN0lIMHBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCWkdRZ1lTQnRiMlJsYkN3Z2IzSWdiR2x6ZENCdlppQnRiMlJsYkhNZ2RHOGdkR2hsSUhObGRDNGdVR0Z6Y3lBcUtuTnBiR1Z1ZENvcUlIUnZJR0YyYjJsa1hHNGdJQ0FnSUNvZ1ptbHlhVzVuSUhSb1pTQmdZV1JrWUNCbGRtVnVkQ0JtYjNJZ1pYWmxjbmtnYm1WM0lHMXZaR1ZzTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdiVzlrWld4eklFRnVJR0Z5Y21GNUlHOW1JR2x1YzNSaGJtTmxjeUJ2WmlBOFkyOWtaVDVRWVhKelpTNVBZbXBsWTNROEwyTnZaR1UrTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdRVzRnYjNCMGFXOXVZV3dnYjJKcVpXTjBJSGRwZEdnZ1FtRmphMkp2Ym1VdGMzUjViR1VnYjNCMGFXOXVjeTVjYmlBZ0lDQWdLaUJXWVd4cFpDQnZjSFJwYjI1eklHRnlaVG84ZFd3K1hHNGdJQ0FnSUNvZ0lDQThiR2srWVhRNklGUm9aU0JwYm1SbGVDQmhkQ0IzYUdsamFDQjBieUJoWkdRZ2RHaGxJRzF2WkdWc2N5NWNiaUFnSUNBZ0tpQWdJRHhzYVQ1emFXeGxiblE2SUZObGRDQjBieUIwY25WbElIUnZJR0YyYjJsa0lHWnBjbWx1WnlCMGFHVWdZR0ZrWkdBZ1pYWmxiblFnWm05eUlHVjJaWEo1SUc1bGQxeHVJQ0FnSUNBcUlDQWdiVzlrWld3dVhHNGdJQ0FnSUNvZ1BDOTFiRDVjYmlBZ0lDQWdLaTljYmlBZ0lDQmhaR1E2SUdaMWJtTjBhVzl1S0cxdlpHVnNjeXdnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnZG1GeUlHa3NJR2x1WkdWNExDQnNaVzVuZEdnc0lHMXZaR1ZzTENCamFXUXNJR2xrTENCamFXUnpJRDBnZTMwc0lHbGtjeUE5SUh0OU8xeHVJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc0Z0lDQWdJQ0J0YjJSbGJITWdQU0JmTG1selFYSnlZWGtvYlc5a1pXeHpLU0EvSUcxdlpHVnNjeTV6YkdsalpTZ3BJRG9nVzIxdlpHVnNjMTA3WEc1Y2JpQWdJQ0FnSUM4dklFSmxaMmx1SUdKNUlIUjFjbTVwYm1jZ1ltRnlaU0J2WW1wbFkzUnpJR2x1ZEc4Z2JXOWtaV3dnY21WbVpYSmxibU5sY3l3Z1lXNWtJSEJ5WlhabGJuUnBibWRjYmlBZ0lDQWdJQzh2SUdsdWRtRnNhV1FnYlc5a1pXeHpJRzl5SUdSMWNHeHBZMkYwWlNCdGIyUmxiSE1nWm5KdmJTQmlaV2x1WnlCaFpHUmxaQzVjYmlBZ0lDQWdJR1p2Y2lBb2FTQTlJREFzSUd4bGJtZDBhQ0E5SUcxdlpHVnNjeTVzWlc1bmRHZzdJR2tnUENCc1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0J0YjJSbGJITmJhVjBnUFNCMGFHbHpMbDl3Y21Wd1lYSmxUVzlrWld3b2JXOWtaV3h6VzJsZExDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdiVzlrWld3Z1BTQnRiMlJsYkhOYmFWMDdYRzRnSUNBZ0lDQWdJR2xtSUNnaGJXOWtaV3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkRZVzRuZENCaFpHUWdZVzRnYVc1MllXeHBaQ0J0YjJSbGJDQjBieUJoSUdOdmJHeGxZM1JwYjI1Y0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTJsa0lEMGdiVzlrWld3dVkybGtPMXh1SUNBZ0lDQWdJQ0JwWmlBb1kybGtjMXRqYVdSZElIeDhJSFJvYVhNdVgySjVRMmxrVzJOcFpGMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKRWRYQnNhV05oZEdVZ1kybGtPaUJqWVc0bmRDQmhaR1FnZEdobElITmhiV1VnYlc5a1pXd2dYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0luUnZJR0VnWTI5c2JHVmpkR2x2YmlCMGQybGpaVndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaQ0E5SUcxdlpHVnNMbWxrTzF4dUlDQWdJQ0FnSUNCcFppQW9JVkJoY25ObExsOXBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpDaHBaQ2tnSmlZZ0tHbGtjMXRwWkYwZ2ZId2dkR2hwY3k1ZllubEpaRnRwWkYwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpUkhWd2JHbGpZWFJsSUdsa09pQmpZVzRuZENCaFpHUWdkR2hsSUhOaGJXVWdiVzlrWld3Z1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW5SdklHRWdZMjlzYkdWamRHbHZiaUIwZDJsalpWd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFpITmJhV1JkSUQwZ2JXOWtaV3c3WEc0Z0lDQWdJQ0FnSUdOcFpITmJZMmxrWFNBOUlHMXZaR1ZzTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5Qk1hWE4wWlc0Z2RHOGdZV1JrWldRZ2JXOWtaV3h6SnlCbGRtVnVkSE1zSUdGdVpDQnBibVJsZUNCdGIyUmxiSE1nWm05eUlHeHZiMnQxY0NCaWVWeHVJQ0FnSUNBZ0x5OGdZR2xrWUNCaGJtUWdZbmtnWUdOcFpHQXVYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnS0cxdlpHVnNJRDBnYlc5a1pXeHpXMmxkS1M1dmJpZ25ZV3hzSnl3Z2RHaHBjeTVmYjI1TmIyUmxiRVYyWlc1MExDQjBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWW5sRGFXUmJiVzlrWld3dVkybGtYU0E5SUcxdlpHVnNPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXOWtaV3d1YVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOWllVWxrVzIxdlpHVnNMbWxrWFNBOUlHMXZaR1ZzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRWx1YzJWeWRDQnRiMlJsYkhNZ2FXNTBieUIwYUdVZ1kyOXNiR1ZqZEdsdmJpd2djbVV0YzI5eWRHbHVaeUJwWmlCdVpXVmtaV1FzSUdGdVpDQjBjbWxuWjJWeWFXNW5YRzRnSUNBZ0lDQXZMeUJnWVdSa1lDQmxkbVZ1ZEhNZ2RXNXNaWE56SUhOcGJHVnVZMlZrTGx4dUlDQWdJQ0FnZEdocGN5NXNaVzVuZEdnZ0t6MGdiR1Z1WjNSb08xeHVJQ0FnSUNBZ2FXNWtaWGdnUFNCUVlYSnpaUzVmYVhOT2RXeHNUM0pWYm1SbFptbHVaV1FvYjNCMGFXOXVjeTVoZENrZ1B5QmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtMXZaR1ZzY3k1c1pXNW5kR2dnT2lCdmNIUnBiMjV6TG1GME8xeHVJQ0FnSUNBZ2RHaHBjeTV0YjJSbGJITXVjM0JzYVdObExtRndjR3g1S0hSb2FYTXViVzlrWld4ekxDQmJhVzVrWlhnc0lEQmRMbU52Ym1OaGRDaHRiMlJsYkhNcEtUdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtTnZiWEJoY21GMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpiM0owS0h0emFXeGxiblE2SUhSeWRXVjlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG5OcGJHVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHWnZjaUFvYVNBOUlEQXNJR3hsYm1kMGFDQTlJSFJvYVhNdWJXOWtaV3h6TG14bGJtZDBhRHNnYVNBOElHeGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUcxdlpHVnNJRDBnZEdocGN5NXRiMlJsYkhOYmFWMDdYRzRnSUNBZ0lDQWdJR2xtSUNoamFXUnpXMjF2WkdWc0xtTnBaRjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtbHVaR1Y0SUQwZ2FUdGNiaUFnSUNBZ0lDQWdJQ0J0YjJSbGJDNTBjbWxuWjJWeUtDZGhaR1FuTENCdGIyUmxiQ3dnZEdocGN5d2diM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pXMXZkbVVnWVNCdGIyUmxiQ3dnYjNJZ1lTQnNhWE4wSUc5bUlHMXZaR1ZzY3lCbWNtOXRJSFJvWlNCelpYUXVJRkJoYzNNZ2MybHNaVzUwSUhSdklHRjJiMmxrWEc0Z0lDQWdJQ29nWm1seWFXNW5JSFJvWlNBOFkyOWtaVDV5WlcxdmRtVThMMk52WkdVK0lHVjJaVzUwSUdadmNpQmxkbVZ5ZVNCdGIyUmxiQ0J5WlcxdmRtVmtMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVgwZ2JXOWtaV3h6SUZSb1pTQnRiMlJsYkNCdmNpQnNhWE4wSUc5bUlHMXZaR1ZzY3lCMGJ5QnlaVzF2ZG1VZ1puSnZiU0IwYUdWY2JpQWdJQ0FnS2lBZ0lHTnZiR3hsWTNScGIyNHVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ1FXNGdiM0IwYVc5dVlXd2diMkpxWldOMElIZHBkR2dnUW1GamEySnZibVV0YzNSNWJHVWdiM0IwYVc5dWN5NWNiaUFnSUNBZ0tpQldZV3hwWkNCdmNIUnBiMjV6SUdGeVpUb2dQSFZzUGx4dUlDQWdJQ0FxSUNBZ1BHeHBQbk5wYkdWdWREb2dVMlYwSUhSdklIUnlkV1VnZEc4Z1lYWnZhV1FnWm1seWFXNW5JSFJvWlNCZ2NtVnRiM1psWUNCbGRtVnVkQzVjYmlBZ0lDQWdLaUE4TDNWc1BseHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGJXOTJaVG9nWm5WdVkzUnBiMjRvYlc5a1pXeHpMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2FTd2diQ3dnYVc1a1pYZ3NJRzF2WkdWc08xeHVJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc0Z0lDQWdJQ0J0YjJSbGJITWdQU0JmTG1selFYSnlZWGtvYlc5a1pXeHpLU0EvSUcxdlpHVnNjeTV6YkdsalpTZ3BJRG9nVzIxdlpHVnNjMTA3WEc0Z0lDQWdJQ0JtYjNJZ0tHa2dQU0F3TENCc0lEMGdiVzlrWld4ekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0J0YjJSbGJDQTlJSFJvYVhNdVoyVjBRbmxEYVdRb2JXOWtaV3h6VzJsZEtTQjhmQ0IwYUdsekxtZGxkQ2h0YjJSbGJITmJhVjBwTzF4dUlDQWdJQ0FnSUNCcFppQW9JVzF2WkdWc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVYMko1U1dSYmJXOWtaV3d1YVdSZE8xeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVmWW5sRGFXUmJiVzlrWld3dVkybGtYVHRjYmlBZ0lDQWdJQ0FnYVc1a1pYZ2dQU0IwYUdsekxtbHVaR1Y0VDJZb2JXOWtaV3dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTF2WkdWc2N5NXpjR3hwWTJVb2FXNWtaWGdzSURFcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG14bGJtZDBhQzB0TzF4dUlDQWdJQ0FnSUNCcFppQW9JVzl3ZEdsdmJuTXVjMmxzWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVwYm1SbGVDQTlJR2x1WkdWNE8xeHVJQ0FnSUNBZ0lDQWdJRzF2WkdWc0xuUnlhV2RuWlhJb0ozSmxiVzkyWlNjc0lHMXZaR1ZzTENCMGFHbHpMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WlcxdmRtVlNaV1psY21WdVkyVW9iVzlrWld3cE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZEhNZ1lTQnRiMlJsYkNCbWNtOXRJSFJvWlNCelpYUWdZbmtnYVdRdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUdsa0lGUm9aU0JRWVhKelpTQnZZbXBsWTNSSlpDQnBaR1Z1ZEdsbWVXbHVaeUIwYUdVZ1VHRnljMlV1VDJKcVpXTjBJSFJ2WEc0Z0lDQWdJQ29nWm1WMFkyZ2dabkp2YlNCMGFHbHpJR052Ykd4bFkzUnBiMjR1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlocFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHbGtJQ1ltSUhSb2FYTXVYMko1U1dSYmFXUXVhV1FnZkh3Z2FXUmRPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhSeklHRWdiVzlrWld3Z1puSnZiU0IwYUdVZ2MyVjBJR0o1SUdOc2FXVnVkQ0JwWkM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTMwZ1kybGtJRlJvWlNCQ1lXTnJZbTl1WlNCamIyeHNaV04wYVc5dUlHbGtJR2xrWlc1MGFXWjVhVzVuSUhSb1pTQlFZWEp6WlM1UFltcGxZM1FnZEc5Y2JpQWdJQ0FnS2lCbVpYUmphQ0JtY205dElIUm9hWE1nWTI5c2JHVmpkR2x2Ymk1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSQ2VVTnBaRG9nWm5WdVkzUnBiMjRvWTJsa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1kybGtJQ1ltSUhSb2FYTXVYMko1UTJsa1cyTnBaQzVqYVdRZ2ZId2dZMmxrWFR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBjeUIwYUdVZ2JXOWtaV3dnWVhRZ2RHaGxJR2RwZG1WdUlHbHVaR1Y0TGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR2x1WkdWNElGUm9aU0JwYm1SbGVDQnZaaUIwYUdVZ2JXOWtaV3dnZEc4Z2NtVjBkWEp1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJR0YwT2lCbWRXNWpkR2x2YmlocGJtUmxlQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXOWtaV3h6VzJsdVpHVjRYVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm05eVkyVnpJSFJvWlNCamIyeHNaV04wYVc5dUlIUnZJSEpsTFhOdmNuUWdhWFJ6Wld4bUxpQlpiM1VnWkc5dUozUWdibVZsWkNCMGJ5QmpZV3hzSUhSb2FYTmNiaUFnSUNBZ0tpQjFibVJsY2lCdWIzSnRZV3dnWTJseVkzVnRjM1JoYm1ObGN5d2dZWE1nZEdobElITmxkQ0IzYVd4c0lHMWhhVzUwWVdsdUlITnZjblFnYjNKa1pYSWdZWE1nWldGamFGeHVJQ0FnSUNBcUlHbDBaVzBnYVhNZ1lXUmtaV1F1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdRVzRnYjNCMGFXOXVZV3dnYjJKcVpXTjBJSGRwZEdnZ1FtRmphMkp2Ym1VdGMzUjViR1VnYjNCMGFXOXVjeTVjYmlBZ0lDQWdLaUJXWVd4cFpDQnZjSFJwYjI1eklHRnlaVG9nUEhWc1BseHVJQ0FnSUNBcUlDQWdQR3hwUG5OcGJHVnVkRG9nVTJWMElIUnZJSFJ5ZFdVZ2RHOGdZWFp2YVdRZ1ptbHlhVzVuSUhSb1pTQmdjbVZ6WlhSZ0lHVjJaVzUwTGx4dUlDQWdJQ0FxSUR3dmRXdytYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyOXlkRG9nWm5WdVkzUnBiMjRvYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVZMjl0Y0dGeVlYUnZjaWtnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBOaGJtNXZkQ0J6YjNKMElHRWdjMlYwSUhkcGRHaHZkWFFnWVNCamIyMXdZWEpoZEc5eUp5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjJZWElnWW05MWJtUkRiMjF3WVhKaGRHOXlJRDBnWHk1aWFXNWtLSFJvYVhNdVkyOXRjR0Z5WVhSdmNpd2dkR2hwY3lrN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1amIyMXdZWEpoZEc5eUxteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTF2WkdWc2N5QTlJSFJvYVhNdWMyOXlkRUo1S0dKdmRXNWtRMjl0Y0dGeVlYUnZjaWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMXZaR1ZzY3k1emIzSjBLR0p2ZFc1a1EyOXRjR0Z5WVhSdmNpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvSVc5d2RHbHZibk11YzJsc1pXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSEpwWjJkbGNpZ25jbVZ6WlhRbkxDQjBhR2x6TENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFiSFZqYTNNZ1lXNGdZWFIwY21saWRYUmxJR1p5YjIwZ1pXRmphQ0J0YjJSbGJDQnBiaUIwYUdVZ1kyOXNiR1ZqZEdsdmJpNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ1lYUjBjaUJVYUdVZ1lYUjBjbWxpZFhSbElIUnZJSEpsZEhWeWJpQm1jbTl0SUdWaFkyZ2diVzlrWld3Z2FXNGdkR2hsWEc0Z0lDQWdJQ29nWTI5c2JHVmpkR2x2Ymk1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3YkhWamF6b2dablZ1WTNScGIyNG9ZWFIwY2lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUY4dWJXRndLSFJvYVhNdWJXOWtaV3h6TENCbWRXNWpkR2x2YmlodGIyUmxiQ2w3SUhKbGRIVnliaUJ0YjJSbGJDNW5aWFFvWVhSMGNpazdJSDBwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCWGFHVnVJSGx2ZFNCb1lYWmxJRzF2Y21VZ2FYUmxiWE1nZEdoaGJpQjViM1VnZDJGdWRDQjBieUJoWkdRZ2IzSWdjbVZ0YjNabElHbHVaR2wyYVdSMVlXeHNlU3hjYmlBZ0lDQWdLaUI1YjNVZ1kyRnVJSEpsYzJWMElIUm9aU0JsYm5ScGNtVWdjMlYwSUhkcGRHZ2dZU0J1WlhjZ2JHbHpkQ0J2WmlCdGIyUmxiSE1zSUhkcGRHaHZkWFFnWm1seWFXNW5YRzRnSUNBZ0lDb2dZVzU1SUdCaFpHUmdJRzl5SUdCeVpXMXZkbVZnSUdWMlpXNTBjeTRnUm1seVpYTWdZSEpsYzJWMFlDQjNhR1Z1SUdacGJtbHphR1ZrTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdiVzlrWld4eklGUm9aU0J0YjJSbGJDQnZjaUJzYVhOMElHOW1JRzF2WkdWc2N5QjBieUJ5WlcxdmRtVWdabkp2YlNCMGFHVmNiaUFnSUNBZ0tpQWdJR052Ykd4bFkzUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdRVzRnYjNCMGFXOXVZV3dnYjJKcVpXTjBJSGRwZEdnZ1FtRmphMkp2Ym1VdGMzUjViR1VnYjNCMGFXOXVjeTVjYmlBZ0lDQWdLaUJXWVd4cFpDQnZjSFJwYjI1eklHRnlaVG9nUEhWc1BseHVJQ0FnSUNBcUlDQWdQR3hwUG5OcGJHVnVkRG9nVTJWMElIUnZJSFJ5ZFdVZ2RHOGdZWFp2YVdRZ1ptbHlhVzVuSUhSb1pTQmdjbVZ6WlhSZ0lHVjJaVzUwTGx4dUlDQWdJQ0FxSUR3dmRXdytYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NtVnpaWFE2SUdaMWJtTjBhVzl1S0cxdlpHVnNjeXdnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdiVzlrWld4eklEMGdiVzlrWld4eklIeDhJRnRkTzF4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzRnSUNBZ0lDQlFZWEp6WlM1ZllYSnlZWGxGWVdOb0tIUm9hWE11Ylc5a1pXeHpMQ0JtZFc1amRHbHZiaWh0YjJSbGJDa2dlMXh1SUNBZ0lDQWdJQ0J6Wld4bUxsOXlaVzF2ZG1WU1pXWmxjbVZ1WTJVb2JXOWtaV3dwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCMGFHbHpMbDl5WlhObGRDZ3BPMXh1SUNBZ0lDQWdkR2hwY3k1aFpHUW9iVzlrWld4ekxDQjdjMmxzWlc1ME9pQjBjblZsTENCd1lYSnpaVG9nYjNCMGFXOXVjeTV3WVhKelpYMHBPMXh1SUNBZ0lDQWdhV1lnS0NGdmNIUnBiMjV6TG5OcGJHVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ5YVdkblpYSW9KM0psYzJWMEp5d2dkR2hwY3l3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbVYwWTJobGN5QjBhR1VnWkdWbVlYVnNkQ0J6WlhRZ2IyWWdiVzlrWld4eklHWnZjaUIwYUdseklHTnZiR3hsWTNScGIyNHNJSEpsYzJWMGRHbHVaeUIwYUdWY2JpQWdJQ0FnS2lCamIyeHNaV04wYVc5dUlIZG9aVzRnZEdobGVTQmhjbkpwZG1VdUlFbG1JR0JoWkdRNklIUnlkV1ZnSUdseklIQmhjM05sWkN3Z1lYQndaVzVrY3lCMGFHVmNiaUFnSUNBZ0tpQnRiMlJsYkhNZ2RHOGdkR2hsSUdOdmJHeGxZM1JwYjI0Z2FXNXpkR1ZoWkNCdlppQnlaWE5sZEhScGJtY3VYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lCQmJpQnZjSFJwYjI1aGJDQnZZbXBsWTNRZ2QybDBhQ0JDWVdOclltOXVaUzF6ZEhsc1pTQnZjSFJwYjI1ekxseHVJQ0FnSUNBcUlGWmhiR2xrSUc5d2RHbHZibk1nWVhKbE9qeDFiRDVjYmlBZ0lDQWdLaUFnSUR4c2FUNXphV3hsYm5RNklGTmxkQ0IwYnlCMGNuVmxJSFJ2SUdGMmIybGtJR1pwY21sdVp5QmdZV1JrWUNCdmNpQmdjbVZ6WlhSZ0lHVjJaVzUwY3lCbWIzSmNiaUFnSUNBZ0tpQWdJRzF2WkdWc2N5Qm1aWFJqYUdWa0lHSjVJSFJvYVhNZ1ptVjBZMmd1WEc0Z0lDQWdJQ29nSUNBOGJHaytjM1ZqWTJWemN6b2dRU0JDWVdOclltOXVaUzF6ZEhsc1pTQnpkV05qWlhOeklHTmhiR3hpWVdOckxseHVJQ0FnSUNBcUlDQWdQR3hwUG1WeWNtOXlPaUJCYmlCQ1lXTnJZbTl1WlMxemRIbHNaU0JsY25KdmNpQmpZV3hzWW1GamF5NWNiaUFnSUNBZ0tpQWdJRHhzYVQ1MWMyVk5ZWE4wWlhKTFpYazZJRWx1SUVOc2IzVmtJRU52WkdVZ1lXNWtJRTV2WkdVZ2IyNXNlU3dnZFhObGN5QjBhR1VnVFdGemRHVnlJRXRsZVNCbWIzSmNiaUFnSUNBZ0tpQWdJQ0FnSUNCMGFHbHpJSEpsY1hWbGMzUXVYRzRnSUNBZ0lDb2dJQ0E4YkdrK2MyVnpjMmx2YmxSdmEyVnVPaUJCSUhaaGJHbGtJSE5sYzNOcGIyNGdkRzlyWlc0c0lIVnpaV1FnWm05eUlHMWhhMmx1WnlCaElISmxjWFZsYzNRZ2IyNWNiaUFnSUNBZ0tpQWdJQ0FnSUNCaVpXaGhiR1lnYjJZZ1lTQnpjR1ZqYVdacFl5QjFjMlZ5TGx4dUlDQWdJQ0FxSUR3dmRXdytYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1ptVjBZMmc2SUdaMWJtTjBhVzl1S0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCZkxtTnNiMjVsS0c5d2RHbHZibk1wSUh4OElIdDlPMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11Y0dGeWMyVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxuQmhjbk5sSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFpoY2lCamIyeHNaV04wYVc5dUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUhaaGNpQnhkV1Z5ZVNBOUlIUm9hWE11Y1hWbGNua2dmSHdnYm1WM0lGQmhjbk5sTGxGMVpYSjVLSFJvYVhNdWJXOWtaV3dwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSEYxWlhKNUxtWnBibVFvZTF4dUlDQWdJQ0FnSUNCMWMyVk5ZWE4wWlhKTFpYazZJRzl3ZEdsdmJuTXVkWE5sVFdGemRHVnlTMlY1TEZ4dUlDQWdJQ0FnSUNCelpYTnphVzl1Vkc5clpXNDZJRzl3ZEdsdmJuTXVjMlZ6YzJsdmJsUnZhMlZ1WEc0Z0lDQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVLSEpsYzNWc2RITXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdVlXUmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXNiR1ZqZEdsdmJpNWhaR1FvY21WemRXeDBjeXdnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXNiR1ZqZEdsdmJpNXlaWE5sZENoeVpYTjFiSFJ6TENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXNiR1ZqZEdsdmJqdGNiaUFnSUNBZ0lIMHBMbDkwYUdWdVVuVnVRMkZzYkdKaFkydHpLRzl3ZEdsdmJuTXNJSFJvYVhNcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRjbVZoZEdWeklHRWdibVYzSUdsdWMzUmhibU5sSUc5bUlHRWdiVzlrWld3Z2FXNGdkR2hwY3lCamIyeHNaV04wYVc5dUxpQkJaR1FnZEdobElHMXZaR1ZzSUhSdlhHNGdJQ0FnSUNvZ2RHaGxJR052Ykd4bFkzUnBiMjRnYVcxdFpXUnBZWFJsYkhrc0lIVnViR1Z6Y3lCZ2QyRnBkRG9nZEhKMVpXQWdhWE1nY0dGemMyVmtMQ0JwYmlCM2FHbGphQ0JqWVhObFhHNGdJQ0FnSUNvZ2QyVWdkMkZwZENCbWIzSWdkR2hsSUhObGNuWmxjaUIwYnlCaFozSmxaUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVR0Z5YzJVdVQySnFaV04wZlNCdGIyUmxiQ0JVYUdVZ2JtVjNJRzF2WkdWc0lIUnZJR055WldGMFpTQmhibVFnWVdSa0lIUnZJSFJvWlZ4dUlDQWdJQ0FxSUNBZ1kyOXNiR1ZqZEdsdmJpNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lCQmJpQnZjSFJwYjI1aGJDQnZZbXBsWTNRZ2QybDBhQ0JDWVdOclltOXVaUzF6ZEhsc1pTQnZjSFJwYjI1ekxseHVJQ0FnSUNBcUlGWmhiR2xrSUc5d2RHbHZibk1nWVhKbE9qeDFiRDVjYmlBZ0lDQWdLaUFnSUR4c2FUNTNZV2wwT2lCVFpYUWdkRzhnZEhKMVpTQjBieUIzWVdsMElHWnZjaUIwYUdVZ2MyVnlkbVZ5SUhSdklHTnZibVpwY20wZ1kzSmxZWFJwYjI0Z2IyWWdkR2hsWEc0Z0lDQWdJQ29nSUNBZ0lDQWdiVzlrWld3Z1ltVm1iM0psSUdGa1pHbHVaeUJwZENCMGJ5QjBhR1VnWTI5c2JHVmpkR2x2Ymk1Y2JpQWdJQ0FnS2lBZ0lEeHNhVDV6YVd4bGJuUTZJRk5sZENCMGJ5QjBjblZsSUhSdklHRjJiMmxrSUdacGNtbHVaeUJoYmlCZ1lXUmtZQ0JsZG1WdWRDNWNiaUFnSUNBZ0tpQWdJRHhzYVQ1emRXTmpaWE56T2lCQklFSmhZMnRpYjI1bExYTjBlV3hsSUhOMVkyTmxjM01nWTJGc2JHSmhZMnN1WEc0Z0lDQWdJQ29nSUNBOGJHaytaWEp5YjNJNklFRnVJRUpoWTJ0aWIyNWxMWE4wZVd4bElHVnljbTl5SUdOaGJHeGlZV05yTGx4dUlDQWdJQ0FxSUNBZ1BHeHBQblZ6WlUxaGMzUmxja3RsZVRvZ1NXNGdRMnh2ZFdRZ1EyOWtaU0JoYm1RZ1RtOWtaU0J2Ym14NUxDQjFjMlZ6SUhSb1pTQk5ZWE4wWlhJZ1MyVjVJR1p2Y2x4dUlDQWdJQ0FxSUNBZ0lDQWdJSFJvYVhNZ2NtVnhkV1Z6ZEM1Y2JpQWdJQ0FnS2lBZ0lEeHNhVDV6WlhOemFXOXVWRzlyWlc0NklFRWdkbUZzYVdRZ2MyVnpjMmx2YmlCMGIydGxiaXdnZFhObFpDQm1iM0lnYldGcmFXNW5JR0VnY21WeGRXVnpkQ0J2Ymx4dUlDQWdJQ0FxSUNBZ0lDQWdJR0psYUdGc1ppQnZaaUJoSUhOd1pXTnBabWxqSUhWelpYSXVYRzRnSUNBZ0lDb2dQQzkxYkQ1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqY21WaGRHVTZJR1oxYm1OMGFXOXVLRzF2WkdWc0xDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQjJZWElnWTI5c2JDQTlJSFJvYVhNN1hHNGdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lBL0lGOHVZMnh2Ym1Vb2IzQjBhVzl1Y3lrZ09pQjdmVHRjYmlBZ0lDQWdJRzF2WkdWc0lEMGdkR2hwY3k1ZmNISmxjR0Z5WlUxdlpHVnNLRzF2WkdWc0xDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lHbG1JQ2doYlc5a1pXd3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLQ0Z2Y0hScGIyNXpMbmRoYVhRcElIdGNiaUFnSUNBZ0lDQWdZMjlzYkM1aFpHUW9iVzlrWld3c0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtRnlJSE4xWTJObGMzTWdQU0J2Y0hScGIyNXpMbk4xWTJObGMzTTdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxuTjFZMk5sYzNNZ1BTQm1kVzVqZEdsdmJpaHVaWGgwVFc5a1pXd3NJSEpsYzNBc0lIaG9jaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NTNZV2wwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjlzYkM1aFpHUW9ibVY0ZEUxdlpHVnNMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9jM1ZqWTJWemN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhOMVkyTmxjM01vYm1WNGRFMXZaR1ZzTENCeVpYTndLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCdVpYaDBUVzlrWld3dWRISnBaMmRsY2lnbmMzbHVZeWNzSUcxdlpHVnNMQ0J5WlhOd0xDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQWdJRzF2WkdWc0xuTmhkbVVvYm5Wc2JDd2diM0IwYVc5dWN5azdYRzRnSUNBZ0lDQnlaWFIxY200Z2JXOWtaV3c3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOdmJuWmxjblJ6SUdFZ2NtVnpjRzl1YzJVZ2FXNTBieUJoSUd4cGMzUWdiMllnYlc5a1pXeHpJSFJ2SUdKbElHRmtaR1ZrSUhSdklIUm9aU0JqYjJ4c1pXTjBhVzl1TGx4dUlDQWdJQ0FxSUZSb1pTQmtaV1poZFd4MElHbHRjR3hsYldWdWRHRjBhVzl1SUdseklHcDFjM1FnZEc4Z2NHRnpjeUJwZENCMGFISnZkV2RvTGx4dUlDQWdJQ0FxSUVCcFoyNXZjbVZjYmlBZ0lDQWdLaTljYmlBZ0lDQndZWEp6WlRvZ1puVnVZM1JwYjI0b2NtVnpjQ3dnZUdoeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpjRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVUhKdmVIa2dkRzhnWHlkeklHTm9ZV2x1TGlCRFlXNG5kQ0JpWlNCd2NtOTRhV1ZrSUhSb1pTQnpZVzFsSUhkaGVTQjBhR1VnY21WemRDQnZaaUIwYUdWY2JpQWdJQ0FnS2lCMWJtUmxjbk5qYjNKbElHMWxkR2h2WkhNZ1lYSmxJSEJ5YjNocFpXUWdZbVZqWVhWelpTQnBkQ0J5Wld4cFpYTWdiMjRnZEdobElIVnVaR1Z5YzJOdmNtVmNiaUFnSUNBZ0tpQmpiMjV6ZEhKMVkzUnZjaTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmphR0ZwYmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1h5aDBhR2x6TG0xdlpHVnNjeWt1WTJoaGFXNG9LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WelpYUWdZV3hzSUdsdWRHVnlibUZzSUhOMFlYUmxMaUJEWVd4c1pXUWdkMmhsYmlCMGFHVWdZMjlzYkdWamRHbHZiaUJwY3lCeVpYTmxkQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQmZjbVZ6WlhRNklHWjFibU4wYVc5dUtHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnTUR0Y2JpQWdJQ0FnSUhSb2FYTXViVzlrWld4eklEMGdXMTA3WEc0Z0lDQWdJQ0IwYUdsekxsOWllVWxrSUNBOUlIdDlPMXh1SUNBZ0lDQWdkR2hwY3k1ZllubERhV1FnUFNCN2ZUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVSEpsY0dGeVpTQmhJRzF2WkdWc0lHOXlJR2hoYzJnZ2IyWWdZWFIwY21saWRYUmxjeUIwYnlCaVpTQmhaR1JsWkNCMGJ5QjBhR2x6SUdOdmJHeGxZM1JwYjI0dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDNCeVpYQmhjbVZOYjJSbGJEb2dablZ1WTNScGIyNG9iVzlrWld3c0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lHbG1JQ2doS0cxdlpHVnNJR2x1YzNSaGJtTmxiMllnVUdGeWMyVXVUMkpxWldOMEtTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lYUjBjbk1nUFNCdGIyUmxiRHRjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVqYjJ4c1pXTjBhVzl1SUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnYlc5a1pXd2dQU0J1WlhjZ2RHaHBjeTV0YjJSbGJDaGhkSFJ5Y3l3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYlc5a1pXd3VYM1poYkdsa1lYUmxLRzF2WkdWc0xtRjBkSEpwWW5WMFpYTXNJRzl3ZEdsdmJuTXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JXOWtaV3dnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNnaGJXOWtaV3d1WTI5c2JHVmpkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQnRiMlJsYkM1amIyeHNaV04wYVc5dUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJ0YjJSbGJEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzUwWlhKdVlXd2diV1YwYUc5a0lIUnZJSEpsYlc5MlpTQmhJRzF2WkdWc0ozTWdkR2xsY3lCMGJ5QmhJR052Ykd4bFkzUnBiMjR1WEc0Z0lDQWdJQ292WEc0Z0lDQWdYM0psYlc5MlpWSmxabVZ5Wlc1alpUb2dablZ1WTNScGIyNG9iVzlrWld3cElIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdseklEMDlQU0J0YjJSbGJDNWpiMnhzWldOMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUdSbGJHVjBaU0J0YjJSbGJDNWpiMnhzWldOMGFXOXVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdiVzlrWld3dWIyWm1LQ2RoYkd3bkxDQjBhR2x6TGw5dmJrMXZaR1ZzUlhabGJuUXNJSFJvYVhNcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkpiblJsY201aGJDQnRaWFJvYjJRZ1kyRnNiR1ZrSUdWMlpYSjVJSFJwYldVZ1lTQnRiMlJsYkNCcGJpQjBhR1VnYzJWMElHWnBjbVZ6SUdGdUlHVjJaVzUwTGx4dUlDQWdJQ0FxSUZObGRITWdibVZsWkNCMGJ5QjFjR1JoZEdVZ2RHaGxhWElnYVc1a1pYaGxjeUIzYUdWdUlHMXZaR1ZzY3lCamFHRnVaMlVnYVdSekxpQkJiR3dnYjNSb1pYSmNiaUFnSUNBZ0tpQmxkbVZ1ZEhNZ2MybHRjR3g1SUhCeWIzaDVJSFJvY205MVoyZ3VJRndpWVdSa1hDSWdZVzVrSUZ3aWNtVnRiM1psWENJZ1pYWmxiblJ6SUhSb1lYUWdiM0pwWjJsdVlYUmxYRzRnSUNBZ0lDb2dhVzRnYjNSb1pYSWdZMjlzYkdWamRHbHZibk1nWVhKbElHbG5ibTl5WldRdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDI5dVRXOWtaV3hGZG1WdWREb2dablZ1WTNScGIyNG9aWFlzSUcxdlpHVnNMQ0JqYjJ4c1pXTjBhVzl1TENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNCcFppQW9LR1YySUQwOVBTQW5ZV1JrSnlCOGZDQmxkaUE5UFQwZ0ozSmxiVzkyWlNjcElDWW1JR052Ykd4bFkzUnBiMjRnSVQwOUlIUm9hWE1wSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tHVjJJRDA5UFNBblpHVnpkSEp2ZVNjcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXMXZkbVVvYlc5a1pXd3NJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0cxdlpHVnNJQ1ltSUdWMklEMDlQU0FuWTJoaGJtZGxPbTlpYW1WamRFbGtKeWtnZTF4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NWZZbmxKWkZ0dGIyUmxiQzV3Y21WMmFXOTFjeWhjSW05aWFtVmpkRWxrWENJcFhUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllubEpaRnR0YjJSbGJDNXBaRjBnUFNCdGIyUmxiRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdWRISnBaMmRsY2k1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lIMWNibHh1SUNCOUtUdGNibHh1SUNBdkx5QlZibVJsY25OamIzSmxJRzFsZEdodlpITWdkR2hoZENCM1pTQjNZVzUwSUhSdklHbHRjR3hsYldWdWRDQnZiaUIwYUdVZ1EyOXNiR1ZqZEdsdmJpNWNiaUFnZG1GeUlHMWxkR2h2WkhNZ1BTQmJKMlp2Y2tWaFkyZ25MQ0FuWldGamFDY3NJQ2R0WVhBbkxDQW5jbVZrZFdObEp5d2dKM0psWkhWalpWSnBaMmgwSnl3Z0oyWnBibVFuTEZ4dUlDQWdJQ2RrWlhSbFkzUW5MQ0FuWm1sc2RHVnlKeXdnSjNObGJHVmpkQ2NzSUNkeVpXcGxZM1FuTENBblpYWmxjbmtuTENBbllXeHNKeXdnSjNOdmJXVW5MQ0FuWVc1NUp5eGNiaUFnSUNBbmFXNWpiSFZrWlNjc0lDZGpiMjUwWVdsdWN5Y3NJQ2RwYm5admEyVW5MQ0FuYldGNEp5d2dKMjFwYmljc0lDZHpiM0owUW5rbkxDQW5jMjl5ZEdWa1NXNWtaWGduTEZ4dUlDQWdJQ2QwYjBGeWNtRjVKeXdnSjNOcGVtVW5MQ0FuWm1seWMzUW5MQ0FuYVc1cGRHbGhiQ2NzSUNkeVpYTjBKeXdnSjJ4aGMzUW5MQ0FuZDJsMGFHOTFkQ2NzSUNkcGJtUmxlRTltSnl4Y2JpQWdJQ0FuYzJoMVptWnNaU2NzSUNkc1lYTjBTVzVrWlhoUFppY3NJQ2RwYzBWdGNIUjVKeXdnSjJkeWIzVndRbmtuWFR0Y2JseHVJQ0F2THlCTmFYZ2dhVzRnWldGamFDQlZibVJsY25OamIzSmxJRzFsZEdodlpDQmhjeUJoSUhCeWIzaDVJSFJ2SUdCRGIyeHNaV04wYVc5dUkyMXZaR1ZzYzJBdVhHNGdJRkJoY25ObExsOWhjbkpoZVVWaFkyZ29iV1YwYUc5a2N5d2dablZ1WTNScGIyNG9iV1YwYUc5a0tTQjdYRzRnSUNBZ1VHRnljMlV1UTI5c2JHVmpkR2x2Ymk1d2NtOTBiM1I1Y0dWYmJXVjBhRzlrWFNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlGOWJiV1YwYUc5a1hTNWhjSEJzZVNoZkxDQmJkR2hwY3k1dGIyUmxiSE5kTG1OdmJtTmhkQ2hmTG5SdlFYSnlZWGtvWVhKbmRXMWxiblJ6S1NrcE8xeHVJQ0FnSUgwN1hHNGdJSDBwTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnYm1WM0lITjFZbU5zWVhOeklHOW1JRHhqYjJSbFBsQmhjbk5sTGtOdmJHeGxZM1JwYjI0OEwyTnZaR1UrTGlBZ1JtOXlJR1Y0WVcxd2JHVXNQSEJ5WlQ1Y2JpQWdJQ29nSUNCMllYSWdUWGxEYjJ4c1pXTjBhVzl1SUQwZ1VHRnljMlV1UTI5c2JHVmpkR2x2Ymk1bGVIUmxibVFvZTF4dUlDQWdLaUFnSUNBZ0x5OGdTVzV6ZEdGdVkyVWdjSEp2Y0dWeWRHbGxjMXh1SUNBZ0tseHVJQ0FnS2lBZ0lDQWdiVzlrWld3NklFMTVRMnhoYzNNc1hHNGdJQ0FxSUNBZ0lDQnhkV1Z5ZVRvZ1RYbFJkV1Z5ZVN4Y2JpQWdJQ3BjYmlBZ0lDb2dJQ0FnSUdkbGRFWnBjbk4wT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNvZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlYUW9NQ2s3WEc0Z0lDQXFJQ0FnSUNCOVhHNGdJQ0FxSUNBZ2ZTd2dlMXh1SUNBZ0tpQWdJQ0FnTHk4Z1EyeGhjM01nY0hKdmNHVnlkR2xsYzF4dUlDQWdLbHh1SUNBZ0tpQWdJQ0FnYldGclpVOXVaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FxSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFhsRGIyeHNaV04wYVc5dUtDazdYRzRnSUNBcUlDQWdJQ0I5WEc0Z0lDQXFJQ0FnZlNrN1hHNGdJQ0FxWEc0Z0lDQXFJQ0FnZG1GeUlHTnZiR3hsWTNScGIyNGdQU0J1WlhjZ1RYbERiMnhzWldOMGFXOXVLQ2s3WEc0Z0lDQXFJRHd2Y0hKbFBseHVJQ0FnS2x4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHbHVjM1JoYm1ObFVISnZjSE1nU1c1emRHRnVZMlVnY0hKdmNHVnlkR2xsY3lCbWIzSWdkR2hsSUdOdmJHeGxZM1JwYjI0dVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JqYkdGemMxQnliM0J6SUVOc1lYTnpJSEJ5YjNCbGNtbGxjeUJtYjNJZ2RHaGxJR052Ykd4bFkzUnBiMjR1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlME5zWVhOemZTQkJJRzVsZHlCemRXSmpiR0Z6Y3lCdlppQThZMjlrWlQ1UVlYSnpaUzVEYjJ4c1pXTjBhVzl1UEM5amIyUmxQaTVjYmlBZ0lDb3ZYRzRnSUZCaGNuTmxMa052Ykd4bFkzUnBiMjR1WlhoMFpXNWtJRDBnVUdGeWMyVXVYMlY0ZEdWdVpEdGNibHh1ZlNoMGFHbHpLU2s3WEc1Y2JpOHFaMnh2WW1Gc0lGODZJR1poYkhObExDQmtiMk4xYldWdWREb2dabUZzYzJVZ0tpOWNiaWhtZFc1amRHbHZiaWh5YjI5MEtTQjdYRzRnSUhKdmIzUXVVR0Z5YzJVZ1BTQnliMjkwTGxCaGNuTmxJSHg4SUh0OU8xeHVJQ0IyWVhJZ1VHRnljMlVnUFNCeWIyOTBMbEJoY25ObE8xeHVJQ0IyWVhJZ1h5QTlJRkJoY25ObExsODdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwYVc1bklHRWdVR0Z5YzJVdVZtbGxkeUJqY21WaGRHVnpJR2wwY3lCcGJtbDBhV0ZzSUdWc1pXMWxiblFnYjNWMGMybGtaU0J2WmlCMGFHVWdSRTlOTEZ4dUlDQWdLaUJwWmlCaGJpQmxlR2x6ZEdsdVp5QmxiR1Z0Wlc1MElHbHpJRzV2ZENCd2NtOTJhV1JsWkM0dUxseHVJQ0FnS2lCQVkyeGhjM05jYmlBZ0lDcGNiaUFnSUNvZ1BIQStRU0JtYjNKcklHOW1JRUpoWTJ0aWIyNWxMbFpwWlhjc0lIQnliM1pwWkdWa0lHWnZjaUI1YjNWeUlHTnZiblpsYm1sbGJtTmxMaUFnU1dZZ2VXOTFJSFZ6WlNCMGFHbHpYRzRnSUNBcUlHTnNZWE56TENCNWIzVWdiWFZ6ZENCaGJITnZJR2x1WTJ4MVpHVWdhbEYxWlhKNUxDQnZjaUJoYm05MGFHVnlJR3hwWW5KaGNua2dkR2hoZENCd2NtOTJhV1JsY3lCaFhHNGdJQ0FxSUdwUmRXVnllUzFqYjIxd1lYUnBZbXhsSUNRZ1puVnVZM1JwYjI0dUlDQkdiM0lnYlc5eVpTQnBibVp2Y20xaGRHbHZiaXdnYzJWbElIUm9aVnh1SUNBZ0tpQThZU0JvY21WbVBWd2lhSFIwY0RvdkwyUnZZM1Z0Wlc1MFkyeHZkV1F1WjJsMGFIVmlMbU52YlM5aVlXTnJZbTl1WlM4alZtbGxkMXdpUGtKaFkydGliMjVsWEc0Z0lDQXFJR1J2WTNWdFpXNTBZWFJwYjI0OEwyRStMand2Y0Q1Y2JpQWdJQ29nUEhBK1BITjBjbTl1Wno0OFpXMCtRWFpoYVd4aFlteGxJR2x1SUhSb1pTQmpiR2xsYm5RZ1UwUkxJRzl1YkhrdVBDOWxiVDQ4TDNOMGNtOXVaejQ4TDNBK1hHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1V2FXVjNJRDBnWm5WdVkzUnBiMjRvYjNCMGFXOXVjeWtnZTF4dUlDQWdJSFJvYVhNdVkybGtJRDBnWHk1MWJtbHhkV1ZKWkNnbmRtbGxkeWNwTzF4dUlDQWdJSFJvYVhNdVgyTnZibVpwWjNWeVpTaHZjSFJwYjI1eklIeDhJSHQ5S1R0Y2JpQWdJQ0IwYUdsekxsOWxibk4xY21WRmJHVnRaVzUwS0NrN1hHNGdJQ0FnZEdocGN5NXBibWwwYVdGc2FYcGxMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZEdocGN5NWtaV3hsWjJGMFpVVjJaVzUwY3lncE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVOaFkyaGxaQ0J5WldkbGVDQjBieUJ6Y0d4cGRDQnJaWGx6SUdadmNpQmdaR1ZzWldkaGRHVmdMbHh1SUNCMllYSWdaWFpsYm5SVGNHeHBkSFJsY2lBOUlDOWVLRnhjVXlzcFhGeHpLaWd1S2lra0x6dGNibHh1SUNBdkx5Qk1hWE4wSUc5bUlIWnBaWGNnYjNCMGFXOXVjeUIwYnlCaVpTQnRaWEpuWldRZ1lYTWdjSEp2Y0dWeWRHbGxjeTVjYmlBZ0x5OGdWRTlFVHpvZ2FXNWpiSFZrWlNCdlltcGxZM1JKWkN3Z1kzSmxZWFJsWkVGMExDQjFjR1JoZEdWa1FYUS9YRzRnSUhaaGNpQjJhV1YzVDNCMGFXOXVjeUE5SUZzbmJXOWtaV3duTENBblkyOXNiR1ZqZEdsdmJpY3NJQ2RsYkNjc0lDZHBaQ2NzSUNkaGRIUnlhV0oxZEdWekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkamJHRnpjMDVoYldVbkxDQW5kR0ZuVG1GdFpTZGRPMXh1WEc0Z0lDOHZJRk5sZENCMWNDQmhiR3dnYVc1b1pYSnBkR0ZpYkdVZ0tpcFFZWEp6WlM1V2FXVjNLaW9nY0hKdmNHVnlkR2xsY3lCaGJtUWdiV1YwYUc5a2N5NWNiaUFnWHk1bGVIUmxibVFvVUdGeWMyVXVWbWxsZHk1d2NtOTBiM1I1Y0dVc0lGQmhjbk5sTGtWMlpXNTBjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0x5b3FJRUJzWlc1a2N5QlFZWEp6WlM1V2FXVjNMbkJ5YjNSdmRIbHdaU0FxTHlCN1hHNWNiaUFnSUNBdkx5QlVhR1VnWkdWbVlYVnNkQ0JnZEdGblRtRnRaV0FnYjJZZ1lTQldhV1YzSjNNZ1pXeGxiV1Z1ZENCcGN5QmdYQ0prYVhaY0ltQXVYRzRnSUNBZ2RHRm5UbUZ0WlRvZ0oyUnBkaWNzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCcVVYVmxjbmtnWkdWc1pXZGhkR1VnWm05eUlHVnNaVzFsYm5RZ2JHOXZhM1Z3TENCelkyOXdaV1FnZEc4Z1JFOU5JR1ZzWlcxbGJuUnpJSGRwZEdocGJpQjBhR1ZjYmlBZ0lDQWdLaUJqZFhKeVpXNTBJSFpwWlhjdUlGUm9hWE1nYzJodmRXeGtJR0psSUhCeVpXWmxjbVZrSUhSdklHZHNiMkpoYkNCc2IyOXJkWEJ6SUhkb1pYSmxJSEJ2YzNOcFlteGxMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lDUTZJR1oxYm1OMGFXOXVLSE5sYkdWamRHOXlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k0a1pXd3VabWx1WkNoelpXeGxZM1J2Y2lrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFbHVhWFJwWVd4cGVtVWdhWE1nWVc0Z1pXMXdkSGtnWm5WdVkzUnBiMjRnWW5rZ1pHVm1ZWFZzZEM0Z1QzWmxjbkpwWkdVZ2FYUWdkMmwwYUNCNWIzVnlJRzkzYmx4dUlDQWdJQ0FxSUdsdWFYUnBZV3hwZW1GMGFXOXVJR3h2WjJsakxseHVJQ0FnSUNBcUwxeHVJQ0FnSUdsdWFYUnBZV3hwZW1VNklHWjFibU4wYVc5dUtDbDdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSb1pTQmpiM0psSUdaMWJtTjBhVzl1SUhSb1lYUWdlVzkxY2lCMmFXVjNJSE5vYjNWc1pDQnZkbVZ5Y21sa1pTd2dhVzRnYjNKa1pYSmNiaUFnSUNBZ0tpQjBieUJ3YjNCMWJHRjBaU0JwZEhNZ1pXeGxiV1Z1ZENBb1lIUm9hWE11Wld4Z0tTd2dkMmwwYUNCMGFHVWdZWEJ3Y205d2NtbGhkR1VnU0ZSTlRDNGdWR2hsWEc0Z0lDQWdJQ29nWTI5dWRtVnVkR2x2YmlCcGN5Qm1iM0lnS2lweVpXNWtaWElxS2lCMGJ5QmhiSGRoZVhNZ2NtVjBkWEp1SUdCMGFHbHpZQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaVzVrWlhJNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGJXOTJaU0IwYUdseklIWnBaWGNnWm5KdmJTQjBhR1VnUkU5TkxpQk9iM1JsSUhSb1lYUWdkR2hsSUhacFpYY2dhWE51SjNRZ2NISmxjMlZ1ZENCcGJpQjBhR1ZjYmlBZ0lDQWdLaUJFVDAwZ1lua2daR1ZtWVhWc2RDd2djMjhnWTJGc2JHbHVaeUIwYUdseklHMWxkR2h2WkNCdFlYa2dZbVVnWVNCdWJ5MXZjQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaVzF2ZG1VNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a1pXd3VjbVZ0YjNabEtDazdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm05eUlITnRZV3hzSUdGdGIzVnVkSE1nYjJZZ1JFOU5JRVZzWlcxbGJuUnpMQ0IzYUdWeVpTQmhJR1oxYkd3dFlteHZkMjRnZEdWdGNHeGhkR1VnYVhOdUozUmNiaUFnSUNBZ0tpQnVaV1ZrWldRc0lIVnpaU0FxS20xaGEyVXFLaUIwYnlCdFlXNTFabUZqZEhWeVpTQmxiR1Z0Wlc1MGN5d2diMjVsSUdGMElHRWdkR2x0WlM1Y2JpQWdJQ0FnS2lBOGNISmxQbHh1SUNBZ0lDQXFJQ0FnSUNCMllYSWdaV3dnUFNCMGFHbHpMbTFoYTJVb0oyeHBKeXdnZXlkamJHRnpjeWM2SUNkeWIzY25mU3hjYmlBZ0lDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5a1pXd3VaWE5qWVhCbEtDZDBhWFJzWlNjcEtUczhMM0J5WlQ1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J0WVd0bE9pQm1kVzVqZEdsdmJpaDBZV2RPWVcxbExDQmhkSFJ5YVdKMWRHVnpMQ0JqYjI1MFpXNTBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1pXd2dQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtIUmhaMDVoYldVcE8xeHVJQ0FnSUNBZ2FXWWdLR0YwZEhKcFluVjBaWE1wSUh0Y2JpQWdJQ0FnSUNBZ1VHRnljMlV1SkNobGJDa3VZWFIwY2loaGRIUnlhV0oxZEdWektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2hqYjI1MFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUZCaGNuTmxMaVFvWld3cExtaDBiV3dvWTI5dWRHVnVkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaV3c3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOb1lXNW5aWE1nZEdobElIWnBaWGNuY3lCbGJHVnRaVzUwSUNoZ2RHaHBjeTVsYkdBZ2NISnZjR1Z5ZEhrcExDQnBibU5zZFdScGJtY2daWFpsYm5SY2JpQWdJQ0FnS2lCeVpTMWtaV3hsWjJGMGFXOXVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRVZzWlcxbGJuUTZJR1oxYm1OMGFXOXVLR1ZzWlcxbGJuUXNJR1JsYkdWbllYUmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUmxiQ0E5SUZCaGNuTmxMaVFvWld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0IwYUdsekxtVnNJRDBnZEdocGN5NGtaV3hiTUYwN1hHNGdJQ0FnSUNCcFppQW9aR1ZzWldkaGRHVWdJVDA5SUdaaGJITmxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1ZzWldkaGRHVkZkbVZ1ZEhNb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhRZ1kyRnNiR0poWTJ0ekxpQWdQR052WkdVK2RHaHBjeTVsZG1WdWRITThMMk52WkdVK0lHbHpJR0VnYUdGemFDQnZabHh1SUNBZ0lDQXFJRHh3Y21VK1hHNGdJQ0FnSUNvZ0tudGNJbVYyWlc1MElITmxiR1ZqZEc5eVhDSTZJRndpWTJGc2JHSmhZMnRjSW4wcVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lBZ0lDQWdlMXh1SUNBZ0lDQXFJQ0FnSUNBZ0lDZHRiM1Z6WldSdmQyNGdMblJwZEd4bEp6b2dJQ2RsWkdsMEp5eGNiaUFnSUNBZ0tpQWdJQ0FnSUNBblkyeHBZMnNnTG1KMWRIUnZiaWM2SUNBZ0lDQW5jMkYyWlNkY2JpQWdJQ0FnS2lBZ0lDQWdJQ0FuWTJ4cFkyc2dMbTl3Wlc0bk9pQWdJQ0FnSUNCbWRXNWpkR2x2YmlobEtTQjdJQzR1TGlCOVhHNGdJQ0FnSUNvZ0lDQWdJSDFjYmlBZ0lDQWdLaUE4TDNCeVpUNWNiaUFnSUNBZ0tpQndZV2x5Y3k0Z1EyRnNiR0poWTJ0eklIZHBiR3dnWW1VZ1ltOTFibVFnZEc4Z2RHaGxJSFpwWlhjc0lIZHBkR2dnWUhSb2FYTmdJSE5sZENCd2NtOXdaWEpzZVM1Y2JpQWdJQ0FnS2lCVmMyVnpJR1YyWlc1MElHUmxiR1ZuWVhScGIyNGdabTl5SUdWbVptbGphV1Z1WTNrdVhHNGdJQ0FnSUNvZ1QyMXBkSFJwYm1jZ2RHaGxJSE5sYkdWamRHOXlJR0pwYm1SeklIUm9aU0JsZG1WdWRDQjBieUJnZEdocGN5NWxiR0F1WEc0Z0lDQWdJQ29nVkdocGN5QnZibXg1SUhkdmNtdHpJR1p2Y2lCa1pXeGxaMkYwWlMxaFlteGxJR1YyWlc1MGN6b2dibTkwSUdCbWIyTjFjMkFzSUdCaWJIVnlZQ3dnWVc1a1hHNGdJQ0FnSUNvZ2JtOTBJR0JqYUdGdVoyVmdMQ0JnYzNWaWJXbDBZQ3dnWVc1a0lHQnlaWE5sZEdBZ2FXNGdTVzUwWlhKdVpYUWdSWGh3Ykc5eVpYSXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pHVnNaV2RoZEdWRmRtVnVkSE02SUdaMWJtTjBhVzl1S0dWMlpXNTBjeWtnZTF4dUlDQWdJQ0FnWlhabGJuUnpJRDBnWlhabGJuUnpJSHg4SUZCaGNuTmxMbDluWlhSV1lXeDFaU2gwYUdsekxDQW5aWFpsYm5Sekp5azdYRzRnSUNBZ0lDQnBaaUFvSVdWMlpXNTBjeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUdsekxuVnVaR1ZzWldkaGRHVkZkbVZ1ZEhNb0tUdGNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUZCaGNuTmxMbDl2WW1wbFkzUkZZV05vS0dWMlpXNTBjeXdnWm5WdVkzUnBiMjRvYldWMGFHOWtMQ0JyWlhrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGZkxtbHpSblZ1WTNScGIyNG9iV1YwYUc5a0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUcxbGRHaHZaQ0E5SUhObGJHWmJaWFpsYm5SelcydGxlVjFkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2doYldWMGFHOWtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkRmRtVnVkQ0JjSWljZ0t5QmxkbVZ1ZEhOYmEyVjVYU0FySUNkY0lpQmtiMlZ6SUc1dmRDQmxlR2x6ZENjcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCdFlYUmphQ0E5SUd0bGVTNXRZWFJqYUNobGRtVnVkRk53YkdsMGRHVnlLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVjJaVzUwVG1GdFpTQTlJRzFoZEdOb1d6RmRMQ0J6Wld4bFkzUnZjaUE5SUcxaGRHTm9XekpkTzF4dUlDQWdJQ0FnSUNCdFpYUm9iMlFnUFNCZkxtSnBibVFvYldWMGFHOWtMQ0J6Wld4bUtUdGNiaUFnSUNBZ0lDQWdaWFpsYm5ST1lXMWxJQ3M5SUNjdVpHVnNaV2RoZEdWRmRtVnVkSE1uSUNzZ2MyVnNaaTVqYVdRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bFkzUnZjaUE5UFQwZ0p5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MaVJsYkM1aWFXNWtLR1YyWlc1MFRtRnRaU3dnYldWMGFHOWtLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MaVJsYkM1a1pXeGxaMkYwWlNoelpXeGxZM1J2Y2l3Z1pYWmxiblJPWVcxbExDQnRaWFJvYjJRcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJ4bFlYSnpJR0ZzYkNCallXeHNZbUZqYTNNZ2NISmxkbWx2ZFhOc2VTQmliM1Z1WkNCMGJ5QjBhR1VnZG1sbGR5QjNhWFJvSUdCa1pXeGxaMkYwWlVWMlpXNTBjMkF1WEc0Z0lDQWdJQ29nV1c5MUlIVnpkV0ZzYkhrZ1pHOXVKM1FnYm1WbFpDQjBieUIxYzJVZ2RHaHBjeXdnWW5WMElHMWhlU0IzYVhOb0lIUnZJR2xtSUhsdmRTQm9ZWFpsSUcxMWJIUnBjR3hsWEc0Z0lDQWdJQ29nUW1GamEySnZibVVnZG1sbGQzTWdZWFIwWVdOb1pXUWdkRzhnZEdobElITmhiV1VnUkU5TklHVnNaVzFsYm5RdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnZFc1a1pXeGxaMkYwWlVWMlpXNTBjem9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMGFHbHpMaVJsYkM1MWJtSnBibVFvSnk1a1pXeGxaMkYwWlVWMlpXNTBjeWNnS3lCMGFHbHpMbU5wWkNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQmxjbVp2Y20xeklIUm9aU0JwYm1sMGFXRnNJR052Ym1acFozVnlZWFJwYjI0Z2IyWWdZU0JXYVdWM0lIZHBkR2dnWVNCelpYUWdiMllnYjNCMGFXOXVjeTVjYmlBZ0lDQWdLaUJMWlhseklIZHBkR2dnYzNCbFkybGhiQ0J0WldGdWFXNW5JQ29vYlc5a1pXd3NJR052Ykd4bFkzUnBiMjRzSUdsa0xDQmpiR0Z6YzA1aGJXVXBLaXdnWVhKbFhHNGdJQ0FnSUNvZ1lYUjBZV05vWldRZ1pHbHlaV04wYkhrZ2RHOGdkR2hsSUhacFpYY3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyTnZibVpwWjNWeVpUb2dablZ1WTNScGIyNG9iM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnWHk1bGVIUmxibVFvZTMwc0lIUm9hWE11YjNCMGFXOXVjeXdnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQmZMbVZoWTJnb2RtbGxkMDl3ZEdsdmJuTXNJR1oxYm1OMGFXOXVLR0YwZEhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0c5d2RHbHZibk5iWVhSMGNsMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1XMkYwZEhKZElEMGdiM0IwYVc5dWMxdGhkSFJ5WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjBhR2x6TG05d2RHbHZibk1nUFNCdmNIUnBiMjV6TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmJuTjFjbVVnZEdoaGRDQjBhR1VnVm1sbGR5Qm9ZWE1nWVNCRVQwMGdaV3hsYldWdWRDQjBieUJ5Wlc1a1pYSWdhVzUwYnk1Y2JpQWdJQ0FnS2lCSlppQmdkR2hwY3k1bGJHQWdhWE1nWVNCemRISnBibWNzSUhCaGMzTWdhWFFnZEdoeWIzVm5hQ0JnSkNncFlDd2dkR0ZyWlNCMGFHVWdabWx5YzNSY2JpQWdJQ0FnS2lCdFlYUmphR2x1WnlCbGJHVnRaVzUwTENCaGJtUWdjbVV0WVhOemFXZHVJR2wwSUhSdklHQmxiR0F1SUU5MGFHVnlkMmx6WlN3Z1kzSmxZWFJsWEc0Z0lDQWdJQ29nWVc0Z1pXeGxiV1Z1ZENCbWNtOXRJSFJvWlNCZ2FXUmdMQ0JnWTJ4aGMzTk9ZVzFsWUNCaGJtUWdZSFJoWjA1aGJXVmdJSEJ5YjNCbGNuUnBaWE11WEc0Z0lDQWdJQ292WEc0Z0lDQWdYMlZ1YzNWeVpVVnNaVzFsYm5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdhV1lnS0NGMGFHbHpMbVZzS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoZEhSeWN5QTlJRkJoY25ObExsOW5aWFJXWVd4MVpTaDBhR2x6TENBbllYUjBjbWxpZFhSbGN5Y3BJSHg4SUh0OU8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHRjBkSEp6TG1sa0lEMGdkR2hwY3k1cFpEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqYkdGemMwNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmhkSFJ5YzFzblkyeGhjM01uWFNBOUlIUm9hWE11WTJ4aGMzTk9ZVzFsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFJXeGxiV1Z1ZENoMGFHbHpMbTFoYTJVb2RHaHBjeTUwWVdkT1lXMWxMQ0JoZEhSeWN5a3NJR1poYkhObEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFJXeGxiV1Z1ZENoMGFHbHpMbVZzTENCbVlXeHpaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lIMHBPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdsdWMzUmhibU5sVUhKdmNITWdTVzV6ZEdGdVkyVWdjSEp2Y0dWeWRHbGxjeUJtYjNJZ2RHaGxJSFpwWlhjdVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JqYkdGemMxQnliM0J6SUVOc1lYTnpJSEJ5YjNCbGNtbGxjeUJtYjNJZ2RHaGxJSFpwWlhjdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBOc1lYTnpmU0JCSUc1bGR5QnpkV0pqYkdGemN5QnZaaUE4WTI5a1pUNVFZWEp6WlM1V2FXVjNQQzlqYjJSbFBpNWNiaUFnSUNvdlhHNGdJRkJoY25ObExsWnBaWGN1WlhoMFpXNWtJRDBnVUdGeWMyVXVYMlY0ZEdWdVpEdGNibHh1ZlNoMGFHbHpLU2s3WEc1Y2JpaG1kVzVqZEdsdmJpaHliMjkwS1NCN1hHNGdJSEp2YjNRdVVHRnljMlVnUFNCeWIyOTBMbEJoY25ObElIeDhJSHQ5TzF4dUlDQjJZWElnVUdGeWMyVWdQU0J5YjI5MExsQmhjbk5sTzF4dUlDQjJZWElnWHlBOUlGQmhjbk5sTGw4N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCamJHRnpjMXh1SUNBZ0tseHVJQ0FnS2lBOGNENUJJRkJoY25ObExsVnpaWElnYjJKcVpXTjBJR2x6SUdFZ2JHOWpZV3dnY21Wd2NtVnpaVzUwWVhScGIyNGdiMllnWVNCMWMyVnlJSEJsY25OcGMzUmxaQ0IwYnlCMGFHVmNiaUFnSUNvZ1VHRnljMlVnWTJ4dmRXUXVJRlJvYVhNZ1kyeGhjM01nYVhNZ1lTQnpkV0pqYkdGemN5QnZaaUJoSUZCaGNuTmxMazlpYW1WamRDd2dZVzVrSUhKbGRHRnBibk1nZEdobFhHNGdJQ0FxSUhOaGJXVWdablZ1WTNScGIyNWhiR2wwZVNCdlppQmhJRkJoY25ObExrOWlhbVZqZEN3Z1luVjBJR0ZzYzI4Z1pYaDBaVzVrY3lCcGRDQjNhWFJvSUhaaGNtbHZkWE5jYmlBZ0lDb2dkWE5sY2lCemNHVmphV1pwWXlCdFpYUm9iMlJ6TENCc2FXdGxJR0YxZEdobGJuUnBZMkYwYVc5dUxDQnphV2R1YVc1bklIVndMQ0JoYm1RZ2RtRnNhV1JoZEdsdmJpQnZabHh1SUNBZ0tpQjFibWx4ZFdWdVpYTnpMand2Y0Q1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGxWelpYSWdQU0JRWVhKelpTNVBZbXBsWTNRdVpYaDBaVzVrS0Z3aVgxVnpaWEpjSWl3Z0x5b3FJRUJzWlc1a2N5QlFZWEp6WlM1VmMyVnlMbkJ5YjNSdmRIbHdaU0FxTHlCN1hHNGdJQ0FnTHk4Z1NXNXpkR0Z1WTJVZ1ZtRnlhV0ZpYkdWelhHNGdJQ0FnWDJselEzVnljbVZ1ZEZWelpYSTZJR1poYkhObExGeHVYRzVjYmlBZ0lDQXZMeUJKYm5OMFlXNWpaU0JOWlhSb2IyUnpYRzRnSUNBZ1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1RXVnlaMlZ6SUdGdWIzUm9aWElnYjJKcVpXTjBKM01nWVhSMGNtbGlkWFJsY3lCcGJuUnZJSFJvYVhNZ2IySnFaV04wTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRjl0WlhKblpVWnliMjFQWW1wbFkzUTZJR1oxYm1OMGFXOXVLRzkwYUdWeUtTQjdYRzRnSUNBZ0lDQnBaaUFvYjNSb1pYSXVaMlYwVTJWemMybHZibFJ2YTJWdUtDa3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjMlZ6YzJsdmJsUnZhMlZ1SUQwZ2IzUm9aWEl1WjJWMFUyVnpjMmx2YmxSdmEyVnVLQ2s3SUNBZ0lDQWdYRzRnSUNBZ0lDQjlJQ0FnSUZ4dUlDQWdJQ0FnVUdGeWMyVXVWWE5sY2k1ZlgzTjFjR1Z5WDE4dVgyMWxjbWRsUm5KdmJVOWlhbVZqZEM1allXeHNLSFJvYVhNc0lHOTBhR1Z5S1R0Y2JpQWdJQ0I5TENBZ0lDQmNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1ZEdWeWJtRnNJRzFsZEdodlpDQjBieUJvWVc1a2JHVWdjM0JsWTJsaGJDQm1hV1ZzWkhNZ2FXNGdZU0JmVlhObGNpQnlaWE53YjI1elpTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCZmJXVnlaMlZOWVdkcFkwWnBaV3hrY3pvZ1puVnVZM1JwYjI0b1lYUjBjbk1wSUh0Y2JpQWdJQ0FnSUdsbUlDaGhkSFJ5Y3k1elpYTnphVzl1Vkc5clpXNHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjMlZ6YzJsdmJsUnZhMlZ1SUQwZ1lYUjBjbk11YzJWemMybHZibFJ2YTJWdU8xeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1lYUjBjbk11YzJWemMybHZibFJ2YTJWdU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1VHRnljMlV1VlhObGNpNWZYM04xY0dWeVgxOHVYMjFsY21kbFRXRm5hV05HYVdWc1pITXVZMkZzYkNoMGFHbHpMQ0JoZEhSeWN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsYlc5MlpYTWdiblZzYkNCMllXeDFaWE1nWm5KdmJTQmhkWFJvUkdGMFlTQW9kMmhwWTJnZ1pYaHBjM1FnZEdWdGNHOXlZWEpwYkhrZ1ptOXlYRzRnSUNBZ0lDb2dkVzVzYVc1cmFXNW5LVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOWpiR1ZoYm5Wd1FYVjBhRVJoZEdFNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdhV1lnS0NGMGFHbHpMbWx6UTNWeWNtVnVkQ2dwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhaaGNpQmhkWFJvUkdGMFlTQTlJSFJvYVhNdVoyVjBLQ2RoZFhSb1JHRjBZU2NwTzF4dUlDQWdJQ0FnYVdZZ0tDRmhkWFJvUkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQlFZWEp6WlM1ZmIySnFaV04wUldGamFDaDBhR2x6TG1kbGRDZ25ZWFYwYUVSaGRHRW5LU3dnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdGMWRHaEVZWFJoVzJ0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnWVhWMGFFUmhkR0ZiYTJWNVhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZONWJtTm9jbTl1YVhwbGN5QmhkWFJvUkdGMFlTQm1iM0lnWVd4c0lIQnliM1pwWkdWeWN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCZmMzbHVZMmh5YjI1cGVtVkJiR3hCZFhSb1JHRjBZVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdZWFYwYUVSaGRHRWdQU0IwYUdsekxtZGxkQ2duWVhWMGFFUmhkR0VuS1R0Y2JpQWdJQ0FnSUdsbUlDZ2hZWFYwYUVSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQlFZWEp6WlM1ZmIySnFaV04wUldGamFDaDBhR2x6TG1kbGRDZ25ZWFYwYUVSaGRHRW5LU3dnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5emVXNWphSEp2Ym1sNlpVRjFkR2hFWVhSaEtHdGxlU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UzbHVZMmh5YjI1cGVtVnpJR0YxZEdnZ1pHRjBZU0JtYjNJZ1lTQndjbTkyYVdSbGNpQW9aUzVuTGlCd2RYUnpJSFJvWlNCaFkyTmxjM01nZEc5clpXNGdhVzRnZEdobFhHNGdJQ0FnSUNvZ2NtbG5hSFFnY0d4aFkyVWdkRzhnWW1VZ2RYTmxaQ0JpZVNCMGFHVWdSbUZqWldKdmIyc2dVMFJMS1M1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYzNsdVkyaHliMjVwZW1WQmRYUm9SR0YwWVRvZ1puVnVZM1JwYjI0b2NISnZkbWxrWlhJcElIdGNiaUFnSUNBZ0lHbG1JQ2doZEdocGN5NXBjME4xY25KbGJuUW9LU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IyWVhJZ1lYVjBhRlI1Y0dVN1hHNGdJQ0FnSUNCcFppQW9YeTVwYzFOMGNtbHVaeWh3Y205MmFXUmxjaWtwSUh0Y2JpQWdJQ0FnSUNBZ1lYVjBhRlI1Y0dVZ1BTQndjbTkyYVdSbGNqdGNiaUFnSUNBZ0lDQWdjSEp2ZG1sa1pYSWdQU0JRWVhKelpTNVZjMlZ5TGw5aGRYUm9VSEp2ZG1sa1pYSnpXMkYxZEdoVWVYQmxYVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR0YxZEdoVWVYQmxJRDBnY0hKdmRtbGtaWEl1WjJWMFFYVjBhRlI1Y0dVb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJoZFhSb1JHRjBZU0E5SUhSb2FYTXVaMlYwS0NkaGRYUm9SR0YwWVNjcE8xeHVJQ0FnSUNBZ2FXWWdLQ0ZoZFhSb1JHRjBZU0I4ZkNBaGNISnZkbWxrWlhJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtRnlJSE4xWTJObGMzTWdQU0J3Y205MmFXUmxjaTV5WlhOMGIzSmxRWFYwYUdWdWRHbGpZWFJwYjI0b1lYVjBhRVJoZEdGYllYVjBhRlI1Y0dWZEtUdGNiaUFnSUNBZ0lHbG1JQ2doYzNWalkyVnpjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkxYm14cGJtdEdjbTl0S0hCeWIzWnBaR1Z5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDJoaGJtUnNaVk5oZG1WU1pYTjFiSFE2SUdaMWJtTjBhVzl1S0cxaGEyVkRkWEp5Wlc1MEtTQjdYRzRnSUNBZ0lDQXZMeUJEYkdWaGJpQjFjQ0JoYm1RZ2MzbHVZMmh5YjI1cGVtVWdkR2hsSUdGMWRHaEVZWFJoSUc5aWFtVmpkQ3dnY21WdGIzWnBibWNnWVc1NUlIVnVjMlYwSUhaaGJIVmxjMXh1SUNBZ0lDQWdhV1lnS0cxaGEyVkRkWEp5Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHpRM1Z5Y21WdWRGVnpaWElnUFNCMGNuVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k1ZlkyeGxZVzUxY0VGMWRHaEVZWFJoS0NrN1hHNGdJQ0FnSUNCMGFHbHpMbDl6ZVc1amFISnZibWw2WlVGc2JFRjFkR2hFWVhSaEtDazdYRzRnSUNBZ0lDQXZMeUJFYjI0bmRDQnJaV1Z3SUhSb1pTQndZWE56ZDI5eVpDQmhjbTkxYm1RdVhHNGdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NWZjMlZ5ZG1WeVJHRjBZUzV3WVhOemQyOXlaRHRjYmlBZ0lDQWdJSFJvYVhNdVgzSmxZblZwYkdSRmMzUnBiV0YwWldSRVlYUmhSbTl5UzJWNUtGd2ljR0Z6YzNkdmNtUmNJaWs3WEc0Z0lDQWdJQ0IwYUdsekxsOXlaV1p5WlhOb1EyRmphR1VvS1R0Y2JpQWdJQ0FnSUdsbUlDaHRZV3RsUTNWeWNtVnVkQ0I4ZkNCMGFHbHpMbWx6UTNWeWNtVnVkQ2dwS1NCN1hHNGdJQ0FnSUNBZ0lGQmhjbk5sTGxWelpYSXVYM05oZG1WRGRYSnlaVzUwVlhObGNpaDBhR2x6S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZXNXNhV3RsSUdsdUlIUm9aU0JCYm1SeWIybGtMMmxQVXlCVFJFdHpMQ0JzYjJkSmJsZHBkR2dnYVhNZ2RXNXVaV05sYzNOaGNua3NJSE5wYm1ObElIbHZkU0JqWVc1Y2JpQWdJQ0FnS2lCallXeHNJR3hwYm10WGFYUm9JRzl1SUhSb1pTQjFjMlZ5SUNobGRtVnVJR2xtSUdsMElHUnZaWE51SjNRZ1pYaHBjM1FnZVdWMElHOXVJSFJvWlNCelpYSjJaWElwTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRjlzYVc1clYybDBhRG9nWm5WdVkzUnBiMjRvY0hKdmRtbGtaWElzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUhaaGNpQmhkWFJvVkhsd1pUdGNiaUFnSUNBZ0lHbG1JQ2hmTG1selUzUnlhVzVuS0hCeWIzWnBaR1Z5S1NrZ2UxeHVJQ0FnSUNBZ0lDQmhkWFJvVkhsd1pTQTlJSEJ5YjNacFpHVnlPMXh1SUNBZ0lDQWdJQ0J3Y205MmFXUmxjaUE5SUZCaGNuTmxMbFZ6WlhJdVgyRjFkR2hRY205MmFXUmxjbk5iY0hKdmRtbGtaWEpkTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWVhWMGFGUjVjR1VnUFNCd2NtOTJhV1JsY2k1blpYUkJkWFJvVkhsd1pTZ3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0Y4dWFHRnpLRzl3ZEdsdmJuTXNJQ2RoZFhSb1JHRjBZU2NwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoZFhSb1JHRjBZU0E5SUhSb2FYTXVaMlYwS0NkaGRYUm9SR0YwWVNjcElIeDhJSHQ5TzF4dUlDQWdJQ0FnSUNCaGRYUm9SR0YwWVZ0aGRYUm9WSGx3WlYwZ1BTQnZjSFJwYjI1ekxtRjFkR2hFWVhSaE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRDZ25ZWFYwYUVSaGRHRW5MQ0JoZFhSb1JHRjBZU2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdUM1psY25KcFpHUmxiaUJ6YnlCMGFHRjBJSFJvWlNCMWMyVnlJR05oYmlCaVpTQnRZV1JsSUhSb1pTQmpkWEp5Wlc1MElIVnpaWEl1WEc0Z0lDQWdJQ0FnSUhaaGNpQnVaWGRQY0hScGIyNXpJRDBnWHk1amJHOXVaU2h2Y0hScGIyNXpLU0I4ZkNCN2ZUdGNiaUFnSUNBZ0lDQWdibVYzVDNCMGFXOXVjeTV6ZFdOalpYTnpJRDBnWm5WdVkzUnBiMjRvYlc5a1pXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNCdGIyUmxiQzVmYUdGdVpHeGxVMkYyWlZKbGMzVnNkQ2gwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1emRXTmpaWE56S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbk4xWTJObGMzTXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmhkbVVvZXlkaGRYUm9SR0YwWVNjNklHRjFkR2hFWVhSaGZTd2dibVYzVDNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJSFpoY2lCd2NtOXRhWE5sSUQwZ2JtVjNJRkJoY25ObExsQnliMjFwYzJVb0tUdGNiaUFnSUNBZ0lDQWdjSEp2ZG1sa1pYSXVZWFYwYUdWdWRHbGpZWFJsS0h0Y2JpQWdJQ0FnSUNBZ0lDQnpkV05qWlhOek9pQm1kVzVqZEdsdmJpaHdjbTkyYVdSbGNpd2djbVZ6ZFd4MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeG1MbDlzYVc1clYybDBhQ2h3Y205MmFXUmxjaXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFhSb1JHRjBZVG9nY21WemRXeDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkV05qWlhOek9pQnZjSFJwYjI1ekxuTjFZMk5sYzNNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlPaUJ2Y0hScGIyNXpMbVZ5Y205eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205dGFYTmxMbkpsYzI5c2RtVW9jMlZzWmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUdWeWNtOXlPaUJtZFc1amRHbHZiaWh3Y205MmFXUmxjaXdnWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbVZ5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdVpYSnliM0lvYzJWc1ppd2daWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2YldselpTNXlaV3BsWTNRb1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y205dGFYTmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJWYm14cGJtdHpJR0VnZFhObGNpQm1jbTl0SUdFZ2MyVnlkbWxqWlM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmZFc1c2FXNXJSbkp2YlRvZ1puVnVZM1JwYjI0b2NISnZkbWxrWlhJc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lIWmhjaUJoZFhSb1ZIbHdaVHRjYmlBZ0lDQWdJR2xtSUNoZkxtbHpVM1J5YVc1bktIQnliM1pwWkdWeUtTa2dlMXh1SUNBZ0lDQWdJQ0JoZFhSb1ZIbHdaU0E5SUhCeWIzWnBaR1Z5TzF4dUlDQWdJQ0FnSUNCd2NtOTJhV1JsY2lBOUlGQmhjbk5sTGxWelpYSXVYMkYxZEdoUWNtOTJhV1JsY25OYmNISnZkbWxrWlhKZE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1lYVjBhRlI1Y0dVZ1BTQndjbTkyYVdSbGNpNW5aWFJCZFhSb1ZIbHdaU2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZG1GeUlHNWxkMDl3ZEdsdmJuTWdQU0JmTG1Oc2IyNWxLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVJQ0FnSUNBZ2JtVjNUM0IwYVc5dWN5NWhkWFJvUkdGMFlTQTlJRzUxYkd3N1hHNGdJQ0FnSUNCdVpYZFBjSFJwYjI1ekxuTjFZMk5sYzNNZ1BTQm1kVzVqZEdsdmJpaHRiMlJsYkNrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTGw5emVXNWphSEp2Ym1sNlpVRjFkR2hFWVhSaEtIQnliM1pwWkdWeUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11YzNWalkyVnpjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWMzVmpZMlZ6Y3k1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyeHBibXRYYVhSb0tIQnliM1pwWkdWeUxDQnVaWGRQY0hScGIyNXpLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJobFkydHpJSGRvWlhSb1pYSWdZU0IxYzJWeUlHbHpJR3hwYm10bFpDQjBieUJoSUhObGNuWnBZMlV1WEc0Z0lDQWdJQ292WEc0Z0lDQWdYMmx6VEdsdWEyVmtPaUJtZFc1amRHbHZiaWh3Y205MmFXUmxjaWtnZTF4dUlDQWdJQ0FnZG1GeUlHRjFkR2hVZVhCbE8xeHVJQ0FnSUNBZ2FXWWdLRjh1YVhOVGRISnBibWNvY0hKdmRtbGtaWElwS1NCN1hHNGdJQ0FnSUNBZ0lHRjFkR2hVZVhCbElEMGdjSEp2ZG1sa1pYSTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmhkWFJvVkhsd1pTQTlJSEJ5YjNacFpHVnlMbWRsZEVGMWRHaFVlWEJsS0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMllYSWdZWFYwYUVSaGRHRWdQU0IwYUdsekxtZGxkQ2duWVhWMGFFUmhkR0VuS1NCOGZDQjdmVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQWhJV0YxZEdoRVlYUmhXMkYxZEdoVWVYQmxYVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUkdWaGRYUm9aVzUwYVdOaGRHVnpJR0ZzYkNCd2NtOTJhV1JsY25NdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJ4dlowOTFkRmRwZEdoQmJHdzZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHRjFkR2hFWVhSaElEMGdkR2hwY3k1blpYUW9KMkYxZEdoRVlYUmhKeWs3WEc0Z0lDQWdJQ0JwWmlBb0lXRjFkR2hFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUZCaGNuTmxMbDl2WW1wbFkzUkZZV05vS0hSb2FYTXVaMlYwS0NkaGRYUm9SR0YwWVNjcExDQm1kVzVqZEdsdmJpaDJZV3gxWlN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUhObGJHWXVYMnh2WjA5MWRGZHBkR2dvYTJWNUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJFWldGMWRHaGxiblJwWTJGMFpYTWdZU0J6YVc1bmJHVWdjSEp2ZG1sa1pYSWdLR1V1Wnk0Z2NtVnRiM1pwYm1jZ1lXTmpaWE56SUhSdmEyVnVjeUJtY205dElIUm9aVnh1SUNBZ0lDQXFJRVpoWTJWaWIyOXJJRk5FU3lrdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJ4dlowOTFkRmRwZEdnNklHWjFibU4wYVc5dUtIQnliM1pwWkdWeUtTQjdYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVhWE5EZFhKeVpXNTBLQ2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tGOHVhWE5UZEhKcGJtY29jSEp2ZG1sa1pYSXBLU0I3WEc0Z0lDQWdJQ0FnSUhCeWIzWnBaR1Z5SUQwZ1VHRnljMlV1VlhObGNpNWZZWFYwYUZCeWIzWnBaR1Z5YzF0d2NtOTJhV1JsY2wwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9jSEp2ZG1sa1pYSWdKaVlnY0hKdmRtbGtaWEl1WkdWaGRYUm9aVzUwYVdOaGRHVXBJSHRjYmlBZ0lDQWdJQ0FnY0hKdmRtbGtaWEl1WkdWaGRYUm9aVzUwYVdOaGRHVW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJsbmJuTWdkWEFnWVNCdVpYY2dkWE5sY2k0Z1dXOTFJSE5vYjNWc1pDQmpZV3hzSUhSb2FYTWdhVzV6ZEdWaFpDQnZaaUJ6WVhabElHWnZjbHh1SUNBZ0lDQXFJRzVsZHlCUVlYSnpaUzVWYzJWeWN5NGdWR2hwY3lCM2FXeHNJR055WldGMFpTQmhJRzVsZHlCUVlYSnpaUzVWYzJWeUlHOXVJSFJvWlNCelpYSjJaWElzSUdGdVpGeHVJQ0FnSUNBcUlHRnNjMjhnY0dWeWMybHpkQ0IwYUdVZ2MyVnpjMmx2YmlCdmJpQmthWE5ySUhOdklIUm9ZWFFnZVc5MUlHTmhiaUJoWTJObGMzTWdkR2hsSUhWelpYSWdkWE5wYm1kY2JpQWdJQ0FnS2lBOFkyOWtaVDVqZFhKeVpXNTBQQzlqYjJSbFBpNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlEeHdQa0VnZFhObGNtNWhiV1VnWVc1a0lIQmhjM04zYjNKa0lHMTFjM1FnWW1VZ2MyVjBJR0psWm05eVpTQmpZV3hzYVc1bklITnBaMjVWY0M0OEwzQStYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQThjRDVEWVd4c2N5QnZjSFJwYjI1ekxuTjFZMk5sYzNNZ2IzSWdiM0IwYVc5dWN5NWxjbkp2Y2lCdmJpQmpiMjF3YkdWMGFXOXVMand2Y0Q1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JoZEhSeWN5QkZlSFJ5WVNCbWFXVnNaSE1nZEc4Z2MyVjBJRzl1SUhSb1pTQnVaWGNnZFhObGNpd2diM0lnYm5Wc2JDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lCQklFSmhZMnRpYjI1bExYTjBlV3hsSUc5d2RHbHZibk1nYjJKcVpXTjBMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJoY25ObExsQnliMjFwYzJWOUlFRWdjSEp2YldselpTQjBhR0YwSUdseklHWjFiR1pwYkd4bFpDQjNhR1Z1SUhSb1pTQnphV2R1ZFhCY2JpQWdJQ0FnS2lBZ0lDQWdabWx1YVhOb1pYTXVYRzRnSUNBZ0lDb2dRSE5sWlNCUVlYSnpaUzVWYzJWeUxuTnBaMjVWY0Z4dUlDQWdJQ0FxTDF4dUlDQWdJSE5wWjI1VmNEb2dablZ1WTNScGIyNG9ZWFIwY25Nc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lIWmhjaUJsY25KdmNqdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dVhHNGdJQ0FnSUNCMllYSWdkWE5sY201aGJXVWdQU0FvWVhSMGNuTWdKaVlnWVhSMGNuTXVkWE5sY201aGJXVXBJSHg4SUhSb2FYTXVaMlYwS0Z3aWRYTmxjbTVoYldWY0lpazdYRzRnSUNBZ0lDQnBaaUFvSVhWelpYSnVZVzFsSUh4OElDaDFjMlZ5Ym1GdFpTQTlQVDBnWENKY0lpa3BJSHRjYmlBZ0lDQWdJQ0FnWlhKeWIzSWdQU0J1WlhjZ1VHRnljMlV1UlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCUVlYSnpaUzVGY25KdmNpNVBWRWhGVWw5RFFWVlRSU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lRMkZ1Ym05MElITnBaMjRnZFhBZ2RYTmxjaUIzYVhSb0lHRnVJR1Z0Y0hSNUlHNWhiV1V1WENJcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeUFtSmlCdmNIUnBiMjV6TG1WeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1bGNuSnZjaWgwYUdsekxDQmxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQmhjbk5sTGxCeWIyMXBjMlV1WlhKeWIzSW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjJZWElnY0dGemMzZHZjbVFnUFNBb1lYUjBjbk1nSmlZZ1lYUjBjbk11Y0dGemMzZHZjbVFwSUh4OElIUm9hWE11WjJWMEtGd2ljR0Z6YzNkdmNtUmNJaWs3WEc0Z0lDQWdJQ0JwWmlBb0lYQmhjM04zYjNKa0lIeDhJQ2h3WVhOemQyOXlaQ0E5UFQwZ1hDSmNJaWtwSUh0Y2JpQWdJQ0FnSUNBZ1pYSnliM0lnUFNCdVpYY2dVR0Z5YzJVdVJYSnliM0lvWEc0Z0lDQWdJQ0FnSUNBZ0lDQlFZWEp6WlM1RmNuSnZjaTVQVkVoRlVsOURRVlZUUlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpUTJGdWJtOTBJSE5wWjI0Z2RYQWdkWE5sY2lCM2FYUm9JR0Z1SUdWdGNIUjVJSEJoYzNOM2IzSmtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTWdKaVlnYjNCMGFXOXVjeTVsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11WlhKeWIzSW9kR2hwY3l3Z1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUVlYSnpaUzVRY205dGFYTmxMbVZ5Y205eUtHVnljbTl5S1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdUM1psY25KcFpHUmxiaUJ6YnlCMGFHRjBJSFJvWlNCMWMyVnlJR05oYmlCaVpTQnRZV1JsSUhSb1pTQmpkWEp5Wlc1MElIVnpaWEl1WEc0Z0lDQWdJQ0IyWVhJZ2JtVjNUM0IwYVc5dWN5QTlJRjh1WTJ4dmJtVW9iM0IwYVc5dWN5azdYRzRnSUNBZ0lDQnVaWGRQY0hScGIyNXpMbk4xWTJObGMzTWdQU0JtZFc1amRHbHZiaWh0YjJSbGJDa2dlMXh1SUNBZ0lDQWdJQ0J0YjJSbGJDNWZhR0Z1Wkd4bFUyRjJaVkpsYzNWc2RDaFFZWEp6WlM1VmMyVnlMbDlqWVc1VmMyVkRkWEp5Wlc1MFZYTmxjaWdwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVjM1ZqWTJWemN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11YzNWalkyVnpjeTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJGMlpTaGhkSFJ5Y3l3Z2JtVjNUM0IwYVc5dWN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRXh2WjNNZ2FXNGdZU0JRWVhKelpTNVZjMlZ5TGlCUGJpQnpkV05qWlhOekxDQjBhR2x6SUhOaGRtVnpJSFJvWlNCelpYTnphVzl1SUhSdklHeHZZMkZzVTNSdmNtRm5aU3hjYmlBZ0lDQWdLaUJ6YnlCNWIzVWdZMkZ1SUhKbGRISnBaWFpsSUhSb1pTQmpkWEp5Wlc1MGJIa2diRzluWjJWa0lHbHVJSFZ6WlhJZ2RYTnBibWRjYmlBZ0lDQWdLaUE4WTI5a1pUNWpkWEp5Wlc1MFBDOWpiMlJsUGk1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUR4d1BrRWdkWE5sY201aGJXVWdZVzVrSUhCaGMzTjNiM0prSUcxMWMzUWdZbVVnYzJWMElHSmxabTl5WlNCallXeHNhVzVuSUd4dlowbHVMand2Y0Q1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUR4d1BrTmhiR3h6SUc5d2RHbHZibk11YzNWalkyVnpjeUJ2Y2lCdmNIUnBiMjV6TG1WeWNtOXlJRzl1SUdOdmJYQnNaWFJwYjI0dVBDOXdQbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ1FTQkNZV05yWW05dVpTMXpkSGxzWlNCdmNIUnBiMjV6SUc5aWFtVmpkQzVjYmlBZ0lDQWdLaUJBYzJWbElGQmhjbk5sTGxWelpYSXViRzluU1c1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVRY205dGFYTmxmU0JCSUhCeWIyMXBjMlVnZEdoaGRDQnBjeUJtZFd4bWFXeHNaV1FnZDJsMGFDQjBhR1VnZFhObGNpQjNhR1Z1WEc0Z0lDQWdJQ29nSUNBZ0lIUm9aU0JzYjJkcGJpQnBjeUJqYjIxd2JHVjBaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnNiMmRKYmpvZ1puVnVZM1JwYjI0b2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0ZRWVhKelpTNVZjMlZ5TGw5allXNVZjMlZEZFhKeVpXNTBWWE5sY2lncEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FuU1hRZ2FYTWdibTkwSUhCdmMzTnBZbXhsSUhSdklHeHZaeUJwYmlCdmJpQmhJSE5sY25abGNpQmxiblpwY205dWJXVnVkQzRuWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMllYSWdiVzlrWld3Z1BTQjBhR2x6TzF4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzRnSUNBZ0lDQjJZWElnY21WeGRXVnpkQ0E5SUZCaGNuTmxMbDl5WlhGMVpYTjBLSHRjYmlBZ0lDQWdJQ0FnY205MWRHVTZJRndpYkc5bmFXNWNJaXhjYmlBZ0lDQWdJQ0FnYldWMGFHOWtPaUJjSWtkRlZGd2lMRnh1SUNBZ0lDQWdJQ0IxYzJWTllYTjBaWEpMWlhrNklHOXdkR2x2Ym5NdWRYTmxUV0Z6ZEdWeVMyVjVMRnh1SUNBZ0lDQWdJQ0JrWVhSaE9pQjBhR2x6TG5SdlNsTlBUaWdwWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ5WlhGMVpYTjBMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpjQ3dnYzNSaGRIVnpMQ0I0YUhJcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhObGNuWmxja0YwZEhKeklEMGdiVzlrWld3dWNHRnljMlVvY21WemNDd2djM1JoZEhWekxDQjRhSElwTzF4dUlDQWdJQ0FnSUNCdGIyUmxiQzVmWm1sdWFYTm9SbVYwWTJnb2MyVnlkbVZ5UVhSMGNuTXBPMXh1SUNBZ0lDQWdJQ0J0YjJSbGJDNWZhR0Z1Wkd4bFUyRjJaVkpsYzNWc2RDaDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxdlpHVnNPMXh1SUNBZ0lDQWdmU2t1WDNSb1pXNVNkVzVEWVd4c1ltRmphM01vYjNCMGFXOXVjeXdnZEdocGN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ6WldVZ1VHRnljMlV1VDJKcVpXTjBJM05oZG1WY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WVhabE9pQm1kVzVqZEdsdmJpaGhjbWN4TENCaGNtY3lMQ0JoY21jektTQjdYRzRnSUNBZ0lDQjJZWElnYVN3Z1lYUjBjbk1zSUdOMWNuSmxiblFzSUc5d2RHbHZibk1zSUhOaGRtVmtPMXh1SUNBZ0lDQWdhV1lnS0Y4dWFYTlBZbXBsWTNRb1lYSm5NU2tnZkh3Z1h5NXBjMDUxYkd3b1lYSm5NU2tnZkh3Z1h5NXBjMVZ1WkdWbWFXNWxaQ2hoY21jeEtTa2dlMXh1SUNBZ0lDQWdJQ0JoZEhSeWN5QTlJR0Z5WnpFN1hHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NZ1BTQmhjbWN5TzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWVhSMGNuTWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ1lYUjBjbk5iWVhKbk1WMGdQU0JoY21jeU8xeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdZWEpuTXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1WEc0Z0lDQWdJQ0IyWVhJZ2JtVjNUM0IwYVc5dWN5QTlJRjh1WTJ4dmJtVW9iM0IwYVc5dWN5azdYRzRnSUNBZ0lDQnVaWGRQY0hScGIyNXpMbk4xWTJObGMzTWdQU0JtZFc1amRHbHZiaWh0YjJSbGJDa2dlMXh1SUNBZ0lDQWdJQ0J0YjJSbGJDNWZhR0Z1Wkd4bFUyRjJaVkpsYzNWc2RDaG1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbk4xWTJObGMzTXBJSHRjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG5OMVkyTmxjM011WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQlFZWEp6WlM1UFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5OaGRtVXVZMkZzYkNoMGFHbHpMQ0JoZEhSeWN5d2dibVYzVDNCMGFXOXVjeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCelpXVWdVR0Z5YzJVdVQySnFaV04wSTJabGRHTm9YRzRnSUNBZ0lDb3ZYRzRnSUNBZ1ptVjBZMmc2SUdaMWJtTjBhVzl1S0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUhaaGNpQnVaWGRQY0hScGIyNXpJRDBnYjNCMGFXOXVjeUEvSUY4dVkyeHZibVVvYjNCMGFXOXVjeWtnT2lCN2ZUdGNiaUFnSUNBZ0lHNWxkMDl3ZEdsdmJuTXVjM1ZqWTJWemN5QTlJR1oxYm1OMGFXOXVLRzF2WkdWc0tTQjdYRzRnSUNBZ0lDQWdJRzF2WkdWc0xsOW9ZVzVrYkdWVFlYWmxVbVZ6ZFd4MEtHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTWdKaVlnYjNCMGFXOXVjeTV6ZFdOalpYTnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1emRXTmpaWE56TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVQySnFaV04wTG5CeWIzUnZkSGx3WlM1bVpYUmphQzVqWVd4c0tIUm9hWE1zSUc1bGQwOXdkR2x2Ym5NcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWFIxY201eklIUnlkV1VnYVdZZ1BHTnZaR1UrWTNWeWNtVnVkRHd2WTI5a1pUNGdkMjkxYkdRZ2NtVjBkWEp1SUhSb2FYTWdkWE5sY2k1Y2JpQWdJQ0FnS2lCQWMyVmxJRkJoY25ObExsVnpaWElqWTNWeWNtVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHpRM1Z5Y21WdWREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFYTkRkWEp5Wlc1MFZYTmxjanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUJuWlhRb1hDSjFjMlZ5Ym1GdFpWd2lLUzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRUZEhKcGJtZDlYRzRnSUNBZ0lDb2dRSE5sWlNCUVlYSnpaUzVQWW1wbFkzUWpaMlYwWEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwVlhObGNtNWhiV1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwS0Z3aWRYTmxjbTVoYldWY0lpazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5oYkd4eklITmxkQ2hjSW5WelpYSnVZVzFsWENJc0lIVnpaWEp1WVcxbExDQnZjSFJwYjI1ektTQmhibVFnY21WMGRYSnVjeUIwYUdVZ2NtVnpkV3gwTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0IxYzJWeWJtRnRaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklFRWdRbUZqYTJKdmJtVXRjM1I1YkdVZ2IzQjBhVzl1Y3lCdlltcGxZM1F1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjFjYmlBZ0lDQWdLaUJBYzJWbElGQmhjbk5sTGs5aWFtVmpkQzV6WlhSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WlhSVmMyVnlibUZ0WlRvZ1puVnVZM1JwYjI0b2RYTmxjbTVoYldVc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5sZENoY0luVnpaWEp1WVcxbFhDSXNJSFZ6WlhKdVlXMWxMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJGc2JITWdjMlYwS0Z3aWNHRnpjM2R2Y21SY0lpd2djR0Z6YzNkdmNtUXNJRzl3ZEdsdmJuTXBJR0Z1WkNCeVpYUjFjbTV6SUhSb1pTQnlaWE4xYkhRdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUhCaGMzTjNiM0prWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdRU0JDWVdOclltOXVaUzF6ZEhsc1pTQnZjSFJwYjI1eklHOWlhbVZqZEM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FxSUVCelpXVWdVR0Z5YzJVdVQySnFaV04wTG5ObGRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGQmhjM04zYjNKa09pQm1kVzVqZEdsdmJpaHdZWE56ZDI5eVpDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtGd2ljR0Z6YzNkdmNtUmNJaXdnY0dGemMzZHZjbVFzSUc5d2RHbHZibk1wTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUdkbGRDaGNJbVZ0WVdsc1hDSXBMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMU4wY21sdVozMWNiaUFnSUNBZ0tpQkFjMlZsSUZCaGNuTmxMazlpYW1WamRDTm5aWFJjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJGYldGcGJEb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUW9YQ0psYldGcGJGd2lLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJGc2JITWdjMlYwS0Z3aVpXMWhhV3hjSWl3Z1pXMWhhV3dzSUc5d2RHbHZibk1wSUdGdVpDQnlaWFIxY201eklIUm9aU0J5WlhOMWJIUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHVnRZV2xzWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdRU0JDWVdOclltOXVaUzF6ZEhsc1pTQnZjSFJwYjI1eklHOWlhbVZqZEM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FxSUVCelpXVWdVR0Z5YzJVdVQySnFaV04wTG5ObGRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRFVnRZV2xzT2lCbWRXNWpkR2x2YmlobGJXRnBiQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBLRndpWlcxaGFXeGNJaXdnWlcxaGFXd3NJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYUdWamEzTWdkMmhsZEdobGNpQjBhR2x6SUhWelpYSWdhWE1nZEdobElHTjFjbkpsYm5RZ2RYTmxjaUJoYm1RZ2FHRnpJR0psWlc0Z1lYVjBhR1Z1ZEdsallYUmxaQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJQ2hDYjI5c1pXRnVLU0IzYUdWMGFHVnlJSFJvYVhNZ2RYTmxjaUJwY3lCMGFHVWdZM1Z5Y21WdWRDQjFjMlZ5SUdGdVpDQnBjeUJzYjJkblpXUWdhVzR1WEc0Z0lDQWdJQ292WEc0Z0lDQWdZWFYwYUdWdWRHbGpZWFJsWkRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0lTRjBhR2x6TGw5elpYTnphVzl1Vkc5clpXNGdKaVpjYmlBZ0lDQWdJQ0FnSUNBb1VHRnljMlV1VlhObGNpNWpkWEp5Wlc1MEtDa2dKaVlnVUdGeWMyVXVWWE5sY2k1amRYSnlaVzUwS0NrdWFXUWdQVDA5SUhSb2FYTXVhV1FwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQnpaWE56YVc5dUlIUnZhMlZ1SUdadmNpQjBhR2x6SUhWelpYSXNJR2xtSUhSb1pTQjFjMlZ5SUdoaGN5QmlaV1Z1SUd4dloyZGxaQ0JwYml4Y2JpQWdJQ0FnS2lCdmNpQnBaaUJwZENCcGN5QjBhR1VnY21WemRXeDBJRzltSUdFZ2NYVmxjbmtnZDJsMGFDQjBhR1VnYldGemRHVnlJR3RsZVM0Z1QzUm9aWEozYVhObExDQnlaWFIxY201elhHNGdJQ0FnSUNvZ2RXNWtaV1pwYm1Wa0xseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxTjBjbWx1WjMwZ2RHaGxJSE5sYzNOcGIyNGdkRzlyWlc0c0lHOXlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRk5sYzNOcGIyNVViMnRsYmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzJWemMybHZibFJ2YTJWdU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWEYxWlhOMElHRWdjbVYyYjJOaFlteGxJSE5sYzNOcGIyNGdkRzlyWlc0Z2RHOGdjbVZ3YkdGalpTQjBhR1VnYjJ4a1pYSWdjM1I1YkdVZ2IyWWdkRzlyWlc0dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nUVNCQ1lXTnJZbTl1WlMxemRIbHNaU0J2Y0hScGIyNXpJRzlpYW1WamRDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGxCeWIyMXBjMlY5SUVFZ2NISnZiV2x6WlNCMGFHRjBJR2x6SUhKbGMyOXNkbVZrSUhkb1pXNGdkR2hsSUhKbGNHeGhZMlZ0Wlc1MFhHNGdJQ0FnSUNvZ0lDQjBiMnRsYmlCb1lYTWdZbVZsYmlCbVpYUmphR1ZrTGx4dUlDQWdJQ0FxTDF4dUlDQWdJRjkxY0dkeVlXUmxWRzlTWlhadlkyRmliR1ZUWlhOemFXOXVPaUJtZFc1amRHbHZiaWh2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNiaUFnSUNBZ0lHbG1JQ2doVUdGeWMyVXVWWE5sY2k1amRYSnlaVzUwS0NrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQmhjbk5sTGxCeWIyMXBjMlV1WVhNb0tTNWZkR2hsYmxKMWJrTmhiR3hpWVdOcmN5aHZjSFJwYjI1ektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJqZFhKeVpXNTBVMlZ6YzJsdmJpQTlJRkJoY25ObExsVnpaWEl1WTNWeWNtVnVkQ2dwTG1kbGRGTmxjM05wYjI1VWIydGxiaWdwTzF4dUlDQWdJQ0FnYVdZZ0tGQmhjbk5sTGxObGMzTnBiMjR1WDJselVtVjJiMk5oWW14bEtHTjFjbkpsYm5SVFpYTnphVzl1S1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1VUhKdmJXbHpaUzVoY3lncExsOTBhR1Z1VW5WdVEyRnNiR0poWTJ0ektHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbDl5WlhGMVpYTjBLSHRjYmlBZ0lDQWdJQ0FnY205MWRHVTZJQ2QxY0dkeVlXUmxWRzlTWlhadlkyRmliR1ZUWlhOemFXOXVKeXhjYmlBZ0lDQWdJQ0FnYldWMGFHOWtPaUFuVUU5VFZDY3NYRzRnSUNBZ0lDQWdJSFZ6WlUxaGMzUmxja3RsZVRvZ2IzQjBhVzl1Y3k1MWMyVk5ZWE4wWlhKTFpYa3NYRzRnSUNBZ0lDQWdJSE5sYzNOcGIyNVViMnRsYmpvZ1kzVnljbVZ1ZEZObGMzTnBiMjVjYmlBZ0lDQWdJSDBwTG5Sb1pXNG9ablZ1WTNScGIyNG9jbVZ6ZFd4MEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCelpYTnphVzl1SUQwZ2JtVjNJRkJoY25ObExsTmxjM05wYjI0b0tUdGNiaUFnSUNBZ0lDQWdjMlZ6YzJsdmJpNWZabWx1YVhOb1JtVjBZMmdvY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHTjFjbkpsYm5SVmMyVnlJRDBnVUdGeWMyVXVWWE5sY2k1amRYSnlaVzUwS0NrN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SVmMyVnlMbDl6WlhOemFXOXVWRzlyWlc0Z1BTQnpaWE56YVc5dUxtZGxkRk5sYzNOcGIyNVViMnRsYmlncE8xeHVJQ0FnSUNBZ0lDQlFZWEp6WlM1VmMyVnlMbDl6WVhabFEzVnljbVZ1ZEZWelpYSW9ZM1Z5Y21WdWRGVnpaWElwTzF4dUlDQWdJQ0FnZlNrdVgzUm9aVzVTZFc1RFlXeHNZbUZqYTNNb2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZlN4Y2JseHVJQ0I5TENBdktpb2dRR3hsYm1SeklGQmhjbk5sTGxWelpYSWdLaThnZTF4dUlDQWdJQzh2SUVOc1lYTnpJRlpoY21saFlteGxjMXh1WEc0Z0lDQWdMeThnVkdobElHTjFjbkpsYm5Sc2VTQnNiMmRuWldRdGFXNGdkWE5sY2k1Y2JpQWdJQ0JmWTNWeWNtVnVkRlZ6WlhJNklHNTFiR3dzWEc1Y2JpQWdJQ0F2THlCWGFHVjBhR1Z5SUdOMWNuSmxiblJWYzJWeUlHbHpJR3R1YjNkdUlIUnZJRzFoZEdOb0lIUm9aU0J6WlhKcFlXeHBlbVZrSUhabGNuTnBiMjRnYjI0Z1pHbHpheTVjYmlBZ0lDQXZMeUJVYUdseklHbHpJSFZ6WldaMWJDQm1iM0lnYzJGMmFXNW5JR0VnYkc5allXeHpkRzl5WVdkbElHTm9aV05ySUdsbUlIbHZkU0IwY25rZ2RHOGdiRzloWkZ4dUlDQWdJQzh2SUY5amRYSnlaVzUwVlhObGNpQm1jbVZ4ZFdWdWRHeDVJSGRvYVd4bElIUm9aWEpsSUdseklHNXZibVVnYzNSdmNtVmtMbHh1SUNBZ0lGOWpkWEp5Wlc1MFZYTmxjazFoZEdOb1pYTkVhWE5yT2lCbVlXeHpaU3hjYmx4dUlDQWdJQzh2SUZSb1pTQnNiMk5oYkZOMGIzSmhaMlVnYTJWNUlITjFabVpwZUNCMGFHRjBJSFJvWlNCamRYSnlaVzUwSUhWelpYSWdhWE1nYzNSdmNtVmtJSFZ1WkdWeUxseHVJQ0FnSUY5RFZWSlNSVTVVWDFWVFJWSmZTMFZaT2lCY0ltTjFjbkpsYm5SVmMyVnlYQ0lzWEc1Y2JpQWdJQ0F2THlCVWFHVWdiV0Z3Y0dsdVp5QnZaaUJoZFhSb0lIQnliM1pwWkdWeUlHNWhiV1Z6SUhSdklHRmpkSFZoYkNCd2NtOTJhV1JsY25OY2JpQWdJQ0JmWVhWMGFGQnliM1pwWkdWeWN6b2dlMzBzWEc1Y2JpQWdJQ0F2THlCWGFHVjBhR1Z5SUhSdklISmxkM0pwZEdVZ1kyeGhjM05PWVcxbElGVnpaWElnZEc4Z1gxVnpaWEpjYmlBZ0lDQmZjR1Z5Wm05eWJWVnpaWEpTWlhkeWFYUmxPaUIwY25WbExGeHVYRzRnSUNBZ0x5OGdWMmhsZEdobGNpQjBieUJ6Wlc1a0lHRWdVbVYyYjJOaFlteGxJRk5sYzNOcGIyNGdhR1ZoWkdWeVhHNGdJQ0FnWDJselVtVjJiMk5oWW14bFUyVnpjMmx2YmtWdVlXSnNaV1E2SUdaaGJITmxMRnh1WEc0Z0lDQWdMeThnVjJobGRHaGxjaUIwYnlCbGJtRmliR1VnWVNCdFpXMXZjbmt0ZFc1ellXWmxJR04xY25KbGJuUWdkWE5sY2lCcGJpQnViMlJsTG1welhHNGdJQ0FnWDJWdVlXSnNaVlZ1YzJGbVpVTjFjbkpsYm5SVmMyVnlPaUJtWVd4elpTeGNibHh1WEc0Z0lDQWdMeThnUTJ4aGMzTWdUV1YwYUc5a2MxeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMmxuYm5NZ2RYQWdZU0J1WlhjZ2RYTmxjaUIzYVhSb0lHRWdkWE5sY201aGJXVWdLRzl5SUdWdFlXbHNLU0JoYm1RZ2NHRnpjM2R2Y21RdVhHNGdJQ0FnSUNvZ1ZHaHBjeUIzYVd4c0lHTnlaV0YwWlNCaElHNWxkeUJRWVhKelpTNVZjMlZ5SUc5dUlIUm9aU0J6WlhKMlpYSXNJR0Z1WkNCaGJITnZJSEJsY25OcGMzUWdkR2hsWEc0Z0lDQWdJQ29nYzJWemMybHZiaUJwYmlCc2IyTmhiRk4wYjNKaFoyVWdjMjhnZEdoaGRDQjViM1VnWTJGdUlHRmpZMlZ6Y3lCMGFHVWdkWE5sY2lCMWMybHVaMXh1SUNBZ0lDQXFJSHRBYkdsdWF5QWpZM1Z5Y21WdWRIMHVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQThjRDVEWVd4c2N5QnZjSFJwYjI1ekxuTjFZMk5sYzNNZ2IzSWdiM0IwYVc5dWN5NWxjbkp2Y2lCdmJpQmpiMjF3YkdWMGFXOXVMand2Y0Q1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0IxYzJWeWJtRnRaU0JVYUdVZ2RYTmxjbTVoYldVZ0tHOXlJR1Z0WVdsc0tTQjBieUJ6YVdkdUlIVndJSGRwZEdndVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUhCaGMzTjNiM0prSUZSb1pTQndZWE56ZDI5eVpDQjBieUJ6YVdkdUlIVndJSGRwZEdndVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdGMGRISnpJRVY0ZEhKaElHWnBaV3hrY3lCMGJ5QnpaWFFnYjI0Z2RHaGxJRzVsZHlCMWMyVnlMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklFRWdRbUZqYTJKdmJtVXRjM1I1YkdVZ2IzQjBhVzl1Y3lCdlltcGxZM1F1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVSEp2YldselpYMGdRU0J3Y205dGFYTmxJSFJvWVhRZ2FYTWdablZzWm1sc2JHVmtJSGRwZEdnZ2RHaGxJSFZ6WlhJZ2QyaGxibHh1SUNBZ0lDQXFJQ0FnSUNCMGFHVWdjMmxuYm5Wd0lHTnZiWEJzWlhSbGN5NWNiaUFnSUNBZ0tpQkFjMlZsSUZCaGNuTmxMbFZ6WlhJamMybG5ibFZ3WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMmxuYmxWd09pQm1kVzVqZEdsdmJpaDFjMlZ5Ym1GdFpTd2djR0Z6YzNkdmNtUXNJR0YwZEhKekxDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQmhkSFJ5Y3lBOUlHRjBkSEp6SUh4OElIdDlPMXh1SUNBZ0lDQWdZWFIwY25NdWRYTmxjbTVoYldVZ1BTQjFjMlZ5Ym1GdFpUdGNiaUFnSUNBZ0lHRjBkSEp6TG5CaGMzTjNiM0prSUQwZ2NHRnpjM2R2Y21RN1hHNGdJQ0FnSUNCMllYSWdkWE5sY2lBOUlGQmhjbk5sTGs5aWFtVmpkQzVmWTNKbFlYUmxLRndpWDFWelpYSmNJaWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkWE5sY2k1emFXZHVWWEFvWVhSMGNuTXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJNYjJkeklHbHVJR0VnZFhObGNpQjNhWFJvSUdFZ2RYTmxjbTVoYldVZ0tHOXlJR1Z0WVdsc0tTQmhibVFnY0dGemMzZHZjbVF1SUU5dUlITjFZMk5sYzNNc0lIUm9hWE5jYmlBZ0lDQWdLaUJ6WVhabGN5QjBhR1VnYzJWemMybHZiaUIwYnlCa2FYTnJMQ0J6YnlCNWIzVWdZMkZ1SUhKbGRISnBaWFpsSUhSb1pTQmpkWEp5Wlc1MGJIa2diRzluWjJWa0lHbHVYRzRnSUNBZ0lDb2dkWE5sY2lCMWMybHVaeUE4WTI5a1pUNWpkWEp5Wlc1MFBDOWpiMlJsUGk1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUR4d1BrTmhiR3h6SUc5d2RHbHZibk11YzNWalkyVnpjeUJ2Y2lCdmNIUnBiMjV6TG1WeWNtOXlJRzl1SUdOdmJYQnNaWFJwYjI0dVBDOXdQbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIVnpaWEp1WVcxbElGUm9aU0IxYzJWeWJtRnRaU0FvYjNJZ1pXMWhhV3dwSUhSdklHeHZaeUJwYmlCM2FYUm9MbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQndZWE56ZDI5eVpDQlVhR1VnY0dGemMzZHZjbVFnZEc4Z2JHOW5JR2x1SUhkcGRHZ3VYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ1FTQkNZV05yWW05dVpTMXpkSGxzWlNCdmNIUnBiMjV6SUc5aWFtVmpkQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRRWVhKelpTNVFjbTl0YVhObGZTQkJJSEJ5YjIxcGMyVWdkR2hoZENCcGN5Qm1kV3htYVd4c1pXUWdkMmwwYUNCMGFHVWdkWE5sY2lCM2FHVnVYRzRnSUNBZ0lDb2dJQ0FnSUhSb1pTQnNiMmRwYmlCamIyMXdiR1YwWlhNdVhHNGdJQ0FnSUNvZ1FITmxaU0JRWVhKelpTNVZjMlZ5STJ4dlowbHVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHOW5TVzQ2SUdaMWJtTjBhVzl1S0hWelpYSnVZVzFsTENCd1lYTnpkMjl5WkN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJSFZ6WlhJZ1BTQlFZWEp6WlM1UFltcGxZM1F1WDJOeVpXRjBaU2hjSWw5VmMyVnlYQ0lwTzF4dUlDQWdJQ0FnZFhObGNpNWZabWx1YVhOb1JtVjBZMmdvZXlCMWMyVnlibUZ0WlRvZ2RYTmxjbTVoYldVc0lIQmhjM04zYjNKa09pQndZWE56ZDI5eVpDQjlLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFjMlZ5TG14dlowbHVLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJNYjJkeklHbHVJR0VnZFhObGNpQjNhWFJvSUdFZ2MyVnpjMmx2YmlCMGIydGxiaTRnVDI0Z2MzVmpZMlZ6Y3l3Z2RHaHBjeUJ6WVhabGN5QjBhR1VnYzJWemMybHZibHh1SUNBZ0lDQXFJSFJ2SUdScGMyc3NJSE52SUhsdmRTQmpZVzRnY21WMGNtbGxkbVVnZEdobElHTjFjbkpsYm5Sc2VTQnNiMmRuWldRZ2FXNGdkWE5sY2lCMWMybHVaMXh1SUNBZ0lDQXFJRHhqYjJSbFBtTjFjbkpsYm5ROEwyTnZaR1UrTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUEhBK1EyRnNiSE1nYjNCMGFXOXVjeTV6ZFdOalpYTnpJRzl5SUc5d2RHbHZibk11WlhKeWIzSWdiMjRnWTI5dGNHeGxkR2x2Ymk0OEwzQStYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2MyVnpjMmx2YmxSdmEyVnVJRlJvWlNCelpYTnphVzl1Vkc5clpXNGdkRzhnYkc5bklHbHVJSGRwZEdndVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nUVNCQ1lXTnJZbTl1WlMxemRIbHNaU0J2Y0hScGIyNXpJRzlpYW1WamRDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UWNtOXRhWE5sZlNCQklIQnliMjFwYzJVZ2RHaGhkQ0JwY3lCbWRXeG1hV3hzWldRZ2QybDBhQ0IwYUdVZ2RYTmxjaUIzYUdWdVhHNGdJQ0FnSUNvZ0lDQWdJSFJvWlNCc2IyZHBiaUJqYjIxd2JHVjBaWE11WEc0Z0lDQWdJQ292WEc0Z0lDQWdZbVZqYjIxbE9pQm1kVzVqZEdsdmJpaHpaWE56YVc5dVZHOXJaVzRzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hVR0Z5YzJVdVZYTmxjaTVmWTJGdVZYTmxRM1Z5Y21WdWRGVnpaWElvS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdKMGwwSUdseklHNXZkQ0J6WldOMWNtVWdkRzhnWW1WamIyMWxJR0VnZFhObGNpQnZiaUJoSUc1dlpHVXVhbk1nYzJWeWRtVnlJR1Z1ZG1seWIyNXRaVzUwTGlkY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dVhHNGdJQ0FnSUNCMllYSWdkWE5sY2lBOUlGQmhjbk5sTGs5aWFtVmpkQzVmWTNKbFlYUmxLRndpWDFWelpYSmNJaWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVgzSmxjWFZsYzNRb2UxeHVJQ0FnSUNBZ0lDQnliM1YwWlRvZ1hDSjFjMlZ5YzF3aUxGeHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTZJRndpYldWY0lpeGNiaUFnSUNBZ0lDQWdiV1YwYUc5a09pQmNJa2RGVkZ3aUxGeHVJQ0FnSUNBZ0lDQjFjMlZOWVhOMFpYSkxaWGs2SUc5d2RHbHZibk11ZFhObFRXRnpkR1Z5UzJWNUxGeHVJQ0FnSUNBZ0lDQnpaWE56YVc5dVZHOXJaVzQ2SUhObGMzTnBiMjVVYjJ0bGJseHVJQ0FnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmloeVpYTndMQ0J6ZEdGMGRYTXNJSGhvY2lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzJWeWRtVnlRWFIwY25NZ1BTQjFjMlZ5TG5CaGNuTmxLSEpsYzNBc0lITjBZWFIxY3l3Z2VHaHlLVHRjYmlBZ0lDQWdJQ0FnZFhObGNpNWZabWx1YVhOb1JtVjBZMmdvYzJWeWRtVnlRWFIwY25NcE8xeHVJQ0FnSUNBZ0lDQjFjMlZ5TGw5b1lXNWtiR1ZUWVhabFVtVnpkV3gwS0hSeWRXVXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkWE5sY2p0Y2JseHVJQ0FnSUNBZ2ZTa3VYM1JvWlc1U2RXNURZV3hzWW1GamEzTW9iM0IwYVc5dWN5d2dkWE5sY2lrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFeHZaM01nYjNWMElIUm9aU0JqZFhKeVpXNTBiSGtnYkc5bloyVmtJR2x1SUhWelpYSWdjMlZ6YzJsdmJpNGdWR2hwY3lCM2FXeHNJSEpsYlc5MlpTQjBhR1ZjYmlBZ0lDQWdLaUJ6WlhOemFXOXVJR1p5YjIwZ1pHbHpheXdnYkc5bklHOTFkQ0J2WmlCc2FXNXJaV1FnYzJWeWRtbGpaWE1zSUdGdVpDQm1kWFIxY21VZ1kyRnNiSE1nZEc5Y2JpQWdJQ0FnS2lBOFkyOWtaVDVqZFhKeVpXNTBQQzlqYjJSbFBpQjNhV3hzSUhKbGRIVnliaUE4WTI5a1pUNXVkV3hzUEM5amIyUmxQaTVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRRWVhKelpTNVFjbTl0YVhObGZTQkJJSEJ5YjIxcGMyVWdkR2hoZENCcGN5QnlaWE52YkhabFpDQjNhR1Z1SUhSb1pTQnpaWE56YVc5dUlHbHpYRzRnSUNBZ0lDb2dJQ0JrWlhOMGNtOTVaV1FnYjI0Z2RHaGxJSE5sY25abGNpNWNiaUFnSUNBZ0tpOWNiaUFnSUNCc2IyZFBkWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0ZRWVhKelpTNVZjMlZ5TGw5allXNVZjMlZEZFhKeVpXNTBWWE5sY2lncEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FuVkdobGNtVWdhWE1nYm04Z1kzVnljbVZ1ZENCMWMyVnlJSFZ6WlhJZ2IyNGdZU0J1YjJSbExtcHpJSE5sY25abGNpQmxiblpwY205dWJXVnVkQzRuWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVWWE5sY2k1ZlkzVnljbVZ1ZEVGemVXNWpLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaGpkWEp5Wlc1MFZYTmxjaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjSEp2YldselpTQTlJRkJoY25ObExsTjBiM0poWjJVdWNtVnRiM1psU1hSbGJVRnplVzVqS0Z4dUlDQWdJQ0FnSUNBZ0lGQmhjbk5sTGw5blpYUlFZWEp6WlZCaGRHZ29VR0Z5YzJVdVZYTmxjaTVmUTFWU1VrVk9WRjlWVTBWU1gwdEZXU2twTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBWWE5sY2lBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCamRYSnlaVzUwVTJWemMybHZiaUE5SUdOMWNuSmxiblJWYzJWeUxtZGxkRk5sYzNOcGIyNVViMnRsYmlncE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoUVlYSnpaUzVUWlhOemFXOXVMbDlwYzFKbGRtOWpZV0pzWlNoamRYSnlaVzUwVTJWemMybHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjIxcGMyVXVkR2hsYmlobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbDl5WlhGMVpYTjBLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjNWMFpUb2dKMnh2WjI5MWRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1YwYUc5a09pQW5VRTlUVkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnpjMmx2YmxSdmEyVnVPaUJqZFhKeVpXNTBVMlZ6YzJsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwVlhObGNpNWZiRzluVDNWMFYybDBhRUZzYkNncE8xeHVJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlZjMlZ5TGw5cGMwTjFjbkpsYm5SVmMyVnlJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnVUdGeWMyVXVWWE5sY2k1ZlkzVnljbVZ1ZEZWelpYSk5ZWFJqYUdWelJHbHpheUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJRkJoY25ObExsVnpaWEl1WDJOMWNuSmxiblJWYzJWeUlEMGdiblZzYkR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NISnZiV2x6WlR0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWEYxWlhOMGN5QmhJSEJoYzNOM2IzSmtJSEpsYzJWMElHVnRZV2xzSUhSdklHSmxJSE5sYm5RZ2RHOGdkR2hsSUhOd1pXTnBabWxsWkNCbGJXRnBiQ0JoWkdSeVpYTnpYRzRnSUNBZ0lDb2dZWE56YjJOcFlYUmxaQ0IzYVhSb0lIUm9aU0IxYzJWeUlHRmpZMjkxYm5RdUlGUm9hWE1nWlcxaGFXd2dZV3hzYjNkeklIUm9aU0IxYzJWeUlIUnZJSE5sWTNWeVpXeDVYRzRnSUNBZ0lDb2djbVZ6WlhRZ2RHaGxhWElnY0dGemMzZHZjbVFnYjI0Z2RHaGxJRkJoY25ObElITnBkR1V1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUE4Y0Q1RFlXeHNjeUJ2Y0hScGIyNXpMbk4xWTJObGMzTWdiM0lnYjNCMGFXOXVjeTVsY25KdmNpQnZiaUJqYjIxd2JHVjBhVzl1TGp3dmNENWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCbGJXRnBiQ0JVYUdVZ1pXMWhhV3dnWVdSa2NtVnpjeUJoYzNOdlkybGhkR1ZrSUhkcGRHZ2dkR2hsSUhWelpYSWdkR2hoZEZ4dUlDQWdJQ0FxSUNBZ0lDQm1iM0puYjNRZ2RHaGxhWElnY0dGemMzZHZjbVF1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdRU0JDWVdOclltOXVaUzF6ZEhsc1pTQnZjSFJwYjI1eklHOWlhbVZqZEM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WlhGMVpYTjBVR0Z6YzNkdmNtUlNaWE5sZERvZ1puVnVZM1JwYjI0b1pXMWhhV3dzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1SUNBZ0lDQWdkbUZ5SUhKbGNYVmxjM1FnUFNCUVlYSnpaUzVmY21WeGRXVnpkQ2g3WEc0Z0lDQWdJQ0FnSUhKdmRYUmxPaUJjSW5KbGNYVmxjM1JRWVhOemQyOXlaRkpsYzJWMFhDSXNYRzRnSUNBZ0lDQWdJRzFsZEdodlpEb2dYQ0pRVDFOVVhDSXNYRzRnSUNBZ0lDQWdJSFZ6WlUxaGMzUmxja3RsZVRvZ2IzQjBhVzl1Y3k1MWMyVk5ZWE4wWlhKTFpYa3NYRzRnSUNBZ0lDQWdJR1JoZEdFNklIc2daVzFoYVd3NklHVnRZV2xzSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbGNYVmxjM1F1WDNSb1pXNVNkVzVEWVd4c1ltRmphM01vYjNCMGFXOXVjeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRISnBaWFpsY3lCMGFHVWdZM1Z5Y21WdWRHeDVJR3h2WjJkbFpDQnBiaUJRWVhKelpWVnpaWElnZDJsMGFDQmhJSFpoYkdsa0lITmxjM05wYjI0c1hHNGdJQ0FnSUNvZ1pXbDBhR1Z5SUdaeWIyMGdiV1Z0YjNKNUlHOXlJR3h2WTJGc1UzUnZjbUZuWlN3Z2FXWWdibVZqWlhOellYSjVMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJoY25ObExrOWlhbVZqZEgwZ1ZHaGxJR04xY25KbGJuUnNlU0JzYjJkblpXUWdhVzRnVUdGeWMyVXVWWE5sY2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqZFhKeVpXNTBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hVR0Z5YzJVdVZYTmxjaTVmWTJGdVZYTmxRM1Z5Y21WdWRGVnpaWElvS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdKMVJvWlhKbElHbHpJRzV2SUdOMWNuSmxiblFnZFhObGNpQjFjMlZ5SUc5dUlHRWdibTlrWlM1cWN5QnpaWEoyWlhJZ1pXNTJhWEp2Ym0xbGJuUXVKMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tGQmhjbk5sTGxOMGIzSmhaMlV1WVhONWJtTXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdZMkZ1SjNRZ2NtVjBkWEp1SUhSb1pTQmpkWEp5Wlc1MElIVnpaWElnYzNsdVkyaHliMjV2ZFhOc2VWeHVJQ0FnSUNBZ0lDQlFZWEp6WlM1VmMyVnlMbDlqZFhKeVpXNTBRWE41Ym1Nb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQmhjbk5sTGxWelpYSXVYMk4xY25KbGJuUlZjMlZ5TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWEc0Z0lDQWdJQ0JwWmlBb1VHRnljMlV1VlhObGNpNWZZM1Z5Y21WdWRGVnpaWElwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbFZ6WlhJdVgyTjFjbkpsYm5SVmMyVnlPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb1VHRnljMlV1VlhObGNpNWZZM1Z5Y21WdWRGVnpaWEpOWVhSamFHVnpSR2x6YXlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJVVDBSUE9pQk1ZWHBwYkhrZ2JHOW5JR2x1SUdGdWIyNTViVzkxY3lCMWMyVnlMbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVZYTmxjaTVmWTNWeWNtVnVkRlZ6WlhJN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRXh2WVdRZ2RHaGxJSFZ6WlhJZ1puSnZiU0JzYjJOaGJDQnpkRzl5WVdkbExseHVJQ0FnSUNBZ1VHRnljMlV1VlhObGNpNWZZM1Z5Y21WdWRGVnpaWEpOWVhSamFHVnpSR2x6YXlBOUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUhaaGNpQjFjMlZ5UkdGMFlTQTlJRkJoY25ObExsTjBiM0poWjJVdVoyVjBTWFJsYlNoUVlYSnpaUzVmWjJWMFVHRnljMlZRWVhSb0tGeHVJQ0FnSUNBZ0lDQWdJRkJoY25ObExsVnpaWEl1WDBOVlVsSkZUbFJmVlZORlVsOUxSVmtwS1R0Y2JpQWdJQ0FnSUdsbUlDZ2hkWE5sY2tSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZFOUVUem9nVEdGNmFXeDVJR3h2WnlCcGJpQmhibTl1ZVcxdmRYTWdkWE5sY2k1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQlFZWEp6WlM1VmMyVnlMbDlqZFhKeVpXNTBWWE5sY2lBOUlGQmhjbk5sTGs5aWFtVmpkQzVmWTNKbFlYUmxLRndpWDFWelpYSmNJaWs3WEc0Z0lDQWdJQ0JRWVhKelpTNVZjMlZ5TGw5amRYSnlaVzUwVlhObGNpNWZhWE5EZFhKeVpXNTBWWE5sY2lBOUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUhaaGNpQnFjMjl1SUQwZ1NsTlBUaTV3WVhKelpTaDFjMlZ5UkdGMFlTazdYRzRnSUNBZ0lDQlFZWEp6WlM1VmMyVnlMbDlqZFhKeVpXNTBWWE5sY2k1cFpDQTlJR3B6YjI0dVgybGtPMXh1SUNBZ0lDQWdaR1ZzWlhSbElHcHpiMjR1WDJsa08xeHVJQ0FnSUNBZ1VHRnljMlV1VlhObGNpNWZZM1Z5Y21WdWRGVnpaWEl1WDNObGMzTnBiMjVVYjJ0bGJpQTlJR3B6YjI0dVgzTmxjM05wYjI1VWIydGxianRjYmlBZ0lDQWdJR1JsYkdWMFpTQnFjMjl1TGw5elpYTnphVzl1Vkc5clpXNDdYRzRnSUNBZ0lDQlFZWEp6WlM1VmMyVnlMbDlqZFhKeVpXNTBWWE5sY2k1ZlptbHVhWE5vUm1WMFkyZ29hbk52YmlrN1hHNWNiaUFnSUNBZ0lGQmhjbk5sTGxWelpYSXVYMk4xY25KbGJuUlZjMlZ5TGw5emVXNWphSEp2Ym1sNlpVRnNiRUYxZEdoRVlYUmhLQ2s3WEc0Z0lDQWdJQ0JRWVhKelpTNVZjMlZ5TGw5amRYSnlaVzUwVlhObGNpNWZjbVZtY21WemFFTmhZMmhsS0NrN1hHNGdJQ0FnSUNCUVlYSnpaUzVWYzJWeUxsOWpkWEp5Wlc1MFZYTmxjaTVmYjNCVFpYUlJkV1YxWlNBOUlGdDdmVjA3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVR0Z5YzJVdVZYTmxjaTVmWTNWeWNtVnVkRlZ6WlhJN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxkSEpwWlhabGN5QjBhR1VnWTNWeWNtVnVkR3g1SUd4dloyZGxaQ0JwYmlCUVlYSnpaVlZ6WlhJZ1puSnZiU0JoYzNsdVkyaHliMjV2ZFhNZ1UzUnZjbUZuWlM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVRY205dGFYTmxmU0JCSUZCeWIyMXBjMlVnZEdoaGRDQnBjeUJ5WlhOdmJIWmxaQ0IzYVhSb0lIUm9aU0JqZFhKeVpXNTBiSGxjYmlBZ0lDQWdLaUFnSUd4dloyZGxaQ0JwYmlCUVlYSnpaU0JWYzJWeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJOMWNuSmxiblJCYzNsdVl6b2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0JwWmlBb1VHRnljMlV1VlhObGNpNWZZM1Z5Y21WdWRGVnpaWElwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbEJ5YjIxcGMyVXVZWE1vVUdGeWMyVXVWWE5sY2k1ZlkzVnljbVZ1ZEZWelpYSXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb1VHRnljMlV1VlhObGNpNWZZM1Z5Y21WdWRGVnpaWEpOWVhSamFHVnpSR2x6YXlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1VUhKdmJXbHpaUzVoY3loUVlYSnpaUzVWYzJWeUxsOWpkWEp5Wlc1MFZYTmxjaWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFeHZZV1FnZEdobElIVnpaWElnWm5KdmJTQlRkRzl5WVdkbFhHNGdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVVM1J2Y21GblpTNW5aWFJKZEdWdFFYTjVibU1vVUdGeWMyVXVYMmRsZEZCaGNuTmxVR0YwYUNoY2JpQWdJQ0FnSUNBZ1VHRnljMlV1VlhObGNpNWZRMVZTVWtWT1ZGOVZVMFZTWDB0RldTa3BMblJvWlc0b1puVnVZM1JwYjI0b2RYTmxja1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMWMyVnlSR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGQmhjbk5sTGxWelpYSXVYMk4xY25KbGJuUlZjMlZ5SUQwZ1VHRnljMlV1VDJKcVpXTjBMbDlqY21WaGRHVW9YQ0pmVlhObGNsd2lLVHRjYmlBZ0lDQWdJQ0FnVUdGeWMyVXVWWE5sY2k1ZlkzVnljbVZ1ZEZWelpYSXVYMmx6UTNWeWNtVnVkRlZ6WlhJZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJxYzI5dUlEMGdTbE5QVGk1d1lYSnpaU2gxYzJWeVJHRjBZU2s3WEc0Z0lDQWdJQ0FnSUZCaGNuTmxMbFZ6WlhJdVgyTjFjbkpsYm5SVmMyVnlMbWxrSUQwZ2FuTnZiaTVmYVdRN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCcWMyOXVMbDlwWkR0Y2JpQWdJQ0FnSUNBZ1VHRnljMlV1VlhObGNpNWZZM1Z5Y21WdWRGVnpaWEl1WDNObGMzTnBiMjVVYjJ0bGJpQTlJR3B6YjI0dVgzTmxjM05wYjI1VWIydGxianRjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJR3B6YjI0dVgzTmxjM05wYjI1VWIydGxianRjYmlBZ0lDQWdJQ0FnVUdGeWMyVXVWWE5sY2k1ZlkzVnljbVZ1ZEZWelpYSXVYMlpwYm1semFFWmxkR05vS0dwemIyNHBPMXh1WEc0Z0lDQWdJQ0FnSUZCaGNuTmxMbFZ6WlhJdVgyTjFjbkpsYm5SVmMyVnlMbDl6ZVc1amFISnZibWw2WlVGc2JFRjFkR2hFWVhSaEtDazdYRzRnSUNBZ0lDQWdJRkJoY25ObExsVnpaWEl1WDJOMWNuSmxiblJWYzJWeUxsOXlaV1p5WlhOb1EyRmphR1VvS1R0Y2JpQWdJQ0FnSUNBZ1VHRnljMlV1VlhObGNpNWZZM1Z5Y21WdWRGVnpaWEl1WDI5d1UyVjBVWFZsZFdVZ1BTQmJlMzFkTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVUdGeWMyVXVWWE5sY2k1ZlkzVnljbVZ1ZEZWelpYSTdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVd4c2IzY2djMjl0Wlc5dVpTQjBieUJrWldacGJtVWdZU0JqZFhOMGIyMGdWWE5sY2lCamJHRnpjeUIzYVhSb2IzVjBJR05zWVhOelRtRnRaVnh1SUNBZ0lDQXFJR0psYVc1bklISmxkM0pwZEhSbGJpQjBieUJmVlhObGNpNGdWR2hsSUdSbFptRjFiSFFnWW1Wb1lYWnBiM0lnYVhNZ2RHOGdjbVYzY21sMFpWeHVJQ0FnSUNBcUlGVnpaWElnZEc4Z1gxVnpaWElnWm05eUlHeGxaMkZqZVNCeVpXRnpiMjV6TGlCVWFHbHpJR0ZzYkc5M2N5QmtaWFpsYkc5d1pYSnpJSFJ2WEc0Z0lDQWdJQ29nYjNabGNuSnBaR1VnZEdoaGRDQmlaV2hoZG1sdmNpNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1FtOXZiR1ZoYm4wZ2FYTkJiR3h2ZDJWa0lGZG9aWFJvWlhJZ2IzSWdibTkwSUhSdklHRnNiRzkzSUdOMWMzUnZiU0JWYzJWeUlHTnNZWE56WEc0Z0lDQWdJQ292WEc0Z0lDQWdZV3hzYjNkRGRYTjBiMjFWYzJWeVEyeGhjM002SUdaMWJtTjBhVzl1S0dselFXeHNiM2RsWkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmY0dWeVptOXliVlZ6WlhKU1pYZHlhWFJsSUQwZ0lXbHpRV3hzYjNkbFpEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV3hzYjNjZ1lTQnNaV2RoWTNrZ1lYQndiR2xqWVhScGIyNGdkRzhnYzNSaGNuUWdkWE5wYm1jZ2NtVjJiMk5oWW14bElITmxjM05wYjI1ekxpQkpaaUIwYUdWY2JpQWdJQ0FnS2lCamRYSnlaVzUwSUhObGMzTnBiMjRnZEc5clpXNGdhWE1nYm05MElISmxkbTlqWVdKc1pTd2dZU0J5WlhGMVpYTjBJSGRwYkd3Z1ltVWdiV0ZrWlNCbWIzSWdZU0J1Wlhjc1hHNGdJQ0FnSUNvZ2NtVjJiMk5oWW14bElITmxjM05wYjI0dVhHNGdJQ0FnSUNvZ1NYUWdhWE1nYm05MElHNWxZMlZ6YzJGeWVTQjBieUJqWVd4c0lIUm9hWE1nYldWMGFHOWtJR1p5YjIwZ1kyeHZkV1FnWTI5a1pTQjFibXhsYzNNZ2VXOTFJR0Z5WlZ4dUlDQWdJQ0FxSUdoaGJtUnNhVzVuSUhWelpYSWdjMmxuYm5Wd0lHOXlJR3h2WjJsdUlHWnliMjBnZEdobElITmxjblpsY2lCemFXUmxMaUJKYmlCaElHTnNiM1ZrSUdOdlpHVWdZMkZzYkN4Y2JpQWdJQ0FnS2lCMGFHbHpJR1oxYm1OMGFXOXVJSGRwYkd3Z2JtOTBJR0YwZEdWdGNIUWdkRzhnZFhCbmNtRmtaU0IwYUdVZ1kzVnljbVZ1ZENCMGIydGxiaTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QkJJRUpoWTJ0aWIyNWxMWE4wZVd4bElHOXdkR2x2Ym5NZ2IySnFaV04wTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVSEp2YldselpYMGdRU0J3Y205dGFYTmxJSFJvWVhRZ2FYTWdjbVZ6YjJ4MlpXUWdkMmhsYmlCMGFHVWdjSEp2WTJWemN5Qm9ZWE5jYmlBZ0lDQWdLaUFnSUdOdmJYQnNaWFJsWkM0Z1NXWWdZU0J5WlhCc1lXTmxiV1Z1ZENCelpYTnphVzl1SUhSdmEyVnVJR2x6SUhKbGNYVmxjM1JsWkN3Z2RHaGxJSEJ5YjIxcGMyVmNiaUFnSUNBZ0tpQWdJSGRwYkd3Z1ltVWdjbVZ6YjJ4MlpXUWdZV1owWlhJZ1lTQnVaWGNnZEc5clpXNGdhR0Z6SUdKbFpXNGdabVYwWTJobFpDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCbGJtRmliR1ZTWlhadlkyRmliR1ZUWlhOemFXOXVPaUJtZFc1amRHbHZiaWh2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNiaUFnSUNBZ0lGQmhjbk5sTGxWelpYSXVYMmx6VW1WMmIyTmhZbXhsVTJWemMybHZia1Z1WVdKc1pXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ2FXWWdLRkJoY25ObExsVnpaWEl1WDJOaGJsVnpaVU4xY25KbGJuUlZjMlZ5S0NrZ0ppWWdVR0Z5YzJVdVZYTmxjaTVqZFhKeVpXNTBLQ2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbFZ6WlhJdVkzVnljbVZ1ZENncExsOTFjR2R5WVdSbFZHOVNaWFp2WTJGaWJHVlRaWE56YVc5dUtHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUZCaGNuTmxMbEJ5YjIxcGMyVXVZWE1vS1M1ZmRHaGxibEoxYmtOaGJHeGlZV05yY3lodmNIUnBiMjV6S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JsYm1GaWJHVlZibk5oWm1WRGRYSnlaVzUwVlhObGNqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0JRWVhKelpTNVZjMlZ5TGw5bGJtRmliR1ZWYm5OaFptVkRkWEp5Wlc1MFZYTmxjaUE5SUhSeWRXVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOWpZVzVWYzJWRGRYSnlaVzUwVlhObGNqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdJVkJoY25ObExsOXBjMDV2WkdVZ2ZId2dVR0Z5YzJVdVZYTmxjaTVmWlc1aFlteGxWVzV6WVdabFEzVnljbVZ1ZEZWelpYSTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJsY25OcGMzUnpJR0VnZFhObGNpQmhjeUJqZFhKeVpXNTBWWE5sY2lCMGJ5QnNiMk5oYkZOMGIzSmhaMlVzSUdGdVpDQnBiblJ2SUhSb1pTQnphVzVuYkdWMGIyNHVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gzTmhkbVZEZFhKeVpXNTBWWE5sY2pvZ1puVnVZM1JwYjI0b2RYTmxjaWtnZTF4dUlDQWdJQ0FnYVdZZ0tGQmhjbk5sTGxWelpYSXVYMk4xY25KbGJuUlZjMlZ5SUNFOVBTQnVkV3hzSUNZbVhHNGdJQ0FnSUNBZ0lDQWdVR0Z5YzJVdVZYTmxjaTVmWTNWeWNtVnVkRlZ6WlhJZ0lUMDlJSFZ6WlhJcElIdGNiaUFnSUNBZ0lDQWdVR0Z5YzJVdVZYTmxjaTVzYjJkUGRYUW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFZ6WlhJdVgybHpRM1Z5Y21WdWRGVnpaWElnUFNCMGNuVmxPMXh1SUNBZ0lDQWdVR0Z5YzJVdVZYTmxjaTVmWTNWeWNtVnVkRlZ6WlhJZ1BTQjFjMlZ5TzF4dUlDQWdJQ0FnVUdGeWMyVXVWWE5sY2k1ZlkzVnljbVZ1ZEZWelpYSk5ZWFJqYUdWelJHbHpheUE5SUhSeWRXVTdYRzVjYmlBZ0lDQWdJSFpoY2lCcWMyOXVJRDBnZFhObGNpNTBiMHBUVDA0b0tUdGNiaUFnSUNBZ0lHcHpiMjR1WDJsa0lEMGdkWE5sY2k1cFpEdGNiaUFnSUNBZ0lHcHpiMjR1WDNObGMzTnBiMjVVYjJ0bGJpQTlJSFZ6WlhJdVgzTmxjM05wYjI1VWIydGxianRjYmlBZ0lDQWdJR2xtSUNoUVlYSnpaUzVUZEc5eVlXZGxMbUZ6ZVc1aktTQjdYRzRnSUNBZ0lDQWdJRkJoY25ObExsTjBiM0poWjJVdWMyVjBTWFJsYlVGemVXNWpLRnh1SUNBZ0lDQWdJQ0FnSUZCaGNuTmxMbDluWlhSUVlYSnpaVkJoZEdnb1VHRnljMlV1VlhObGNpNWZRMVZTVWtWT1ZGOVZVMFZTWDB0RldTa3NYRzRnSUNBZ0lDQWdJQ0FnU2xOUFRpNXpkSEpwYm1kcFpua29hbk52YmlrcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1VHRnljMlV1VTNSdmNtRm5aUzV6WlhSSmRHVnRLRnh1SUNBZ0lDQWdJQ0FnSUZCaGNuTmxMbDluWlhSUVlYSnpaVkJoZEdnb1VHRnljMlV1VlhObGNpNWZRMVZTVWtWT1ZGOVZVMFZTWDB0RldTa3NYRzRnSUNBZ0lDQWdJQ0FnU2xOUFRpNXpkSEpwYm1kcFpua29hbk52YmlrcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZmNtVm5hWE4wWlhKQmRYUm9aVzUwYVdOaGRHbHZibEJ5YjNacFpHVnlPaUJtZFc1amRHbHZiaWh3Y205MmFXUmxjaWtnZTF4dUlDQWdJQ0FnVUdGeWMyVXVWWE5sY2k1ZllYVjBhRkJ5YjNacFpHVnljMXR3Y205MmFXUmxjaTVuWlhSQmRYUm9WSGx3WlNncFhTQTlJSEJ5YjNacFpHVnlPMXh1SUNBZ0lDQWdMeThnVTNsdVkyaHliMjVwZW1VZ2RHaGxJR04xY25KbGJuUWdkWE5sY2lCM2FYUm9JSFJvWlNCaGRYUm9JSEJ5YjNacFpHVnlMbHh1SUNBZ0lDQWdhV1lnS0ZCaGNuTmxMbFZ6WlhJdVkzVnljbVZ1ZENncEtTQjdYRzRnSUNBZ0lDQWdJRkJoY25ObExsVnpaWEl1WTNWeWNtVnVkQ2dwTGw5emVXNWphSEp2Ym1sNlpVRjFkR2hFWVhSaEtIQnliM1pwWkdWeUxtZGxkRUYxZEdoVWVYQmxLQ2twTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmYkc5blNXNVhhWFJvT2lCbWRXNWpkR2x2Ymlod2NtOTJhV1JsY2l3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJSFZ6WlhJZ1BTQlFZWEp6WlM1UFltcGxZM1F1WDJOeVpXRjBaU2hjSWw5VmMyVnlYQ0lwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFZ6WlhJdVgyeHBibXRYYVhSb0tIQnliM1pwWkdWeUxDQnZjSFJwYjI1ektUdGNiaUFnSUNCOVhHNWNiaUFnZlNrN1hHNTlLSFJvYVhNcEtUdGNibHh1WEc0b1puVnVZM1JwYjI0b2NtOXZkQ2tnZTF4dUlDQnliMjkwTGxCaGNuTmxJRDBnY205dmRDNVFZWEp6WlNCOGZDQjdmVHRjYmlBZ2RtRnlJRkJoY25ObElEMGdjbTl2ZEM1UVlYSnpaVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR05zWVhOelhHNGdJQ0FxWEc0Z0lDQXFJRHh3UGtFZ1VHRnljMlV1VTJWemMybHZiaUJ2WW1wbFkzUWdhWE1nWVNCc2IyTmhiQ0J5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUJoSUhKbGRtOWpZV0pzWlNCelpYTnphVzl1TGx4dUlDQWdLaUJVYUdseklHTnNZWE56SUdseklHRWdjM1ZpWTJ4aGMzTWdiMllnWVNCUVlYSnpaUzVQWW1wbFkzUXNJR0Z1WkNCeVpYUmhhVzV6SUhSb1pTQnpZVzFsWEc0Z0lDQXFJR1oxYm1OMGFXOXVZV3hwZEhrZ2IyWWdZU0JRWVhKelpTNVBZbXBsWTNRdVBDOXdQbHh1SUNBZ0tpOWNiaUFnVUdGeWMyVXVVMlZ6YzJsdmJpQTlJRkJoY25ObExrOWlhbVZqZEM1bGVIUmxibVFvSjE5VFpYTnphVzl1Snl4Y2JpQWdMeW9xSUVCc1pXNWtjeUJRWVhKelpTNVRaWE56YVc5dUxuQnliM1J2ZEhsd1pTQXFMMXh1SUNCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdjMlZ6YzJsdmJpQjBiMnRsYmlCemRISnBibWN1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VTNSeWFXNW5mVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRk5sYzNOcGIyNVViMnRsYmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzJWemMybHZibFJ2YTJWdU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkpiblJsY201aGJDQnRaWFJvYjJRZ2RHOGdhR0Z1Wkd4bElITndaV05wWVd3Z1ptbGxiR1J6SUdsdUlHRWdYMU5sYzNOcGIyNGdjbVZ6Y0c5dWMyVXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyMWxjbWRsVFdGbmFXTkdhV1ZzWkhNNklHWjFibU4wYVc5dUtHRjBkSEp6S1NCN1hHNGdJQ0FnSUNCcFppQW9ZWFIwY25NdWMyVnpjMmx2YmxSdmEyVnVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM05sYzNOcGIyNVViMnRsYmlBOUlHRjBkSEp6TG5ObGMzTnBiMjVVYjJ0bGJqdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElHRjBkSEp6TG5ObGMzTnBiMjVVYjJ0bGJqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lGQmhjbk5sTGxObGMzTnBiMjR1WDE5emRYQmxjbDlmTGw5dFpYSm5aVTFoWjJsalJtbGxiR1J6TG1OaGJHd29kR2hwY3l3Z1lYUjBjbk1wTzF4dUlDQWdJSDBzWEc0Z0lIMHNJQzhxS2lCQWJHVnVaSE1nVUdGeWMyVXVVMlZ6YzJsdmJpQXFMeUI3WEc1Y2JpQWdJQ0F2THlCVWFISnZkeUJoYmlCbGNuSnZjaUIzYUdWdUlHMXZaR2xtZVdsdVp5QjBhR1Z6WlNCeVpXRmtMVzl1YkhrZ1ptbGxiR1J6WEc0Z0lDQWdjbVZoWkU5dWJIbEJkSFJ5YVdKMWRHVnpPaUI3WEc0Z0lDQWdJQ0JqY21WaGRHVmtWMmwwYURvZ2RISjFaU3hjYmlBZ0lDQWdJR1Y0Y0dseVpYTkJkRG9nZEhKMVpTeGNiaUFnSUNBZ0lHbHVjM1JoYkd4aGRHbHZia2xrT2lCMGNuVmxMRnh1SUNBZ0lDQWdjbVZ6ZEhKcFkzUmxaRG9nZEhKMVpTeGNiaUFnSUNBZ0lITmxjM05wYjI1VWIydGxiam9nZEhKMVpTeGNiaUFnSUNBZ0lIVnpaWEk2SUhSeWRXVmNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVYwY21sbGRtVnpJSFJvWlNCVFpYTnphVzl1SUc5aWFtVmpkQ0JtYjNJZ2RHaGxJR04xY25KbGJuUnNlU0JzYjJkblpXUWdhVzRnYzJWemMybHZiaTVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRRWVhKelpTNVFjbTl0YVhObGZTQkJJSEJ5YjIxcGMyVWdkR2hoZENCcGN5QnlaWE52YkhabFpDQjNhWFJvSUhSb1pTQlFZWEp6WlM1VFpYTnphVzl1WEc0Z0lDQWdJQ29nSUNCdlltcGxZM1FnWVdaMFpYSWdhWFFnYUdGeklHSmxaVzRnWm1WMFkyaGxaQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQmpkWEp5Wlc1ME9pQm1kVzVqZEdsdmJpaHZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JseHVJQ0FnSUNBZ2RtRnlJSE5sYzNOcGIyNGdQU0JRWVhKelpTNVBZbXBsWTNRdVgyTnlaV0YwWlNnblgxTmxjM05wYjI0bktUdGNiaUFnSUNBZ0lIWmhjaUJqZFhKeVpXNTBWRzlyWlc0Z1BTQlFZWEp6WlM1VmMyVnlMbU4xY25KbGJuUW9LUzVuWlhSVFpYTnphVzl1Vkc5clpXNG9LVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQlFZWEp6WlM1ZmNtVnhkV1Z6ZENoN1hHNGdJQ0FnSUNBZ0lISnZkWFJsT2lBbmMyVnpjMmx2Ym5NbkxGeHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTZJQ2R0WlNjc1hHNGdJQ0FnSUNBZ0lHMWxkR2h2WkRvZ0owZEZWQ2NzWEc0Z0lDQWdJQ0FnSUhWelpVMWhjM1JsY2t0bGVUb2diM0IwYVc5dWN5NTFjMlZOWVhOMFpYSkxaWGtzWEc0Z0lDQWdJQ0FnSUhObGMzTnBiMjVVYjJ0bGJqb2dZM1Z5Y21WdWRGUnZhMlZ1WEc0Z0lDQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVLSEpsYzNBc0lITjBZWFIxY3l3Z2VHaHlLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpaWEoyWlhKQmRIUnljeUE5SUhObGMzTnBiMjR1Y0dGeWMyVW9jbVZ6Y0N3Z2MzUmhkSFZ6TENCNGFISXBPMXh1SUNBZ0lDQWdJQ0J6WlhOemFXOXVMbDltYVc1cGMyaEdaWFJqYUNoelpYSjJaWEpCZEhSeWN5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWE56YVc5dU8xeHVJQ0FnSUNBZ2ZTa3VYM1JvWlc1U2RXNURZV3hzWW1GamEzTW9iM0IwYVc5dWN5d2djMlZ6YzJsdmJpazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVJsZEdWeWJXbHVaWE1nZDJobGRHaGxjaUJoSUhObGMzTnBiMjRnZEc5clpXNGdhWE1nY21WMmIyTmhZbXhsTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBKdmIyeGxZVzU5WEc0Z0lDQWdJQ292WEc0Z0lDQWdYMmx6VW1WMmIyTmhZbXhsT2lCbWRXNWpkR2x2YmloMGIydGxiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ2YTJWdUxtbHVaR1Y0VDJZb0ozSTZKeWtnUGlBdE1UdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSR1YwWlhKdGFXNWxjeUIzYUdWMGFHVnlJSFJvWlNCamRYSnlaVzUwSUhObGMzTnBiMjRnZEc5clpXNGdhWE1nY21WMmIyTmhZbXhsTGx4dUlDQWdJQ0FxSUZSb2FYTWdiV1YwYUc5a0lHbHpJSFZ6WldaMWJDQm1iM0lnYldsbmNtRjBhVzVuSUVWNGNISmxjM011YW5NZ2IzSWdUbTlrWlM1cWN5QjNaV0lnWVhCd2N5QjBiMXh1SUNBZ0lDQXFJSFZ6WlNCeVpYWnZZMkZpYkdVZ2MyVnpjMmx2Ym5NdUlFbG1JSGx2ZFNCaGNtVWdiV2xuY21GMGFXNW5JR0Z1SUdGd2NDQjBhR0YwSUhWelpYTWdkR2hsSUZCaGNuTmxYRzRnSUNBZ0lDb2dVMFJMSUdsdUlIUm9aU0JpY205M2MyVnlJRzl1Ykhrc0lIQnNaV0Z6WlNCMWMyVWdVR0Z5YzJVdVZYTmxjaTVsYm1GaWJHVlNaWFp2WTJGaWJHVlRaWE56YVc5dUtDbGNiaUFnSUNBZ0tpQnBibk4wWldGa0xDQnpieUIwYUdGMElITmxjM05wYjI1eklHTmhiaUJpWlNCaGRYUnZiV0YwYVdOaGJHeDVJSFZ3WjNKaFpHVmtMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FYTkRkWEp5Wlc1MFUyVnpjMmx2YmxKbGRtOWpZV0pzWlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnBaaUFvVUdGeWMyVXVWWE5sY2k1amRYSnlaVzUwS0NrZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQmhjbk5sTGxObGMzTnBiMjR1WDJselVtVjJiMk5oWW14bEtGeHVJQ0FnSUNBZ0lDQWdJRkJoY25ObExsVnpaWEl1WTNWeWNtVnVkQ2dwTG1kbGRGTmxjM05wYjI1VWIydGxiaWdwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlLVHRjYm4wcEtIUm9hWE1wTzF4dVhHNHZMeUJRWVhKelpTNVJkV1Z5ZVNCcGN5QmhJSGRoZVNCMGJ5QmpjbVZoZEdVZ1lTQnNhWE4wSUc5bUlGQmhjbk5sTGs5aWFtVmpkSE11WEc0b1puVnVZM1JwYjI0b2NtOXZkQ2tnZTF4dUlDQnliMjkwTGxCaGNuTmxJRDBnY205dmRDNVFZWEp6WlNCOGZDQjdmVHRjYmlBZ2RtRnlJRkJoY25ObElEMGdjbTl2ZEM1UVlYSnpaVHRjYmlBZ2RtRnlJRjhnUFNCUVlYSnpaUzVmTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnYm1WM0lIQmhjbk5sSUZCaGNuTmxMbEYxWlhKNUlHWnZjaUIwYUdVZ1oybDJaVzRnVUdGeWMyVXVUMkpxWldOMElITjFZbU5zWVhOekxseHVJQ0FnS2lCQWNHRnlZVzBnYjJKcVpXTjBRMnhoYzNNZ0xWeHVJQ0FnS2lBZ0lFRnVJR2x1YzNSaGJtTmxJRzltSUdFZ2MzVmlZMnhoYzNNZ2IyWWdVR0Z5YzJVdVQySnFaV04wTENCdmNpQmhJRkJoY25ObElHTnNZWE56VG1GdFpTQnpkSEpwYm1jdVhHNGdJQ0FxSUVCamJHRnpjMXh1SUNBZ0tseHVJQ0FnS2lBOGNENVFZWEp6WlM1UmRXVnllU0JrWldacGJtVnpJR0VnY1hWbGNua2dkR2hoZENCcGN5QjFjMlZrSUhSdklHWmxkR05vSUZCaGNuTmxMazlpYW1WamRITXVJRlJvWlZ4dUlDQWdLaUJ0YjNOMElHTnZiVzF2YmlCMWMyVWdZMkZ6WlNCcGN5Qm1hVzVrYVc1bklHRnNiQ0J2WW1wbFkzUnpJSFJvWVhRZ2JXRjBZMmdnWVNCeGRXVnllU0IwYUhKdmRXZG9JSFJvWlZ4dUlDQWdLaUE4WTI5a1pUNW1hVzVrUEM5amIyUmxQaUJ0WlhSb2IyUXVJRVp2Y2lCbGVHRnRjR3hsTENCMGFHbHpJSE5oYlhCc1pTQmpiMlJsSUdabGRHTm9aWE1nWVd4c0lHOWlhbVZqZEhOY2JpQWdJQ29nYjJZZ1kyeGhjM01nUEdOdlpHVStUWGxEYkdGemN6d3ZZMjlrWlQ0dUlFbDBJR05oYkd4eklHRWdaR2xtWm1WeVpXNTBJR1oxYm1OMGFXOXVJR1JsY0dWdVpHbHVaeUJ2Ymx4dUlDQWdLaUIzYUdWMGFHVnlJSFJvWlNCbVpYUmphQ0J6ZFdOalpXVmtaV1FnYjNJZ2JtOTBMbHh1SUNBZ0tpQmNiaUFnSUNvZ1BIQnlaVDVjYmlBZ0lDb2dkbUZ5SUhGMVpYSjVJRDBnYm1WM0lGQmhjbk5sTGxGMVpYSjVLRTE1UTJ4aGMzTXBPMXh1SUNBZ0tpQnhkV1Z5ZVM1bWFXNWtLSHRjYmlBZ0lDb2dJQ0J6ZFdOalpYTnpPaUJtZFc1amRHbHZiaWh5WlhOMWJIUnpLU0I3WEc0Z0lDQXFJQ0FnSUNBdkx5QnlaWE4xYkhSeklHbHpJR0Z1SUdGeWNtRjVJRzltSUZCaGNuTmxMazlpYW1WamRDNWNiaUFnSUNvZ0lDQjlMRnh1SUNBZ0tseHVJQ0FnS2lBZ0lHVnljbTl5T2lCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4dUlDQWdLaUFnSUNBZ0x5OGdaWEp5YjNJZ2FYTWdZVzRnYVc1emRHRnVZMlVnYjJZZ1VHRnljMlV1UlhKeWIzSXVYRzRnSUNBcUlDQWdmVnh1SUNBZ0tpQjlLVHM4TDNCeVpUNDhMM0ErWEc0Z0lDQXFJRnh1SUNBZ0tpQThjRDVCSUZCaGNuTmxMbEYxWlhKNUlHTmhiaUJoYkhOdklHSmxJSFZ6WldRZ2RHOGdjbVYwY21sbGRtVWdZU0J6YVc1bmJHVWdiMkpxWldOMElIZG9iM05sSUdsa0lHbHpYRzRnSUNBcUlHdHViM2R1TENCMGFISnZkV2RvSUhSb1pTQm5aWFFnYldWMGFHOWtMaUJHYjNJZ1pYaGhiWEJzWlN3Z2RHaHBjeUJ6WVcxd2JHVWdZMjlrWlNCbVpYUmphR1Z6SUdGdVhHNGdJQ0FxSUc5aWFtVmpkQ0J2WmlCamJHRnpjeUE4WTI5a1pUNU5lVU5zWVhOelBDOWpiMlJsUGlCaGJtUWdhV1FnUEdOdlpHVStiWGxKWkR3dlkyOWtaVDR1SUVsMElHTmhiR3h6SUdGY2JpQWdJQ29nWkdsbVptVnlaVzUwSUdaMWJtTjBhVzl1SUdSbGNHVnVaR2x1WnlCdmJpQjNhR1YwYUdWeUlIUm9aU0JtWlhSamFDQnpkV05qWldWa1pXUWdiM0lnYm05MExseHVJQ0FnS2lCY2JpQWdJQ29nUEhCeVpUNWNiaUFnSUNvZ2RtRnlJSEYxWlhKNUlEMGdibVYzSUZCaGNuTmxMbEYxWlhKNUtFMTVRMnhoYzNNcE8xeHVJQ0FnS2lCeGRXVnllUzVuWlhRb2JYbEpaQ3dnZTF4dUlDQWdLaUFnSUhOMVkyTmxjM002SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ2tnZTF4dUlDQWdLaUFnSUNBZ0x5OGdiMkpxWldOMElHbHpJR0Z1SUdsdWMzUmhibU5sSUc5bUlGQmhjbk5sTGs5aWFtVmpkQzVjYmlBZ0lDb2dJQ0I5TEZ4dUlDQWdLbHh1SUNBZ0tpQWdJR1Z5Y205eU9pQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lHVnljbTl5S1NCN1hHNGdJQ0FxSUNBZ0lDQXZMeUJsY25KdmNpQnBjeUJoYmlCcGJuTjBZVzVqWlNCdlppQlFZWEp6WlM1RmNuSnZjaTVjYmlBZ0lDb2dJQ0I5WEc0Z0lDQXFJSDBwT3p3dmNISmxQand2Y0Q1Y2JpQWdJQ29nWEc0Z0lDQXFJRHh3UGtFZ1VHRnljMlV1VVhWbGNua2dZMkZ1SUdGc2MyOGdZbVVnZFhObFpDQjBieUJqYjNWdWRDQjBhR1VnYm5WdFltVnlJRzltSUc5aWFtVmpkSE1nZEdoaGRDQnRZWFJqYUZ4dUlDQWdLaUIwYUdVZ2NYVmxjbmtnZDJsMGFHOTFkQ0J5WlhSeWFXVjJhVzVuSUdGc2JDQnZaaUIwYUc5elpTQnZZbXBsWTNSekxpQkdiM0lnWlhoaGJYQnNaU3dnZEdocGMxeHVJQ0FnS2lCellXMXdiR1VnWTI5a1pTQmpiM1Z1ZEhNZ2RHaGxJRzUxYldKbGNpQnZaaUJ2WW1wbFkzUnpJRzltSUhSb1pTQmpiR0Z6Y3lBOFkyOWtaVDVOZVVOc1lYTnpQQzlqYjJSbFBseHVJQ0FnS2lBOGNISmxQbHh1SUNBZ0tpQjJZWElnY1hWbGNua2dQU0J1WlhjZ1VHRnljMlV1VVhWbGNua29UWGxEYkdGemN5azdYRzRnSUNBcUlIRjFaWEo1TG1OdmRXNTBLSHRjYmlBZ0lDb2dJQ0J6ZFdOalpYTnpPaUJtZFc1amRHbHZiaWh1ZFcxaVpYSXBJSHRjYmlBZ0lDb2dJQ0FnSUM4dklGUm9aWEpsSUdGeVpTQnVkVzFpWlhJZ2FXNXpkR0Z1WTJWeklHOW1JRTE1UTJ4aGMzTXVYRzRnSUNBcUlDQWdmU3hjYmlBZ0lDcGNiaUFnSUNvZ0lDQmxjbkp2Y2pvZ1puVnVZM1JwYjI0b1pYSnliM0lwSUh0Y2JpQWdJQ29nSUNBZ0lDOHZJR1Z5Y205eUlHbHpJR0Z1SUdsdWMzUmhibU5sSUc5bUlGQmhjbk5sTGtWeWNtOXlMbHh1SUNBZ0tpQWdJSDFjYmlBZ0lDb2dmU2s3UEM5d2NtVStQQzl3UGx4dUlDQWdLaTljYmlBZ1VHRnljMlV1VVhWbGNua2dQU0JtZFc1amRHbHZiaWh2WW1wbFkzUkRiR0Z6Y3lrZ2UxeHVJQ0FnSUdsbUlDaGZMbWx6VTNSeWFXNW5LRzlpYW1WamRFTnNZWE56S1NrZ2UxeHVJQ0FnSUNBZ2IySnFaV04wUTJ4aGMzTWdQU0JRWVhKelpTNVBZbXBsWTNRdVgyZGxkRk4xWW1Oc1lYTnpLRzlpYW1WamRFTnNZWE56S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxtOWlhbVZqZEVOc1lYTnpJRDBnYjJKcVpXTjBRMnhoYzNNN1hHNWNiaUFnSUNCMGFHbHpMbU5zWVhOelRtRnRaU0E5SUc5aWFtVmpkRU5zWVhOekxuQnliM1J2ZEhsd1pTNWpiR0Z6YzA1aGJXVTdYRzVjYmlBZ0lDQjBhR2x6TGw5M2FHVnlaU0E5SUh0OU8xeHVJQ0FnSUhSb2FYTXVYMmx1WTJ4MVpHVWdQU0JiWFR0Y2JpQWdJQ0IwYUdsekxsOXNhVzFwZENBOUlDMHhPeUF2THlCdVpXZGhkR2wyWlNCc2FXMXBkQ0J0WldGdWN5d2daRzhnYm05MElITmxibVFnWVNCc2FXMXBkRnh1SUNBZ0lIUm9hWE11WDNOcmFYQWdQU0F3TzF4dUlDQWdJSFJvYVhNdVgyVjRkSEpoVDNCMGFXOXVjeUE5SUh0OU8xeHVJQ0I5TzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYjI1emRISjFZM1J6SUdFZ1VHRnljMlV1VVhWbGNua2dkR2hoZENCcGN5QjBhR1VnVDFJZ2IyWWdkR2hsSUhCaGMzTmxaQ0JwYmlCeGRXVnlhV1Z6TGlBZ1JtOXlYRzRnSUNBcUlHVjRZVzF3YkdVNlhHNGdJQ0FxSUR4d2NtVStkbUZ5SUdOdmJYQnZkVzVrVVhWbGNua2dQU0JRWVhKelpTNVJkV1Z5ZVM1dmNpaHhkV1Z5ZVRFc0lIRjFaWEo1TWl3Z2NYVmxjbmt6S1RzOEwzQnlaVDVjYmlBZ0lDcGNiaUFnSUNvZ2QybHNiQ0JqY21WaGRHVWdZU0JqYjIxd2IzVnVaRkYxWlhKNUlIUm9ZWFFnYVhNZ1lXNGdiM0lnYjJZZ2RHaGxJSEYxWlhKNU1Td2djWFZsY25reUxDQmhibVJjYmlBZ0lDb2djWFZsY25rekxseHVJQ0FnS2lCQWNHRnlZVzBnZXk0dUxsQmhjbk5sTGxGMVpYSjVmU0IyWVhKZllYSm5jeUJVYUdVZ2JHbHpkQ0J2WmlCeGRXVnlhV1Z6SUhSdklFOVNMbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UmRXVnllWDBnVkdobElIRjFaWEo1SUhSb1lYUWdhWE1nZEdobElFOVNJRzltSUhSb1pTQndZWE56WldRZ2FXNGdjWFZsY21sbGN5NWNiaUFnSUNvdlhHNGdJRkJoY25ObExsRjFaWEo1TG05eUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdkbUZ5SUhGMVpYSnBaWE1nUFNCZkxuUnZRWEp5WVhrb1lYSm5kVzFsYm5SektUdGNiaUFnSUNCMllYSWdZMnhoYzNOT1lXMWxJRDBnYm5Wc2JEdGNiaUFnSUNCUVlYSnpaUzVmWVhKeVlYbEZZV05vS0hGMVpYSnBaWE1zSUdaMWJtTjBhVzl1S0hFcElIdGNiaUFnSUNBZ0lHbG1JQ2hmTG1selRuVnNiQ2hqYkdGemMwNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpTQTlJSEV1WTJ4aGMzTk9ZVzFsTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9ZMnhoYzNOT1lXMWxJQ0U5UFNCeExtTnNZWE56VG1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QmNJa0ZzYkNCeGRXVnlhV1Z6SUcxMWMzUWdZbVVnWm05eUlIUm9aU0J6WVcxbElHTnNZWE56WENJN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnZG1GeUlIRjFaWEo1SUQwZ2JtVjNJRkJoY25ObExsRjFaWEo1S0dOc1lYTnpUbUZ0WlNrN1hHNGdJQ0FnY1hWbGNua3VYMjl5VVhWbGNua29jWFZsY21sbGN5azdYRzRnSUNBZ2NtVjBkWEp1SUhGMVpYSjVPMXh1SUNCOU8xeHVYRzRnSUZCaGNuTmxMbEYxWlhKNUxuQnliM1J2ZEhsd1pTQTlJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYjI1emRISjFZM1J6SUdFZ1VHRnljMlV1VDJKcVpXTjBJSGRvYjNObElHbGtJR2x6SUdGc2NtVmhaSGtnYTI1dmQyNGdZbmtnWm1WMFkyaHBibWNnWkdGMFlTQm1jbTl0WEc0Z0lDQWdJQ29nZEdobElITmxjblpsY2k0Z0lFVnBkR2hsY2lCdmNIUnBiMjV6TG5OMVkyTmxjM01nYjNJZ2IzQjBhVzl1Y3k1bGNuSnZjaUJwY3lCallXeHNaV1FnZDJobGJpQjBhR1ZjYmlBZ0lDQWdLaUJtYVc1a0lHTnZiWEJzWlhSbGN5NWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCdlltcGxZM1JKWkNCVWFHVWdhV1FnYjJZZ2RHaGxJRzlpYW1WamRDQjBieUJpWlNCbVpYUmphR1ZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJRUVnUW1GamEySnZibVV0YzNSNWJHVWdiM0IwYVc5dWN5QnZZbXBsWTNRdVhHNGdJQ0FnSUNvZ1ZtRnNhV1FnYjNCMGFXOXVjeUJoY21VNlBIVnNQbHh1SUNBZ0lDQXFJQ0FnUEd4cFBuTjFZMk5sYzNNNklFRWdRbUZqYTJKdmJtVXRjM1I1YkdVZ2MzVmpZMlZ6Y3lCallXeHNZbUZqYTF4dUlDQWdJQ0FxSUNBZ1BHeHBQbVZ5Y205eU9pQkJiaUJDWVdOclltOXVaUzF6ZEhsc1pTQmxjbkp2Y2lCallXeHNZbUZqYXk1Y2JpQWdJQ0FnS2lBZ0lEeHNhVDUxYzJWTllYTjBaWEpMWlhrNklFbHVJRU5zYjNWa0lFTnZaR1VnWVc1a0lFNXZaR1VnYjI1c2VTd2dZMkYxYzJWeklIUm9aU0JOWVhOMFpYSWdTMlY1SUhSdlhHNGdJQ0FnSUNvZ0lDQWdJR0psSUhWelpXUWdabTl5SUhSb2FYTWdjbVZ4ZFdWemRDNWNiaUFnSUNBZ0tpQWdJRHhzYVQ1elpYTnphVzl1Vkc5clpXNDZJRUVnZG1Gc2FXUWdjMlZ6YzJsdmJpQjBiMnRsYml3Z2RYTmxaQ0JtYjNJZ2JXRnJhVzVuSUdFZ2NtVnhkV1Z6ZENCdmJseHVJQ0FnSUNBcUlDQWdJQ0FnSUdKbGFHRnNaaUJ2WmlCaElITndaV05wWm1saklIVnpaWEl1WEc0Z0lDQWdJQ29nUEM5MWJENWNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLRzlpYW1WamRFbGtMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQnpaV3htTG1WeGRXRnNWRzhvSjI5aWFtVmpkRWxrSnl3Z2IySnFaV04wU1dRcE8xeHVYRzRnSUNBZ0lDQjJZWElnWm1seWMzUlBjSFJwYjI1eklEMGdlMzA3WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3lBbUppQmZMbWhoY3lodmNIUnBiMjV6TENBbmRYTmxUV0Z6ZEdWeVMyVjVKeWtwSUh0Y2JpQWdJQ0FnSUNBZ1ptbHljM1JQY0hScGIyNXpJRDBnZXlCMWMyVk5ZWE4wWlhKTFpYazZJRzl3ZEdsdmJuTXVkWE5sVFdGemRHVnlTMlY1SUgwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5QW1KaUJmTG1oaGN5aHZjSFJwYjI1ekxDQW5jMlZ6YzJsdmJsUnZhMlZ1SnlrcElIdGNiaUFnSUNBZ0lDQWdabWx5YzNSUGNIUnBiMjV6TG5ObGMzTnBiMjVVYjJ0bGJpQTlJRzl3ZEdsdmJuTXVjMlZ6YzJsdmJsUnZhMlZ1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1ppNW1hWEp6ZENobWFYSnpkRTl3ZEdsdmJuTXBMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpjRzl1YzJVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM0J2Ym5ObE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlHVnljbTl5VDJKcVpXTjBJRDBnYm1WM0lGQmhjbk5sTGtWeWNtOXlLRkJoY25ObExrVnljbTl5TGs5Q1NrVkRWRjlPVDFSZlJrOVZUa1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWs5aWFtVmpkQ0J1YjNRZ1ptOTFibVF1WENJcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1VUhKdmJXbHpaUzVsY25KdmNpaGxjbkp2Y2s5aWFtVmpkQ2s3WEc1Y2JpQWdJQ0FnSUgwcExsOTBhR1Z1VW5WdVEyRnNiR0poWTJ0ektHOXdkR2x2Ym5Nc0lHNTFiR3dwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUdFZ1NsTlBUaUJ5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUIwYUdseklIRjFaWEo1TGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnVkdobElFcFRUMDRnY21Wd2NtVnpaVzUwWVhScGIyNGdiMllnZEdobElIRjFaWEo1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSFJ2U2xOUFRqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2NHRnlZVzF6SUQwZ2UxeHVJQ0FnSUNBZ0lDQjNhR1Z5WlRvZ2RHaHBjeTVmZDJobGNtVmNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDlwYm1Oc2RXUmxMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ2NHRnlZVzF6TG1sdVkyeDFaR1VnUFNCMGFHbHpMbDlwYm1Oc2RXUmxMbXB2YVc0b1hDSXNYQ0lwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDNObGJHVmpkQ2tnZTF4dUlDQWdJQ0FnSUNCd1lYSmhiWE11YTJWNWN5QTlJSFJvYVhNdVgzTmxiR1ZqZEM1cWIybHVLRndpTEZ3aUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOXNhVzFwZENBK1BTQXdLU0I3WEc0Z0lDQWdJQ0FnSUhCaGNtRnRjeTVzYVcxcGRDQTlJSFJvYVhNdVgyeHBiV2wwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDNOcmFYQWdQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lIQmhjbUZ0Y3k1emEybHdJRDBnZEdocGN5NWZjMnRwY0R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5dmNtUmxjaUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSEJoY21GdGN5NXZjbVJsY2lBOUlIUm9hWE11WDI5eVpHVnlMbXB2YVc0b1hDSXNYQ0lwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCUVlYSnpaUzVmYjJKcVpXTjBSV0ZqYUNoMGFHbHpMbDlsZUhSeVlVOXdkR2x2Ym5Nc0lHWjFibU4wYVc5dUtIWXNJR3NwSUh0Y2JpQWdJQ0FnSUNBZ2NHRnlZVzF6VzJ0ZElEMGdkanRjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnY0dGeVlXMXpPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSeWFXVjJaWE1nWVNCc2FYTjBJRzltSUZCaGNuTmxUMkpxWldOMGN5QjBhR0YwSUhOaGRHbHpabmtnZEdocGN5QnhkV1Z5ZVM1Y2JpQWdJQ0FnS2lCRmFYUm9aWElnYjNCMGFXOXVjeTV6ZFdOalpYTnpJRzl5SUc5d2RHbHZibk11WlhKeWIzSWdhWE1nWTJGc2JHVmtJSGRvWlc0Z2RHaGxJR1pwYm1SY2JpQWdJQ0FnS2lCamIyMXdiR1YwWlhNdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUJCSUVKaFkydGliMjVsTFhOMGVXeGxJRzl3ZEdsdmJuTWdiMkpxWldOMExpQldZV3hwWkNCdmNIUnBiMjV6WEc0Z0lDQWdJQ29nWVhKbE9qeDFiRDVjYmlBZ0lDQWdLaUFnSUR4c2FUNXpkV05qWlhOek9pQkdkVzVqZEdsdmJpQjBieUJqWVd4c0lIZG9aVzRnZEdobElHWnBibVFnWTI5dGNHeGxkR1Z6SUhOMVkyTmxjM05tZFd4c2VTNWNiaUFnSUNBZ0tpQWdJRHhzYVQ1bGNuSnZjam9nUm5WdVkzUnBiMjRnZEc4Z1kyRnNiQ0IzYUdWdUlIUm9aU0JtYVc1a0lHWmhhV3h6TGx4dUlDQWdJQ0FxSUNBZ1BHeHBQblZ6WlUxaGMzUmxja3RsZVRvZ1NXNGdRMnh2ZFdRZ1EyOWtaU0JoYm1RZ1RtOWtaU0J2Ym14NUxDQmpZWFZ6WlhNZ2RHaGxJRTFoYzNSbGNpQkxaWGtnZEc5Y2JpQWdJQ0FnS2lBZ0lDQWdZbVVnZFhObFpDQm1iM0lnZEdocGN5QnlaWEYxWlhOMExseHVJQ0FnSUNBcUlDQWdQR3hwUG5ObGMzTnBiMjVVYjJ0bGJqb2dRU0IyWVd4cFpDQnpaWE56YVc5dUlIUnZhMlZ1TENCMWMyVmtJR1p2Y2lCdFlXdHBibWNnWVNCeVpYRjFaWE4wSUc5dVhHNGdJQ0FnSUNvZ0lDQWdJQ0FnWW1Wb1lXeG1JRzltSUdFZ2MzQmxZMmxtYVdNZ2RYTmxjaTVjYmlBZ0lDQWdLaUE4TDNWc1BseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VHRnljMlV1VUhKdmJXbHpaWDBnUVNCd2NtOXRhWE5sSUhSb1lYUWdhWE1nY21WemIyeDJaV1FnZDJsMGFDQjBhR1VnY21WemRXeDBjeUIzYUdWdVhHNGdJQ0FnSUNvZ2RHaGxJSEYxWlhKNUlHTnZiWEJzWlhSbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCbWFXNWtPaUJtZFc1amRHbHZiaWh2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JseHVJQ0FnSUNBZ2RtRnlJSEpsY1hWbGMzUWdQU0JRWVhKelpTNWZjbVZ4ZFdWemRDaDdYRzRnSUNBZ0lDQWdJSEp2ZFhSbE9pQmNJbU5zWVhOelpYTmNJaXhjYmlBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsT2lCMGFHbHpMbU5zWVhOelRtRnRaU3hjYmlBZ0lDQWdJQ0FnYldWMGFHOWtPaUJjSWtkRlZGd2lMRnh1SUNBZ0lDQWdJQ0IxYzJWTllYTjBaWEpMWlhrNklHOXdkR2x2Ym5NdWRYTmxUV0Z6ZEdWeVMyVjVMRnh1SUNBZ0lDQWdJQ0J6WlhOemFXOXVWRzlyWlc0NklHOXdkR2x2Ym5NdWMyVnpjMmx2YmxSdmEyVnVMRnh1SUNBZ0lDQWdJQ0JrWVhSaE9pQjBhR2x6TG5SdlNsTlBUaWdwWEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbGNYVmxjM1F1ZEdobGJpaG1kVzVqZEdsdmJpaHlaWE53YjI1elpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYeTV0WVhBb2NtVnpjRzl1YzJVdWNtVnpkV3gwY3l3Z1puVnVZM1JwYjI0b2FuTnZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ2WW1vN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sTG1Oc1lYTnpUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJKcUlEMGdibVYzSUZCaGNuTmxMazlpYW1WamRDaHlaWE53YjI1elpTNWpiR0Z6YzA1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZZbW9nUFNCdVpYY2djMlZzWmk1dlltcGxZM1JEYkdGemN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnZZbW91WDJacGJtbHphRVpsZEdOb0tHcHpiMjRzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2WW1vN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU2t1WDNSb1pXNVNkVzVEWVd4c1ltRmphM01vYjNCMGFXOXVjeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOdmRXNTBjeUIwYUdVZ2JuVnRZbVZ5SUc5bUlHOWlhbVZqZEhNZ2RHaGhkQ0J0WVhSamFDQjBhR2x6SUhGMVpYSjVMbHh1SUNBZ0lDQXFJRVZwZEdobGNpQnZjSFJwYjI1ekxuTjFZMk5sYzNNZ2IzSWdiM0IwYVc5dWN5NWxjbkp2Y2lCcGN5QmpZV3hzWldRZ2QyaGxiaUIwYUdVZ1kyOTFiblJjYmlBZ0lDQWdLaUJqYjIxd2JHVjBaWE11WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QkJJRUpoWTJ0aWIyNWxMWE4wZVd4bElHOXdkR2x2Ym5NZ2IySnFaV04wTGlCV1lXeHBaQ0J2Y0hScGIyNXpYRzRnSUNBZ0lDb2dZWEpsT2p4MWJENWNiaUFnSUNBZ0tpQWdJRHhzYVQ1emRXTmpaWE56T2lCR2RXNWpkR2x2YmlCMGJ5QmpZV3hzSUhkb1pXNGdkR2hsSUdOdmRXNTBJR052YlhCc1pYUmxjeUJ6ZFdOalpYTnpablZzYkhrdVhHNGdJQ0FnSUNvZ0lDQThiR2srWlhKeWIzSTZJRVoxYm1OMGFXOXVJSFJ2SUdOaGJHd2dkMmhsYmlCMGFHVWdabWx1WkNCbVlXbHNjeTVjYmlBZ0lDQWdLaUFnSUR4c2FUNTFjMlZOWVhOMFpYSkxaWGs2SUVsdUlFTnNiM1ZrSUVOdlpHVWdZVzVrSUU1dlpHVWdiMjVzZVN3Z1kyRjFjMlZ6SUhSb1pTQk5ZWE4wWlhJZ1MyVjVJSFJ2WEc0Z0lDQWdJQ29nSUNBZ0lHSmxJSFZ6WldRZ1ptOXlJSFJvYVhNZ2NtVnhkV1Z6ZEM1Y2JpQWdJQ0FnS2lBZ0lEeHNhVDV6WlhOemFXOXVWRzlyWlc0NklFRWdkbUZzYVdRZ2MyVnpjMmx2YmlCMGIydGxiaXdnZFhObFpDQm1iM0lnYldGcmFXNW5JR0VnY21WeGRXVnpkQ0J2Ymx4dUlDQWdJQ0FxSUNBZ0lDQWdJR0psYUdGc1ppQnZaaUJoSUhOd1pXTnBabWxqSUhWelpYSXVYRzRnSUNBZ0lDb2dQQzkxYkQ1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTFCaGNuTmxMbEJ5YjIxcGMyVjlJRUVnY0hKdmJXbHpaU0IwYUdGMElHbHpJSEpsYzI5c2RtVmtJSGRwZEdnZ2RHaGxJR052ZFc1MElIZG9aVzVjYmlBZ0lDQWdLaUIwYUdVZ2NYVmxjbmtnWTI5dGNHeGxkR1Z6TGx4dUlDQWdJQ0FxTDF4dUlDQWdJR052ZFc1ME9pQm1kVzVqZEdsdmJpaHZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmVHRjYmx4dUlDQWdJQ0FnZG1GeUlIQmhjbUZ0Y3lBOUlIUm9hWE11ZEc5S1UwOU9LQ2s3WEc0Z0lDQWdJQ0J3WVhKaGJYTXViR2x0YVhRZ1BTQXdPMXh1SUNBZ0lDQWdjR0Z5WVcxekxtTnZkVzUwSUQwZ01UdGNiaUFnSUNBZ0lIWmhjaUJ5WlhGMVpYTjBJRDBnVUdGeWMyVXVYM0psY1hWbGMzUW9lMXh1SUNBZ0lDQWdJQ0J5YjNWMFpUb2dYQ0pqYkdGemMyVnpYQ0lzWEc0Z0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlRvZ2MyVnNaaTVqYkdGemMwNWhiV1VzSUZ4dUlDQWdJQ0FnSUNCdFpYUm9iMlE2SUZ3aVIwVlVYQ0lzWEc0Z0lDQWdJQ0FnSUhWelpVMWhjM1JsY2t0bGVUb2diM0IwYVc5dWN5NTFjMlZOWVhOMFpYSkxaWGtzWEc0Z0lDQWdJQ0FnSUhObGMzTnBiMjVVYjJ0bGJqb2diM0IwYVc5dWN5NXpaWE56YVc5dVZHOXJaVzRzWEc0Z0lDQWdJQ0FnSUdSaGRHRTZJSEJoY21GdGMxeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWEYxWlhOMExuUm9aVzRvWm5WdVkzUnBiMjRvY21WemNHOXVjMlVwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzQnZibk5sTG1OdmRXNTBPMXh1SUNBZ0lDQWdmU2t1WDNSb1pXNVNkVzVEWVd4c1ltRmphM01vYjNCMGFXOXVjeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRISnBaWFpsY3lCaGRDQnRiM04wSUc5dVpTQlFZWEp6WlM1UFltcGxZM1FnZEdoaGRDQnpZWFJwYzJacFpYTWdkR2hwY3lCeGRXVnllUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRVZwZEdobGNpQnZjSFJwYjI1ekxuTjFZMk5sYzNNZ2IzSWdiM0IwYVc5dWN5NWxjbkp2Y2lCcGN5QmpZV3hzWldRZ2QyaGxiaUJwZENCamIyMXdiR1YwWlhNdVhHNGdJQ0FnSUNvZ2MzVmpZMlZ6Y3lCcGN5QndZWE56WldRZ2RHaGxJRzlpYW1WamRDQnBaaUIwYUdWeVpTQnBjeUJ2Ym1VdUlHOTBhR1Z5ZDJselpTd2dkVzVrWldacGJtVmtMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ1FTQkNZV05yWW05dVpTMXpkSGxzWlNCdmNIUnBiMjV6SUc5aWFtVmpkQzRnVm1Gc2FXUWdiM0IwYVc5dWMxeHVJQ0FnSUNBcUlHRnlaVG84ZFd3K1hHNGdJQ0FnSUNvZ0lDQThiR2srYzNWalkyVnpjem9nUm5WdVkzUnBiMjRnZEc4Z1kyRnNiQ0IzYUdWdUlIUm9aU0JtYVc1a0lHTnZiWEJzWlhSbGN5QnpkV05qWlhOelpuVnNiSGt1WEc0Z0lDQWdJQ29nSUNBOGJHaytaWEp5YjNJNklFWjFibU4wYVc5dUlIUnZJR05oYkd3Z2QyaGxiaUIwYUdVZ1ptbHVaQ0JtWVdsc2N5NWNiaUFnSUNBZ0tpQWdJRHhzYVQ1MWMyVk5ZWE4wWlhKTFpYazZJRWx1SUVOc2IzVmtJRU52WkdVZ1lXNWtJRTV2WkdVZ2IyNXNlU3dnWTJGMWMyVnpJSFJvWlNCTllYTjBaWElnUzJWNUlIUnZYRzRnSUNBZ0lDb2dJQ0FnSUdKbElIVnpaV1FnWm05eUlIUm9hWE1nY21WeGRXVnpkQzVjYmlBZ0lDQWdLaUFnSUR4c2FUNXpaWE56YVc5dVZHOXJaVzQ2SUVFZ2RtRnNhV1FnYzJWemMybHZiaUIwYjJ0bGJpd2dkWE5sWkNCbWIzSWdiV0ZyYVc1bklHRWdjbVZ4ZFdWemRDQnZibHh1SUNBZ0lDQXFJQ0FnSUNBZ0lHSmxhR0ZzWmlCdlppQmhJSE53WldOcFptbGpJSFZ6WlhJdVhHNGdJQ0FnSUNvZ1BDOTFiRDVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJoY25ObExsQnliMjFwYzJWOUlFRWdjSEp2YldselpTQjBhR0YwSUdseklISmxjMjlzZG1Wa0lIZHBkR2dnZEdobElHOWlhbVZqZENCM2FHVnVYRzRnSUNBZ0lDb2dkR2hsSUhGMVpYSjVJR052YlhCc1pYUmxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQm1hWEp6ZERvZ1puVnVZM1JwYjI0b2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzVjYmlBZ0lDQWdJSFpoY2lCd1lYSmhiWE1nUFNCMGFHbHpMblJ2U2xOUFRpZ3BPMXh1SUNBZ0lDQWdjR0Z5WVcxekxteHBiV2wwSUQwZ01UdGNiaUFnSUNBZ0lIWmhjaUJ5WlhGMVpYTjBJRDBnVUdGeWMyVXVYM0psY1hWbGMzUW9lMXh1SUNBZ0lDQWdJQ0J5YjNWMFpUb2dYQ0pqYkdGemMyVnpYQ0lzWEc0Z0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlRvZ2RHaHBjeTVqYkdGemMwNWhiV1VzSUZ4dUlDQWdJQ0FnSUNCdFpYUm9iMlE2SUZ3aVIwVlVYQ0lzWEc0Z0lDQWdJQ0FnSUhWelpVMWhjM1JsY2t0bGVUb2diM0IwYVc5dWN5NTFjMlZOWVhOMFpYSkxaWGtzWEc0Z0lDQWdJQ0FnSUhObGMzTnBiMjVVYjJ0bGJqb2diM0IwYVc5dWN5NXpaWE56YVc5dVZHOXJaVzRzWEc0Z0lDQWdJQ0FnSUdSaGRHRTZJSEJoY21GdGMxeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWEYxWlhOMExuUm9aVzRvWm5WdVkzUnBiMjRvY21WemNHOXVjMlVwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY4dWJXRndLSEpsYzNCdmJuTmxMbkpsYzNWc2RITXNJR1oxYm1OMGFXOXVLR3B6YjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2IySnFPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpTNWpiR0Z6YzA1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOWlhaUE5SUc1bGR5QlFZWEp6WlM1UFltcGxZM1FvY21WemNHOXVjMlV1WTJ4aGMzTk9ZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJKcUlEMGdibVYzSUhObGJHWXViMkpxWldOMFEyeGhjM01vS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnYjJKcUxsOW1hVzVwYzJoR1pYUmphQ2hxYzI5dUxDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2IySnFPMXh1SUNBZ0lDQWdJQ0I5S1Zzd1hUdGNiaUFnSUNBZ0lIMHBMbDkwYUdWdVVuVnVRMkZzYkdKaFkydHpLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJR0VnYm1WM0lHbHVjM1JoYm1ObElHOW1JRkJoY25ObExrTnZiR3hsWTNScGIyNGdZbUZqYTJWa0lHSjVJSFJvYVhNZ2NYVmxjbmt1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdhWFJsYlhNZ1FXNGdZWEp5WVhrZ2IyWWdhVzV6ZEdGdVkyVnpJRzltSUR4amIyUmxQbEJoY25ObExrOWlhbVZqZER3dlkyOWtaVDVjYmlBZ0lDQWdLaUFnSUNBZ2QybDBhQ0IzYUdsamFDQjBieUJ6ZEdGeWRDQjBhR2x6SUVOdmJHeGxZM1JwYjI0dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nUVc0Z2IzQjBhVzl1WVd3Z2IySnFaV04wSUhkcGRHZ2dRbUZqYTJKdmJtVXRjM1I1YkdVZ2IzQjBhVzl1Y3k1Y2JpQWdJQ0FnS2lCV1lXeHBaQ0J2Y0hScGIyNXpJR0Z5WlRvOGRXdytYRzRnSUNBZ0lDb2dJQ0E4YkdrK2JXOWtaV3c2SUZSb1pTQlFZWEp6WlM1UFltcGxZM1FnYzNWaVkyeGhjM01nZEdoaGRDQjBhR2x6SUdOdmJHeGxZM1JwYjI0Z1kyOXVkR0ZwYm5NdVhHNGdJQ0FnSUNvZ0lDQThiR2srY1hWbGNuazZJRUZ1SUdsdWMzUmhibU5sSUc5bUlGQmhjbk5sTGxGMVpYSjVJSFJ2SUhWelpTQjNhR1Z1SUdabGRHTm9hVzVuSUdsMFpXMXpMbHh1SUNBZ0lDQXFJQ0FnUEd4cFBtTnZiWEJoY21GMGIzSTZJRUVnYzNSeWFXNW5JSEJ5YjNCbGNuUjVJRzVoYldVZ2IzSWdablZ1WTNScGIyNGdkRzhnYzI5eWRDQmllUzVjYmlBZ0lDQWdLaUE4TDNWc1BseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGtOdmJHeGxZM1JwYjI1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5c2JHVmpkR2x2YmpvZ1puVnVZM1JwYjI0b2FYUmxiWE1zSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRWVhKelpTNURiMnhzWldOMGFXOXVLR2wwWlcxekxDQmZMbVY0ZEdWdVpDaHZjSFJwYjI1ekxDQjdYRzRnSUNBZ0lDQWdJRzF2WkdWc09pQjBhR2x6TG05aWFtVmpkRU5zWVhOekxGeHVJQ0FnSUNBZ0lDQnhkV1Z5ZVRvZ2RHaHBjMXh1SUNBZ0lDQWdmU2twTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCdWRXMWlaWElnYjJZZ2NtVnpkV3gwY3lCMGJ5QnphMmx3SUdKbFptOXlaU0J5WlhSMWNtNXBibWNnWVc1NUlISmxjM1ZzZEhNdVhHNGdJQ0FnSUNvZ1ZHaHBjeUJwY3lCMWMyVm1kV3dnWm05eUlIQmhaMmx1WVhScGIyNHVYRzRnSUNBZ0lDb2dSR1ZtWVhWc2RDQnBjeUIwYnlCemEybHdJSHBsY204Z2NtVnpkV3gwY3k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYmlCMGFHVWdiblZ0WW1WeUlHOW1JSEpsYzNWc2RITWdkRzhnYzJ0cGNDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UmRXVnllWDBnVW1WMGRYSnVjeUIwYUdVZ2NYVmxjbmtzSUhOdklIbHZkU0JqWVc0Z1kyaGhhVzRnZEdocGN5QmpZV3hzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSE5yYVhBNklHWjFibU4wYVc5dUtHNHBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzTnJhWEFnUFNCdU8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJR3hwYldsMElHOW1JSFJvWlNCdWRXMWlaWElnYjJZZ2NtVnpkV3gwY3lCMGJ5QnlaWFIxY200dUlGUm9aU0JrWldaaGRXeDBJR3hwYldsMElHbHpYRzRnSUNBZ0lDb2dNVEF3TENCM2FYUm9JR0VnYldGNGFXMTFiU0J2WmlBeE1EQXdJSEpsYzNWc2RITWdZbVZwYm1jZ2NtVjBkWEp1WldRZ1lYUWdZU0IwYVcxbExseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCdUlIUm9aU0J1ZFcxaVpYSWdiMllnY21WemRXeDBjeUIwYnlCc2FXMXBkQ0IwYnk1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVSZFdWeWVYMGdVbVYwZFhKdWN5QjBhR1VnY1hWbGNua3NJSE52SUhsdmRTQmpZVzRnWTJoaGFXNGdkR2hwY3lCallXeHNMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHeHBiV2wwT2lCbWRXNWpkR2x2YmlodUtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5c2FXMXBkQ0E5SUc0N1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV1JrSUdFZ1kyOXVjM1J5WVdsdWRDQjBieUIwYUdVZ2NYVmxjbmtnZEdoaGRDQnlaWEYxYVhKbGN5QmhJSEJoY25ScFkzVnNZWElnYTJWNUozTWdkbUZzZFdVZ2RHOWNiaUFnSUNBZ0tpQmlaU0JsY1hWaGJDQjBieUIwYUdVZ2NISnZkbWxrWldRZ2RtRnNkV1V1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUhSdklHTm9aV05yTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyWVd4MVpTQlVhR1VnZG1Gc2RXVWdkR2hoZENCMGFHVWdVR0Z5YzJVdVQySnFaV04wSUcxMWMzUWdZMjl1ZEdGcGJpNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UmRXVnllWDBnVW1WMGRYSnVjeUIwYUdVZ2NYVmxjbmtzSUhOdklIbHZkU0JqWVc0Z1kyaGhhVzRnZEdocGN5QmpZV3hzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR1Z4ZFdGc1ZHODZJR1oxYm1OMGFXOXVLR3RsZVN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUdsbUlDaGZMbWx6Vlc1a1pXWnBibVZrS0haaGJIVmxLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWtiMlZ6VG05MFJYaHBjM1FvYTJWNUtUdGNiaUFnSUNBZ0lIMGdYRzVjYmlBZ0lDQWdJSFJvYVhNdVgzZG9aWEpsVzJ0bGVWMGdQU0JRWVhKelpTNWZaVzVqYjJSbEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklaV3h3WlhJZ1ptOXlJR052Ym1ScGRHbHZiaUJ4ZFdWeWFXVnpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyRmtaRU52Ym1ScGRHbHZiam9nWm5WdVkzUnBiMjRvYTJWNUxDQmpiMjVrYVhScGIyNHNJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQXZMeUJEYUdWamF5QnBaaUIzWlNCaGJISmxZV1I1SUdoaGRtVWdZU0JqYjI1a2FYUnBiMjVjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmZDJobGNtVmJhMlY1WFNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M2FHVnlaVnRyWlhsZElEMGdlMzA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUdsekxsOTNhR1Z5WlZ0clpYbGRXMk52Ym1ScGRHbHZibDBnUFNCUVlYSnpaUzVmWlc1amIyUmxLSFpoYkhWbEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCWkdRZ1lTQmpiMjV6ZEhKaGFXNTBJSFJ2SUhSb1pTQnhkV1Z5ZVNCMGFHRjBJSEpsY1hWcGNtVnpJR0VnY0dGeWRHbGpkV3hoY2lCclpYa25jeUIyWVd4MVpTQjBiMXh1SUNBZ0lDQXFJR0psSUc1dmRDQmxjWFZoYkNCMGJ5QjBhR1VnY0hKdmRtbGtaV1FnZG1Gc2RXVXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHdGxlU0JVYUdVZ2EyVjVJSFJ2SUdOb1pXTnJMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCVWFHVWdkbUZzZFdVZ2RHaGhkQ0J0ZFhOMElHNXZkQ0JpWlNCbGNYVmhiR3hsWkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVSZFdWeWVYMGdVbVYwZFhKdWN5QjBhR1VnY1hWbGNua3NJSE52SUhsdmRTQmpZVzRnWTJoaGFXNGdkR2hwY3lCallXeHNMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHNXZkRVZ4ZFdGc1ZHODZJR1oxYm1OMGFXOXVLR3RsZVN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMkZrWkVOdmJtUnBkR2x2YmloclpYa3NJRndpSkc1bFhDSXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCWkdRZ1lTQmpiMjV6ZEhKaGFXNTBJSFJ2SUhSb1pTQnhkV1Z5ZVNCMGFHRjBJSEpsY1hWcGNtVnpJR0VnY0dGeWRHbGpkV3hoY2lCclpYa25jeUIyWVd4MVpTQjBiMXh1SUNBZ0lDQXFJR0psSUd4bGMzTWdkR2hoYmlCMGFHVWdjSEp2ZG1sa1pXUWdkbUZzZFdVdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUd0bGVTQlVhR1VnYTJWNUlIUnZJR05vWldOckxseHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEdoaGRDQndjbTkyYVdSbGN5QmhiaUIxY0hCbGNpQmliM1Z1WkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVSZFdWeWVYMGdVbVYwZFhKdWN5QjBhR1VnY1hWbGNua3NJSE52SUhsdmRTQmpZVzRnWTJoaGFXNGdkR2hwY3lCallXeHNMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHeGxjM05VYUdGdU9pQm1kVzVqZEdsdmJpaHJaWGtzSUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWhaR1JEYjI1a2FYUnBiMjRvYTJWNUxDQmNJaVJzZEZ3aUxDQjJZV3gxWlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV1JrSUdFZ1kyOXVjM1J5WVdsdWRDQjBieUIwYUdVZ2NYVmxjbmtnZEdoaGRDQnlaWEYxYVhKbGN5QmhJSEJoY25ScFkzVnNZWElnYTJWNUozTWdkbUZzZFdVZ2RHOWNiaUFnSUNBZ0tpQmlaU0JuY21WaGRHVnlJSFJvWVc0Z2RHaGxJSEJ5YjNacFpHVmtJSFpoYkhWbExseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCclpYa2dWR2hsSUd0bGVTQjBieUJqYUdWamF5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtRnNkV1VnVkdobElIWmhiSFZsSUhSb1lYUWdjSEp2ZG1sa1pYTWdZVzRnYkc5M1pYSWdZbTkxYm1RdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VHRnljMlV1VVhWbGNubDlJRkpsZEhWeWJuTWdkR2hsSUhGMVpYSjVMQ0J6YnlCNWIzVWdZMkZ1SUdOb1lXbHVJSFJvYVhNZ1kyRnNiQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQm5jbVZoZEdWeVZHaGhiam9nWm5WdVkzUnBiMjRvYTJWNUxDQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWVdSa1EyOXVaR2wwYVc5dUtHdGxlU3dnWENJa1ozUmNJaXdnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGa1pDQmhJR052Ym5OMGNtRnBiblFnZEc4Z2RHaGxJSEYxWlhKNUlIUm9ZWFFnY21WeGRXbHlaWE1nWVNCd1lYSjBhV04xYkdGeUlHdGxlU2R6SUhaaGJIVmxJSFJ2WEc0Z0lDQWdJQ29nWW1VZ2JHVnpjeUIwYUdGdUlHOXlJR1Z4ZFdGc0lIUnZJSFJvWlNCd2NtOTJhV1JsWkNCMllXeDFaUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdhMlY1SUZSb1pTQnJaWGtnZEc4Z1kyaGxZMnN1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFpoYkhWbElGUm9aU0IyWVd4MVpTQjBhR0YwSUhCeWIzWnBaR1Z6SUdGdUlIVndjR1Z5SUdKdmRXNWtMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJoY25ObExsRjFaWEo1ZlNCU1pYUjFjbTV6SUhSb1pTQnhkV1Z5ZVN3Z2MyOGdlVzkxSUdOaGJpQmphR0ZwYmlCMGFHbHpJR05oYkd3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYkdWemMxUm9ZVzVQY2tWeGRXRnNWRzg2SUdaMWJtTjBhVzl1S0d0bGVTd2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJGa1pFTnZibVJwZEdsdmJpaHJaWGtzSUZ3aUpHeDBaVndpTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXUmtJR0VnWTI5dWMzUnlZV2x1ZENCMGJ5QjBhR1VnY1hWbGNua2dkR2hoZENCeVpYRjFhWEpsY3lCaElIQmhjblJwWTNWc1lYSWdhMlY1SjNNZ2RtRnNkV1VnZEc5Y2JpQWdJQ0FnS2lCaVpTQm5jbVZoZEdWeUlIUm9ZVzRnYjNJZ1pYRjFZV3dnZEc4Z2RHaGxJSEJ5YjNacFpHVmtJSFpoYkhWbExseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCclpYa2dWR2hsSUd0bGVTQjBieUJqYUdWamF5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtRnNkV1VnVkdobElIWmhiSFZsSUhSb1lYUWdjSEp2ZG1sa1pYTWdZVzRnYkc5M1pYSWdZbTkxYm1RdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VHRnljMlV1VVhWbGNubDlJRkpsZEhWeWJuTWdkR2hsSUhGMVpYSjVMQ0J6YnlCNWIzVWdZMkZ1SUdOb1lXbHVJSFJvYVhNZ1kyRnNiQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQm5jbVZoZEdWeVZHaGhiazl5UlhGMVlXeFViem9nWm5WdVkzUnBiMjRvYTJWNUxDQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWVdSa1EyOXVaR2wwYVc5dUtHdGxlU3dnWENJa1ozUmxYQ0lzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQlpHUWdZU0JqYjI1emRISmhhVzUwSUhSdklIUm9aU0J4ZFdWeWVTQjBhR0YwSUhKbGNYVnBjbVZ6SUdFZ2NHRnlkR2xqZFd4aGNpQnJaWGtuY3lCMllXeDFaU0IwYjF4dUlDQWdJQ0FxSUdKbElHTnZiblJoYVc1bFpDQnBiaUIwYUdVZ2NISnZkbWxrWldRZ2JHbHpkQ0J2WmlCMllXeDFaWE11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUhSdklHTm9aV05yTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYbDlJSFpoYkhWbGN5QlVhR1VnZG1Gc2RXVnpJSFJvWVhRZ2QybHNiQ0J0WVhSamFDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UmRXVnllWDBnVW1WMGRYSnVjeUIwYUdVZ2NYVmxjbmtzSUhOdklIbHZkU0JqWVc0Z1kyaGhhVzRnZEdocGN5QmpZV3hzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5SaGFXNWxaRWx1T2lCbWRXNWpkR2x2YmloclpYa3NJSFpoYkhWbGN5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZllXUmtRMjl1WkdsMGFXOXVLR3RsZVN3Z1hDSWthVzVjSWl3Z2RtRnNkV1Z6S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJaR1FnWVNCamIyNXpkSEpoYVc1MElIUnZJSFJvWlNCeGRXVnllU0IwYUdGMElISmxjWFZwY21WeklHRWdjR0Z5ZEdsamRXeGhjaUJyWlhrbmN5QjJZV3gxWlNCMGIxeHVJQ0FnSUNBcUlHNXZkQ0JpWlNCamIyNTBZV2x1WldRZ2FXNGdkR2hsSUhCeWIzWnBaR1ZrSUd4cGMzUWdiMllnZG1Gc2RXVnpMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnJaWGtnVkdobElHdGxlU0IwYnlCamFHVmpheTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQjJZV3gxWlhNZ1ZHaGxJSFpoYkhWbGN5QjBhR0YwSUhkcGJHd2dibTkwSUcxaGRHTm9MbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJoY25ObExsRjFaWEo1ZlNCU1pYUjFjbTV6SUhSb1pTQnhkV1Z5ZVN3Z2MyOGdlVzkxSUdOaGJpQmphR0ZwYmlCMGFHbHpJR05oYkd3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYm05MFEyOXVkR0ZwYm1Wa1NXNDZJR1oxYm1OMGFXOXVLR3RsZVN3Z2RtRnNkV1Z6S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDloWkdSRGIyNWthWFJwYjI0b2EyVjVMQ0JjSWlSdWFXNWNJaXdnZG1Gc2RXVnpLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQlpHUWdZU0JqYjI1emRISmhhVzUwSUhSdklIUm9aU0J4ZFdWeWVTQjBhR0YwSUhKbGNYVnBjbVZ6SUdFZ2NHRnlkR2xqZFd4aGNpQnJaWGtuY3lCMllXeDFaU0IwYjF4dUlDQWdJQ0FxSUdOdmJuUmhhVzRnWldGamFDQnZibVVnYjJZZ2RHaGxJSEJ5YjNacFpHVmtJR3hwYzNRZ2IyWWdkbUZzZFdWekxseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCclpYa2dWR2hsSUd0bGVTQjBieUJqYUdWamF5NGdJRlJvYVhNZ2EyVjVKM01nZG1Gc2RXVWdiWFZ6ZENCaVpTQmhiaUJoY25KaGVTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCMllXeDFaWE1nVkdobElIWmhiSFZsY3lCMGFHRjBJSGRwYkd3Z2JXRjBZMmd1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVWFZsY25sOUlGSmxkSFZ5Ym5NZ2RHaGxJSEYxWlhKNUxDQnpieUI1YjNVZ1kyRnVJR05vWVdsdUlIUm9hWE1nWTJGc2JDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNTBZV2x1YzBGc2JEb2dablZ1WTNScGIyNG9hMlY1TENCMllXeDFaWE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMkZrWkVOdmJtUnBkR2x2YmloclpYa3NJRndpSkdGc2JGd2lMQ0IyWVd4MVpYTXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmU3hjYmx4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXUmtJR0VnWTI5dWMzUnlZV2x1ZENCbWIzSWdabWx1WkdsdVp5QnZZbXBsWTNSeklIUm9ZWFFnWTI5dWRHRnBiaUIwYUdVZ1oybDJaVzRnYTJWNUxseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCclpYa2dWR2hsSUd0bGVTQjBhR0YwSUhOb2IzVnNaQ0JsZUdsemRDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UmRXVnllWDBnVW1WMGRYSnVjeUIwYUdVZ2NYVmxjbmtzSUhOdklIbHZkU0JqWVc0Z1kyaGhhVzRnZEdocGN5QmpZV3hzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR1Y0YVhOMGN6b2dablZ1WTNScGIyNG9hMlY1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDloWkdSRGIyNWthWFJwYjI0b2EyVjVMQ0JjSWlSbGVHbHpkSE5jSWl3Z2RISjFaU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXUmtJR0VnWTI5dWMzUnlZV2x1ZENCbWIzSWdabWx1WkdsdVp5QnZZbXBsWTNSeklIUm9ZWFFnWkc4Z2JtOTBJR052Ym5SaGFXNGdZU0JuYVhabGJpQnJaWGt1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUhSb1lYUWdjMmh2ZFd4a0lHNXZkQ0JsZUdsemRGeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGxGMVpYSjVmU0JTWlhSMWNtNXpJSFJvWlNCeGRXVnllU3dnYzI4Z2VXOTFJR05oYmlCamFHRnBiaUIwYUdseklHTmhiR3d1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaRzlsYzA1dmRFVjRhWE4wT2lCbWRXNWpkR2x2YmloclpYa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyRmtaRU52Ym1ScGRHbHZiaWhyWlhrc0lGd2lKR1Y0YVhOMGMxd2lMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVdSa0lHRWdjbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVJR052Ym5OMGNtRnBiblFnWm05eUlHWnBibVJwYm1jZ2MzUnlhVzVuSUhaaGJIVmxjeUIwYUdGMElHMWhkR05vWEc0Z0lDQWdJQ29nZEdobElIQnliM1pwWkdWa0lISmxaM1ZzWVhJZ1pYaHdjbVZ6YzJsdmJpNWNiaUFnSUNBZ0tpQlVhR2x6SUcxaGVTQmlaU0J6Ykc5M0lHWnZjaUJzWVhKblpTQmtZWFJoYzJWMGN5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2EyVjVJRlJvWlNCclpYa2dkR2hoZENCMGFHVWdjM1J5YVc1bklIUnZJRzFoZEdOb0lHbHpJSE4wYjNKbFpDQnBiaTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMUpsWjBWNGNIMGdjbVZuWlhnZ1ZHaGxJSEpsWjNWc1lYSWdaWGh3Y21WemMybHZiaUJ3WVhSMFpYSnVJSFJ2SUcxaGRHTm9MbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJoY25ObExsRjFaWEo1ZlNCU1pYUjFjbTV6SUhSb1pTQnhkV1Z5ZVN3Z2MyOGdlVzkxSUdOaGJpQmphR0ZwYmlCMGFHbHpJR05oYkd3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYldGMFkyaGxjem9nWm5WdVkzUnBiMjRvYTJWNUxDQnlaV2RsZUN3Z2JXOWthV1pwWlhKektTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5aFpHUkRiMjVrYVhScGIyNG9hMlY1TENCY0lpUnlaV2RsZUZ3aUxDQnlaV2RsZUNrN1hHNGdJQ0FnSUNCcFppQW9JVzF2WkdsbWFXVnljeWtnZXlCdGIyUnBabWxsY25NZ1BTQmNJbHdpT3lCOVhHNGdJQ0FnSUNBdkx5QktZWFpoYzJOeWFYQjBJSEpsWjJWNElHOXdkR2x2Ym5NZ2MzVndjRzl5ZENCdGFXY2dZWE1nYVc1c2FXNWxJRzl3ZEdsdmJuTWdZblYwSUhOMGIzSmxJSFJvWlcwZ1hHNGdJQ0FnSUNBdkx5QmhjeUJ3Y205d1pYSjBhV1Z6SUc5bUlIUm9aU0J2WW1wbFkzUXVJRmRsSUhOMWNIQnZjblFnYldrZ0ppQnphRzkxYkdRZ2JXbG5jbUYwWlNCMGFHVnRJSFJ2WEc0Z0lDQWdJQ0F2THlCdGIyUnBabWxsY25OY2JpQWdJQ0FnSUdsbUlDaHlaV2RsZUM1cFoyNXZjbVZEWVhObEtTQjdJRzF2WkdsbWFXVnljeUFyUFNBbmFTYzdJSDFjYmlBZ0lDQWdJR2xtSUNoeVpXZGxlQzV0ZFd4MGFXeHBibVVwSUhzZ2JXOWthV1pwWlhKeklDczlJQ2R0SnpzZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvYlc5a2FXWnBaWEp6SUNZbUlHMXZaR2xtYVdWeWN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXUmtRMjl1WkdsMGFXOXVLR3RsZVN3Z1hDSWtiM0IwYVc5dWMxd2lMQ0J0YjJScFptbGxjbk1wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0JoSUdOdmJuTjBjbUZwYm5RZ2RHaGhkQ0J5WlhGMWFYSmxjeUIwYUdGMElHRWdhMlY1SjNNZ2RtRnNkV1VnYldGMFkyaGxjeUJoSUZCaGNuTmxMbEYxWlhKNVhHNGdJQ0FnSUNvZ1kyOXVjM1J5WVdsdWRDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2EyVjVJRlJvWlNCclpYa2dkR2hoZENCMGFHVWdZMjl1ZEdGcGJuTWdkR2hsSUc5aWFtVmpkQ0IwYnlCdFlYUmphQ0IwYUdWY2JpQWdJQ0FnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIRjFaWEo1TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VUdGeWMyVXVVWFZsY25sOUlIRjFaWEo1SUZSb1pTQnhkV1Z5ZVNCMGFHRjBJSE5vYjNWc1pDQnRZWFJqYUM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVSZFdWeWVYMGdVbVYwZFhKdWN5QjBhR1VnY1hWbGNua3NJSE52SUhsdmRTQmpZVzRnWTJoaGFXNGdkR2hwY3lCallXeHNMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHMWhkR05vWlhOUmRXVnllVG9nWm5WdVkzUnBiMjRvYTJWNUxDQnhkV1Z5ZVNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEYxWlhKNVNsTlBUaUE5SUhGMVpYSjVMblJ2U2xOUFRpZ3BPMXh1SUNBZ0lDQWdjWFZsY25sS1UwOU9MbU5zWVhOelRtRnRaU0E5SUhGMVpYSjVMbU5zWVhOelRtRnRaVHRjYmlBZ0lDQWdJSFJvYVhNdVgyRmtaRU52Ym1ScGRHbHZiaWhyWlhrc0lGd2lKR2x1VVhWbGNubGNJaXdnY1hWbGNubEtVMDlPS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0JoSUdOdmJuTjBjbUZwYm5RZ2RHaGhkQ0J5WlhGMWFYSmxjeUIwYUdGMElHRWdhMlY1SjNNZ2RtRnNkV1VnYm05MElHMWhkR05vWlhNZ1lWeHVJQ0FnSUNBcUlGQmhjbk5sTGxGMVpYSjVJR052Ym5OMGNtRnBiblF1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUhSb1lYUWdkR2hsSUdOdmJuUmhhVzV6SUhSb1pTQnZZbXBsWTNRZ2RHOGdiV0YwWTJnZ2RHaGxYRzRnSUNBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J4ZFdWeWVTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxQmhjbk5sTGxGMVpYSjVmU0J4ZFdWeWVTQlVhR1VnY1hWbGNua2dkR2hoZENCemFHOTFiR1FnYm05MElHMWhkR05vTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTFCaGNuTmxMbEYxWlhKNWZTQlNaWFIxY201eklIUm9aU0J4ZFdWeWVTd2djMjhnZVc5MUlHTmhiaUJqYUdGcGJpQjBhR2x6SUdOaGJHd3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pHOWxjMDV2ZEUxaGRHTm9VWFZsY25rNklHWjFibU4wYVc5dUtHdGxlU3dnY1hWbGNua3BJSHRjYmlBZ0lDQWdJSFpoY2lCeGRXVnllVXBUVDA0Z1BTQnhkV1Z5ZVM1MGIwcFRUMDRvS1R0Y2JpQWdJQ0FnSUhGMVpYSjVTbE5QVGk1amJHRnpjMDVoYldVZ1BTQnhkV1Z5ZVM1amJHRnpjMDVoYldVN1hHNGdJQ0FnSUNCMGFHbHpMbDloWkdSRGIyNWthWFJwYjI0b2EyVjVMQ0JjSWlSdWIzUkpibEYxWlhKNVhDSXNJSEYxWlhKNVNsTlBUaWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJaR1FnWVNCamIyNXpkSEpoYVc1MElIUm9ZWFFnY21WeGRXbHlaWE1nZEdoaGRDQmhJR3RsZVNkeklIWmhiSFZsSUcxaGRHTm9aWE1nWVNCMllXeDFaU0JwYmx4dUlDQWdJQ0FxSUdGdUlHOWlhbVZqZENCeVpYUjFjbTVsWkNCaWVTQmhJR1JwWm1abGNtVnVkQ0JRWVhKelpTNVJkV1Z5ZVM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYTJWNUlGUm9aU0JyWlhrZ2RHaGhkQ0JqYjI1MFlXbHVjeUIwYUdVZ2RtRnNkV1VnZEdoaGRDQnBjeUJpWldsdVoxeHVJQ0FnSUNBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0YwWTJobFpDNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2NYVmxjbmxMWlhrZ1ZHaGxJR3RsZVNCcGJpQjBhR1VnYjJKcVpXTjBjeUJ5WlhSMWNtNWxaQ0JpZVNCMGFHVWdjWFZsY25rZ2RHOWNiaUFnSUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBZMmdnWVdkaGFXNXpkQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMUJoY25ObExsRjFaWEo1ZlNCeGRXVnllU0JVYUdVZ2NYVmxjbmtnZEc4Z2NuVnVMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJoY25ObExsRjFaWEo1ZlNCU1pYUjFjbTV6SUhSb1pTQnhkV1Z5ZVN3Z2MyOGdlVzkxSUdOaGJpQmphR0ZwYmlCMGFHbHpJR05oYkd3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYldGMFkyaGxjMHRsZVVsdVVYVmxjbms2SUdaMWJtTjBhVzl1S0d0bGVTd2djWFZsY25sTFpYa3NJSEYxWlhKNUtTQjdYRzRnSUNBZ0lDQjJZWElnY1hWbGNubEtVMDlPSUQwZ2NYVmxjbmt1ZEc5S1UwOU9LQ2s3WEc0Z0lDQWdJQ0J4ZFdWeWVVcFRUMDR1WTJ4aGMzTk9ZVzFsSUQwZ2NYVmxjbmt1WTJ4aGMzTk9ZVzFsTzF4dUlDQWdJQ0FnZEdocGN5NWZZV1JrUTI5dVpHbDBhVzl1S0d0bGVTd2dYQ0lrYzJWc1pXTjBYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCclpYazZJSEYxWlhKNVMyVjVMQ0J4ZFdWeWVUb2djWFZsY25sS1UwOU9JSDBwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0JoSUdOdmJuTjBjbUZwYm5RZ2RHaGhkQ0J5WlhGMWFYSmxjeUIwYUdGMElHRWdhMlY1SjNNZ2RtRnNkV1VnYm05MElHMWhkR05vSUdFZ2RtRnNkV1VnYVc1Y2JpQWdJQ0FnS2lCaGJpQnZZbXBsWTNRZ2NtVjBkWEp1WldRZ1lua2dZU0JrYVdabVpYSmxiblFnVUdGeWMyVXVVWFZsY25rdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUd0bGVTQlVhR1VnYTJWNUlIUm9ZWFFnWTI5dWRHRnBibk1nZEdobElIWmhiSFZsSUhSb1lYUWdhWE1nWW1WcGJtZGNiaUFnSUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Y0WTJ4MVpHVmtMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnhkV1Z5ZVV0bGVTQlVhR1VnYTJWNUlHbHVJSFJvWlNCdlltcGxZM1J6SUhKbGRIVnlibVZrSUdKNUlIUm9aU0J4ZFdWeWVTQjBiMXh1SUNBZ0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJqYUNCaFoyRnBibk4wTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VUdGeWMyVXVVWFZsY25sOUlIRjFaWEo1SUZSb1pTQnhkV1Z5ZVNCMGJ5QnlkVzR1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVWFZsY25sOUlGSmxkSFZ5Ym5NZ2RHaGxJSEYxWlhKNUxDQnpieUI1YjNVZ1kyRnVJR05vWVdsdUlIUm9hWE1nWTJGc2JDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCa2IyVnpUbTkwVFdGMFkyaExaWGxKYmxGMVpYSjVPaUJtZFc1amRHbHZiaWhyWlhrc0lIRjFaWEo1UzJWNUxDQnhkV1Z5ZVNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEYxWlhKNVNsTlBUaUE5SUhGMVpYSjVMblJ2U2xOUFRpZ3BPMXh1SUNBZ0lDQWdjWFZsY25sS1UwOU9MbU5zWVhOelRtRnRaU0E5SUhGMVpYSjVMbU5zWVhOelRtRnRaVHRjYmlBZ0lDQWdJSFJvYVhNdVgyRmtaRU52Ym1ScGRHbHZiaWhyWlhrc0lGd2lKR1J2Ym5SVFpXeGxZM1JjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lHdGxlVG9nY1hWbGNubExaWGtzSUhGMVpYSjVPaUJ4ZFdWeWVVcFRUMDRnZlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV1JrSUdOdmJuTjBjbUZwYm5RZ2RHaGhkQ0JoZENCc1pXRnpkQ0J2Ym1VZ2IyWWdkR2hsSUhCaGMzTmxaQ0JwYmlCeGRXVnlhV1Z6SUcxaGRHTm9aWE11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdjWFZsY21sbGMxeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGxGMVpYSjVmU0JTWlhSMWNtNXpJSFJvWlNCeGRXVnllU3dnYzI4Z2VXOTFJR05oYmlCamFHRnBiaUIwYUdseklHTmhiR3d1WEc0Z0lDQWdJQ292WEc0Z0lDQWdYMjl5VVhWbGNuazZJR1oxYm1OMGFXOXVLSEYxWlhKcFpYTXBJSHRjYmlBZ0lDQWdJSFpoY2lCeGRXVnllVXBUVDA0Z1BTQmZMbTFoY0NoeGRXVnlhV1Z6TENCbWRXNWpkR2x2YmloeEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnhMblJ2U2xOUFRpZ3BMbmRvWlhKbE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSFJvYVhNdVgzZG9aWEpsTGlSdmNpQTlJSEYxWlhKNVNsTlBUanRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGIyNTJaWEowY3lCaElITjBjbWx1WnlCcGJuUnZJR0VnY21WblpYZ2dkR2hoZENCdFlYUmphR1Z6SUdsMExseHVJQ0FnSUNBcUlGTjFjbkp2ZFc1a2FXNW5JSGRwZEdnZ1hGeFJJQzR1SUZ4Y1JTQmtiMlZ6SUhSb2FYTXNJSGRsSUdwMWMzUWdibVZsWkNCMGJ5QmxjMk5oY0dVZ1hGeEZKM01nYVc1Y2JpQWdJQ0FnS2lCMGFHVWdkR1Y0ZENCelpYQmhjbUYwWld4NUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUY5eGRXOTBaVG9nWm5WdVkzUnBiMjRvY3lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUZ3aVhGeGNYRkZjSWlBcklITXVjbVZ3YkdGalpTaGNJbHhjWEZ4RlhDSXNJRndpWEZ4Y1hFVmNYRnhjWEZ4Y1hFVmNYRnhjVVZ3aUtTQXJJRndpWEZ4Y1hFVmNJanRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVdSa0lHRWdZMjl1YzNSeVlXbHVkQ0JtYjNJZ1ptbHVaR2x1WnlCemRISnBibWNnZG1Gc2RXVnpJSFJvWVhRZ1kyOXVkR0ZwYmlCaElIQnliM1pwWkdWa1hHNGdJQ0FnSUNvZ2MzUnlhVzVuTGlBZ1ZHaHBjeUJ0WVhrZ1ltVWdjMnh2ZHlCbWIzSWdiR0Z5WjJVZ1pHRjBZWE5sZEhNdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUd0bGVTQlVhR1VnYTJWNUlIUm9ZWFFnZEdobElITjBjbWx1WnlCMGJ5QnRZWFJqYUNCcGN5QnpkRzl5WldRZ2FXNHVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlITjFZbk4wY21sdVp5QlVhR1VnYzNWaWMzUnlhVzVuSUhSb1lYUWdkR2hsSUhaaGJIVmxJRzExYzNRZ1kyOXVkR0ZwYmk1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVSZFdWeWVYMGdVbVYwZFhKdWN5QjBhR1VnY1hWbGNua3NJSE52SUhsdmRTQmpZVzRnWTJoaGFXNGdkR2hwY3lCallXeHNMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZiblJoYVc1ek9pQm1kVzVqZEdsdmJpaHJaWGtzSUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWhaR1JEYjI1a2FYUnBiMjRvYTJWNUxDQmNJaVJ5WldkbGVGd2lMQ0IwYUdsekxsOXhkVzkwWlNoMllXeDFaU2twTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0JoSUdOdmJuTjBjbUZwYm5RZ1ptOXlJR1pwYm1ScGJtY2djM1J5YVc1bklIWmhiSFZsY3lCMGFHRjBJSE4wWVhKMElIZHBkR2dnWVNCd2NtOTJhV1JsWkZ4dUlDQWdJQ0FxSUhOMGNtbHVaeTRnSUZSb2FYTWdjWFZsY25rZ2QybHNiQ0IxYzJVZ2RHaGxJR0poWTJ0bGJtUWdhVzVrWlhnc0lITnZJR2wwSUhkcGJHd2dZbVVnWm1GemRDQmxkbVZ1WEc0Z0lDQWdJQ29nWm05eUlHeGhjbWRsSUdSaGRHRnpaWFJ6TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JyWlhrZ1ZHaGxJR3RsZVNCMGFHRjBJSFJvWlNCemRISnBibWNnZEc4Z2JXRjBZMmdnYVhNZ2MzUnZjbVZrSUdsdUxseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCd2NtVm1hWGdnVkdobElITjFZbk4wY21sdVp5QjBhR0YwSUhSb1pTQjJZV3gxWlNCdGRYTjBJSE4wWVhKMElIZHBkR2d1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVWFZsY25sOUlGSmxkSFZ5Ym5NZ2RHaGxJSEYxWlhKNUxDQnpieUI1YjNVZ1kyRnVJR05vWVdsdUlIUm9hWE1nWTJGc2JDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRnlkSE5YYVhSb09pQm1kVzVqZEdsdmJpaHJaWGtzSUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWhaR1JEYjI1a2FYUnBiMjRvYTJWNUxDQmNJaVJ5WldkbGVGd2lMQ0JjSWw1Y0lpQXJJSFJvYVhNdVgzRjFiM1JsS0haaGJIVmxLU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXUmtJR0VnWTI5dWMzUnlZV2x1ZENCbWIzSWdabWx1WkdsdVp5QnpkSEpwYm1jZ2RtRnNkV1Z6SUhSb1lYUWdaVzVrSUhkcGRHZ2dZU0J3Y205MmFXUmxaRnh1SUNBZ0lDQXFJSE4wY21sdVp5NGdJRlJvYVhNZ2QybHNiQ0JpWlNCemJHOTNJR1p2Y2lCc1lYSm5aU0JrWVhSaGMyVjBjeTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdhMlY1SUZSb1pTQnJaWGtnZEdoaGRDQjBhR1VnYzNSeWFXNW5JSFJ2SUcxaGRHTm9JR2x6SUhOMGIzSmxaQ0JwYmk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYzNWbVptbDRJRlJvWlNCemRXSnpkSEpwYm1jZ2RHaGhkQ0IwYUdVZ2RtRnNkV1VnYlhWemRDQmxibVFnZDJsMGFDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UmRXVnllWDBnVW1WMGRYSnVjeUIwYUdVZ2NYVmxjbmtzSUhOdklIbHZkU0JqWVc0Z1kyaGhhVzRnZEdocGN5QmpZV3hzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR1Z1WkhOWGFYUm9PaUJtZFc1amRHbHZiaWhyWlhrc0lIWmhiSFZsS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDloWkdSRGIyNWthWFJwYjI0b2EyVjVMQ0JjSWlSeVpXZGxlRndpTENCMGFHbHpMbDl4ZFc5MFpTaDJZV3gxWlNrZ0t5QmNJaVJjSWlrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMjl5ZEhNZ2RHaGxJSEpsYzNWc2RITWdhVzRnWVhOalpXNWthVzVuSUc5eVpHVnlJR0o1SUhSb1pTQm5hWFpsYmlCclpYa3VYRzRnSUNBZ0lDb2dYRzRnSUNBZ0lDb2dRSEJoY21GdElIc29VM1J5YVc1bmZGTjBjbWx1WjF0ZGZDNHVMbE4wY21sdVozMGdhMlY1SUZSb1pTQnJaWGtnZEc4Z2IzSmtaWElnWW5rc0lIZG9hV05vSUdseklHRWdYRzRnSUNBZ0lDb2djM1J5YVc1bklHOW1JR052YlcxaElITmxjR0Z5WVhSbFpDQjJZV3gxWlhNc0lHOXlJR0Z1SUVGeWNtRjVJRzltSUd0bGVYTXNJRzl5SUcxMWJIUnBjR3hsSUd0bGVYTXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdVR0Z5YzJVdVVYVmxjbmw5SUZKbGRIVnlibk1nZEdobElIRjFaWEo1TENCemJ5QjViM1VnWTJGdUlHTm9ZV2x1SUhSb2FYTWdZMkZzYkM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JoYzJObGJtUnBibWM2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmYjNKa1pYSWdQU0JiWFR0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRmtaRUZ6WTJWdVpHbHVaeTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRiM0owY3lCMGFHVWdjbVZ6ZFd4MGN5QnBiaUJoYzJObGJtUnBibWNnYjNKa1pYSWdZbmtnZEdobElHZHBkbVZ1SUd0bGVTd2dYRzRnSUNBZ0lDb2dZblYwSUdOaGJpQmhiSE52SUdGa1pDQnpaV052Ym1SaGNua2djMjl5ZENCa1pYTmpjbWx3ZEc5eWN5QjNhWFJvYjNWMElHOTJaWEozY21sMGFXNW5JRjl2Y21SbGNpNWNiaUFnSUNBZ0tpQmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2V5aFRkSEpwYm1kOFUzUnlhVzVuVzExOExpNHVVM1J5YVc1bmZTQnJaWGtnVkdobElHdGxlU0IwYnlCdmNtUmxjaUJpZVN3Z2QyaHBZMmdnYVhNZ1lWeHVJQ0FnSUNBcUlITjBjbWx1WnlCdlppQmpiMjF0WVNCelpYQmhjbUYwWldRZ2RtRnNkV1Z6TENCdmNpQmhiaUJCY25KaGVTQnZaaUJyWlhsekxDQnZjaUJ0ZFd4MGFYQnNaU0JyWlhsekxseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGxGMVpYSjVmU0JTWlhSMWNtNXpJSFJvWlNCeGRXVnllU3dnYzI4Z2VXOTFJR05oYmlCamFHRnBiaUIwYUdseklHTmhiR3d1WEc0Z0lDQWdJQ292WEc0Z0lDQWdZV1JrUVhOalpXNWthVzVuT2lCbWRXNWpkR2x2YmloclpYa3BJSHRjYmlBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN6c2dYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYMjl5WkdWeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyOXlaR1Z5SUQwZ1cxMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQlFZWEp6WlM1ZllYSnlZWGxGWVdOb0tHRnlaM1Z0Wlc1MGN5d2dablZ1WTNScGIyNG9hMlY1S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnJaWGtnUFNCclpYa3VhbTlwYmlncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSE5sYkdZdVgyOXlaR1Z5SUQwZ2MyVnNaaTVmYjNKa1pYSXVZMjl1WTJGMEtHdGxlUzV5WlhCc1lXTmxLQzljWEhNdlp5d2dYQ0pjSWlrdWMzQnNhWFFvWENJc1hDSXBLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTnZjblJ6SUhSb1pTQnlaWE4xYkhSeklHbHVJR1JsYzJObGJtUnBibWNnYjNKa1pYSWdZbmtnZEdobElHZHBkbVZ1SUd0bGVTNWNiaUFnSUNBZ0tpQmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2V5aFRkSEpwYm1kOFUzUnlhVzVuVzExOExpNHVVM1J5YVc1bmZTQnJaWGtnVkdobElHdGxlU0IwYnlCdmNtUmxjaUJpZVN3Z2QyaHBZMmdnYVhNZ1lWeHVJQ0FnSUNBcUlITjBjbWx1WnlCdlppQmpiMjF0WVNCelpYQmhjbUYwWldRZ2RtRnNkV1Z6TENCdmNpQmhiaUJCY25KaGVTQnZaaUJyWlhsekxDQnZjaUJ0ZFd4MGFYQnNaU0JyWlhsekxseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGxGMVpYSjVmU0JTWlhSMWNtNXpJSFJvWlNCeGRXVnllU3dnYzI4Z2VXOTFJR05oYmlCamFHRnBiaUIwYUdseklHTmhiR3d1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaR1Z6WTJWdVpHbHVaem9nWm5WdVkzUnBiMjRvYTJWNUtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5dmNtUmxjaUE5SUZ0ZE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZV1JrUkdWelkyVnVaR2x1Wnk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUYjNKMGN5QjBhR1VnY21WemRXeDBjeUJwYmlCa1pYTmpaVzVrYVc1bklHOXlaR1Z5SUdKNUlIUm9aU0JuYVhabGJpQnJaWGtzWEc0Z0lDQWdJQ29nWW5WMElHTmhiaUJoYkhOdklHRmtaQ0J6WldOdmJtUmhjbmtnYzI5eWRDQmtaWE5qY21sd2RHOXljeUIzYVhSb2IzVjBJRzkyWlhKM2NtbDBhVzVuSUY5dmNtUmxjaTVjYmlBZ0lDQWdLaUJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdleWhUZEhKcGJtZDhVM1J5YVc1blcxMThMaTR1VTNSeWFXNW5mU0JyWlhrZ1ZHaGxJR3RsZVNCMGJ5QnZjbVJsY2lCaWVTd2dkMmhwWTJnZ2FYTWdZVnh1SUNBZ0lDQXFJSE4wY21sdVp5QnZaaUJqYjIxdFlTQnpaWEJoY21GMFpXUWdkbUZzZFdWekxDQnZjaUJoYmlCQmNuSmhlU0J2WmlCclpYbHpMQ0J2Y2lCdGRXeDBhWEJzWlNCclpYbHpMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJoY25ObExsRjFaWEo1ZlNCU1pYUjFjbTV6SUhSb1pTQnhkV1Z5ZVN3Z2MyOGdlVzkxSUdOaGJpQmphR0ZwYmlCMGFHbHpJR05oYkd3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdSa1JHVnpZMlZ1WkdsdVp6b2dablZ1WTNScGIyNG9hMlY1S1NCN1hHNGdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03SUZ4dUlDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5dmNtUmxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl2Y21SbGNpQTlJRnRkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnVUdGeWMyVXVYMkZ5Y21GNVJXRmphQ2hoY21kMWJXVnVkSE1zSUdaMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYTJWNUlEMGdhMlY1TG1wdmFXNG9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCelpXeG1MbDl2Y21SbGNpQTlJSE5sYkdZdVgyOXlaR1Z5TG1OdmJtTmhkQ2hjYmlBZ0lDQWdJQ0FnSUNCZkxtMWhjQ2hyWlhrdWNtVndiR0ZqWlNndlhGeHpMMmNzSUZ3aVhDSXBMbk53YkdsMEtGd2lMRndpS1N3Z1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaWhyS1NCN0lISmxkSFZ5YmlCY0lpMWNJaUFySUdzN0lIMHBLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0JoSUhCeWIzaHBiV2wwZVNCaVlYTmxaQ0JqYjI1emRISmhhVzUwSUdadmNpQm1hVzVrYVc1bklHOWlhbVZqZEhNZ2QybDBhQ0JyWlhrZ2NHOXBiblJjYmlBZ0lDQWdLaUIyWVd4MVpYTWdibVZoY2lCMGFHVWdjRzlwYm5RZ1oybDJaVzR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUhSb1lYUWdkR2hsSUZCaGNuTmxMa2RsYjFCdmFXNTBJR2x6SUhOMGIzSmxaQ0JwYmk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFCaGNuTmxMa2RsYjFCdmFXNTBmU0J3YjJsdWRDQlVhR1VnY21WbVpYSmxibU5sSUZCaGNuTmxMa2RsYjFCdmFXNTBJSFJvWVhRZ2FYTWdkWE5sWkM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVSZFdWeWVYMGdVbVYwZFhKdWN5QjBhR1VnY1hWbGNua3NJSE52SUhsdmRTQmpZVzRnWTJoaGFXNGdkR2hwY3lCallXeHNMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHNWxZWEk2SUdaMWJtTjBhVzl1S0d0bGVTd2djRzlwYm5RcElIdGNiaUFnSUNBZ0lHbG1JQ2doS0hCdmFXNTBJR2x1YzNSaGJtTmxiMllnVUdGeWMyVXVSMlZ2VUc5cGJuUXBLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGUnllU0IwYnlCallYTjBJR2wwSUhSdklHRWdSMlZ2VUc5cGJuUXNJSE52SUhSb1lYUWdibVZoY2loY0lteHZZMXdpTENCYk1qQXNNekJkS1NCM2IzSnJjeTVjYmlBZ0lDQWdJQ0FnY0c5cGJuUWdQU0J1WlhjZ1VHRnljMlV1UjJWdlVHOXBiblFvY0c5cGJuUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k1ZllXUmtRMjl1WkdsMGFXOXVLR3RsZVN3Z1hDSWtibVZoY2xOd2FHVnlaVndpTENCd2IybHVkQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXUmtJR0VnY0hKdmVHbHRhWFI1SUdKaGMyVmtJR052Ym5OMGNtRnBiblFnWm05eUlHWnBibVJwYm1jZ2IySnFaV04wY3lCM2FYUm9JR3RsZVNCd2IybHVkRnh1SUNBZ0lDQXFJSFpoYkhWbGN5QnVaV0Z5SUhSb1pTQndiMmx1ZENCbmFYWmxiaUJoYm1RZ2QybDBhR2x1SUhSb1pTQnRZWGhwYlhWdElHUnBjM1JoYm1ObElHZHBkbVZ1TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JyWlhrZ1ZHaGxJR3RsZVNCMGFHRjBJSFJvWlNCUVlYSnpaUzVIWlc5UWIybHVkQ0JwY3lCemRHOXlaV1FnYVc0dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UVlYSnpaUzVIWlc5UWIybHVkSDBnY0c5cGJuUWdWR2hsSUhKbFptVnlaVzVqWlNCUVlYSnpaUzVIWlc5UWIybHVkQ0IwYUdGMElHbHpJSFZ6WldRdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUcxaGVFUnBjM1JoYm1ObElFMWhlR2x0ZFcwZ1pHbHpkR0Z1WTJVZ0tHbHVJSEpoWkdsaGJuTXBJRzltSUhKbGMzVnNkSE1nZEc5Y2JpQWdJQ0FnS2lBZ0lISmxkSFZ5Ymk1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UVlYSnpaUzVSZFdWeWVYMGdVbVYwZFhKdWN5QjBhR1VnY1hWbGNua3NJSE52SUhsdmRTQmpZVzRnWTJoaGFXNGdkR2hwY3lCallXeHNMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIZHBkR2hwYmxKaFpHbGhibk02SUdaMWJtTjBhVzl1S0d0bGVTd2djRzlwYm5Rc0lHUnBjM1JoYm1ObEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG01bFlYSW9hMlY1TENCd2IybHVkQ2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWhaR1JEYjI1a2FYUnBiMjRvYTJWNUxDQmNJaVJ0WVhoRWFYTjBZVzVqWlZ3aUxDQmthWE4wWVc1alpTazdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVdSa0lHRWdjSEp2ZUdsdGFYUjVJR0poYzJWa0lHTnZibk4wY21GcGJuUWdabTl5SUdacGJtUnBibWNnYjJKcVpXTjBjeUIzYVhSb0lHdGxlU0J3YjJsdWRGeHVJQ0FnSUNBcUlIWmhiSFZsY3lCdVpXRnlJSFJvWlNCd2IybHVkQ0JuYVhabGJpQmhibVFnZDJsMGFHbHVJSFJvWlNCdFlYaHBiWFZ0SUdScGMzUmhibU5sSUdkcGRtVnVMbHh1SUNBZ0lDQXFJRkpoWkdsMWN5QnZaaUJsWVhKMGFDQjFjMlZrSUdseklETTVOVGd1T0NCdGFXeGxjeTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdhMlY1SUZSb1pTQnJaWGtnZEdoaGRDQjBhR1VnVUdGeWMyVXVSMlZ2VUc5cGJuUWdhWE1nYzNSdmNtVmtJR2x1TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VUdGeWMyVXVSMlZ2VUc5cGJuUjlJSEJ2YVc1MElGUm9aU0J5WldabGNtVnVZMlVnVUdGeWMyVXVSMlZ2VUc5cGJuUWdkR2hoZENCcGN5QjFjMlZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J0WVhoRWFYTjBZVzVqWlNCTllYaHBiWFZ0SUdScGMzUmhibU5sSUNocGJpQnRhV3hsY3lrZ2IyWWdjbVZ6ZFd4MGN5QjBiMXh1SUNBZ0lDQXFJQ0FnSUNCeVpYUjFjbTR1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVWFZsY25sOUlGSmxkSFZ5Ym5NZ2RHaGxJSEYxWlhKNUxDQnpieUI1YjNVZ1kyRnVJR05vWVdsdUlIUm9hWE1nWTJGc2JDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCM2FYUm9hVzVOYVd4bGN6b2dablZ1WTNScGIyNG9hMlY1TENCd2IybHVkQ3dnWkdsemRHRnVZMlVwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZHBkR2hwYmxKaFpHbGhibk1vYTJWNUxDQndiMmx1ZEN3Z1pHbHpkR0Z1WTJVZ0x5QXpPVFU0TGpncE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJaR1FnWVNCd2NtOTRhVzFwZEhrZ1ltRnpaV1FnWTI5dWMzUnlZV2x1ZENCbWIzSWdabWx1WkdsdVp5QnZZbXBsWTNSeklIZHBkR2dnYTJWNUlIQnZhVzUwWEc0Z0lDQWdJQ29nZG1Gc2RXVnpJRzVsWVhJZ2RHaGxJSEJ2YVc1MElHZHBkbVZ1SUdGdVpDQjNhWFJvYVc0Z2RHaGxJRzFoZUdsdGRXMGdaR2x6ZEdGdVkyVWdaMmwyWlc0dVhHNGdJQ0FnSUNvZ1VtRmthWFZ6SUc5bUlHVmhjblJvSUhWelpXUWdhWE1nTmpNM01TNHdJR3RwYkc5dFpYUmxjbk11WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUhSb1lYUWdkR2hsSUZCaGNuTmxMa2RsYjFCdmFXNTBJR2x6SUhOMGIzSmxaQ0JwYmk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFCaGNuTmxMa2RsYjFCdmFXNTBmU0J3YjJsdWRDQlVhR1VnY21WbVpYSmxibU5sSUZCaGNuTmxMa2RsYjFCdmFXNTBJSFJvWVhRZ2FYTWdkWE5sWkM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYldGNFJHbHpkR0Z1WTJVZ1RXRjRhVzExYlNCa2FYTjBZVzVqWlNBb2FXNGdhMmxzYjIxbGRHVnljeWtnYjJZZ2NtVnpkV3gwYzF4dUlDQWdJQ0FxSUNBZ0lDQjBieUJ5WlhSMWNtNHVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdVR0Z5YzJVdVVYVmxjbmw5SUZKbGRIVnlibk1nZEdobElIRjFaWEo1TENCemJ5QjViM1VnWTJGdUlHTm9ZV2x1SUhSb2FYTWdZMkZzYkM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0IzYVhSb2FXNUxhV3h2YldWMFpYSnpPaUJtZFc1amRHbHZiaWhyWlhrc0lIQnZhVzUwTENCa2FYTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkMmwwYUdsdVVtRmthV0Z1Y3loclpYa3NJSEJ2YVc1MExDQmthWE4wWVc1alpTQXZJRFl6TnpFdU1DazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZrWkNCaElHTnZibk4wY21GcGJuUWdkRzhnZEdobElIRjFaWEo1SUhSb1lYUWdjbVZ4ZFdseVpYTWdZU0J3WVhKMGFXTjFiR0Z5SUd0bGVTZHpYRzRnSUNBZ0lDb2dZMjl2Y21ScGJtRjBaWE1nWW1VZ1kyOXVkR0ZwYm1Wa0lIZHBkR2hwYmlCaElHZHBkbVZ1SUhKbFkzUmhibWQxYkdGeUlHZGxiMmR5WVhCb2FXTWdZbTkxYm1ScGJtZGNiaUFnSUNBZ0tpQmliM2d1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUhSdklHSmxJR052Ym5OMGNtRnBibVZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VUdGeWMyVXVSMlZ2VUc5cGJuUjlJSE52ZFhSb2QyVnpkRnh1SUNBZ0lDQXFJQ0FnSUNCVWFHVWdiRzkzWlhJdGJHVm1kQ0JwYm1Oc2RYTnBkbVVnWTI5eWJtVnlJRzltSUhSb1pTQmliM2d1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRRWVhKelpTNUhaVzlRYjJsdWRIMGdibTl5ZEdobFlYTjBYRzRnSUNBZ0lDb2dJQ0FnSUZSb1pTQjFjSEJsY2kxeWFXZG9kQ0JwYm1Oc2RYTnBkbVVnWTI5eWJtVnlJRzltSUhSb1pTQmliM2d1WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VUdGeWMyVXVVWFZsY25sOUlGSmxkSFZ5Ym5NZ2RHaGxJSEYxWlhKNUxDQnpieUI1YjNVZ1kyRnVJR05vWVdsdUlIUm9hWE1nWTJGc2JDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCM2FYUm9hVzVIWlc5Q2IzZzZJR1oxYm1OMGFXOXVLR3RsZVN3Z2MyOTFkR2gzWlhOMExDQnViM0owYUdWaGMzUXBJSHRjYmlBZ0lDQWdJR2xtSUNnaEtITnZkWFJvZDJWemRDQnBibk4wWVc1alpXOW1JRkJoY25ObExrZGxiMUJ2YVc1MEtTa2dlMXh1SUNBZ0lDQWdJQ0J6YjNWMGFIZGxjM1FnUFNCdVpYY2dVR0Z5YzJVdVIyVnZVRzlwYm5Rb2MyOTFkR2gzWlhOMEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2doS0c1dmNuUm9aV0Z6ZENCcGJuTjBZVzVqWlc5bUlGQmhjbk5sTGtkbGIxQnZhVzUwS1NrZ2UxeHVJQ0FnSUNBZ0lDQnViM0owYUdWaGMzUWdQU0J1WlhjZ1VHRnljMlV1UjJWdlVHOXBiblFvYm05eWRHaGxZWE4wS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSb2FYTXVYMkZrWkVOdmJtUnBkR2x2YmloclpYa3NJQ2NrZDJsMGFHbHVKeXdnZXlBbkpHSnZlQ2M2SUZ0emIzVjBhSGRsYzNRc0lHNXZjblJvWldGemRGMGdmU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNWpiSFZrWlNCdVpYTjBaV1FnVUdGeWMyVXVUMkpxWldOMGN5Qm1iM0lnZEdobElIQnliM1pwWkdWa0lHdGxlUzRnSUZsdmRTQmpZVzRnZFhObElHUnZkRnh1SUNBZ0lDQXFJRzV2ZEdGMGFXOXVJSFJ2SUhOd1pXTnBabmtnZDJocFkyZ2dabWxsYkdSeklHbHVJSFJvWlNCcGJtTnNkV1JsWkNCdlltcGxZM1FnWVhKbElHRnNjMjhnWm1WMFkyaGxaQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdhMlY1SUZSb1pTQnVZVzFsSUc5bUlIUm9aU0JyWlhrZ2RHOGdhVzVqYkhWa1pTNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFFZWEp6WlM1UmRXVnllWDBnVW1WMGRYSnVjeUIwYUdVZ2NYVmxjbmtzSUhOdklIbHZkU0JqWVc0Z1kyaGhhVzRnZEdocGN5QmpZV3hzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR2x1WTJ4MVpHVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdVR0Z5YzJVdVgyRnljbUY1UldGamFDaGhjbWQxYldWdWRITXNJR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWHk1cGMwRnljbUY1S0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbDlwYm1Oc2RXUmxJRDBnYzJWc1ppNWZhVzVqYkhWa1pTNWpiMjVqWVhRb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXeG1MbDlwYm1Oc2RXUmxMbkIxYzJnb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZ6ZEhKcFkzUWdkR2hsSUdacFpXeGtjeUJ2WmlCMGFHVWdjbVYwZFhKdVpXUWdVR0Z5YzJVdVQySnFaV04wY3lCMGJ5QnBibU5zZFdSbElHOXViSGtnZEdobFhHNGdJQ0FnSUNvZ2NISnZkbWxrWldRZ2EyVjVjeTRnSUVsbUlIUm9hWE1nYVhNZ1kyRnNiR1ZrSUcxMWJIUnBjR3hsSUhScGJXVnpMQ0IwYUdWdUlHRnNiQ0J2WmlCMGFHVWdhMlY1YzF4dUlDQWdJQ0FxSUhOd1pXTnBabWxsWkNCcGJpQmxZV05vSUc5bUlIUm9aU0JqWVd4c2N5QjNhV3hzSUdKbElHbHVZMngxWkdWa0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUd0bGVYTWdWR2hsSUc1aGJXVnpJRzltSUhSb1pTQnJaWGx6SUhSdklHbHVZMngxWkdVdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1VHRnljMlV1VVhWbGNubDlJRkpsZEhWeWJuTWdkR2hsSUhGMVpYSjVMQ0J6YnlCNWIzVWdZMkZ1SUdOb1lXbHVJSFJvYVhNZ1kyRnNiQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaV3hsWTNRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsek8xeHVJQ0FnSUNBZ2RHaHBjeTVmYzJWc1pXTjBJRDBnZEdocGN5NWZjMlZzWldOMElIeDhJRnRkTzF4dUlDQWdJQ0FnVUdGeWMyVXVYMkZ5Y21GNVJXRmphQ2hoY21kMWJXVnVkSE1zSUdaMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1h5NXBjMEZ5Y21GNUtHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnpaV3htTGw5elpXeGxZM1FnUFNCelpXeG1MbDl6Wld4bFkzUXVZMjl1WTJGMEtHdGxlU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaaTVmYzJWc1pXTjBMbkIxYzJnb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTWFJsY21GMFpYTWdiM1psY2lCbFlXTm9JSEpsYzNWc2RDQnZaaUJoSUhGMVpYSjVMQ0JqWVd4c2FXNW5JR0VnWTJGc2JHSmhZMnNnWm05eUlHVmhZMmdnYjI1bExpQkpabHh1SUNBZ0lDQXFJSFJvWlNCallXeHNZbUZqYXlCeVpYUjFjbTV6SUdFZ2NISnZiV2x6WlN3Z2RHaGxJR2wwWlhKaGRHbHZiaUIzYVd4c0lHNXZkQ0JqYjI1MGFXNTFaU0IxYm5ScGJGeHVJQ0FnSUNBcUlIUm9ZWFFnY0hKdmJXbHpaU0JvWVhNZ1ltVmxiaUJtZFd4bWFXeHNaV1F1SUVsbUlIUm9aU0JqWVd4c1ltRmpheUJ5WlhSMWNtNXpJR0VnY21WcVpXTjBaV1JjYmlBZ0lDQWdLaUJ3Y205dGFYTmxMQ0IwYUdWdUlHbDBaWEpoZEdsdmJpQjNhV3hzSUhOMGIzQWdkMmwwYUNCMGFHRjBJR1Z5Y205eUxpQlVhR1VnYVhSbGJYTWdZWEpsWEc0Z0lDQWdJQ29nY0hKdlkyVnpjMlZrSUdsdUlHRnVJSFZ1YzNCbFkybG1hV1ZrSUc5eVpHVnlMaUJVYUdVZ2NYVmxjbmtnYldGNUlHNXZkQ0JvWVhabElHRnVlU0J6YjNKMElHOXlaR1Z5TEZ4dUlDQWdJQ0FxSUdGdVpDQnRZWGtnYm05MElIVnpaU0JzYVcxcGRDQnZjaUJ6YTJsd0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHTmhiR3hpWVdOcklFTmhiR3hpWVdOcklIUm9ZWFFnZDJsc2JDQmlaU0JqWVd4c1pXUWdkMmwwYUNCbFlXTm9JSEpsYzNWc2RGeHVJQ0FnSUNBcUlDQWdJQ0J2WmlCMGFHVWdjWFZsY25rdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nUVc0Z2IzQjBhVzl1WVd3Z1FtRmphMkp2Ym1VdGJHbHJaU0J2Y0hScGIyNXpJRzlpYW1WamRDQjNhWFJvWEc0Z0lDQWdJQ29nSUNBZ0lITjFZMk5sYzNNZ1lXNWtJR1Z5Y205eUlHTmhiR3hpWVdOcmN5QjBhR0YwSUhkcGJHd2dZbVVnYVc1MmIydGxaQ0J2Ym1ObElIUm9aU0JwZEdWeVlYUnBiMjVjYmlBZ0lDQWdLaUFnSUNBZ2FHRnpJR1pwYm1semFHVmtMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUJoY25ObExsQnliMjFwYzJWOUlFRWdjSEp2YldselpTQjBhR0YwSUhkcGJHd2dZbVVnWm5Wc1ptbHNiR1ZrSUc5dVkyVWdkR2hsWEc0Z0lDQWdJQ29nSUNBZ0lHbDBaWEpoZEdsdmJpQm9ZWE1nWTI5dGNHeGxkR1ZrTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR1ZoWTJnNklHWjFibU4wYVc5dUtHTmhiR3hpWVdOckxDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyOXlaR1Z5SUh4OElIUm9hWE11WDNOcmFYQWdmSHdnS0hSb2FYTXVYMnhwYldsMElENDlJREFwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsY25KdmNpQTlYRzRnSUNBZ0lDQWdJQ0FnWENKRFlXNXViM1FnYVhSbGNtRjBaU0J2YmlCaElIRjFaWEo1SUhkcGRHZ2djMjl5ZEN3Z2MydHBjQ3dnYjNJZ2JHbHRhWFF1WENJN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUVlYSnpaUzVRY205dGFYTmxMbVZ5Y205eUtHVnljbTl5S1M1ZmRHaGxibEoxYmtOaGJHeGlZV05yY3lodmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RtRnlJSEJ5YjIxcGMyVWdQU0J1WlhjZ1VHRnljMlV1VUhKdmJXbHpaU2dwTzF4dVhHNGdJQ0FnSUNCMllYSWdjWFZsY25rZ1BTQnVaWGNnVUdGeWMyVXVVWFZsY25rb2RHaHBjeTV2WW1wbFkzUkRiR0Z6Y3lrN1hHNGdJQ0FnSUNBdkx5QlhaU0JqWVc0Z2IzWmxjbkpwWkdVZ2RHaGxJR0poZEdOb0lITnBlbVVnWm5KdmJTQjBhR1VnYjNCMGFXOXVjeTVjYmlBZ0lDQWdJQzh2SUZSb2FYTWdhWE1nZFc1a2IyTjFiV1Z1ZEdWa0xDQmlkWFFnZFhObFpuVnNJR1p2Y2lCMFpYTjBhVzVuTGx4dUlDQWdJQ0FnY1hWbGNua3VYMnhwYldsMElEMGdiM0IwYVc5dWN5NWlZWFJqYUZOcGVtVWdmSHdnTVRBd08xeHVJQ0FnSUNBZ2NYVmxjbmt1WDNkb1pYSmxJRDBnWHk1amJHOXVaU2gwYUdsekxsOTNhR1Z5WlNrN1hHNGdJQ0FnSUNCeGRXVnllUzVmYVc1amJIVmtaU0E5SUY4dVkyeHZibVVvZEdocGN5NWZhVzVqYkhWa1pTazdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZjMlZzWldOMEtTQjdYRzRnSUNBZ0lDQWdJSEYxWlhKNUxsOXpaV3hsWTNRZ1BTQmZMbU5zYjI1bEtIUm9hWE11WDNObGJHVmpkQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhGMVpYSjVMbUZ6WTJWdVpHbHVaeWduYjJKcVpXTjBTV1FuS1R0Y2JseHVJQ0FnSUNBZ2RtRnlJR1pwYm1SUGNIUnBiMjV6SUQwZ2UzMDdYRzRnSUNBZ0lDQnBaaUFvWHk1b1lYTW9iM0IwYVc5dWN5d2dYQ0oxYzJWTllYTjBaWEpMWlhsY0lpa3BJSHRjYmlBZ0lDQWdJQ0FnWm1sdVpFOXdkR2x2Ym5NdWRYTmxUV0Z6ZEdWeVMyVjVJRDBnYjNCMGFXOXVjeTUxYzJWTllYTjBaWEpMWlhrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9YeTVvWVhNb2IzQjBhVzl1Y3l3Z0ozTmxjM05wYjI1VWIydGxiaWNwS1NCN1hHNGdJQ0FnSUNBZ0lHWnBibVJQY0hScGIyNXpMbk5sYzNOcGIyNVViMnRsYmlBOUlHOXdkR2x2Ym5NdWMyVnpjMmx2YmxSdmEyVnVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ1ptbHVhWE5vWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUJRWVhKelpTNVFjbTl0YVhObExsOWpiMjUwYVc1MVpWZG9hV3hsS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0lXWnBibWx6YUdWa08xeHVYRzRnSUNBZ0lDQjlMQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhGMVpYSjVMbVpwYm1Rb1ptbHVaRTl3ZEdsdmJuTXBMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpkV3gwY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCallXeHNZbUZqYTNORWIyNWxJRDBnVUdGeWMyVXVVSEp2YldselpTNWhjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lGQmhjbk5sTGw4dVpXRmphQ2h5WlhOMWJIUnpMQ0JtZFc1amRHbHZiaWh5WlhOMWJIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOcmMwUnZibVVnUFNCallXeHNZbUZqYTNORWIyNWxMblJvWlc0b1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXeHNZbUZqYXloeVpYTjFiSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGc2JHSmhZMnR6Ukc5dVpTNTBhR1Z1S0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZEhNdWJHVnVaM1JvSUQ0OUlIRjFaWEo1TGw5c2FXMXBkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J4ZFdWeWVTNW5jbVZoZEdWeVZHaGhiaWhjSW05aWFtVmpkRWxrWENJc0lISmxjM1ZzZEhOYmNtVnpkV3gwY3k1c1pXNW5kR2dnTFNBeFhTNXBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXNXBjMmhsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU2t1WDNSb1pXNVNkVzVEWVd4c1ltRmphM01vYjNCMGFXOXVjeWs3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzU5S0hSb2FYTXBLVHRjYmx4dUx5cG5iRzlpWVd3Z1JrSTZJR1poYkhObElDd2dZMjl1YzI5c1pUb2dabUZzYzJVcUwxeHVLR1oxYm1OMGFXOXVLSEp2YjNRcElIdGNiaUFnY205dmRDNVFZWEp6WlNBOUlISnZiM1F1VUdGeWMyVWdmSHdnZTMwN1hHNGdJSFpoY2lCUVlYSnpaU0E5SUhKdmIzUXVVR0Z5YzJVN1hHNGdJSFpoY2lCZklEMGdVR0Z5YzJVdVh6dGNibHh1SUNCMllYSWdVRlZDVEVsRFgwdEZXU0E5SUZ3aUtsd2lPMXh1WEc0Z0lIWmhjaUJwYm1sMGFXRnNhWHBsWkNBOUlHWmhiSE5sTzF4dUlDQjJZWElnY21WeGRXVnpkR1ZrVUdWeWJXbHpjMmx2Ym5NN1hHNGdJSFpoY2lCcGJtbDBUM0IwYVc5dWN6dGNiaUFnZG1GeUlIQnliM1pwWkdWeUlEMGdlMXh1SUNBZ0lHRjFkR2hsYm5ScFkyRjBaVG9nWm5WdVkzUnBiMjRvYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdSa0l1Ykc5bmFXNG9ablZ1WTNScGIyNG9jbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObExtRjFkR2hTWlhOd2IyNXpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbk4xWTJObGMzTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWMzVmpZMlZ6Y3loelpXeG1MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xrT2lCeVpYTndiMjV6WlM1aGRYUm9VbVZ6Y0c5dWMyVXVkWE5sY2tsRUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkyTmxjM05mZEc5clpXNDZJSEpsYzNCdmJuTmxMbUYxZEdoU1pYTndiMjV6WlM1aFkyTmxjM05VYjJ0bGJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pYaHdhWEpoZEdsdmJsOWtZWFJsT2lCdVpYY2dSR0YwWlNoeVpYTndiMjV6WlM1aGRYUm9VbVZ6Y0c5dWMyVXVaWGh3YVhKbGMwbHVJQ29nTVRBd01DQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvYm1WM0lFUmhkR1VvS1NrdVoyVjBWR2x0WlNncEtTNTBiMHBUVDA0b0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbVZ5Y205eUtITmxiR1lzSUhKbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBzSUh0Y2JpQWdJQ0FnSUNBZ2MyTnZjR1U2SUhKbGNYVmxjM1JsWkZCbGNtMXBjM05wYjI1elhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUxGeHVJQ0FnSUhKbGMzUnZjbVZCZFhSb1pXNTBhV05oZEdsdmJqb2dablZ1WTNScGIyNG9ZWFYwYUVSaGRHRXBJSHRjYmlBZ0lDQWdJR2xtSUNoaGRYUm9SR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWVhWMGFGSmxjM0J2Ym5ObElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUhWelpYSkpSRG9nWVhWMGFFUmhkR0V1YVdRc1hHNGdJQ0FnSUNBZ0lDQWdZV05qWlhOelZHOXJaVzQ2SUdGMWRHaEVZWFJoTG1GalkyVnpjMTkwYjJ0bGJpeGNiaUFnSUNBZ0lDQWdJQ0JsZUhCcGNtVnpTVzQ2SUNoUVlYSnpaUzVmY0dGeWMyVkVZWFJsS0dGMWRHaEVZWFJoTG1WNGNHbHlZWFJwYjI1ZlpHRjBaU2t1WjJWMFZHbHRaU2dwSUMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS0c1bGR5QkVZWFJsS0NrcExtZGxkRlJwYldVb0tTa2dMeUF4TURBd1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFpoY2lCdVpYZFBjSFJwYjI1eklEMGdYeTVqYkc5dVpTaHBibWwwVDNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUc1bGQwOXdkR2x2Ym5NdVlYVjBhRkpsYzNCdmJuTmxJRDBnWVhWMGFGSmxjM0J2Ym5ObE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUZOMWNIQnlaWE56SUdOb1pXTnJjeUJtYjNJZ2JHOW5hVzRnYzNSaGRIVnpJR1p5YjIwZ2RHaGxJR0p5YjNkelpYSXVYRzRnSUNBZ0lDQWdJRzVsZDA5d2RHbHZibk11YzNSaGRIVnpJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hsSUhWelpYSWdaRzlsYzI0bmRDQnRZWFJqYUNCMGFHVWdiMjVsSUd0dWIzZHVJR0o1SUhSb1pTQkdRaUJUUkVzc0lHeHZaeUJ2ZFhRdVhHNGdJQ0FnSUNBZ0lDOHZJRTF2YzNRZ2IyWWdkR2hsSUhScGJXVXNJSFJvWlNCMWMyVnljeUIzYVd4c0lHMWhkR05vSUMwdElHbDBKM01nYjI1c2VTQnBiaUJqWVhObGN5QjNhR1Z5WlZ4dUlDQWdJQ0FnSUNBdkx5QjBhR1VnUmtJZ1UwUkxJR3R1YjNkeklHOW1JR0VnWkdsbVptVnlaVzUwSUhWelpYSWdkR2hoYmlCMGFHVWdiMjVsSUdKbGFXNW5JSEpsYzNSdmNtVmtYRzRnSUNBZ0lDQWdJQzh2SUdaeWIyMGdZU0JRWVhKelpTQlZjMlZ5SUhSb1lYUWdiRzluWjJWa0lHbHVJSGRwZEdnZ2RYTmxjbTVoYldVdmNHRnpjM2R2Y21RdVhHNGdJQ0FnSUNBZ0lIWmhjaUJsZUdsemRHbHVaMUpsYzNCdmJuTmxJRDBnUmtJdVoyVjBRWFYwYUZKbGMzQnZibk5sS0NrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hsZUdsemRHbHVaMUpsYzNCdmJuTmxJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlR2x6ZEdsdVoxSmxjM0J2Ym5ObExuVnpaWEpKUkNBaFBUMGdZWFYwYUZKbGMzQnZibk5sTG5WelpYSkpSQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lFWkNMbXh2WjI5MWRDZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1JrSXVhVzVwZENodVpYZFBjSFJwYjI1ektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMHNYRzRnSUNBZ1oyVjBRWFYwYUZSNWNHVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRndpWm1GalpXSnZiMnRjSWp0Y2JpQWdJQ0I5TEZ4dUlDQWdJR1JsWVhWMGFHVnVkR2xqWVhSbE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWNtVnpkRzl5WlVGMWRHaGxiblJwWTJGMGFXOXVLRzUxYkd3cE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVSEp2ZG1sa1pYTWdZU0J6WlhRZ2IyWWdkWFJwYkdsMGFXVnpJR1p2Y2lCMWMybHVaeUJRWVhKelpTQjNhWFJvSUVaaFkyVmliMjlyTGx4dUlDQWdLaUJBYm1GdFpYTndZV05sWEc0Z0lDQXFJRkJ5YjNacFpHVnpJR0VnYzJWMElHOW1JSFYwYVd4cGRHbGxjeUJtYjNJZ2RYTnBibWNnVUdGeWMyVWdkMmwwYUNCR1lXTmxZbTl2YXk1Y2JpQWdJQ292WEc0Z0lGQmhjbk5sTGtaaFkyVmliMjlyVlhScGJITWdQU0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU1c1cGRHbGhiR2w2WlhNZ1VHRnljMlVnUm1GalpXSnZiMnNnYVc1MFpXZHlZWFJwYjI0dUlDQkRZV3hzSUhSb2FYTWdablZ1WTNScGIyNGdZV1owWlhJZ2VXOTFYRzRnSUNBZ0lDb2dhR0YyWlNCc2IyRmtaV1FnZEdobElFWmhZMlZpYjI5cklFcGhkbUZ6WTNKcGNIUWdVMFJMSUhkcGRHZ2dkR2hsSUhOaGJXVWdjR0Z5WVcxbGRHVnljMXh1SUNBZ0lDQXFJR0Z6SUhsdmRTQjNiM1ZzWkNCd1lYTnpJSFJ2UEdOdlpHVStYRzRnSUNBZ0lDb2dQR0VnYUhKbFpqMWNiaUFnSUNBZ0tpQmNJbWgwZEhCek9pOHZaR1YyWld4dmNHVnljeTVtWVdObFltOXZheTVqYjIwdlpHOWpjeTl5WldabGNtVnVZMlV2YW1GMllYTmpjbWx3ZEM5R1FpNXBibWwwTDF3aVBseHVJQ0FnSUNBcUlFWkNMbWx1YVhRb0tUd3ZZVDQ4TDJOdlpHVStMaUFnVUdGeWMyVXVSbUZqWldKdmIydFZkR2xzY3lCM2FXeHNJR2x1ZG05clpTQkdRaTVwYm1sMEtDa2dabTl5SUhsdmRWeHVJQ0FnSUNBcUlIZHBkR2dnZEdobGMyVWdZWEpuZFcxbGJuUnpMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ1JtRmpaV0p2YjJzZ2IzQjBhVzl1Y3lCaGNtZDFiV1Z1ZENCaGN5QmtaWE5qY21saVpXUWdhR1Z5WlRwY2JpQWdJQ0FnS2lBZ0lEeGhJR2h5WldZOVhHNGdJQ0FnSUNvZ0lDQmNJbWgwZEhCek9pOHZaR1YyWld4dmNHVnljeTVtWVdObFltOXZheTVqYjIwdlpHOWpjeTl5WldabGNtVnVZMlV2YW1GMllYTmpjbWx3ZEM5R1FpNXBibWwwTDF3aVBseHVJQ0FnSUNBcUlDQWdSa0l1YVc1cGRDZ3BQQzloUGk0Z1ZHaGxJSE4wWVhSMWN5Qm1iR0ZuSUhkcGJHd2dZbVVnWTI5bGNtTmxaQ0IwYnlBblptRnNjMlVuSUdKbFkyRjFjMlVnYVhSY2JpQWdJQ0FnS2lBZ0lHbHVkR1Z5Wm1WeVpYTWdkMmwwYUNCUVlYSnpaU0JHWVdObFltOXZheUJwYm5SbFozSmhkR2x2Ymk0Z1EyRnNiQ0JHUWk1blpYUk1iMmRwYmxOMFlYUjFjeWdwWEc0Z0lDQWdJQ29nSUNCbGVIQnNhV05wZEd4NUlHbG1JSFJvYVhNZ1ltVm9ZWFpwYjNJZ2FYTWdjbVZ4ZFdseVpXUWdZbmtnZVc5MWNpQmhjSEJzYVdOaGRHbHZiaTVjYmlBZ0lDQWdLaTljYmlBZ0lDQnBibWwwT2lCbWRXNWpkR2x2YmlodmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUtFWkNLU0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dYQ0pVYUdVZ1JtRmpaV0p2YjJzZ1NtRjJZVk5qY21sd2RDQlRSRXNnYlhWemRDQmlaU0JzYjJGa1pXUWdZbVZtYjNKbElHTmhiR3hwYm1jZ2FXNXBkQzVjSWp0Y2JpQWdJQ0FnSUgwZ1hHNGdJQ0FnSUNCcGJtbDBUM0IwYVc5dWN5QTlJRjh1WTJ4dmJtVW9iM0IwYVc5dWN5a2dmSHdnZTMwN1hHNGdJQ0FnSUNCcFppQW9hVzVwZEU5d2RHbHZibk11YzNSaGRIVnpJQ1ltSUhSNWNHVnZaaWhqYjI1emIyeGxLU0FoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdkMkZ5YmlBOUlHTnZibk52YkdVdWQyRnliaUI4ZkNCamIyNXpiMnhsTG14dlp5QjhmQ0JtZFc1amRHbHZiaWdwSUh0OU8xeHVJQ0FnSUNBZ0lDQjNZWEp1TG1OaGJHd29ZMjl1YzI5c1pTd2dYQ0pVYUdVZ0ozTjBZWFIxY3ljZ1pteGhaeUJ3WVhOelpXUWdhVzUwYjF3aUlDdGNiaUFnSUNBZ0lDQWdJQ0JjSWlCR1FpNXBibWwwTENCM2FHVnVJSE5sZENCMGJ5QjBjblZsTENCallXNGdhVzUwWlhKbVpYSmxJSGRwZEdnZ1VHRnljMlVnUm1GalpXSnZiMnRjSWlBclhHNGdJQ0FnSUNBZ0lDQWdYQ0lnYVc1MFpXZHlZWFJwYjI0c0lITnZJR2wwSUdoaGN5QmlaV1Z1SUhOMWNIQnlaWE56WldRdUlGQnNaV0Z6WlNCallXeHNYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lGd2lJRVpDTG1kbGRFeHZaMmx1VTNSaGRIVnpLQ2tnWlhod2JHbGphWFJzZVNCcFppQjViM1VnY21WeGRXbHlaU0IwYUdseklHSmxhR0YyYVc5eUxsd2lLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2x1YVhSUGNIUnBiMjV6TG5OMFlYUjFjeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdSa0l1YVc1cGRDaHBibWwwVDNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0JRWVhKelpTNVZjMlZ5TGw5eVpXZHBjM1JsY2tGMWRHaGxiblJwWTJGMGFXOXVVSEp2ZG1sa1pYSW9jSEp2ZG1sa1pYSXBPMXh1SUNBZ0lDQWdhVzVwZEdsaGJHbDZaV1FnUFNCMGNuVmxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhSeklIZG9aWFJvWlhJZ2RHaGxJSFZ6WlhJZ2FHRnpJSFJvWldseUlHRmpZMjkxYm5RZ2JHbHVhMlZrSUhSdklFWmhZMlZpYjI5ckxseHVJQ0FnSUNBcUlGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1VHRnljMlV1VlhObGNuMGdkWE5sY2lCVmMyVnlJSFJ2SUdOb1pXTnJJR1p2Y2lCaElHWmhZMlZpYjI5cklHeHBibXN1WEc0Z0lDQWdJQ29nSUNBZ0lGUm9aU0IxYzJWeUlHMTFjM1FnWW1VZ2JHOW5aMlZrSUdsdUlHOXVJSFJvYVhNZ1pHVjJhV05sTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBKdmIyeGxZVzU5SUR4amIyUmxQblJ5ZFdVOEwyTnZaR1UrSUdsbUlIUm9aU0IxYzJWeUlHaGhjeUIwYUdWcGNpQmhZMk52ZFc1MFhHNGdJQ0FnSUNvZ0lDQWdJR3hwYm10bFpDQjBieUJHWVdObFltOXZheTVjYmlBZ0lDQWdLaTljYmlBZ0lDQnBjMHhwYm10bFpEb2dablZ1WTNScGIyNG9kWE5sY2lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhWelpYSXVYMmx6VEdsdWEyVmtLRndpWm1GalpXSnZiMnRjSWlrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFeHZaM01nYVc0Z1lTQjFjMlZ5SUhWemFXNW5JRVpoWTJWaWIyOXJMaUJVYUdseklHMWxkR2h2WkNCa1pXeGxaMkYwWlhNZ2RHOGdkR2hsSUVaaFkyVmliMjlyWEc0Z0lDQWdJQ29nVTBSTElIUnZJR0YxZEdobGJuUnBZMkYwWlNCMGFHVWdkWE5sY2l3Z1lXNWtJSFJvWlc0Z1lYVjBiMjFoZEdsallXeHNlU0JzYjJkeklHbHVJQ2h2Y2x4dUlDQWdJQ0FxSUdOeVpXRjBaWE1zSUdsdUlIUm9aU0JqWVhObElIZG9aWEpsSUdsMElHbHpJR0VnYm1WM0lIVnpaWElwSUdFZ1VHRnljMlV1VlhObGNpNWNiaUFnSUNBZ0tpQmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1Wnl3Z1QySnFaV04wZlNCd1pYSnRhWE56YVc5dWN5QlVhR1VnY0dWeWJXbHpjMmx2Ym5NZ2NtVnhkV2x5WldRZ1ptOXlJRVpoWTJWaWIyOXJYRzRnSUNBZ0lDb2dJQ0FnYkc5bklHbHVMaUFnVkdocGN5QnBjeUJoSUdOdmJXMWhMWE5sY0dGeVlYUmxaQ0J6ZEhKcGJtY2diMllnY0dWeWJXbHpjMmx2Ym5NdVhHNGdJQ0FnSUNvZ0lDQWdRV3gwWlhKdVlYUnBkbVZzZVN3Z2MzVndjR3g1SUdFZ1JtRmpaV0p2YjJzZ1lYVjBhRVJoZEdFZ2IySnFaV04wSUdGeklHUmxjMk55YVdKbFpDQnBiaUJ2ZFhKY2JpQWdJQ0FnS2lBZ0lDQlNSVk5VSUVGUVNTQmtiMk56SUdsbUlIbHZkU0IzWVc1MElIUnZJR2hoYm1Sc1pTQm5aWFIwYVc1bklHWmhZMlZpYjI5cklHRjFkR2dnZEc5clpXNXpYRzRnSUNBZ0lDb2dJQ0FnZVc5MWNuTmxiR1l1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdVM1JoYm1SaGNtUWdiM0IwYVc5dWN5QnZZbXBsWTNRZ2QybDBhQ0J6ZFdOalpYTnpJR0Z1WkNCbGNuSnZjbHh1SUNBZ0lDQXFJQ0FnSUdOaGJHeGlZV05yY3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JzYjJkSmJqb2dablZ1WTNScGIyNG9jR1Z5YldsemMybHZibk1zSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hjR1Z5YldsemMybHZibk1nZkh3Z1h5NXBjMU4wY21sdVp5aHdaWEp0YVhOemFXOXVjeWtwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZwYm1sMGFXRnNhWHBsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvY205M0lGd2lXVzkxSUcxMWMzUWdhVzVwZEdsaGJHbDZaU0JHWVdObFltOXZhMVYwYVd4eklHSmxabTl5WlNCallXeHNhVzVuSUd4dlowbHVMbHdpTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxjWFZsYzNSbFpGQmxjbTFwYzNOcGIyNXpJRDBnY0dWeWJXbHpjMmx2Ym5NN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUVlYSnpaUzVWYzJWeUxsOXNiMmRKYmxkcGRHZ29YQ0ptWVdObFltOXZhMXdpTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnVaWGRQY0hScGIyNXpJRDBnWHk1amJHOXVaU2h2Y0hScGIyNXpLU0I4ZkNCN2ZUdGNiaUFnSUNBZ0lDQWdibVYzVDNCMGFXOXVjeTVoZFhSb1JHRjBZU0E5SUhCbGNtMXBjM05wYjI1ek8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1VlhObGNpNWZiRzluU1c1WGFYUm9LRndpWm1GalpXSnZiMnRjSWl3Z2JtVjNUM0IwYVc5dWN5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRXhwYm10eklFWmhZMlZpYjI5cklIUnZJR0Z1SUdWNGFYTjBhVzVuSUZCR1ZYTmxjaTRnVkdocGN5QnRaWFJvYjJRZ1pHVnNaV2RoZEdWeklIUnZJSFJvWlZ4dUlDQWdJQ0FxSUVaaFkyVmliMjlySUZORVN5QjBieUJoZFhSb1pXNTBhV05oZEdVZ2RHaGxJSFZ6WlhJc0lHRnVaQ0IwYUdWdUlHRjFkRzl0WVhScFkyRnNiSGtnYkdsdWEzTmNiaUFnSUNBZ0tpQjBhR1VnWVdOamIzVnVkQ0IwYnlCMGFHVWdVR0Z5YzJVdVZYTmxjaTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVR0Z5YzJVdVZYTmxjbjBnZFhObGNpQlZjMlZ5SUhSdklHeHBibXNnZEc4Z1JtRmpaV0p2YjJzdUlGUm9hWE1nYlhWemRDQmlaU0IwYUdWY2JpQWdJQ0FnS2lBZ0lDQWdZM1Z5Y21WdWRDQjFjMlZ5TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5MQ0JQWW1wbFkzUjlJSEJsY20xcGMzTnBiMjV6SUZSb1pTQndaWEp0YVhOemFXOXVjeUJ5WlhGMWFYSmxaQ0JtYjNJZ1JtRmpaV0p2YjJ0Y2JpQWdJQ0FnS2lBZ0lDQnNiMmNnYVc0dUlDQlVhR2x6SUdseklHRWdZMjl0YldFdGMyVndZWEpoZEdWa0lITjBjbWx1WnlCdlppQndaWEp0YVhOemFXOXVjeTRnWEc0Z0lDQWdJQ29nSUNBZ1FXeDBaWEp1WVhScGRtVnNlU3dnYzNWd2NHeDVJR0VnUm1GalpXSnZiMnNnWVhWMGFFUmhkR0VnYjJKcVpXTjBJR0Z6SUdSbGMyTnlhV0psWkNCcGJpQnZkWEpjYmlBZ0lDQWdLaUFnSUNCU1JWTlVJRUZRU1NCa2IyTnpJR2xtSUhsdmRTQjNZVzUwSUhSdklHaGhibVJzWlNCblpYUjBhVzVuSUdaaFkyVmliMjlySUdGMWRHZ2dkRzlyWlc1elhHNGdJQ0FnSUNvZ0lDQWdlVzkxY25ObGJHWXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ1UzUmhibVJoY21RZ2IzQjBhVzl1Y3lCdlltcGxZM1FnZDJsMGFDQnpkV05qWlhOeklHRnVaQ0JsY25KdmNseHVJQ0FnSUNBcUlDQWdJR05oYkd4aVlXTnJjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQnNhVzVyT2lCbWRXNWpkR2x2YmloMWMyVnlMQ0J3WlhKdGFYTnphVzl1Y3l3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0Z3WlhKdGFYTnphVzl1Y3lCOGZDQmZMbWx6VTNSeWFXNW5LSEJsY20xcGMzTnBiMjV6S1NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdsdWFYUnBZV3hwZW1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dYQ0paYjNVZ2JYVnpkQ0JwYm1sMGFXRnNhWHBsSUVaaFkyVmliMjlyVlhScGJITWdZbVZtYjNKbElHTmhiR3hwYm1jZ2JHbHVheTVjSWp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFpXUlFaWEp0YVhOemFXOXVjeUE5SUhCbGNtMXBjM05wYjI1ek8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RYTmxjaTVmYkdsdWExZHBkR2dvWENKbVlXTmxZbTl2YTF3aUxDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkUGNIUnBiMjV6SUQwZ1h5NWpiRzl1WlNodmNIUnBiMjV6S1NCOGZDQjdmVHRjYmlBZ0lDQWdJQ0FnYm1WM1QzQjBhVzl1Y3k1aGRYUm9SR0YwWVNBOUlIQmxjbTFwYzNOcGIyNXpPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkWE5sY2k1ZmJHbHVhMWRwZEdnb1hDSm1ZV05sWW05dmExd2lMQ0J1WlhkUGNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZXNXNhVzVyY3lCMGFHVWdVR0Z5YzJVdVZYTmxjaUJtY205dElHRWdSbUZqWldKdmIyc2dZV05qYjNWdWRDNGdYRzRnSUNBZ0lDb2dYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFFZWEp6WlM1VmMyVnlmU0IxYzJWeUlGVnpaWElnZEc4Z2RXNXNhVzVySUdaeWIyMGdSbUZqWldKdmIyc3VJRlJvYVhNZ2JYVnpkQ0JpWlNCMGFHVmNiaUFnSUNBZ0tpQWdJQ0FnWTNWeWNtVnVkQ0IxYzJWeUxseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUZOMFlXNWtZWEprSUc5d2RHbHZibk1nYjJKcVpXTjBJSGRwZEdnZ2MzVmpZMlZ6Y3lCaGJtUWdaWEp5YjNKY2JpQWdJQ0FnS2lBZ0lDQmpZV3hzWW1GamEzTXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RXNXNhVzVyT2lCbWRXNWpkR2x2YmloMWMyVnlMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXbHVhWFJwWVd4cGVtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRndpV1c5MUlHMTFjM1FnYVc1cGRHbGhiR2w2WlNCR1lXTmxZbTl2YTFWMGFXeHpJR0psWm05eVpTQmpZV3hzYVc1bklIVnViR2x1YXk1Y0lqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCMWMyVnlMbDkxYm14cGJtdEdjbTl0S0Z3aVptRmpaV0p2YjJ0Y0lpd2diM0IwYVc5dWN5azdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dUlDQmNibjBvZEdocGN5a3BPMXh1WEc0dkttZHNiMkpoYkNCZk9pQm1ZV3h6WlN3Z1pHOWpkVzFsYm5RNklHWmhiSE5sTENCM2FXNWtiM2M2SUdaaGJITmxMQ0J1WVhacFoyRjBiM0k2SUdaaGJITmxJQ292WEc0b1puVnVZM1JwYjI0b2NtOXZkQ2tnZTF4dUlDQnliMjkwTGxCaGNuTmxJRDBnY205dmRDNVFZWEp6WlNCOGZDQjdmVHRjYmlBZ2RtRnlJRkJoY25ObElEMGdjbTl2ZEM1UVlYSnpaVHRjYmlBZ2RtRnlJRjhnUFNCUVlYSnpaUzVmTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJJYVhOMGIzSjVJSE5sY25abGN5QmhjeUJoSUdkc2IySmhiQ0J5YjNWMFpYSWdLSEJsY2lCbWNtRnRaU2tnZEc4Z2FHRnVaR3hsSUdoaGMyaGphR0Z1WjJWY2JpQWdJQ29nWlhabGJuUnpJRzl5SUhCMWMyaFRkR0YwWlN3Z2JXRjBZMmdnZEdobElHRndjSEp2Y0hKcFlYUmxJSEp2ZFhSbExDQmhibVFnZEhKcFoyZGxjbHh1SUNBZ0tpQmpZV3hzWW1GamEzTXVJRmx2ZFNCemFHOTFiR1J1SjNRZ1pYWmxjaUJvWVhabElIUnZJR055WldGMFpTQnZibVVnYjJZZ2RHaGxjMlVnZVc5MWNuTmxiR1pjYmlBZ0lDb2c0b0NVSUhsdmRTQnphRzkxYkdRZ2RYTmxJSFJvWlNCeVpXWmxjbVZ1WTJVZ2RHOGdQR052WkdVK1VHRnljMlV1YUdsemRHOXllVHd2WTI5a1pUNWNiaUFnSUNvZ2RHaGhkQ0IzYVd4c0lHSmxJR055WldGMFpXUWdabTl5SUhsdmRTQmhkWFJ2YldGMGFXTmhiR3g1SUdsbUlIbHZkU0J0WVd0bElIVnpaU0J2WmlCY2JpQWdJQ29nVW05MWRHVnljeUIzYVhSb0lISnZkWFJsY3k1Y2JpQWdJQ29nUUdOc1lYTnpYRzRnSUNBcUlDQWdYRzRnSUNBcUlEeHdQa0VnWm05eWF5QnZaaUJDWVdOclltOXVaUzVJYVhOMGIzSjVMQ0J3Y205MmFXUmxaQ0JtYjNJZ2VXOTFjaUJqYjI1MlpXNXBaVzVqWlM0Z0lFbG1JSGx2ZFNCY2JpQWdJQ29nZFhObElIUm9hWE1nWTJ4aGMzTXNJSGx2ZFNCdGRYTjBJR0ZzYzI4Z2FXNWpiSFZrWlNCcVVYVmxjbmtzSUc5eUlHRnViM1JvWlhJZ2JHbGljbUZ5ZVNCY2JpQWdJQ29nZEdoaGRDQndjbTkyYVdSbGN5QmhJR3BSZFdWeWVTMWpiMjF3WVhScFlteGxJQ1FnWm5WdVkzUnBiMjR1SUNCR2IzSWdiVzl5WlNCcGJtWnZjbTFoZEdsdmJpeGNiaUFnSUNvZ2MyVmxJSFJvWlNBOFlTQm9jbVZtUFZ3aWFIUjBjRG92TDJSdlkzVnRaVzUwWTJ4dmRXUXVaMmwwYUhWaUxtTnZiUzlpWVdOclltOXVaUzhqU0dsemRHOXllVndpUGx4dUlDQWdLaUJDWVdOclltOXVaU0JrYjJOMWJXVnVkR0YwYVc5dVBDOWhQaTQ4TDNBK1hHNGdJQ0FxSUR4d1BqeHpkSEp2Ym1jK1BHVnRQa0YyWVdsc1lXSnNaU0JwYmlCMGFHVWdZMnhwWlc1MElGTkVTeUJ2Ym14NUxqd3ZaVzArUEM5emRISnZibWMrUEM5d1BseHVJQ0FnS2k5Y2JpQWdVR0Z5YzJVdVNHbHpkRzl5ZVNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIUm9hWE11YUdGdVpHeGxjbk1nUFNCYlhUdGNiaUFnSUNCZkxtSnBibVJCYkd3b2RHaHBjeXdnSjJOb1pXTnJWWEpzSnlrN1hHNGdJSDA3WEc1Y2JpQWdMeThnUTJGamFHVmtJSEpsWjJWNElHWnZjaUJqYkdWaGJtbHVaeUJzWldGa2FXNW5JR2hoYzJobGN5QmhibVFnYzJ4aGMyaGxjeUF1WEc0Z0lIWmhjaUJ5YjNWMFpWTjBjbWx3Y0dWeUlEMGdMMTViSTF4Y0wxMHZPMXh1WEc0Z0lDOHZJRU5oWTJobFpDQnlaV2RsZUNCbWIzSWdaR1YwWldOMGFXNW5JRTFUU1VVdVhHNGdJSFpoY2lCcGMwVjRjR3h2Y21WeUlEMGdMMjF6YVdVZ1cxeGNkeTVkS3k4N1hHNWNiaUFnTHk4Z1NHRnpJSFJvWlNCb2FYTjBiM0o1SUdoaGJtUnNhVzVuSUdGc2NtVmhaSGtnWW1WbGJpQnpkR0Z5ZEdWa1AxeHVJQ0JRWVhKelpTNUlhWE4wYjNKNUxuTjBZWEowWldRZ1BTQm1ZV3h6WlR0Y2JseHVJQ0F2THlCVFpYUWdkWEFnWVd4c0lHbHVhR1Z5YVhSaFlteGxJQ29xVUdGeWMyVXVTR2x6ZEc5eWVTb3FJSEJ5YjNCbGNuUnBaWE1nWVc1a0lHMWxkR2h2WkhNdVhHNGdJRjh1WlhoMFpXNWtLRkJoY25ObExraHBjM1J2Y25rdWNISnZkRzkwZVhCbExDQlFZWEp6WlM1RmRtVnVkSE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDOHFLaUJBYkdWdVpITWdVR0Z5YzJVdVNHbHpkRzl5ZVM1d2NtOTBiM1I1Y0dVZ0tpOGdlMXh1WEc0Z0lDQWdMeThnVkdobElHUmxabUYxYkhRZ2FXNTBaWEoyWVd3Z2RHOGdjRzlzYkNCbWIzSWdhR0Z6YUNCamFHRnVaMlZ6TENCcFppQnVaV05sYzNOaGNua3NJR2x6WEc0Z0lDQWdMeThnZEhkbGJuUjVJSFJwYldWeklHRWdjMlZqYjI1a0xseHVJQ0FnSUdsdWRHVnlkbUZzT2lBMU1DeGNibHh1SUNBZ0lDOHZJRWRsZEhNZ2RHaGxJSFJ5ZFdVZ2FHRnphQ0IyWVd4MVpTNGdRMkZ1Ym05MElIVnpaU0JzYjJOaGRHbHZiaTVvWVhOb0lHUnBjbVZqZEd4NUlHUjFaU0IwYnlCaWRXZGNiaUFnSUNBdkx5QnBiaUJHYVhKbFptOTRJSGRvWlhKbElHeHZZMkYwYVc5dUxtaGhjMmdnZDJsc2JDQmhiSGRoZVhNZ1ltVWdaR1ZqYjJSbFpDNWNiaUFnSUNCblpYUklZWE5vT2lCbWRXNWpkR2x2YmloM2FXNWtiM2RQZG1WeWNtbGtaU2tnZTF4dUlDQWdJQ0FnZG1GeUlHeHZZeUE5SUhkcGJtUnZkMDkyWlhKeWFXUmxJRDhnZDJsdVpHOTNUM1psY25KcFpHVXViRzlqWVhScGIyNGdPaUIzYVc1a2IzY3ViRzlqWVhScGIyNDdYRzRnSUNBZ0lDQjJZWElnYldGMFkyZ2dQU0JzYjJNdWFISmxaaTV0WVhSamFDZ3ZJeWd1S2lra0x5azdYRzRnSUNBZ0lDQnlaWFIxY200Z2JXRjBZMmdnUHlCdFlYUmphRnN4WFNBNklDY25PMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZMeUJIWlhRZ2RHaGxJR055YjNOekxXSnliM2R6WlhJZ2JtOXliV0ZzYVhwbFpDQlZVa3dnWm5KaFoyMWxiblFzSUdWcGRHaGxjaUJtY205dElIUm9aU0JWVWt3c1hHNGdJQ0FnTHk4Z2RHaGxJR2hoYzJnc0lHOXlJSFJvWlNCdmRtVnljbWxrWlM1Y2JpQWdJQ0JuWlhSR2NtRm5iV1Z1ZERvZ1puVnVZM1JwYjI0b1puSmhaMjFsYm5Rc0lHWnZjbU5sVUhWemFGTjBZWFJsS1NCN1hHNGdJQ0FnSUNCcFppQW9VR0Z5YzJVdVgybHpUblZzYkU5eVZXNWtaV1pwYm1Wa0tHWnlZV2R0Wlc1MEtTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYUdGelVIVnphRk4wWVhSbElIeDhJR1p2Y21ObFVIVnphRk4wWVhSbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWm5KaFoyMWxiblFnUFNCM2FXNWtiM2N1Ykc5allYUnBiMjR1Y0dGMGFHNWhiV1U3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSE5sWVhKamFDQTlJSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXpaV0Z5WTJnN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hObFlYSmphQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabkpoWjIxbGJuUWdLejBnYzJWaGNtTm9PMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQm1jbUZuYldWdWRDQTlJSFJvYVhNdVoyVjBTR0Z6YUNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvSVdaeVlXZHRaVzUwTG1sdVpHVjRUMllvZEdocGN5NXZjSFJwYjI1ekxuSnZiM1FwS1NCN1hHNGdJQ0FnSUNBZ0lHWnlZV2R0Wlc1MElEMGdabkpoWjIxbGJuUXVjM1ZpYzNSeUtIUm9hWE11YjNCMGFXOXVjeTV5YjI5MExteGxibWQwYUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm5KaFoyMWxiblF1Y21Wd2JHRmpaU2h5YjNWMFpWTjBjbWx3Y0dWeUxDQW5KeWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZOMFlYSjBJSFJvWlNCb1lYTm9JR05vWVc1blpTQm9ZVzVrYkdsdVp5d2djbVYwZFhKdWFXNW5JR0IwY25WbFlDQnBaaUIwYUdVZ1kzVnljbVZ1ZEZ4dUlDQWdJQ0FxSUZWU1RDQnRZWFJqYUdWeklHRnVJR1Y0YVhOMGFXNW5JSEp2ZFhSbExDQmhibVFnWUdaaGJITmxZQ0J2ZEdobGNuZHBjMlV1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1JoY25RNklHWjFibU4wYVc5dUtHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lHbG1JQ2hRWVhKelpTNUlhWE4wYjNKNUxuTjBZWEowWldRcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lVR0Z5YzJVdWFHbHpkRzl5ZVNCb1lYTWdZV3h5WldGa2VTQmlaV1Z1SUhOMFlYSjBaV1JjSWlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCUVlYSnpaUzVJYVhOMGIzSjVMbk4wWVhKMFpXUWdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQXZMeUJHYVdkMWNtVWdiM1YwSUhSb1pTQnBibWwwYVdGc0lHTnZibVpwWjNWeVlYUnBiMjR1SUVSdklIZGxJRzVsWldRZ1lXNGdhV1p5WVcxbFAxeHVJQ0FnSUNBZ0x5OGdTWE1nY0hWemFGTjBZWFJsSUdSbGMybHlaV1FnTGk0dUlHbHpJR2wwSUdGMllXbHNZV0pzWlQ5Y2JpQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWN5QTlJRjh1WlhoMFpXNWtLSHQ5TENCN2NtOXZkRG9nSnk4bmZTd2dkR2hwY3k1dmNIUnBiMjV6TENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUhSb2FYTXVYM2RoYm5SelNHRnphRU5vWVc1blpTQTlJSFJvYVhNdWIzQjBhVzl1Y3k1b1lYTm9RMmhoYm1kbElDRTlQU0JtWVd4elpUdGNiaUFnSUNBZ0lIUm9hWE11WDNkaGJuUnpVSFZ6YUZOMFlYUmxJRDBnSVNGMGFHbHpMbTl3ZEdsdmJuTXVjSFZ6YUZOMFlYUmxPMXh1SUNBZ0lDQWdkR2hwY3k1ZmFHRnpVSFZ6YUZOMFlYUmxJRDBnSVNFb2RHaHBjeTV2Y0hScGIyNXpMbkIxYzJoVGRHRjBaU0FtSmlCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NW9hWE4wYjNKNUlDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1YUdsemRHOXllUzV3ZFhOb1UzUmhkR1VwTzF4dUlDQWdJQ0FnZG1GeUlHWnlZV2R0Wlc1MElEMGdkR2hwY3k1blpYUkdjbUZuYldWdWRDZ3BPMXh1SUNBZ0lDQWdkbUZ5SUdSdlkwMXZaR1VnUFNCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEUxdlpHVTdYRzRnSUNBZ0lDQjJZWElnYjJ4a1NVVWdQU0FvYVhORmVIQnNiM0psY2k1bGVHVmpLRzVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblF1ZEc5TWIzZGxja05oYzJVb0tTa2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb0lXUnZZMDF2WkdVZ2ZId2daRzlqVFc5a1pTQThQU0EzS1NrN1hHNWNiaUFnSUNBZ0lHbG1JQ2h2YkdSSlJTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbG1jbUZ0WlNBOUlGQmhjbk5sTGlRb0p6eHBabkpoYldVZ2MzSmpQVndpYW1GMllYTmpjbWx3ZERvd1hDSWdkR0ZpYVc1a1pYZzlYQ0l0TVZ3aUlDOCtKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVhR2xrWlNncExtRndjR1Z1WkZSdktDZGliMlI1SnlsYk1GMHVZMjl1ZEdWdWRGZHBibVJ2ZHp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1WVhacFoyRjBaU2htY21GbmJXVnVkQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklFUmxjR1Z1WkdsdVp5QnZiaUIzYUdWMGFHVnlJSGRsSjNKbElIVnphVzVuSUhCMWMyaFRkR0YwWlNCdmNpQm9ZWE5vWlhNc0lHRnVaQ0IzYUdWMGFHVnlYRzRnSUNBZ0lDQXZMeUFuYjI1b1lYTm9ZMmhoYm1kbEp5QnBjeUJ6ZFhCd2IzSjBaV1FzSUdSbGRHVnliV2x1WlNCb2IzY2dkMlVnWTJobFkyc2dkR2hsSUZWU1RDQnpkR0YwWlM1Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5b1lYTlFkWE5vVTNSaGRHVXBJSHRjYmlBZ0lDQWdJQ0FnVUdGeWMyVXVKQ2gzYVc1a2IzY3BMbUpwYm1Rb0ozQnZjSE4wWVhSbEp5d2dkR2hwY3k1amFHVmphMVZ5YkNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11WDNkaGJuUnpTR0Z6YUVOb1lXNW5aU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb0oyOXVhR0Z6YUdOb1lXNW5aU2NnYVc0Z2QybHVaRzkzS1NBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhiMnhrU1VVcElIdGNiaUFnSUNBZ0lDQWdVR0Z5YzJVdUpDaDNhVzVrYjNjcExtSnBibVFvSjJoaGMyaGphR0Z1WjJVbkxDQjBhR2x6TG1Ob1pXTnJWWEpzS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVmZDJGdWRITklZWE5vUTJoaGJtZGxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk5vWldOclZYSnNTVzUwWlhKMllXd2dQU0IzYVc1a2IzY3VjMlYwU1c1MFpYSjJZV3dvZEdocGN5NWphR1ZqYTFWeWJDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdWRHVnlkbUZzS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdSR1YwWlhKdGFXNWxJR2xtSUhkbElHNWxaV1FnZEc4Z1kyaGhibWRsSUhSb1pTQmlZWE5sSUhWeWJDd2dabTl5SUdFZ2NIVnphRk4wWVhSbElHeHBibXRjYmlBZ0lDQWdJQzh2SUc5d1pXNWxaQ0JpZVNCaElHNXZiaTF3ZFhOb1UzUmhkR1VnWW5KdmQzTmxjaTVjYmlBZ0lDQWdJSFJvYVhNdVpuSmhaMjFsYm5RZ1BTQm1jbUZuYldWdWREdGNiaUFnSUNBZ0lIWmhjaUJzYjJNZ1BTQjNhVzVrYjNjdWJHOWpZWFJwYjI0N1hHNGdJQ0FnSUNCMllYSWdZWFJTYjI5MElDQTlJR3h2WXk1d1lYUm9ibUZ0WlNBOVBUMGdkR2hwY3k1dmNIUnBiMjV6TG5KdmIzUTdYRzVjYmlBZ0lDQWdJQzh2SUVsbUlIZGxKM1psSUhOMFlYSjBaV1FnYjJabUlIZHBkR2dnWVNCeWIzVjBaU0JtY205dElHRWdZSEIxYzJoVGRHRjBaV0F0Wlc1aFlteGxaQ0JpY205M2MyVnlMRnh1SUNBZ0lDQWdMeThnWW5WMElIZGxKM0psSUdOMWNuSmxiblJzZVNCcGJpQmhJR0p5YjNkelpYSWdkR2hoZENCa2IyVnpiaWQwSUhOMWNIQnZjblFnYVhRdUxpNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOTNZVzUwYzBoaGMyaERhR0Z1WjJVZ0ppWWdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkMkZ1ZEhOUWRYTm9VM1JoZEdVZ0ppWWdYRzRnSUNBZ0lDQWdJQ0FnSVhSb2FYTXVYMmhoYzFCMWMyaFRkR0YwWlNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0ZoZEZKdmIzUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW1jbUZuYldWdWRDQTlJSFJvYVhNdVoyVjBSbkpoWjIxbGJuUW9iblZzYkN3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTVzYjJOaGRHbHZiaTV5WlhCc1lXTmxLSFJvYVhNdWIzQjBhVzl1Y3k1eWIyOTBJQ3NnSnlNbklDc2dkR2hwY3k1bWNtRm5iV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDOHZJRkpsZEhWeWJpQnBiVzFsWkdsaGRHVnNlU0JoY3lCaWNtOTNjMlZ5SUhkcGJHd2daRzhnY21Wa2FYSmxZM1FnZEc4Z2JtVjNJSFZ5YkZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lDQWdMeThnVDNJZ2FXWWdkMlVuZG1VZ2MzUmhjblJsWkNCdmRYUWdkMmwwYUNCaElHaGhjMmd0WW1GelpXUWdjbTkxZEdVc0lHSjFkQ0IzWlNkeVpTQmpkWEp5Wlc1MGJIbGNiaUFnSUNBZ0lDOHZJR2x1SUdFZ1luSnZkM05sY2lCM2FHVnlaU0JwZENCamIzVnNaQ0JpWlNCZ2NIVnphRk4wWVhSbFlDMWlZWE5sWkNCcGJuTjBaV0ZrTGk0dVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11WDNkaGJuUnpVSFZ6YUZOMFlYUmxJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmhoYzFCMWMyaFRkR0YwWlNBbUppQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWFJTYjI5MElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WXk1b1lYTm9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkpoWjIxbGJuUWdQU0IwYUdsekxtZGxkRWhoYzJnb0tTNXlaWEJzWVdObEtISnZkWFJsVTNSeWFYQndaWElzSUNjbktUdGNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xtaHBjM1J2Y25rdWNtVndiR0ZqWlZOMFlYUmxLSHQ5TENCa2IyTjFiV1Z1ZEM1MGFYUnNaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZeTV3Y205MGIyTnZiQ0FySUNjdkx5Y2dLeUJzYjJNdWFHOXpkQ0FySUhSb2FYTXViM0IwYVc5dWN5NXliMjkwSUNzZ2RHaHBjeTVtY21GbmJXVnVkQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1dmNIUnBiMjV6TG5OcGJHVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXNiMkZrVlhKc0tDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHZJRVJwYzJGaWJHVWdVR0Z5YzJVdWFHbHpkRzl5ZVN3Z2NHVnlhR0Z3Y3lCMFpXMXdiM0poY21sc2VTNGdUbTkwSUhWelpXWjFiQ0JwYmlCaElISmxZV3dnWVhCd0xGeHVJQ0FnSUM4dklHSjFkQ0J3YjNOemFXSnNlU0IxYzJWbWRXd2dabTl5SUhWdWFYUWdkR1Z6ZEdsdVp5QlNiM1YwWlhKekxseHVJQ0FnSUhOMGIzQTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnVUdGeWMyVXVKQ2gzYVc1a2IzY3BMblZ1WW1sdVpDZ25jRzl3YzNSaGRHVW5MQ0IwYUdsekxtTm9aV05yVlhKc0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5WdVltbHVaQ2duYUdGemFHTm9ZVzVuWlNjc0lIUm9hWE11WTJobFkydFZjbXdwTzF4dUlDQWdJQ0FnZDJsdVpHOTNMbU5zWldGeVNXNTBaWEoyWVd3b2RHaHBjeTVmWTJobFkydFZjbXhKYm5SbGNuWmhiQ2s3WEc0Z0lDQWdJQ0JRWVhKelpTNUlhWE4wYjNKNUxuTjBZWEowWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHk4Z1FXUmtJR0VnY205MWRHVWdkRzhnWW1VZ2RHVnpkR1ZrSUhkb1pXNGdkR2hsSUdaeVlXZHRaVzUwSUdOb1lXNW5aWE11SUZKdmRYUmxjeUJoWkdSbFpDQnNZWFJsY2x4dUlDQWdJQzh2SUcxaGVTQnZkbVZ5Y21sa1pTQndjbVYyYVc5MWN5QnliM1YwWlhNdVhHNGdJQ0FnY205MWRHVTZJR1oxYm1OMGFXOXVLSEp2ZFhSbExDQmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1Z5Y3k1MWJuTm9hV1owS0h0eWIzVjBaVG9nY205MWRHVXNJR05oYkd4aVlXTnJPaUJqWVd4c1ltRmphMzBwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2THlCRGFHVmphM01nZEdobElHTjFjbkpsYm5RZ1ZWSk1JSFJ2SUhObFpTQnBaaUJwZENCb1lYTWdZMmhoYm1kbFpDd2dZVzVrSUdsbUlHbDBJR2hoY3l4Y2JpQWdJQ0F2THlCallXeHNjeUJnYkc5aFpGVnliR0FzSUc1dmNtMWhiR2w2YVc1bklHRmpjbTl6Y3lCMGFHVWdhR2xrWkdWdUlHbG1jbUZ0WlM1Y2JpQWdJQ0JqYUdWamExVnliRG9nWm5WdVkzUnBiMjRvWlNrZ2UxeHVJQ0FnSUNBZ2RtRnlJR04xY25KbGJuUWdQU0IwYUdsekxtZGxkRVp5WVdkdFpXNTBLQ2s3WEc0Z0lDQWdJQ0JwWmlBb1kzVnljbVZ1ZENBOVBUMGdkR2hwY3k1bWNtRm5iV1Z1ZENBbUppQjBhR2x6TG1sbWNtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCamRYSnlaVzUwSUQwZ2RHaHBjeTVuWlhSR2NtRm5iV1Z1ZENoMGFHbHpMbWRsZEVoaGMyZ29kR2hwY3k1cFpuSmhiV1VwS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MElEMDlQU0IwYUdsekxtWnlZV2R0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG1sbWNtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTVoZG1sbllYUmxLR04xY25KbGJuUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0NGMGFHbHpMbXh2WVdSVmNtd29LU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbXh2WVdSVmNtd29kR2hwY3k1blpYUklZWE5vS0NrcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdkx5QkJkSFJsYlhCMElIUnZJR3h2WVdRZ2RHaGxJR04xY25KbGJuUWdWVkpNSUdaeVlXZHRaVzUwTGlCSlppQmhJSEp2ZFhSbElITjFZMk5sWldSeklIZHBkR2dnWVZ4dUlDQWdJQzh2SUcxaGRHTm9MQ0J5WlhSMWNtNXpJR0IwY25WbFlDNGdTV1lnYm04Z1pHVm1hVzVsWkNCeWIzVjBaWE1nYldGMFkyaGxjeUIwYUdVZ1puSmhaMjFsYm5Rc1hHNGdJQ0FnTHk4Z2NtVjBkWEp1Y3lCZ1ptRnNjMlZnTGx4dUlDQWdJR3h2WVdSVmNtdzZJR1oxYm1OMGFXOXVLR1p5WVdkdFpXNTBUM1psY25KcFpHVXBJSHRjYmlBZ0lDQWdJSFpoY2lCbWNtRm5iV1Z1ZENBOUlIUm9hWE11Wm5KaFoyMWxiblFnUFNCMGFHbHpMbWRsZEVaeVlXZHRaVzUwS0daeVlXZHRaVzUwVDNabGNuSnBaR1VwTzF4dUlDQWdJQ0FnZG1GeUlHMWhkR05vWldRZ1BTQmZMbUZ1ZVNoMGFHbHpMbWhoYm1Sc1pYSnpMQ0JtZFc1amRHbHZiaWhvWVc1a2JHVnlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaG9ZVzVrYkdWeUxuSnZkWFJsTG5SbGMzUW9abkpoWjIxbGJuUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FHRnVaR3hsY2k1allXeHNZbUZqYXlobWNtRm5iV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUcxaGRHTm9aV1E3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzh2SUZOaGRtVWdZU0JtY21GbmJXVnVkQ0JwYm5SdklIUm9aU0JvWVhOb0lHaHBjM1J2Y25rc0lHOXlJSEpsY0d4aFkyVWdkR2hsSUZWU1RDQnpkR0YwWlNCcFppQjBhR1ZjYmlBZ0lDQXZMeUFuY21Wd2JHRmpaU2NnYjNCMGFXOXVJR2x6SUhCaGMzTmxaQzRnV1c5MUlHRnlaU0J5WlhOd2IyNXphV0pzWlNCbWIzSWdjSEp2Y0dWeWJIa2dWVkpNTFdWdVkyOWthVzVuWEc0Z0lDQWdMeThnZEdobElHWnlZV2R0Wlc1MElHbHVJR0ZrZG1GdVkyVXVYRzRnSUNBZ0x5OWNiaUFnSUNBdkx5QlVhR1VnYjNCMGFXOXVjeUJ2WW1wbFkzUWdZMkZ1SUdOdmJuUmhhVzRnWUhSeWFXZG5aWEk2SUhSeWRXVmdJR2xtSUhsdmRTQjNhWE5vSUhSdklHaGhkbVVnZEdobFhHNGdJQ0FnTHk4Z2NtOTFkR1VnWTJGc2JHSmhZMnNnWW1VZ1ptbHlaV1FnS0c1dmRDQjFjM1ZoYkd4NUlHUmxjMmx5WVdKc1pTa3NJRzl5SUdCeVpYQnNZV05sT2lCMGNuVmxZQ3dnYVdaY2JpQWdJQ0F2THlCNWIzVWdkMmx6YUNCMGJ5QnRiMlJwWm5rZ2RHaGxJR04xY25KbGJuUWdWVkpNSUhkcGRHaHZkWFFnWVdSa2FXNW5JR0Z1SUdWdWRISjVJSFJ2SUhSb1pWeHVJQ0FnSUM4dklHaHBjM1J2Y25rdVhHNGdJQ0FnYm1GMmFXZGhkR1U2SUdaMWJtTjBhVzl1S0daeVlXZHRaVzUwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNCcFppQW9JVkJoY25ObExraHBjM1J2Y25rdWMzUmhjblJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NZ2ZId2diM0IwYVc5dWN5QTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnZTNSeWFXZG5aWEk2SUc5d2RHbHZibk45TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZG1GeUlHWnlZV2NnUFNBb1puSmhaMjFsYm5RZ2ZId2dKeWNwTG5KbGNHeGhZMlVvY205MWRHVlRkSEpwY0hCbGNpd2dKeWNwTzF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Wm5KaFoyMWxiblFnUFQwOUlHWnlZV2NwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QkpaaUJ3ZFhOb1UzUmhkR1VnYVhNZ1lYWmhhV3hoWW14bExDQjNaU0IxYzJVZ2FYUWdkRzhnYzJWMElIUm9aU0JtY21GbmJXVnVkQ0JoY3lCaElISmxZV3dnVlZKTUxseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyaGhjMUIxYzJoVGRHRjBaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9abkpoWnk1cGJtUmxlRTltS0hSb2FYTXViM0IwYVc5dWN5NXliMjkwS1NBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHWnlZV2NnUFNCMGFHbHpMbTl3ZEdsdmJuTXVjbTl2ZENBcklHWnlZV2M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVtY21GbmJXVnVkQ0E5SUdaeVlXYzdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYQnNZV05sVDNKUWRYTm9JRDBnYjNCMGFXOXVjeTV5WlhCc1lXTmxJRDhnSjNKbGNHeGhZMlZUZEdGMFpTY2dPaUFuY0hWemFGTjBZWFJsSnp0Y2JpQWdJQ0FnSUNBZ2QybHVaRzkzTG1ocGMzUnZjbmxiY21Wd2JHRmpaVTl5VUhWemFGMG9lMzBzSUdSdlkzVnRaVzUwTG5ScGRHeGxMQ0JtY21GbktUdGNibHh1SUNBZ0lDQWdMeThnU1dZZ2FHRnphQ0JqYUdGdVoyVnpJR2hoZG1WdUozUWdZbVZsYmlCbGVIQnNhV05wZEd4NUlHUnBjMkZpYkdWa0xDQjFjR1JoZEdVZ2RHaGxJR2hoYzJoY2JpQWdJQ0FnSUM4dklHWnlZV2R0Wlc1MElIUnZJSE4wYjNKbElHaHBjM1J2Y25rdVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11WDNkaGJuUnpTR0Z6YUVOb1lXNW5aU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVp5WVdkdFpXNTBJRDBnWm5KaFp6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsU0dGemFDaDNhVzVrYjNjdWJHOWpZWFJwYjI0c0lHWnlZV2NzSUc5d2RHbHZibk11Y21Wd2JHRmpaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1sbWNtRnRaU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdLR1p5WVdjZ0lUMDlJSFJvYVhNdVoyVjBSbkpoWjIxbGJuUW9kR2hwY3k1blpYUklZWE5vS0hSb2FYTXVhV1p5WVcxbEtTa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdUM0JsYm1sdVp5QmhibVFnWTJ4dmMybHVaeUIwYUdVZ2FXWnlZVzFsSUhSeWFXTnJjeUJKUlRjZ1lXNWtJR1ZoY214cFpYSmNiaUFnSUNBZ0lDQWdJQ0F2THlCMGJ5QndkWE5vSUdFZ2FHbHpkRzl5ZVNCbGJuUnllU0J2YmlCb1lYTm9MWFJoWnlCamFHRnVaMlV1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCeVpYQnNZV05sSUdseklIUnlkV1VzSUhkbElHUnZiaWQwSUhkaGJuUWdkR2hwY3k1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVc5d2RHbHZibk11Y21Wd2JHRmpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cFpuSmhiV1V1Wkc5amRXMWxiblF1YjNCbGJpZ3BMbU5zYjNObEtDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDNWd1pHRjBaVWhoYzJnb2RHaHBjeTVwWm5KaGJXVXViRzlqWVhScGIyNHNJR1p5WVdjc0lHOXdkR2x2Ym5NdWNtVndiR0ZqWlNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnU1dZZ2VXOTFKM1psSUhSdmJHUWdkWE1nZEdoaGRDQjViM1VnWlhod2JHbGphWFJzZVNCa2IyNG5kQ0IzWVc1MElHWmhiR3hpWVdOcklHaGhjMmhqYUdGdVoyVXRYRzRnSUNBZ0lDQXZMeUJpWVhObFpDQm9hWE4wYjNKNUxDQjBhR1Z1SUdCdVlYWnBaMkYwWldBZ1ltVmpiMjFsY3lCaElIQmhaMlVnY21WbWNtVnphQzVjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSGRwYm1SdmR5NXNiMk5oZEdsdmJpNWhjM05wWjI0b2RHaHBjeTV2Y0hScGIyNXpMbkp2YjNRZ0t5Qm1jbUZuYldWdWRDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTUwY21sbloyVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViRzloWkZWeWJDaG1jbUZuYldWdWRDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHZJRlZ3WkdGMFpTQjBhR1VnYUdGemFDQnNiMk5oZEdsdmJpd2daV2wwYUdWeUlISmxjR3hoWTJsdVp5QjBhR1VnWTNWeWNtVnVkQ0JsYm5SeWVTd2diM0lnWVdSa2FXNW5YRzRnSUNBZ0x5OGdZU0J1WlhjZ2IyNWxJSFJ2SUhSb1pTQmljbTkzYzJWeUlHaHBjM1J2Y25rdVhHNGdJQ0FnWDNWd1pHRjBaVWhoYzJnNklHWjFibU4wYVc5dUtHeHZZMkYwYVc5dUxDQm1jbUZuYldWdWRDd2djbVZ3YkdGalpTa2dlMXh1SUNBZ0lDQWdhV1lnS0hKbGNHeGhZMlVwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE1nUFNCc2IyTmhkR2x2Ymk1MGIxTjBjbWx1WnlncExuSmxjR3hoWTJVb0x5aHFZWFpoYzJOeWFYQjBPbndqS1M0cUpDOHNJQ2NuS1R0Y2JpQWdJQ0FnSUNBZ2JHOWpZWFJwYjI0dWNtVndiR0ZqWlNoeklDc2dKeU1uSUNzZ1puSmhaMjFsYm5RcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2JHOWpZWFJwYjI0dWFHRnphQ0E5SUdaeVlXZHRaVzUwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5S0hSb2FYTXBLVHRjYmx4dUx5cG5iRzlpWVd3Z1h6b2dabUZzYzJVcUwxeHVLR1oxYm1OMGFXOXVLSEp2YjNRcElIdGNiaUFnY205dmRDNVFZWEp6WlNBOUlISnZiM1F1VUdGeWMyVWdmSHdnZTMwN1hHNGdJSFpoY2lCUVlYSnpaU0E5SUhKdmIzUXVVR0Z5YzJVN1hHNGdJSFpoY2lCZklEMGdVR0Z5YzJVdVh6dGNibHh1SUNBdktpcGNiaUFnSUNvZ1VtOTFkR1Z5Y3lCdFlYQWdabUYxZUMxVlVreHpJSFJ2SUdGamRHbHZibk1zSUdGdVpDQm1hWEpsSUdWMlpXNTBjeUIzYUdWdUlISnZkWFJsY3lCaGNtVmNiaUFnSUNvZ2JXRjBZMmhsWkM0Z1EzSmxZWFJwYm1jZ1lTQnVaWGNnYjI1bElITmxkSE1nYVhSeklHQnliM1YwWlhOZ0lHaGhjMmdzSUdsbUlHNXZkQ0J6WlhRZ2MzUmhkR2xqWVd4c2VTNWNiaUFnSUNvZ1FHTnNZWE56WEc0Z0lDQXFYRzRnSUNBcUlEeHdQa0VnWm05eWF5QnZaaUJDWVdOclltOXVaUzVTYjNWMFpYSXNJSEJ5YjNacFpHVmtJR1p2Y2lCNWIzVnlJR052Ym5abGJtbGxibU5sTGx4dUlDQWdLaUJHYjNJZ2JXOXlaU0JwYm1admNtMWhkR2x2Yml3Z2MyVmxJSFJvWlZ4dUlDQWdLaUE4WVNCb2NtVm1QVndpYUhSMGNEb3ZMMlJ2WTNWdFpXNTBZMnh2ZFdRdVoybDBhSFZpTG1OdmJTOWlZV05yWW05dVpTOGpVbTkxZEdWeVhDSStRbUZqYTJKdmJtVmNiaUFnSUNvZ1pHOWpkVzFsYm5SaGRHbHZiand2WVQ0dVBDOXdQbHh1SUNBZ0tpQThjRDQ4YzNSeWIyNW5QanhsYlQ1QmRtRnBiR0ZpYkdVZ2FXNGdkR2hsSUdOc2FXVnVkQ0JUUkVzZ2IyNXNlUzQ4TDJWdFBqd3ZjM1J5YjI1blBqd3ZjRDVjYmlBZ0lDb3ZYRzRnSUZCaGNuTmxMbEp2ZFhSbGNpQTlJR1oxYm1OMGFXOXVLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1eWIzVjBaWE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjbTkxZEdWeklEMGdiM0IwYVc5dWN5NXliM1YwWlhNN1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVgySnBibVJTYjNWMFpYTW9LVHRjYmlBZ0lDQjBhR2x6TG1sdWFYUnBZV3hwZW1VdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkRZV05vWldRZ2NtVm5kV3hoY2lCbGVIQnlaWE56YVc5dWN5Qm1iM0lnYldGMFkyaHBibWNnYm1GdFpXUWdjR0Z5WVcwZ2NHRnlkSE1nWVc1a0lITndiR0YwZEdWa1hHNGdJQzh2SUhCaGNuUnpJRzltSUhKdmRYUmxJSE4wY21sdVozTXVYRzRnSUhaaGNpQnVZVzFsWkZCaGNtRnRJQ0FnSUQwZ0x6cGNYSGNyTDJjN1hHNGdJSFpoY2lCemNHeGhkRkJoY21GdElDQWdJRDBnTDF4Y0tseGNkeXN2Wnp0Y2JpQWdkbUZ5SUdWelkyRndaVkpsWjBWNGNDQWdQU0F2VzF4Y0xWeGNXMXhjWFh0OUtDa3JQeTRzWEZ4Y1hGeGNYbHhjSkZ4Y2ZDTmNYSE5kTDJjN1hHNWNiaUFnTHk4Z1UyVjBJSFZ3SUdGc2JDQnBibWhsY21sMFlXSnNaU0FxS2xCaGNuTmxMbEp2ZFhSbGNpb3FJSEJ5YjNCbGNuUnBaWE1nWVc1a0lHMWxkR2h2WkhNdVhHNGdJRjh1WlhoMFpXNWtLRkJoY25ObExsSnZkWFJsY2k1d2NtOTBiM1I1Y0dVc0lGQmhjbk5sTGtWMlpXNTBjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0x5b3FJRUJzWlc1a2N5QlFZWEp6WlM1U2IzVjBaWEl1Y0hKdmRHOTBlWEJsSUNvdklIdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YVhScFlXeHBlbVVnYVhNZ1lXNGdaVzF3ZEhrZ1puVnVZM1JwYjI0Z1lua2daR1ZtWVhWc2RDNGdUM1psY25KcFpHVWdhWFFnZDJsMGFDQjViM1Z5SUc5M2JseHVJQ0FnSUNBcUlHbHVhWFJwWVd4cGVtRjBhVzl1SUd4dloybGpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHVhWFJwWVd4cGVtVTZJR1oxYm1OMGFXOXVLQ2w3ZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFMWhiblZoYkd4NUlHSnBibVFnWVNCemFXNW5iR1VnYm1GdFpXUWdjbTkxZEdVZ2RHOGdZU0JqWVd4c1ltRmpheTRnUm05eUlHVjRZVzF3YkdVNlhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lBOGNISmxQblJvYVhNdWNtOTFkR1VvSjNObFlYSmphQzg2Y1hWbGNua3ZjRHB1ZFcwbkxDQW5jMlZoY21Ob0p5d2dablZ1WTNScGIyNG9jWFZsY25rc0lHNTFiU2tnZTF4dUlDQWdJQ0FxSUNBZ0lDQWdJQzR1TGx4dUlDQWdJQ0FxSUNBZ0lDQjlLVHM4TDNCeVpUNWNiaUFnSUNBZ0tpOWNiaUFnSUNCeWIzVjBaVG9nWm5WdVkzUnBiMjRvY205MWRHVXNJRzVoYldVc0lHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ0lDQlFZWEp6WlM1b2FYTjBiM0o1SUQwZ1VHRnljMlV1YUdsemRHOXllU0I4ZkNCdVpYY2dVR0Z5YzJVdVNHbHpkRzl5ZVNncE8xeHVJQ0FnSUNBZ2FXWWdLQ0ZmTG1selVtVm5SWGh3S0hKdmRYUmxLU2tnZTF4dUlDQWdJQ0FnSUNCeWIzVjBaU0E5SUhSb2FYTXVYM0p2ZFhSbFZHOVNaV2RGZUhBb2NtOTFkR1VwTzF4dUlDQWdJQ0FnZlNCY2JpQWdJQ0FnSUdsbUlDZ2hZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNnUFNCMGFHbHpXMjVoYldWZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1VHRnljMlV1YUdsemRHOXllUzV5YjNWMFpTaHliM1YwWlN3Z1h5NWlhVzVrS0daMWJtTjBhVzl1S0daeVlXZHRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoY21keklEMGdkR2hwY3k1ZlpYaDBjbUZqZEZCaGNtRnRaWFJsY25Nb2NtOTFkR1VzSUdaeVlXZHRaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyRnNiR0poWTJzdVlYQndiSGtvZEdocGN5d2dZWEpuY3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1MGNtbG5aMlZ5TG1Gd2NHeDVLSFJvYVhNc0lGc25jbTkxZEdVNkp5QXJJRzVoYldWZExtTnZibU5oZENoaGNtZHpLU2s3WEc0Z0lDQWdJQ0FnSUZCaGNuTmxMbWhwYzNSdmNua3VkSEpwWjJkbGNpZ25jbTkxZEdVbkxDQjBhR2x6TENCdVlXMWxMQ0JoY21kektUdGNiaUFnSUNBZ0lIMHNJSFJvYVhNcEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJYYUdWdVpYWmxjaUI1YjNVZ2NtVmhZMmdnWVNCd2IybHVkQ0JwYmlCNWIzVnlJR0Z3Y0d4cFkyRjBhVzl1SUhSb1lYUWdlVzkxSjJSY2JpQWdJQ0FnS2lCc2FXdGxJSFJ2SUhOaGRtVWdZWE1nWVNCVlVrd3NJR05oYkd3Z2JtRjJhV2RoZEdVZ2FXNGdiM0prWlhJZ2RHOGdkWEJrWVhSbElIUm9aVnh1SUNBZ0lDQXFJRlZTVEM0Z1NXWWdlVzkxSUhkcGMyZ2dkRzhnWVd4emJ5QmpZV3hzSUhSb1pTQnliM1YwWlNCbWRXNWpkR2x2Yml3Z2MyVjBJSFJvWlNCY2JpQWdJQ0FnS2lCMGNtbG5aMlZ5SUc5d2RHbHZiaUIwYnlCMGNuVmxMaUJVYnlCMWNHUmhkR1VnZEdobElGVlNUQ0IzYVhSb2IzVjBJR055WldGMGFXNW5YRzRnSUNBZ0lDb2dZVzRnWlc1MGNua2dhVzRnZEdobElHSnliM2R6WlhJbmN5Qm9hWE4wYjNKNUxDQnpaWFFnZEdobElISmxjR3hoWTJVZ2IzQjBhVzl1WEc0Z0lDQWdJQ29nZEc4Z2RISjFaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnVZWFpwWjJGMFpUb2dablZ1WTNScGIyNG9abkpoWjIxbGJuUXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJRkJoY25ObExtaHBjM1J2Y25rdWJtRjJhV2RoZEdVb1puSmhaMjFsYm5Rc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdkx5QkNhVzVrSUdGc2JDQmtaV1pwYm1Wa0lISnZkWFJsY3lCMGJ5QmdVR0Z5YzJVdWFHbHpkRzl5ZVdBdUlGZGxJR2hoZG1VZ2RHOGdjbVYyWlhKelpTQjBhR1ZjYmlBZ0lDQXZMeUJ2Y21SbGNpQnZaaUIwYUdVZ2NtOTFkR1Z6SUdobGNtVWdkRzhnYzNWd2NHOXlkQ0JpWldoaGRtbHZjaUIzYUdWeVpTQjBhR1VnYlc5emRDQm5aVzVsY21Gc1hHNGdJQ0FnTHk4Z2NtOTFkR1Z6SUdOaGJpQmlaU0JrWldacGJtVmtJR0YwSUhSb1pTQmliM1IwYjIwZ2IyWWdkR2hsSUhKdmRYUmxJRzFoY0M1Y2JpQWdJQ0JmWW1sdVpGSnZkWFJsY3pvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVjbTkxZEdWektTQjdJRnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjJZWElnY205MWRHVnpJRDBnVzEwN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCeWIzVjBaU0JwYmlCMGFHbHpMbkp2ZFhSbGN5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5YjNWMFpYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NtOTFkR1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbTkxZEdWekxuVnVjMmhwWm5Rb1czSnZkWFJsTENCMGFHbHpMbkp2ZFhSbGMxdHliM1YwWlYxZEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0J5YjNWMFpYTXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTkxZEdVb2NtOTFkR1Z6VzJsZFd6QmRMQ0J5YjNWMFpYTmJhVjFiTVYwc0lIUm9hWE5iY205MWRHVnpXMmxkV3pGZFhTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHZJRU52Ym5abGNuUWdZU0J5YjNWMFpTQnpkSEpwYm1jZ2FXNTBieUJoSUhKbFozVnNZWElnWlhod2NtVnpjMmx2Yml3Z2MzVnBkR0ZpYkdVZ1ptOXlJRzFoZEdOb2FXNW5YRzRnSUNBZ0x5OGdZV2RoYVc1emRDQjBhR1VnWTNWeWNtVnVkQ0JzYjJOaGRHbHZiaUJvWVhOb0xseHVJQ0FnSUY5eWIzVjBaVlJ2VW1WblJYaHdPaUJtZFc1amRHbHZiaWh5YjNWMFpTa2dlMXh1SUNBZ0lDQWdjbTkxZEdVZ1BTQnliM1YwWlM1eVpYQnNZV05sS0dWelkyRndaVkpsWjBWNGNDd2dKMXhjWEZ3a0ppY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvYm1GdFpXUlFZWEpoYlN3Z0p5aGJYbHhjTDEwcktTY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvYzNCc1lYUlFZWEpoYlN3Z0p5Z3VLajhwSnlrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGSmxaMFY0Y0NnblhpY2dLeUJ5YjNWMFpTQXJJQ2NrSnlrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4dklFZHBkbVZ1SUdFZ2NtOTFkR1VzSUdGdVpDQmhJRlZTVENCbWNtRm5iV1Z1ZENCMGFHRjBJR2wwSUcxaGRHTm9aWE1zSUhKbGRIVnliaUIwYUdVZ1lYSnlZWGtnYjJaY2JpQWdJQ0F2THlCbGVIUnlZV04wWldRZ2NHRnlZVzFsZEdWeWN5NWNiaUFnSUNCZlpYaDBjbUZqZEZCaGNtRnRaWFJsY25NNklHWjFibU4wYVc5dUtISnZkWFJsTENCbWNtRm5iV1Z1ZENrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKdmRYUmxMbVY0WldNb1puSmhaMjFsYm5RcExuTnNhV05sS0RFcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2FXNXpkR0Z1WTJWUWNtOXdjeUJKYm5OMFlXNWpaU0J3Y205d1pYSjBhV1Z6SUdadmNpQjBhR1VnY205MWRHVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1kyeGhjM05RY205d2N5QkRiR0Z6Y3lCd2NtOXdaWEpwWlhNZ1ptOXlJSFJvWlNCeWIzVjBaWEl1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlME5zWVhOemZTQkJJRzVsZHlCemRXSmpiR0Z6Y3lCdlppQThZMjlrWlQ1UVlYSnpaUzVTYjNWMFpYSThMMk52WkdVK0xseHVJQ0FnS2k5Y2JpQWdVR0Z5YzJVdVVtOTFkR1Z5TG1WNGRHVnVaQ0E5SUZCaGNuTmxMbDlsZUhSbGJtUTdYRzU5S0hSb2FYTXBLVHRjYmlobWRXNWpkR2x2YmloeWIyOTBLU0I3WEc0Z0lISnZiM1F1VUdGeWMyVWdQU0J5YjI5MExsQmhjbk5sSUh4OElIdDlPMXh1SUNCMllYSWdVR0Z5YzJVZ1BTQnliMjkwTGxCaGNuTmxPMXh1SUNCMllYSWdYeUE5SUZCaGNuTmxMbDg3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ1WVcxbGMzQmhZMlVnUTI5dWRHRnBibk1nWm5WdVkzUnBiMjV6SUdadmNpQmpZV3hzYVc1bklHRnVaQ0JrWldOc1lYSnBibWRjYmlBZ0lDb2dQR0VnYUhKbFpqMWNJaTlrYjJOekwyTnNiM1ZrWDJOdlpHVmZaM1ZwWkdValpuVnVZM1JwYjI1elhDSStZMnh2ZFdRZ1puVnVZM1JwYjI1elBDOWhQaTVjYmlBZ0lDb2dQSEErUEhOMGNtOXVaejQ4WlcwK1hHNGdJQ0FxSUNBZ1UyOXRaU0JtZFc1amRHbHZibk1nWVhKbElHOXViSGtnWVhaaGFXeGhZbXhsSUdaeWIyMGdRMnh2ZFdRZ1EyOWtaUzVjYmlBZ0lDb2dQQzlsYlQ0OEwzTjBjbTl1Wno0OEwzQStYRzRnSUNBcUwxeHVJQ0JRWVhKelpTNURiRzkxWkNBOUlGQmhjbk5sTGtOc2IzVmtJSHg4SUh0OU8xeHVYRzRnSUY4dVpYaDBaVzVrS0ZCaGNuTmxMa05zYjNWa0xDQXZLaW9nUUd4bGJtUnpJRkJoY25ObExrTnNiM1ZrSUNvdklIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQk5ZV3RsY3lCaElHTmhiR3dnZEc4Z1lTQmpiRzkxWkNCbWRXNWpkR2x2Ymk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYm1GdFpTQlVhR1VnWm5WdVkzUnBiMjRnYm1GdFpTNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1pHRjBZU0JVYUdVZ2NHRnlZVzFsZEdWeWN5QjBieUJ6Wlc1a0lIUnZJSFJvWlNCamJHOTFaQ0JtZFc1amRHbHZiaTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QkJJRUpoWTJ0aWIyNWxMWE4wZVd4bElHOXdkR2x2Ym5NZ2IySnFaV04wWEc0Z0lDQWdJQ29nYjNCMGFXOXVjeTV6ZFdOalpYTnpMQ0JwWmlCelpYUXNJSE5vYjNWc1pDQmlaU0JoSUdaMWJtTjBhVzl1SUhSdklHaGhibVJzWlNCaElITjFZMk5sYzNObWRXeGNiaUFnSUNBZ0tpQmpZV3hzSUhSdklHRWdZMnh2ZFdRZ1puVnVZM1JwYjI0dUlDQnZjSFJwYjI1ekxtVnljbTl5SUhOb2IzVnNaQ0JpWlNCaElHWjFibU4wYVc5dUlIUm9ZWFJjYmlBZ0lDQWdLaUJvWVc1a2JHVnpJR0Z1SUdWeWNtOXlJSEoxYm01cGJtY2dkR2hsSUdOc2IzVmtJR1oxYm1OMGFXOXVMaUFnUW05MGFDQm1kVzVqZEdsdmJuTWdZWEpsWEc0Z0lDQWdJQ29nYjNCMGFXOXVZV3d1SUNCQ2IzUm9JR1oxYm1OMGFXOXVjeUIwWVd0bElHRWdjMmx1WjJ4bElHRnlaM1Z0Wlc1MExseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxQmhjbk5sTGxCeWIyMXBjMlY5SUVFZ2NISnZiV2x6WlNCMGFHRjBJSGRwYkd3Z1ltVWdjbVZ6YjJ4MlpXUWdkMmwwYUNCMGFHVWdjbVZ6ZFd4MFhHNGdJQ0FnSUNvZ2IyWWdkR2hsSUdaMWJtTjBhVzl1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEoxYmpvZ1puVnVZM1JwYjI0b2JtRnRaU3dnWkdGMFlTd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdiM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMwN1hHNWNiaUFnSUNBZ0lIWmhjaUJ5WlhGMVpYTjBJRDBnVUdGeWMyVXVYM0psY1hWbGMzUW9lMXh1SUNBZ0lDQWdJQ0J5YjNWMFpUb2dYQ0ptZFc1amRHbHZibk5jSWl4Y2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbE9pQnVZVzFsTEZ4dUlDQWdJQ0FnSUNCdFpYUm9iMlE2SUNkUVQxTlVKeXhjYmlBZ0lDQWdJQ0FnZFhObFRXRnpkR1Z5UzJWNU9pQnZjSFJwYjI1ekxuVnpaVTFoYzNSbGNrdGxlU3hjYmlBZ0lDQWdJQ0FnYzJWemMybHZibFJ2YTJWdU9pQnZjSFJwYjI1ekxuTmxjM05wYjI1VWIydGxiaXhjYmlBZ0lDQWdJQ0FnWkdGMFlUb2dVR0Z5YzJVdVgyVnVZMjlrWlNoa1lYUmhMQ0J1ZFd4c0xDQjBjblZsS1Z4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpYRjFaWE4wTG5Sb1pXNG9ablZ1WTNScGIyNG9jbVZ6Y0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHRnljMlV1WDJSbFkyOWtaU2h1ZFd4c0xDQnlaWE53S1M1eVpYTjFiSFE3WEc0Z0lDQWdJQ0I5S1M1ZmRHaGxibEoxYmtOaGJHeGlZV05yY3lodmNIUnBiMjV6S1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlNoMGFHbHpLU2s3WEc1Y2JpaG1kVzVqZEdsdmJpaHliMjkwS1NCN1hHNGdJSEp2YjNRdVVHRnljMlVnUFNCeWIyOTBMbEJoY25ObElIeDhJSHQ5TzF4dUlDQjJZWElnVUdGeWMyVWdQU0J5YjI5MExsQmhjbk5sTzF4dVhHNGdJRkJoY25ObExrbHVjM1JoYkd4aGRHbHZiaUE5SUZCaGNuTmxMazlpYW1WamRDNWxlSFJsYm1Rb1hDSmZTVzV6ZEdGc2JHRjBhVzl1WENJcE8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGIyNTBZV2x1Y3lCbWRXNWpkR2x2Ym5NZ2RHOGdaR1ZoYkNCM2FYUm9JRkIxYzJnZ2FXNGdVR0Z5YzJWY2JpQWdJQ29nUUc1aGJXVWdVR0Z5YzJVdVVIVnphRnh1SUNBZ0tpQkFibUZ0WlhOd1lXTmxYRzRnSUNBcUwxeHVJQ0JRWVhKelpTNVFkWE5vSUQwZ1VHRnljMlV1VUhWemFDQjhmQ0I3ZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWdVpITWdZU0J3ZFhOb0lHNXZkR2xtYVdOaGRHbHZiaTVjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHUmhkR0VnTFNBZ1ZHaGxJR1JoZEdFZ2IyWWdkR2hsSUhCMWMyZ2dibTkwYVdacFkyRjBhVzl1TGlBZ1ZtRnNhV1FnWm1sbGJHUnpYRzRnSUNBcUlHRnlaVHBjYmlBZ0lDb2dJQ0E4YjJ3K1hHNGdJQ0FxSUNBZ0lDQThiR2srWTJoaGJtNWxiSE1nTFNCQmJpQkJjbkpoZVNCdlppQmphR0Z1Ym1Wc2N5QjBieUJ3ZFhOb0lIUnZMand2YkdrK1hHNGdJQ0FxSUNBZ0lDQThiR2srY0hWemFGOTBhVzFsSUMwZ1FTQkVZWFJsSUc5aWFtVmpkQ0JtYjNJZ2QyaGxiaUIwYnlCelpXNWtJSFJvWlNCd2RYTm9Mand2YkdrK1hHNGdJQ0FxSUNBZ0lDQThiR2srWlhod2FYSmhkR2x2Ymw5MGFXMWxJQzBnSUVFZ1JHRjBaU0J2WW1wbFkzUWdabTl5SUhkb1pXNGdkRzhnWlhod2FYSmxYRzRnSUNBcUlDQWdJQ0FnSUNBZ2RHaGxJSEIxYzJndVBDOXNhVDVjYmlBZ0lDb2dJQ0FnSUR4c2FUNWxlSEJwY21GMGFXOXVYMmx1ZEdWeWRtRnNJQzBnVkdobElITmxZMjl1WkhNZ1puSnZiU0J1YjNjZ2RHOGdaWGh3YVhKbElIUm9aU0J3ZFhOb0xqd3ZiR2srWEc0Z0lDQXFJQ0FnSUNBOGJHaytkMmhsY21VZ0xTQkJJRkJoY25ObExsRjFaWEo1SUc5MlpYSWdVR0Z5YzJVdVNXNXpkR0ZzYkdGMGFXOXVJSFJvWVhRZ2FYTWdkWE5sWkNCMGJ5QnRZWFJqYUZ4dUlDQWdLaUFnSUNBZ0lDQWdJR0VnYzJWMElHOW1JR2x1YzNSaGJHeGhkR2x2Ym5NZ2RHOGdjSFZ6YUNCMGJ5NDhMMnhwUGx4dUlDQWdLaUFnSUNBZ1BHeHBQbVJoZEdFZ0xTQlVhR1VnWkdGMFlTQjBieUJ6Wlc1a0lHRnpJSEJoY25RZ2IyWWdkR2hsSUhCMWMyZzhMMnhwUGx4dUlDQWdLaUFnSUR4dmJENWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nUVc0Z2IySnFaV04wSUhSb1lYUWdhR0Z6SUdGdUlHOXdkR2x2Ym1Gc0lITjFZMk5sYzNNZ1puVnVZM1JwYjI0c1hHNGdJQ0FxSUhSb1lYUWdkR0ZyWlhNZ2JtOGdZWEpuZFcxbGJuUnpJR0Z1WkNCM2FXeHNJR0psSUdOaGJHeGxaQ0J2YmlCaElITjFZMk5sYzNObWRXd2djSFZ6YUN3Z1lXNWtYRzRnSUNBcUlHRnVJR1Z5Y205eUlHWjFibU4wYVc5dUlIUm9ZWFFnZEdGclpYTWdZU0JRWVhKelpTNUZjbkp2Y2lCaGJtUWdkMmxzYkNCaVpTQmpZV3hzWldRZ2FXWWdkR2hsSUhCMWMyaGNiaUFnSUNvZ1ptRnBiR1ZrTGx4dUlDQWdLaUJBY21WMGRYSnVJSHRRWVhKelpTNVFjbTl0YVhObGZTQkJJSEJ5YjIxcGMyVWdkR2hoZENCcGN5Qm1kV3htYVd4c1pXUWdkMmhsYmlCMGFHVWdjSFZ6YUNCeVpYRjFaWE4wWEc0Z0lDQXFJQ0FnSUNCamIyMXdiR1YwWlhNdVhHNGdJQ0FxTDF4dUlDQlFZWEp6WlM1UWRYTm9Mbk5sYm1RZ1BTQm1kVzVqZEdsdmJpaGtZWFJoTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzVjYmlBZ0lDQnBaaUFvWkdGMFlTNTNhR1Z5WlNrZ2UxeHVJQ0FnSUNBZ1pHRjBZUzUzYUdWeVpTQTlJR1JoZEdFdWQyaGxjbVV1ZEc5S1UwOU9LQ2t1ZDJobGNtVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR1JoZEdFdWNIVnphRjkwYVcxbEtTQjdYRzRnSUNBZ0lDQmtZWFJoTG5CMWMyaGZkR2x0WlNBOUlHUmhkR0V1Y0hWemFGOTBhVzFsTG5SdlNsTlBUaWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoa1lYUmhMbVY0Y0dseVlYUnBiMjVmZEdsdFpTa2dlMXh1SUNBZ0lDQWdaR0YwWVM1bGVIQnBjbUYwYVc5dVgzUnBiV1VnUFNCa1lYUmhMbVY0Y0dseVlYUnBiMjVmZEdsdFpTNTBiMHBUVDA0b0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9aR0YwWVM1bGVIQnBjbUYwYVc5dVgzUnBiV1VnSmlZZ1pHRjBZUzVsZUhCcGNtRjBhVzl1WDJsdWRHVnlkbUZzS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJjSWtKdmRHZ2daWGh3YVhKaGRHbHZibDkwYVcxbElHRnVaQ0JsZUhCcGNtRjBhVzl1WDJsdWRHVnlkbUZzSUdOaGJpZDBJR0psSUhObGRGd2lPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ5WlhGMVpYTjBJRDBnVUdGeWMyVXVYM0psY1hWbGMzUW9lMXh1SUNBZ0lDQWdjbTkxZEdVNklDZHdkWE5vSnl4Y2JpQWdJQ0FnSUcxbGRHaHZaRG9nSjFCUFUxUW5MRnh1SUNBZ0lDQWdaR0YwWVRvZ1pHRjBZU3hjYmlBZ0lDQWdJSFZ6WlUxaGMzUmxja3RsZVRvZ2IzQjBhVzl1Y3k1MWMyVk5ZWE4wWlhKTFpYbGNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnY21WeGRXVnpkQzVmZEdobGJsSjFia05oYkd4aVlXTnJjeWh2Y0hScGIyNXpLVHRjYmlBZ2ZUdGNibjBvZEdocGN5a3BPMXh1SWwxOSIsIi8qIFJpb3QgdjIuMi4yLCBAbGljZW5zZSBNSVQsIChjKSAyMDE1IE11dXQgSW5jLiArIGNvbnRyaWJ1dG9ycyAqL1xuXG47KGZ1bmN0aW9uKHdpbmRvdywgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0J1xuICB2YXIgcmlvdCA9IHsgdmVyc2lvbjogJ3YyLjIuMicsIHNldHRpbmdzOiB7fSB9XG5cbiAgLy8gVGhpcyBnbG9iYWxzICdjb25zdCcgaGVscHMgY29kZSBzaXplIHJlZHVjdGlvblxuXG4gIC8vIGZvciB0eXBlb2YgPT0gJycgY29tcGFyaXNvbnNcbiAgdmFyIFRfU1RSSU5HID0gJ3N0cmluZycsXG4gICAgICBUX09CSkVDVCA9ICdvYmplY3QnLFxuICAgICAgVF9VTkRFRiAgPSAndW5kZWZpbmVkJ1xuXG4gIC8vIGZvciBJRTggYW5kIHJlc3Qgb2YgdGhlIHdvcmxkXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBfdHMuY2FsbCh2KSA9PT0gJ1tvYmplY3QgQXJyYXldJyB9XG4gIH0pKClcblxuICAvLyBWZXJzaW9uIyBmb3IgSUUgOC0xMSwgMCBmb3Igb3RoZXJzXG4gIHZhciBpZVZlcnNpb24gPSAoZnVuY3Rpb24gKHdpbikge1xuICAgIHJldHVybiAod2luZG93ICYmIHdpbmRvdy5kb2N1bWVudCB8fCB7fSkuZG9jdW1lbnRNb2RlIHwgMFxuICB9KSgpXG5cbnJpb3Qub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uKGVsKSB7XG5cbiAgZWwgPSBlbCB8fCB7fVxuXG4gIHZhciBjYWxsYmFja3MgPSB7fSxcbiAgICAgIF9pZCA9IDBcblxuICBlbC5vbiA9IGZ1bmN0aW9uKGV2ZW50cywgZm4pIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIGlmICh0eXBlb2YgZm4uaWQgPT09IFRfVU5ERUYpIGZuLl9pZCA9IF9pZCsrXG5cbiAgICAgIGV2ZW50cy5yZXBsYWNlKC9cXFMrL2csIGZ1bmN0aW9uKG5hbWUsIHBvcykge1xuICAgICAgICAoY2FsbGJhY2tzW25hbWVdID0gY2FsbGJhY2tzW25hbWVdIHx8IFtdKS5wdXNoKGZuKVxuICAgICAgICBmbi50eXBlZCA9IHBvcyA+IDBcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiBlbFxuICB9XG5cbiAgZWwub2ZmID0gZnVuY3Rpb24oZXZlbnRzLCBmbikge1xuICAgIGlmIChldmVudHMgPT0gJyonKSBjYWxsYmFja3MgPSB7fVxuICAgIGVsc2Uge1xuICAgICAgZXZlbnRzLnJlcGxhY2UoL1xcUysvZywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICB2YXIgYXJyID0gY2FsbGJhY2tzW25hbWVdXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNiOyAoY2IgPSBhcnIgJiYgYXJyW2ldKTsgKytpKSB7XG4gICAgICAgICAgICBpZiAoY2IuX2lkID09IGZuLl9pZCkgYXJyLnNwbGljZShpLS0sIDEpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrc1tuYW1lXSA9IFtdXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiBlbFxuICB9XG5cbiAgLy8gb25seSBzaW5nbGUgZXZlbnQgc3VwcG9ydGVkXG4gIGVsLm9uZSA9IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgZnVuY3Rpb24gb24oKSB7XG4gICAgICBlbC5vZmYobmFtZSwgb24pXG4gICAgICBmbi5hcHBseShlbCwgYXJndW1lbnRzKVxuICAgIH1cbiAgICByZXR1cm4gZWwub24obmFtZSwgb24pXG4gIH1cblxuICBlbC50cmlnZ2VyID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICBmbnMgPSBjYWxsYmFja3NbbmFtZV0gfHwgW11cblxuICAgIGZvciAodmFyIGkgPSAwLCBmbjsgKGZuID0gZm5zW2ldKTsgKytpKSB7XG4gICAgICBpZiAoIWZuLmJ1c3kpIHtcbiAgICAgICAgZm4uYnVzeSA9IDFcbiAgICAgICAgZm4uYXBwbHkoZWwsIGZuLnR5cGVkID8gW25hbWVdLmNvbmNhdChhcmdzKSA6IGFyZ3MpXG4gICAgICAgIGlmIChmbnNbaV0gIT09IGZuKSB7IGktLSB9XG4gICAgICAgIGZuLmJ1c3kgPSAwXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNhbGxiYWNrcy5hbGwgJiYgbmFtZSAhPSAnYWxsJykge1xuICAgICAgZWwudHJpZ2dlci5hcHBseShlbCwgWydhbGwnLCBuYW1lXS5jb25jYXQoYXJncykpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVsXG4gIH1cblxuICByZXR1cm4gZWxcblxufVxucmlvdC5taXhpbiA9IChmdW5jdGlvbigpIHtcbiAgdmFyIG1peGlucyA9IHt9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUsIG1peGluKSB7XG4gICAgaWYgKCFtaXhpbikgcmV0dXJuIG1peGluc1tuYW1lXVxuICAgIG1peGluc1tuYW1lXSA9IG1peGluXG4gIH1cblxufSkoKVxuXG47KGZ1bmN0aW9uKHJpb3QsIGV2dCwgd2luKSB7XG5cbiAgLy8gYnJvd3NlcnMgb25seVxuICBpZiAoIXdpbikgcmV0dXJuXG5cbiAgdmFyIGxvYyA9IHdpbi5sb2NhdGlvbixcbiAgICAgIGZucyA9IHJpb3Qub2JzZXJ2YWJsZSgpLFxuICAgICAgc3RhcnRlZCA9IGZhbHNlLFxuICAgICAgY3VycmVudFxuXG4gIGZ1bmN0aW9uIGhhc2goKSB7XG4gICAgcmV0dXJuIGxvYy5ocmVmLnNwbGl0KCcjJylbMV0gfHwgJydcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlcihwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguc3BsaXQoJy8nKVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdChwYXRoKSB7XG4gICAgaWYgKHBhdGgudHlwZSkgcGF0aCA9IGhhc2goKVxuXG4gICAgaWYgKHBhdGggIT0gY3VycmVudCkge1xuICAgICAgZm5zLnRyaWdnZXIuYXBwbHkobnVsbCwgWydIJ10uY29uY2F0KHBhcnNlcihwYXRoKSkpXG4gICAgICBjdXJyZW50ID0gcGF0aFxuICAgIH1cbiAgfVxuXG4gIHZhciByID0gcmlvdC5yb3V0ZSA9IGZ1bmN0aW9uKGFyZykge1xuICAgIC8vIHN0cmluZ1xuICAgIGlmIChhcmdbMF0pIHtcbiAgICAgIGxvYy5oYXNoID0gYXJnXG4gICAgICBlbWl0KGFyZylcblxuICAgIC8vIGZ1bmN0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGZucy5vbignSCcsIGFyZylcbiAgICB9XG4gIH1cblxuICByLmV4ZWMgPSBmdW5jdGlvbihmbikge1xuICAgIGZuLmFwcGx5KG51bGwsIHBhcnNlcihoYXNoKCkpKVxuICB9XG5cbiAgci5wYXJzZXIgPSBmdW5jdGlvbihmbikge1xuICAgIHBhcnNlciA9IGZuXG4gIH1cblxuICByLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzdGFydGVkKSByZXR1cm5cbiAgICB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKGV2dCwgZW1pdCwgZmFsc2UpIDogd2luLmRldGFjaEV2ZW50KCdvbicgKyBldnQsIGVtaXQpXG4gICAgZm5zLm9mZignKicpXG4gICAgc3RhcnRlZCA9IGZhbHNlXG4gIH1cblxuICByLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzdGFydGVkKSByZXR1cm5cbiAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lciA/IHdpbi5hZGRFdmVudExpc3RlbmVyKGV2dCwgZW1pdCwgZmFsc2UpIDogd2luLmF0dGFjaEV2ZW50KCdvbicgKyBldnQsIGVtaXQpXG4gICAgc3RhcnRlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGF1dG9zdGFydCB0aGUgcm91dGVyXG4gIHIuc3RhcnQoKVxuXG59KShyaW90LCAnaGFzaGNoYW5nZScsIHdpbmRvdylcbi8qXG5cbi8vLy8gSG93IGl0IHdvcmtzP1xuXG5cblRocmVlIHdheXM6XG5cbjEuIEV4cHJlc3Npb25zOiB0bXBsKCd7IHZhbHVlIH0nLCBkYXRhKS5cbiAgIFJldHVybnMgdGhlIHJlc3VsdCBvZiBldmFsdWF0ZWQgZXhwcmVzc2lvbiBhcyBhIHJhdyBvYmplY3QuXG5cbjIuIFRlbXBsYXRlczogdG1wbCgnSGkgeyBuYW1lIH0geyBzdXJuYW1lIH0nLCBkYXRhKS5cbiAgIFJldHVybnMgYSBzdHJpbmcgd2l0aCBldmFsdWF0ZWQgZXhwcmVzc2lvbnMuXG5cbjMuIEZpbHRlcnM6IHRtcGwoJ3sgc2hvdzogIWRvbmUsIGhpZ2hsaWdodDogYWN0aXZlIH0nLCBkYXRhKS5cbiAgIFJldHVybnMgYSBzcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiB0cnVlaXNoIGtleXMgKG1haW5seVxuICAgdXNlZCBmb3Igc2V0dGluZyBodG1sIGNsYXNzZXMpLCBlLmcuIFwic2hvdyBoaWdobGlnaHRcIi5cblxuXG4vLyBUZW1wbGF0ZSBleGFtcGxlc1xuXG50bXBsKCd7IHRpdGxlIHx8IFwiVW50aXRsZWRcIiB9JywgZGF0YSlcbnRtcGwoJ1Jlc3VsdHMgYXJlIHsgcmVzdWx0cyA/IFwicmVhZHlcIiA6IFwibG9hZGluZ1wiIH0nLCBkYXRhKVxudG1wbCgnVG9kYXkgaXMgeyBuZXcgRGF0ZSgpIH0nLCBkYXRhKVxudG1wbCgneyBtZXNzYWdlLmxlbmd0aCA+IDE0MCAmJiBcIk1lc3NhZ2UgaXMgdG9vIGxvbmdcIiB9JywgZGF0YSlcbnRtcGwoJ1RoaXMgaXRlbSBnb3QgeyBNYXRoLnJvdW5kKHJhdGluZykgfSBzdGFycycsIGRhdGEpXG50bXBsKCc8aDE+eyB0aXRsZSB9PC9oMT57IGJvZHkgfScsIGRhdGEpXG5cblxuLy8gRmFsc3kgZXhwcmVzc2lvbnMgaW4gdGVtcGxhdGVzXG5cbkluIHRlbXBsYXRlcyAoYXMgb3Bwb3NlZCB0byBzaW5nbGUgZXhwcmVzc2lvbnMpIGFsbCBmYWxzeSB2YWx1ZXNcbmV4Y2VwdCB6ZXJvICh1bmRlZmluZWQvbnVsbC9mYWxzZSkgd2lsbCBkZWZhdWx0IHRvIGVtcHR5IHN0cmluZzpcblxudG1wbCgneyB1bmRlZmluZWQgfSAtIHsgZmFsc2UgfSAtIHsgbnVsbCB9IC0geyAwIH0nLCB7fSlcbi8vIHdpbGwgcmV0dXJuOiBcIiAtIC0gLSAwXCJcblxuKi9cblxuXG52YXIgYnJhY2tldHMgPSAoZnVuY3Rpb24ob3JpZykge1xuXG4gIHZhciBjYWNoZWRCcmFja2V0cyxcbiAgICAgIHIsXG4gICAgICBiLFxuICAgICAgcmUgPSAvW3t9XS9nXG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcblxuICAgIC8vIG1ha2Ugc3VyZSB3ZSB1c2UgdGhlIGN1cnJlbnQgc2V0dGluZ1xuICAgIHZhciBzID0gcmlvdC5zZXR0aW5ncy5icmFja2V0cyB8fCBvcmlnXG5cbiAgICAvLyByZWNyZWF0ZSBjYWNoZWQgdmFycyBpZiBuZWVkZWRcbiAgICBpZiAoY2FjaGVkQnJhY2tldHMgIT09IHMpIHtcbiAgICAgIGNhY2hlZEJyYWNrZXRzID0gc1xuICAgICAgYiA9IHMuc3BsaXQoJyAnKVxuICAgICAgciA9IGIubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnJlcGxhY2UoLyg/PS4pL2csICdcXFxcJykgfSlcbiAgICB9XG5cbiAgICAvLyBpZiByZWdleHAgZ2l2ZW4sIHJld3JpdGUgaXQgd2l0aCBjdXJyZW50IGJyYWNrZXRzIChvbmx5IGlmIGRpZmZlciBmcm9tIGRlZmF1bHQpXG4gICAgcmV0dXJuIHggaW5zdGFuY2VvZiBSZWdFeHAgPyAoXG4gICAgICAgIHMgPT09IG9yaWcgPyB4IDpcbiAgICAgICAgbmV3IFJlZ0V4cCh4LnNvdXJjZS5yZXBsYWNlKHJlLCBmdW5jdGlvbihiKSB7IHJldHVybiByW35+KGIgPT09ICd9JyldIH0pLCB4Lmdsb2JhbCA/ICdnJyA6ICcnKVxuICAgICAgKSA6XG4gICAgICAvLyBlbHNlLCBnZXQgc3BlY2lmaWMgYnJhY2tldFxuICAgICAgYlt4XVxuICB9XG59KSgneyB9JylcblxuXG52YXIgdG1wbCA9IChmdW5jdGlvbigpIHtcblxuICB2YXIgY2FjaGUgPSB7fSxcbiAgICAgIHJlVmFycyA9IC8oWydcIlxcL10pLio/W15cXFxcXVxcMXxcXC5cXHcqfFxcdyo6fFxcYig/Oig/Om5ld3x0eXBlb2Z8aW58aW5zdGFuY2VvZikgfCg/OnRoaXN8dHJ1ZXxmYWxzZXxudWxsfHVuZGVmaW5lZClcXGJ8ZnVuY3Rpb24gKlxcKCl8KFthLXpfJF1cXHcqKS9naVxuICAgICAgICAgICAgICAvLyBbIDEgICAgICAgICAgICAgICBdWyAyICBdWyAzIF1bIDQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVsgNSAgICAgICBdXG4gICAgICAgICAgICAgIC8vIGZpbmQgdmFyaWFibGUgbmFtZXM6XG4gICAgICAgICAgICAgIC8vIDEuIHNraXAgcXVvdGVkIHN0cmluZ3MgYW5kIHJlZ2V4cHM6IFwiYSBiXCIsICdhIGInLCAnYSBcXCdiXFwnJywgL2EgYi9cbiAgICAgICAgICAgICAgLy8gMi4gc2tpcCBvYmplY3QgcHJvcGVydGllczogLm5hbWVcbiAgICAgICAgICAgICAgLy8gMy4gc2tpcCBvYmplY3QgbGl0ZXJhbHM6IG5hbWU6XG4gICAgICAgICAgICAgIC8vIDQuIHNraXAgamF2YXNjcmlwdCBrZXl3b3Jkc1xuICAgICAgICAgICAgICAvLyA1LiBtYXRjaCB2YXIgbmFtZVxuXG4gIC8vIGJ1aWxkIGEgdGVtcGxhdGUgKG9yIGdldCBpdCBmcm9tIGNhY2hlKSwgcmVuZGVyIHdpdGggZGF0YVxuICByZXR1cm4gZnVuY3Rpb24oc3RyLCBkYXRhKSB7XG4gICAgcmV0dXJuIHN0ciAmJiAoY2FjaGVbc3RyXSA9IGNhY2hlW3N0cl0gfHwgdG1wbChzdHIpKShkYXRhKVxuICB9XG5cblxuICAvLyBjcmVhdGUgYSB0ZW1wbGF0ZSBpbnN0YW5jZVxuXG4gIGZ1bmN0aW9uIHRtcGwocywgcCkge1xuXG4gICAgLy8gZGVmYXVsdCB0ZW1wbGF0ZSBzdHJpbmcgdG8ge31cbiAgICBzID0gKHMgfHwgKGJyYWNrZXRzKDApICsgYnJhY2tldHMoMSkpKVxuXG4gICAgICAvLyB0ZW1wb3JhcmlseSBjb252ZXJ0IFxceyBhbmQgXFx9IHRvIGEgbm9uLWNoYXJhY3RlclxuICAgICAgLnJlcGxhY2UoYnJhY2tldHMoL1xcXFx7L2cpLCAnXFx1RkZGMCcpXG4gICAgICAucmVwbGFjZShicmFja2V0cygvXFxcXH0vZyksICdcXHVGRkYxJylcblxuICAgIC8vIHNwbGl0IHN0cmluZyB0byBleHByZXNzaW9uIGFuZCBub24tZXhwcmVzaW9uIHBhcnRzXG4gICAgcCA9IHNwbGl0KHMsIGV4dHJhY3QocywgYnJhY2tldHMoL3svKSwgYnJhY2tldHMoL30vKSkpXG5cbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdkJywgJ3JldHVybiAnICsgKFxuXG4gICAgICAvLyBpcyBpdCBhIHNpbmdsZSBleHByZXNzaW9uIG9yIGEgdGVtcGxhdGU/IGkuZS4ge3h9IG9yIDxiPnt4fTwvYj5cbiAgICAgICFwWzBdICYmICFwWzJdICYmICFwWzNdXG5cbiAgICAgICAgLy8gaWYgZXhwcmVzc2lvbiwgZXZhbHVhdGUgaXRcbiAgICAgICAgPyBleHByKHBbMV0pXG5cbiAgICAgICAgLy8gaWYgdGVtcGxhdGUsIGV2YWx1YXRlIGFsbCBleHByZXNzaW9ucyBpbiBpdFxuICAgICAgICA6ICdbJyArIHAubWFwKGZ1bmN0aW9uKHMsIGkpIHtcblxuICAgICAgICAgICAgLy8gaXMgaXQgYW4gZXhwcmVzc2lvbiBvciBhIHN0cmluZyAoZXZlcnkgc2Vjb25kIHBhcnQgaXMgYW4gZXhwcmVzc2lvbilcbiAgICAgICAgICByZXR1cm4gaSAlIDJcblxuICAgICAgICAgICAgICAvLyBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbnNcbiAgICAgICAgICAgICAgPyBleHByKHMsIHRydWUpXG5cbiAgICAgICAgICAgICAgLy8gcHJvY2VzcyBzdHJpbmcgcGFydHMgb2YgdGhlIHRlbXBsYXRlOlxuICAgICAgICAgICAgICA6ICdcIicgKyBzXG5cbiAgICAgICAgICAgICAgICAgIC8vIHByZXNlcnZlIG5ldyBsaW5lc1xuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxuXG4gICAgICAgICAgICAgICAgICAvLyBlc2NhcGUgcXVvdGVzXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpXG5cbiAgICAgICAgICAgICAgICArICdcIidcblxuICAgICAgICB9KS5qb2luKCcsJykgKyAnXS5qb2luKFwiXCIpJ1xuICAgICAgKVxuXG4gICAgICAvLyBicmluZyBlc2NhcGVkIHsgYW5kIH0gYmFja1xuICAgICAgLnJlcGxhY2UoL1xcdUZGRjAvZywgYnJhY2tldHMoMCkpXG4gICAgICAucmVwbGFjZSgvXFx1RkZGMS9nLCBicmFja2V0cygxKSlcblxuICAgICsgJzsnKVxuXG4gIH1cblxuXG4gIC8vIHBhcnNlIHsgLi4uIH0gZXhwcmVzc2lvblxuXG4gIGZ1bmN0aW9uIGV4cHIocywgbikge1xuICAgIHMgPSBzXG5cbiAgICAgIC8vIGNvbnZlcnQgbmV3IGxpbmVzIHRvIHNwYWNlc1xuICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnICcpXG5cbiAgICAgIC8vIHRyaW0gd2hpdGVzcGFjZSwgYnJhY2tldHMsIHN0cmlwIGNvbW1lbnRzXG4gICAgICAucmVwbGFjZShicmFja2V0cygvXlt7IF0rfFsgfV0rJHxcXC9cXCouKz9cXCpcXC8vZyksICcnKVxuXG4gICAgLy8gaXMgaXQgYW4gb2JqZWN0IGxpdGVyYWw/IGkuZS4geyBrZXkgOiB2YWx1ZSB9XG4gICAgcmV0dXJuIC9eXFxzKltcXHctIFwiJ10rICo6Ly50ZXN0KHMpXG5cbiAgICAgIC8vIGlmIG9iamVjdCBsaXRlcmFsLCByZXR1cm4gdHJ1ZWlzaCBrZXlzXG4gICAgICAvLyBlLmcuOiB7IHNob3c6IGlzT3BlbigpLCBkb25lOiBpdGVtLmRvbmUgfSAtPiBcInNob3cgZG9uZVwiXG4gICAgICA/ICdbJyArXG5cbiAgICAgICAgICAvLyBleHRyYWN0IGtleTp2YWwgcGFpcnMsIGlnbm9yaW5nIGFueSBuZXN0ZWQgb2JqZWN0c1xuICAgICAgICAgIGV4dHJhY3QocyxcblxuICAgICAgICAgICAgICAvLyBuYW1lIHBhcnQ6IG5hbWU6LCBcIm5hbWVcIjosICduYW1lJzosIG5hbWUgOlxuICAgICAgICAgICAgICAvW1wiJyBdKltcXHctIF0rW1wiJyBdKjovLFxuXG4gICAgICAgICAgICAgIC8vIGV4cHJlc3Npb24gcGFydDogZXZlcnl0aGluZyB1cHRvIGEgY29tbWEgZm9sbG93ZWQgYnkgYSBuYW1lIChzZWUgYWJvdmUpIG9yIGVuZCBvZiBsaW5lXG4gICAgICAgICAgICAgIC8sKD89W1wiJyBdKltcXHctIF0rW1wiJyBdKjopfH18JC9cbiAgICAgICAgICAgICAgKS5tYXAoZnVuY3Rpb24ocGFpcikge1xuXG4gICAgICAgICAgICAgICAgLy8gZ2V0IGtleSwgdmFsIHBhcnRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhaXIucmVwbGFjZSgvXlsgXCInXSooLis/KVsgXCInXSo6ICooLis/KSw/ICokLywgZnVuY3Rpb24oXywgaywgdikge1xuXG4gICAgICAgICAgICAgICAgICAvLyB3cmFwIGFsbCBjb25kaXRpb25hbCBwYXJ0cyB0byBpZ25vcmUgZXJyb3JzXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdi5yZXBsYWNlKC9bXiZ8PSE+PF0rL2csIHdyYXApICsgJz9cIicgKyBrICsgJ1wiOlwiXCIsJ1xuXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICB9KS5qb2luKCcnKVxuXG4gICAgICAgICsgJ10uam9pbihcIiBcIikudHJpbSgpJ1xuXG4gICAgICAvLyBpZiBqcyBleHByZXNzaW9uLCBldmFsdWF0ZSBhcyBqYXZhc2NyaXB0XG4gICAgICA6IHdyYXAocywgbilcblxuICB9XG5cblxuICAvLyBleGVjdXRlIGpzIHcvbyBicmVha2luZyBvbiBlcnJvcnMgb3IgdW5kZWZpbmVkIHZhcnNcblxuICBmdW5jdGlvbiB3cmFwKHMsIG5vbnVsbCkge1xuICAgIHMgPSBzLnRyaW0oKVxuICAgIHJldHVybiAhcyA/ICcnIDogJyhmdW5jdGlvbih2KXt0cnl7dj0nXG5cbiAgICAgICAgLy8gcHJlZml4IHZhcnMgKG5hbWUgPT4gZGF0YS5uYW1lKVxuICAgICAgICArIChzLnJlcGxhY2UocmVWYXJzLCBmdW5jdGlvbihzLCBfLCB2KSB7IHJldHVybiB2ID8gJyhkLicrdisnPT09dW5kZWZpbmVkPycrKHR5cGVvZiB3aW5kb3cgPT0gJ3VuZGVmaW5lZCcgPyAnZ2xvYmFsLicgOiAnd2luZG93LicpK3YrJzpkLicrdisnKScgOiBzIH0pXG5cbiAgICAgICAgICAvLyBicmVhayB0aGUgZXhwcmVzc2lvbiBpZiBpdHMgZW1wdHkgKHJlc3VsdGluZyBpbiB1bmRlZmluZWQgdmFsdWUpXG4gICAgICAgICAgfHwgJ3gnKVxuICAgICAgKyAnfWNhdGNoKGUpeydcbiAgICAgICsgJ31maW5hbGx5e3JldHVybiAnXG5cbiAgICAgICAgLy8gZGVmYXVsdCB0byBlbXB0eSBzdHJpbmcgZm9yIGZhbHN5IHZhbHVlcyBleGNlcHQgemVyb1xuICAgICAgICArIChub251bGwgPT09IHRydWUgPyAnIXYmJnYhPT0wP1wiXCI6dicgOiAndicpXG5cbiAgICAgICsgJ319KS5jYWxsKGQpJ1xuICB9XG5cblxuICAvLyBzcGxpdCBzdHJpbmcgYnkgYW4gYXJyYXkgb2Ygc3Vic3RyaW5nc1xuXG4gIGZ1bmN0aW9uIHNwbGl0KHN0ciwgc3Vic3RyaW5ncykge1xuICAgIHZhciBwYXJ0cyA9IFtdXG4gICAgc3Vic3RyaW5ncy5tYXAoZnVuY3Rpb24oc3ViLCBpKSB7XG5cbiAgICAgIC8vIHB1c2ggbWF0Y2hlZCBleHByZXNzaW9uIGFuZCBwYXJ0IGJlZm9yZSBpdFxuICAgICAgaSA9IHN0ci5pbmRleE9mKHN1YilcbiAgICAgIHBhcnRzLnB1c2goc3RyLnNsaWNlKDAsIGkpLCBzdWIpXG4gICAgICBzdHIgPSBzdHIuc2xpY2UoaSArIHN1Yi5sZW5ndGgpXG4gICAgfSlcblxuICAgIC8vIHB1c2ggdGhlIHJlbWFpbmluZyBwYXJ0XG4gICAgcmV0dXJuIHBhcnRzLmNvbmNhdChzdHIpXG4gIH1cblxuXG4gIC8vIG1hdGNoIHN0cmluZ3MgYmV0d2VlbiBvcGVuaW5nIGFuZCBjbG9zaW5nIHJlZ2V4cCwgc2tpcHBpbmcgYW55IGlubmVyL25lc3RlZCBtYXRjaGVzXG5cbiAgZnVuY3Rpb24gZXh0cmFjdChzdHIsIG9wZW4sIGNsb3NlKSB7XG5cbiAgICB2YXIgc3RhcnQsXG4gICAgICAgIGxldmVsID0gMCxcbiAgICAgICAgbWF0Y2hlcyA9IFtdLFxuICAgICAgICByZSA9IG5ldyBSZWdFeHAoJygnK29wZW4uc291cmNlKycpfCgnK2Nsb3NlLnNvdXJjZSsnKScsICdnJylcblxuICAgIHN0ci5yZXBsYWNlKHJlLCBmdW5jdGlvbihfLCBvcGVuLCBjbG9zZSwgcG9zKSB7XG5cbiAgICAgIC8vIGlmIG91dGVyIGlubmVyIGJyYWNrZXQsIG1hcmsgcG9zaXRpb25cbiAgICAgIGlmICghbGV2ZWwgJiYgb3Blbikgc3RhcnQgPSBwb3NcblxuICAgICAgLy8gaW4oZGUpY3JlYXNlIGJyYWNrZXQgbGV2ZWxcbiAgICAgIGxldmVsICs9IG9wZW4gPyAxIDogLTFcblxuICAgICAgLy8gaWYgb3V0ZXIgY2xvc2luZyBicmFja2V0LCBncmFiIHRoZSBtYXRjaFxuICAgICAgaWYgKCFsZXZlbCAmJiBjbG9zZSAhPSBudWxsKSBtYXRjaGVzLnB1c2goc3RyLnNsaWNlKHN0YXJ0LCBwb3MrY2xvc2UubGVuZ3RoKSlcblxuICAgIH0pXG5cbiAgICByZXR1cm4gbWF0Y2hlc1xuICB9XG5cbn0pKClcblxuLy8geyBrZXksIGkgaW4gaXRlbXN9IC0+IHsga2V5LCBpLCBpdGVtcyB9XG5mdW5jdGlvbiBsb29wS2V5cyhleHByKSB7XG4gIHZhciBiMCA9IGJyYWNrZXRzKDApLFxuICAgICAgZWxzID0gZXhwci5zbGljZShiMC5sZW5ndGgpLm1hdGNoKC9eXFxzKihcXFMrPylcXHMqKD86LFxccyooXFxTKykpP1xccytpblxccysoLispJC8pXG4gIHJldHVybiBlbHMgPyB7IGtleTogZWxzWzFdLCBwb3M6IGVsc1syXSwgdmFsOiBiMCArIGVsc1szXSB9IDogeyB2YWw6IGV4cHIgfVxufVxuXG5mdW5jdGlvbiBta2l0ZW0oZXhwciwga2V5LCB2YWwpIHtcbiAgdmFyIGl0ZW0gPSB7fVxuICBpdGVtW2V4cHIua2V5XSA9IGtleVxuICBpZiAoZXhwci5wb3MpIGl0ZW1bZXhwci5wb3NdID0gdmFsXG4gIHJldHVybiBpdGVtXG59XG5cblxuLyogQmV3YXJlOiBoZWF2eSBzdHVmZiAqL1xuZnVuY3Rpb24gX2VhY2goZG9tLCBwYXJlbnQsIGV4cHIpIHtcblxuICByZW1BdHRyKGRvbSwgJ2VhY2gnKVxuXG4gIHZhciB0YWdOYW1lID0gZ2V0VGFnTmFtZShkb20pLFxuICAgICAgdGVtcGxhdGUgPSBkb20ub3V0ZXJIVE1MLFxuICAgICAgaGFzSW1wbCA9ICEhdGFnSW1wbFt0YWdOYW1lXSxcbiAgICAgIGltcGwgPSB0YWdJbXBsW3RhZ05hbWVdIHx8IHtcbiAgICAgICAgdG1wbDogdGVtcGxhdGVcbiAgICAgIH0sXG4gICAgICByb290ID0gZG9tLnBhcmVudE5vZGUsXG4gICAgICBwbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ3Jpb3QgcGxhY2Vob2xkZXInKSxcbiAgICAgIHRhZ3MgPSBbXSxcbiAgICAgIGNoaWxkID0gZ2V0VGFnKGRvbSksXG4gICAgICBjaGVja3N1bVxuXG4gIHJvb3QuaW5zZXJ0QmVmb3JlKHBsYWNlaG9sZGVyLCBkb20pXG5cbiAgZXhwciA9IGxvb3BLZXlzKGV4cHIpXG5cbiAgLy8gY2xlYW4gdGVtcGxhdGUgY29kZVxuICBwYXJlbnRcbiAgICAub25lKCdwcmVtb3VudCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChyb290LnN0dWIpIHJvb3QgPSBwYXJlbnQucm9vdFxuICAgICAgLy8gcmVtb3ZlIHRoZSBvcmlnaW5hbCBET00gbm9kZVxuICAgICAgZG9tLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZG9tKVxuICAgIH0pXG4gICAgLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaXRlbXMgPSB0bXBsKGV4cHIudmFsLCBwYXJlbnQpXG5cbiAgICAgIC8vIG9iamVjdCBsb29wLiBhbnkgY2hhbmdlcyBjYXVzZSBmdWxsIHJlZHJhd1xuICAgICAgaWYgKCFpc0FycmF5KGl0ZW1zKSkge1xuXG4gICAgICAgIGNoZWNrc3VtID0gaXRlbXMgPyBKU09OLnN0cmluZ2lmeShpdGVtcykgOiAnJ1xuXG4gICAgICAgIGl0ZW1zID0gIWl0ZW1zID8gW10gOlxuICAgICAgICAgIE9iamVjdC5rZXlzKGl0ZW1zKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG1raXRlbShleHByLCBrZXksIGl0ZW1zW2tleV0pXG4gICAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgdmFyIGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICAgICAgaSA9IHRhZ3MubGVuZ3RoLFxuICAgICAgICAgIGogPSBpdGVtcy5sZW5ndGhcblxuICAgICAgLy8gdW5tb3VudCBsZWZ0b3ZlciBpdGVtc1xuICAgICAgd2hpbGUgKGkgPiBqKSB7XG4gICAgICAgIHRhZ3NbLS1pXS51bm1vdW50KClcbiAgICAgICAgdGFncy5zcGxpY2UoaSwgMSlcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGo7ICsraSkge1xuICAgICAgICB2YXIgX2l0ZW0gPSAhY2hlY2tzdW0gJiYgISFleHByLmtleSA/IG1raXRlbShleHByLCBpdGVtc1tpXSwgaSkgOiBpdGVtc1tpXVxuXG4gICAgICAgIGlmICghdGFnc1tpXSkge1xuICAgICAgICAgIC8vIG1vdW50IG5ld1xuICAgICAgICAgICh0YWdzW2ldID0gbmV3IFRhZyhpbXBsLCB7XG4gICAgICAgICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICAgICAgICBpc0xvb3A6IHRydWUsXG4gICAgICAgICAgICAgIGhhc0ltcGw6IGhhc0ltcGwsXG4gICAgICAgICAgICAgIHJvb3Q6IGhhc0ltcGwgPyBkb20uY2xvbmVOb2RlKCkgOiByb290LFxuICAgICAgICAgICAgICBpdGVtOiBfaXRlbVxuICAgICAgICAgICAgfSwgZG9tLmlubmVySFRNTClcbiAgICAgICAgICApLm1vdW50KClcblxuICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQodGFnc1tpXS5yb290KVxuICAgICAgICB9IGVsc2VcbiAgICAgICAgICB0YWdzW2ldLnVwZGF0ZShfaXRlbSlcblxuICAgICAgICB0YWdzW2ldLl9pdGVtID0gX2l0ZW1cblxuICAgICAgfVxuXG4gICAgICByb290Lmluc2VydEJlZm9yZShmcmFnLCBwbGFjZWhvbGRlcilcblxuICAgICAgaWYgKGNoaWxkKSBwYXJlbnQudGFnc1t0YWdOYW1lXSA9IHRhZ3NcblxuICAgIH0pLm9uZSgndXBkYXRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwYXJlbnQpLy8gb25seSBzZXQgbmV3IHZhbHVlc1xuICAgICAgd2Fsayhyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIC8vIG9ubHkgc2V0IGVsZW1lbnQgbm9kZSBhbmQgbm90IGlzTG9vcFxuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxICYmICFub2RlLmlzTG9vcCAmJiAhbm9kZS5fbG9vcGVkKSB7XG4gICAgICAgICAgbm9kZS5fdmlzaXRlZCA9IGZhbHNlIC8vIHJlc2V0IF92aXNpdGVkIGZvciBsb29wIG5vZGVcbiAgICAgICAgICBub2RlLl9sb29wZWQgPSB0cnVlIC8vIGF2b2lkIHNldCBtdWx0aXBsZSBlYWNoXG4gICAgICAgICAgc2V0TmFtZWQobm9kZSwgcGFyZW50LCBrZXlzKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG5cbn1cblxuXG5mdW5jdGlvbiBwYXJzZU5hbWVkRWxlbWVudHMocm9vdCwgcGFyZW50LCBjaGlsZFRhZ3MpIHtcblxuICB3YWxrKHJvb3QsIGZ1bmN0aW9uKGRvbSkge1xuICAgIGlmIChkb20ubm9kZVR5cGUgPT0gMSkge1xuICAgICAgZG9tLmlzTG9vcCA9IGRvbS5pc0xvb3AgfHwgKGRvbS5wYXJlbnROb2RlICYmIGRvbS5wYXJlbnROb2RlLmlzTG9vcCB8fCBkb20uZ2V0QXR0cmlidXRlKCdlYWNoJykpID8gMSA6IDBcblxuICAgICAgLy8gY3VzdG9tIGNoaWxkIHRhZ1xuICAgICAgdmFyIGNoaWxkID0gZ2V0VGFnKGRvbSlcblxuICAgICAgaWYgKGNoaWxkICYmICFkb20uaXNMb29wKSB7XG4gICAgICAgIHZhciB0YWcgPSBuZXcgVGFnKGNoaWxkLCB7IHJvb3Q6IGRvbSwgcGFyZW50OiBwYXJlbnQgfSwgZG9tLmlubmVySFRNTCksXG4gICAgICAgICAgICB0YWdOYW1lID0gZ2V0VGFnTmFtZShkb20pLFxuICAgICAgICAgICAgcHRhZyA9IHBhcmVudCxcbiAgICAgICAgICAgIGNhY2hlZFRhZ1xuXG4gICAgICAgIHdoaWxlICghZ2V0VGFnKHB0YWcucm9vdCkpIHtcbiAgICAgICAgICBpZiAoIXB0YWcucGFyZW50KSBicmVha1xuICAgICAgICAgIHB0YWcgPSBwdGFnLnBhcmVudFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZml4IGZvciB0aGUgcGFyZW50IGF0dHJpYnV0ZSBpbiB0aGUgbG9vcGVkIGVsZW1lbnRzXG4gICAgICAgIHRhZy5wYXJlbnQgPSBwdGFnXG5cbiAgICAgICAgY2FjaGVkVGFnID0gcHRhZy50YWdzW3RhZ05hbWVdXG5cbiAgICAgICAgLy8gaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNoaWxkcmVuIHRhZ3MgaGF2aW5nIHRoZSBzYW1lIG5hbWVcbiAgICAgICAgaWYgKGNhY2hlZFRhZykge1xuICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgdGFncyBwcm9wZXJ0eSBpcyBub3QgeWV0IGFuIGFycmF5XG4gICAgICAgICAgLy8gY3JlYXRlIGl0IGFkZGluZyB0aGUgZmlyc3QgY2FjaGVkIHRhZ1xuICAgICAgICAgIGlmICghaXNBcnJheShjYWNoZWRUYWcpKVxuICAgICAgICAgICAgcHRhZy50YWdzW3RhZ05hbWVdID0gW2NhY2hlZFRhZ11cbiAgICAgICAgICAvLyBhZGQgdGhlIG5ldyBuZXN0ZWQgdGFnIHRvIHRoZSBhcnJheVxuICAgICAgICAgIHB0YWcudGFnc1t0YWdOYW1lXS5wdXNoKHRhZylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdGFnLnRhZ3NbdGFnTmFtZV0gPSB0YWdcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVtcHR5IHRoZSBjaGlsZCBub2RlIG9uY2Ugd2UgZ290IGl0cyB0ZW1wbGF0ZVxuICAgICAgICAvLyB0byBhdm9pZCB0aGF0IGl0cyBjaGlsZHJlbiBnZXQgY29tcGlsZWQgbXVsdGlwbGUgdGltZXNcbiAgICAgICAgZG9tLmlubmVySFRNTCA9ICcnXG4gICAgICAgIGNoaWxkVGFncy5wdXNoKHRhZylcbiAgICAgIH1cblxuICAgICAgaWYgKCFkb20uaXNMb29wKVxuICAgICAgICBzZXROYW1lZChkb20sIHBhcmVudCwgW10pXG4gICAgfVxuXG4gIH0pXG5cbn1cblxuZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9ucyhyb290LCB0YWcsIGV4cHJlc3Npb25zKSB7XG5cbiAgZnVuY3Rpb24gYWRkRXhwcihkb20sIHZhbCwgZXh0cmEpIHtcbiAgICBpZiAodmFsLmluZGV4T2YoYnJhY2tldHMoMCkpID49IDApIHtcbiAgICAgIHZhciBleHByID0geyBkb206IGRvbSwgZXhwcjogdmFsIH1cbiAgICAgIGV4cHJlc3Npb25zLnB1c2goZXh0ZW5kKGV4cHIsIGV4dHJhKSlcbiAgICB9XG4gIH1cblxuICB3YWxrKHJvb3QsIGZ1bmN0aW9uKGRvbSkge1xuICAgIHZhciB0eXBlID0gZG9tLm5vZGVUeXBlXG5cbiAgICAvLyB0ZXh0IG5vZGVcbiAgICBpZiAodHlwZSA9PSAzICYmIGRvbS5wYXJlbnROb2RlLnRhZ05hbWUgIT0gJ1NUWUxFJykgYWRkRXhwcihkb20sIGRvbS5ub2RlVmFsdWUpXG4gICAgaWYgKHR5cGUgIT0gMSkgcmV0dXJuXG5cbiAgICAvKiBlbGVtZW50ICovXG5cbiAgICAvLyBsb29wXG4gICAgdmFyIGF0dHIgPSBkb20uZ2V0QXR0cmlidXRlKCdlYWNoJylcblxuICAgIGlmIChhdHRyKSB7IF9lYWNoKGRvbSwgdGFnLCBhdHRyKTsgcmV0dXJuIGZhbHNlIH1cblxuICAgIC8vIGF0dHJpYnV0ZSBleHByZXNzaW9uc1xuICAgIGVhY2goZG9tLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHZhciBuYW1lID0gYXR0ci5uYW1lLFxuICAgICAgICBib29sID0gbmFtZS5zcGxpdCgnX18nKVsxXVxuXG4gICAgICBhZGRFeHByKGRvbSwgYXR0ci52YWx1ZSwgeyBhdHRyOiBib29sIHx8IG5hbWUsIGJvb2w6IGJvb2wgfSlcbiAgICAgIGlmIChib29sKSB7IHJlbUF0dHIoZG9tLCBuYW1lKTsgcmV0dXJuIGZhbHNlIH1cblxuICAgIH0pXG5cbiAgICAvLyBza2lwIGN1c3RvbSB0YWdzXG4gICAgaWYgKGdldFRhZyhkb20pKSByZXR1cm4gZmFsc2VcblxuICB9KVxuXG59XG5mdW5jdGlvbiBUYWcoaW1wbCwgY29uZiwgaW5uZXJIVE1MKSB7XG5cbiAgdmFyIHNlbGYgPSByaW90Lm9ic2VydmFibGUodGhpcyksXG4gICAgICBvcHRzID0gaW5oZXJpdChjb25mLm9wdHMpIHx8IHt9LFxuICAgICAgZG9tID0gbWtkb20oaW1wbC50bXBsKSxcbiAgICAgIHBhcmVudCA9IGNvbmYucGFyZW50LFxuICAgICAgaXNMb29wID0gY29uZi5pc0xvb3AsXG4gICAgICBoYXNJbXBsID0gY29uZi5oYXNJbXBsLFxuICAgICAgaXRlbSA9IGNsZWFuVXBEYXRhKGNvbmYuaXRlbSksXG4gICAgICBleHByZXNzaW9ucyA9IFtdLFxuICAgICAgY2hpbGRUYWdzID0gW10sXG4gICAgICByb290ID0gY29uZi5yb290LFxuICAgICAgZm4gPSBpbXBsLmZuLFxuICAgICAgdGFnTmFtZSA9IHJvb3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgYXR0ciA9IHt9LFxuICAgICAgcHJvcHNJblN5bmNXaXRoUGFyZW50ID0gW10sXG4gICAgICBsb29wRG9tLFxuICAgICAgVEFHX0FUVFJJQlVURVMgPSAvKFtcXHdcXC1dKylcXHM/PVxccz9bJ1wiXShbXidcIl0rKVtcIiddL2dpbVxuXG5cbiAgaWYgKGZuICYmIHJvb3QuX3RhZykge1xuICAgIHJvb3QuX3RhZy51bm1vdW50KHRydWUpXG4gIH1cblxuICAvLyBub3QgeWV0IG1vdW50ZWRcbiAgdGhpcy5pc01vdW50ZWQgPSBmYWxzZVxuICByb290LmlzTG9vcCA9IGlzTG9vcFxuXG4gIGlmIChpbXBsLmF0dHJzKSB7XG4gICAgdmFyIGF0dHJzID0gaW1wbC5hdHRycy5tYXRjaChUQUdfQVRUUklCVVRFUylcblxuICAgIGVhY2goYXR0cnMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgIHZhciBrdiA9IGEuc3BsaXQoL1xccz89XFxzPy8pXG4gICAgICByb290LnNldEF0dHJpYnV0ZShrdlswXSwga3ZbMV0ucmVwbGFjZSgvWydcIl0vZywgJycpKVxuICAgIH0pXG5cbiAgfVxuXG4gIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHRhZyBqdXN0IGNyZWF0ZWRcbiAgLy8gc28gd2Ugd2lsbCBiZSBhYmxlIHRvIG1vdW50IHRoaXMgdGFnIG11bHRpcGxlIHRpbWVzXG4gIHJvb3QuX3RhZyA9IHRoaXNcblxuICAvLyBjcmVhdGUgYSB1bmlxdWUgaWQgdG8gdGhpcyB0YWdcbiAgLy8gaXQgY291bGQgYmUgaGFuZHkgdG8gdXNlIGl0IGFsc28gdG8gaW1wcm92ZSB0aGUgdmlydHVhbCBkb20gcmVuZGVyaW5nIHNwZWVkXG4gIHRoaXMuX2lkID0gZmFzdEFicyh+fihuZXcgRGF0ZSgpLmdldFRpbWUoKSAqIE1hdGgucmFuZG9tKCkpKVxuXG4gIGV4dGVuZCh0aGlzLCB7IHBhcmVudDogcGFyZW50LCByb290OiByb290LCBvcHRzOiBvcHRzLCB0YWdzOiB7fSB9LCBpdGVtKVxuXG4gIC8vIGdyYWIgYXR0cmlidXRlc1xuICBlYWNoKHJvb3QuYXR0cmlidXRlcywgZnVuY3Rpb24oZWwpIHtcbiAgICB2YXIgdmFsID0gZWwudmFsdWVcbiAgICAvLyByZW1lbWJlciBhdHRyaWJ1dGVzIHdpdGggZXhwcmVzc2lvbnMgb25seVxuICAgIGlmIChicmFja2V0cygvXFx7LipcXH0vKS50ZXN0KHZhbCkpIGF0dHJbZWwubmFtZV0gPSB2YWxcbiAgfSlcblxuICBpZiAoZG9tLmlubmVySFRNTCAmJiAhL3NlbGVjdHxzZWxlY3R8b3B0Z3JvdXB8dGJvZHl8dHIvLnRlc3QodGFnTmFtZSkpXG4gICAgLy8gcmVwbGFjZSBhbGwgdGhlIHlpZWxkIHRhZ3Mgd2l0aCB0aGUgdGFnIGlubmVyIGh0bWxcbiAgICBkb20uaW5uZXJIVE1MID0gcmVwbGFjZVlpZWxkKGRvbS5pbm5lckhUTUwsIGlubmVySFRNTClcblxuICAvLyBvcHRpb25zXG4gIGZ1bmN0aW9uIHVwZGF0ZU9wdHMoKSB7XG4gICAgdmFyIGN0eCA9IGhhc0ltcGwgJiYgaXNMb29wID8gc2VsZiA6IHBhcmVudCB8fCBzZWxmXG4gICAgLy8gdXBkYXRlIG9wdHMgZnJvbSBjdXJyZW50IERPTSBhdHRyaWJ1dGVzXG4gICAgZWFjaChyb290LmF0dHJpYnV0ZXMsIGZ1bmN0aW9uKGVsKSB7XG4gICAgICBvcHRzW2VsLm5hbWVdID0gdG1wbChlbC52YWx1ZSwgY3R4KVxuICAgIH0pXG4gICAgLy8gcmVjb3ZlciB0aG9zZSB3aXRoIGV4cHJlc3Npb25zXG4gICAgZWFjaChPYmplY3Qua2V5cyhhdHRyKSwgZnVuY3Rpb24obmFtZSkge1xuICAgICAgb3B0c1tuYW1lXSA9IHRtcGwoYXR0cltuYW1lXSwgY3R4KVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVEYXRhKGRhdGEpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaXRlbSkge1xuICAgICAgaWYgKHR5cGVvZiBzZWxmW2tleV0gIT09IFRfVU5ERUYpXG4gICAgICAgIHNlbGZba2V5XSA9IGRhdGFba2V5XVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaGVyaXRGcm9tUGFyZW50ICgpIHtcbiAgICBpZiAoIXNlbGYucGFyZW50IHx8ICFpc0xvb3ApIHJldHVyblxuICAgIGVhY2goT2JqZWN0LmtleXMoc2VsZi5wYXJlbnQpLCBmdW5jdGlvbihrKSB7XG4gICAgICAvLyBzb21lIHByb3BlcnRpZXMgbXVzdCBiZSBhbHdheXMgaW4gc3luYyB3aXRoIHRoZSBwYXJlbnQgdGFnXG4gICAgICB2YXIgbXVzdFN5bmMgPSB+cHJvcHNJblN5bmNXaXRoUGFyZW50LmluZGV4T2YoaylcbiAgICAgIGlmICh0eXBlb2Ygc2VsZltrXSA9PT0gVF9VTkRFRiB8fCBtdXN0U3luYykge1xuICAgICAgICAvLyB0cmFjayB0aGUgcHJvcGVydHkgdG8ga2VlcCBpbiBzeW5jXG4gICAgICAgIC8vIHNvIHdlIGNhbiBrZWVwIGl0IHVwZGF0ZWRcbiAgICAgICAgaWYgKCFtdXN0U3luYykgcHJvcHNJblN5bmNXaXRoUGFyZW50LnB1c2goaylcbiAgICAgICAgc2VsZltrXSA9IHNlbGYucGFyZW50W2tdXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRoaXMudXBkYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIC8vIG1ha2Ugc3VyZSB0aGUgZGF0YSBwYXNzZWQgd2lsbCBub3Qgb3ZlcnJpZGVcbiAgICAvLyB0aGUgY29tcG9uZW50IGNvcmUgbWV0aG9kc1xuICAgIGRhdGEgPSBjbGVhblVwRGF0YShkYXRhKVxuICAgIC8vIGluaGVyaXQgcHJvcGVydGllcyBmcm9tIHRoZSBwYXJlbnRcbiAgICBpbmhlcml0RnJvbVBhcmVudCgpXG4gICAgLy8gbm9ybWFsaXplIHRoZSB0YWcgcHJvcGVydGllcyBpbiBjYXNlIGFuIGl0ZW0gb2JqZWN0IHdhcyBpbml0aWFsbHkgcGFzc2VkXG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSBUX09CSkVDVCB8fCBpc0FycmF5KGl0ZW0pKSB7XG4gICAgICBub3JtYWxpemVEYXRhKGRhdGEpXG4gICAgICBpdGVtID0gZGF0YVxuICAgIH1cbiAgICBleHRlbmQoc2VsZiwgZGF0YSlcbiAgICB1cGRhdGVPcHRzKClcbiAgICBzZWxmLnRyaWdnZXIoJ3VwZGF0ZScsIGRhdGEpXG4gICAgdXBkYXRlKGV4cHJlc3Npb25zLCBzZWxmKVxuICAgIHNlbGYudHJpZ2dlcigndXBkYXRlZCcpXG4gIH1cblxuICB0aGlzLm1peGluID0gZnVuY3Rpb24oKSB7XG4gICAgZWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG1peCkge1xuICAgICAgbWl4ID0gdHlwZW9mIG1peCA9PT0gVF9TVFJJTkcgPyByaW90Lm1peGluKG1peCkgOiBtaXhcbiAgICAgIGVhY2goT2JqZWN0LmtleXMobWl4KSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIC8vIGJpbmQgbWV0aG9kcyB0byBzZWxmXG4gICAgICAgIGlmIChrZXkgIT0gJ2luaXQnKVxuICAgICAgICAgIHNlbGZba2V5XSA9IGlzRnVuY3Rpb24obWl4W2tleV0pID8gbWl4W2tleV0uYmluZChzZWxmKSA6IG1peFtrZXldXG4gICAgICB9KVxuICAgICAgLy8gaW5pdCBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgYXV0b21hdGljYWxseVxuICAgICAgaWYgKG1peC5pbml0KSBtaXguaW5pdC5iaW5kKHNlbGYpKClcbiAgICB9KVxuICB9XG5cbiAgdGhpcy5tb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdXBkYXRlT3B0cygpXG5cbiAgICAvLyBpbml0aWFsaWF0aW9uXG4gICAgZm4gJiYgZm4uY2FsbChzZWxmLCBvcHRzKVxuXG4gICAgdG9nZ2xlKHRydWUpXG5cblxuICAgIC8vIHBhcnNlIGxheW91dCBhZnRlciBpbml0LiBmbiBtYXkgY2FsY3VsYXRlIGFyZ3MgZm9yIG5lc3RlZCBjdXN0b20gdGFnc1xuICAgIHBhcnNlRXhwcmVzc2lvbnMoZG9tLCBzZWxmLCBleHByZXNzaW9ucylcbiAgICBpZiAoIXNlbGYucGFyZW50IHx8IGhhc0ltcGwpIHBhcnNlRXhwcmVzc2lvbnMoc2VsZi5yb290LCBzZWxmLCBleHByZXNzaW9ucykgLy8gdG9wIGxldmVsIGJlZm9yZSB1cGRhdGUsIGVtcHR5IHJvb3RcblxuICAgIGlmICghc2VsZi5wYXJlbnQgfHwgaXNMb29wKSBzZWxmLnVwZGF0ZShpdGVtKVxuXG4gICAgLy8gaW50ZXJuYWwgdXNlIG9ubHksIGZpeGVzICM0MDNcbiAgICBzZWxmLnRyaWdnZXIoJ3ByZW1vdW50JylcblxuICAgIGlmIChpc0xvb3AgJiYgIWhhc0ltcGwpIHtcbiAgICAgIC8vIHVwZGF0ZSB0aGUgcm9vdCBhdHRyaWJ1dGUgZm9yIHRoZSBsb29wZWQgZWxlbWVudHNcbiAgICAgIHNlbGYucm9vdCA9IHJvb3QgPSBsb29wRG9tID0gZG9tLmZpcnN0Q2hpbGRcblxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoZG9tLmZpcnN0Q2hpbGQpIHJvb3QuYXBwZW5kQ2hpbGQoZG9tLmZpcnN0Q2hpbGQpXG4gICAgICBpZiAocm9vdC5zdHViKSBzZWxmLnJvb3QgPSByb290ID0gcGFyZW50LnJvb3RcbiAgICB9XG4gICAgLy8gaWYgaXQncyBub3QgYSBjaGlsZCB0YWcgd2UgY2FuIHRyaWdnZXIgaXRzIG1vdW50IGV2ZW50XG4gICAgaWYgKCFzZWxmLnBhcmVudCB8fCBzZWxmLnBhcmVudC5pc01vdW50ZWQpIHtcbiAgICAgIHNlbGYuaXNNb3VudGVkID0gdHJ1ZVxuICAgICAgc2VsZi50cmlnZ2VyKCdtb3VudCcpXG4gICAgfVxuICAgIC8vIG90aGVyd2lzZSB3ZSBuZWVkIHRvIHdhaXQgdGhhdCB0aGUgcGFyZW50IGV2ZW50IGdldHMgdHJpZ2dlcmVkXG4gICAgZWxzZSBzZWxmLnBhcmVudC5vbmUoJ21vdW50JywgZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCB0byB0cmlnZ2VyIHRoZSBgbW91bnRgIGV2ZW50IGZvciB0aGUgdGFnc1xuICAgICAgLy8gbm90IHZpc2libGUgaW5jbHVkZWQgaW4gYW4gaWYgc3RhdGVtZW50XG4gICAgICBpZiAoIWlzSW5TdHViKHNlbGYucm9vdCkpIHtcbiAgICAgICAgc2VsZi5wYXJlbnQuaXNNb3VudGVkID0gc2VsZi5pc01vdW50ZWQgPSB0cnVlXG4gICAgICAgIHNlbGYudHJpZ2dlcignbW91bnQnKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuXG4gIHRoaXMudW5tb3VudCA9IGZ1bmN0aW9uKGtlZXBSb290VGFnKSB7XG4gICAgdmFyIGVsID0gbG9vcERvbSB8fCByb290LFxuICAgICAgICBwID0gZWwucGFyZW50Tm9kZVxuXG4gICAgaWYgKHApIHtcblxuICAgICAgaWYgKHBhcmVudClcbiAgICAgICAgLy8gcmVtb3ZlIHRoaXMgdGFnIGZyb20gdGhlIHBhcmVudCB0YWdzIG9iamVjdFxuICAgICAgICAvLyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgbmVzdGVkIHRhZ3Mgd2l0aCBzYW1lIG5hbWUuLlxuICAgICAgICAvLyByZW1vdmUgdGhpcyBlbGVtZW50IGZvcm0gdGhlIGFycmF5XG4gICAgICAgIGlmIChpc0FycmF5KHBhcmVudC50YWdzW3RhZ05hbWVdKSlcbiAgICAgICAgICBlYWNoKHBhcmVudC50YWdzW3RhZ05hbWVdLCBmdW5jdGlvbih0YWcsIGkpIHtcbiAgICAgICAgICAgIGlmICh0YWcuX2lkID09IHNlbGYuX2lkKVxuICAgICAgICAgICAgICBwYXJlbnQudGFnc1t0YWdOYW1lXS5zcGxpY2UoaSwgMSlcbiAgICAgICAgICB9KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgZGVsZXRlIHRoZSB0YWcgaW5zdGFuY2VcbiAgICAgICAgICBwYXJlbnQudGFnc1t0YWdOYW1lXSA9IHVuZGVmaW5lZFxuICAgICAgZWxzZVxuICAgICAgICB3aGlsZSAoZWwuZmlyc3RDaGlsZCkgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZClcblxuICAgICAgaWYgKCFrZWVwUm9vdFRhZylcbiAgICAgICAgcC5yZW1vdmVDaGlsZChlbClcblxuICAgIH1cblxuXG4gICAgc2VsZi50cmlnZ2VyKCd1bm1vdW50JylcbiAgICB0b2dnbGUoKVxuICAgIHNlbGYub2ZmKCcqJylcbiAgICAvLyBzb21laG93IGllOCBkb2VzIG5vdCBsaWtlIGBkZWxldGUgcm9vdC5fdGFnYFxuICAgIHJvb3QuX3RhZyA9IG51bGxcblxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlKGlzTW91bnQpIHtcblxuICAgIC8vIG1vdW50L3VubW91bnQgY2hpbGRyZW5cbiAgICBlYWNoKGNoaWxkVGFncywgZnVuY3Rpb24oY2hpbGQpIHsgY2hpbGRbaXNNb3VudCA/ICdtb3VudCcgOiAndW5tb3VudCddKCkgfSlcblxuICAgIC8vIGxpc3Rlbi91bmxpc3RlbiBwYXJlbnQgKGV2ZW50cyBmbG93IG9uZSB3YXkgZnJvbSBwYXJlbnQgdG8gY2hpbGRyZW4pXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgdmFyIGV2dCA9IGlzTW91bnQgPyAnb24nIDogJ29mZidcblxuICAgICAgLy8gdGhlIGxvb3AgdGFncyB3aWxsIGJlIGFsd2F5cyBpbiBzeW5jIHdpdGggdGhlIHBhcmVudCBhdXRvbWF0aWNhbGx5XG4gICAgICBpZiAoaXNMb29wKVxuICAgICAgICBwYXJlbnRbZXZ0XSgndW5tb3VudCcsIHNlbGYudW5tb3VudClcbiAgICAgIGVsc2VcbiAgICAgICAgcGFyZW50W2V2dF0oJ3VwZGF0ZScsIHNlbGYudXBkYXRlKVtldnRdKCd1bm1vdW50Jywgc2VsZi51bm1vdW50KVxuICAgIH1cbiAgfVxuXG4gIC8vIG5hbWVkIGVsZW1lbnRzIGF2YWlsYWJsZSBmb3IgZm5cbiAgcGFyc2VOYW1lZEVsZW1lbnRzKGRvbSwgdGhpcywgY2hpbGRUYWdzKVxuXG5cbn1cblxuZnVuY3Rpb24gc2V0RXZlbnRIYW5kbGVyKG5hbWUsIGhhbmRsZXIsIGRvbSwgdGFnKSB7XG5cbiAgZG9tW25hbWVdID0gZnVuY3Rpb24oZSkge1xuXG4gICAgdmFyIGl0ZW0gPSB0YWcuX2l0ZW0sXG4gICAgICAgIHB0YWcgPSB0YWcucGFyZW50XG5cbiAgICBpZiAoIWl0ZW0pXG4gICAgICB3aGlsZSAocHRhZykge1xuICAgICAgICBpdGVtID0gcHRhZy5faXRlbVxuICAgICAgICBwdGFnID0gaXRlbSA/IGZhbHNlIDogcHRhZy5wYXJlbnRcbiAgICAgIH1cblxuICAgIC8vIGNyb3NzIGJyb3dzZXIgZXZlbnQgZml4XG4gICAgZSA9IGUgfHwgd2luZG93LmV2ZW50XG5cbiAgICAvLyBpZ25vcmUgZXJyb3Igb24gc29tZSBicm93c2Vyc1xuICAgIHRyeSB7XG4gICAgICBlLmN1cnJlbnRUYXJnZXQgPSBkb21cbiAgICAgIGlmICghZS50YXJnZXQpIGUudGFyZ2V0ID0gZS5zcmNFbGVtZW50XG4gICAgICBpZiAoIWUud2hpY2gpIGUud2hpY2ggPSBlLmNoYXJDb2RlIHx8IGUua2V5Q29kZVxuICAgIH0gY2F0Y2ggKGlnbm9yZWQpIHsgJycgfVxuXG4gICAgZS5pdGVtID0gaXRlbVxuXG4gICAgLy8gcHJldmVudCBkZWZhdWx0IGJlaGF2aW91ciAoYnkgZGVmYXVsdClcbiAgICBpZiAoaGFuZGxlci5jYWxsKHRhZywgZSkgIT09IHRydWUgJiYgIS9yYWRpb3xjaGVjay8udGVzdChkb20udHlwZSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQgJiYgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlLnJldHVyblZhbHVlID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoIWUucHJldmVudFVwZGF0ZSkge1xuICAgICAgdmFyIGVsID0gaXRlbSA/IHRhZy5wYXJlbnQgOiB0YWdcbiAgICAgIGVsLnVwZGF0ZSgpXG4gICAgfVxuXG4gIH1cblxufVxuXG4vLyB1c2VkIGJ5IGlmLSBhdHRyaWJ1dGVcbmZ1bmN0aW9uIGluc2VydFRvKHJvb3QsIG5vZGUsIGJlZm9yZSkge1xuICBpZiAocm9vdCkge1xuICAgIHJvb3QuaW5zZXJ0QmVmb3JlKGJlZm9yZSwgbm9kZSlcbiAgICByb290LnJlbW92ZUNoaWxkKG5vZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlKGV4cHJlc3Npb25zLCB0YWcpIHtcblxuICBlYWNoKGV4cHJlc3Npb25zLCBmdW5jdGlvbihleHByLCBpKSB7XG5cbiAgICB2YXIgZG9tID0gZXhwci5kb20sXG4gICAgICAgIGF0dHJOYW1lID0gZXhwci5hdHRyLFxuICAgICAgICB2YWx1ZSA9IHRtcGwoZXhwci5leHByLCB0YWcpLFxuICAgICAgICBwYXJlbnQgPSBleHByLmRvbS5wYXJlbnROb2RlXG5cbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgdmFsdWUgPSAnJ1xuXG4gICAgLy8gbGVhdmUgb3V0IHJpb3QtIHByZWZpeGVzIGZyb20gc3RyaW5ncyBpbnNpZGUgdGV4dGFyZWFcbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC50YWdOYW1lID09ICdURVhUQVJFQScpIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvcmlvdC0vZywgJycpXG5cbiAgICAvLyBubyBjaGFuZ2VcbiAgICBpZiAoZXhwci52YWx1ZSA9PT0gdmFsdWUpIHJldHVyblxuICAgIGV4cHIudmFsdWUgPSB2YWx1ZVxuXG4gICAgLy8gdGV4dCBub2RlXG4gICAgaWYgKCFhdHRyTmFtZSkgcmV0dXJuIGRvbS5ub2RlVmFsdWUgPSB2YWx1ZS50b1N0cmluZygpXG5cbiAgICAvLyByZW1vdmUgb3JpZ2luYWwgYXR0cmlidXRlXG4gICAgcmVtQXR0cihkb20sIGF0dHJOYW1lKVxuXG4gICAgLy8gZXZlbnQgaGFuZGxlclxuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgc2V0RXZlbnRIYW5kbGVyKGF0dHJOYW1lLCB2YWx1ZSwgZG9tLCB0YWcpXG5cbiAgICAvLyBpZi0gY29uZGl0aW9uYWxcbiAgICB9IGVsc2UgaWYgKGF0dHJOYW1lID09ICdpZicpIHtcbiAgICAgIHZhciBzdHViID0gZXhwci5zdHViXG5cbiAgICAgIC8vIGFkZCB0byBET01cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBpZiAoc3R1Yikge1xuICAgICAgICAgIGluc2VydFRvKHN0dWIucGFyZW50Tm9kZSwgc3R1YiwgZG9tKVxuICAgICAgICAgIGRvbS5pblN0dWIgPSBmYWxzZVxuICAgICAgICAgIC8vIGF2b2lkIHRvIHRyaWdnZXIgdGhlIG1vdW50IGV2ZW50IGlmIHRoZSB0YWdzIGlzIG5vdCB2aXNpYmxlIHlldFxuICAgICAgICAgIC8vIG1heWJlIHdlIGNhbiBvcHRpbWl6ZSB0aGlzIGF2b2lkaW5nIHRvIG1vdW50IHRoZSB0YWcgYXQgYWxsXG4gICAgICAgICAgaWYgKCFpc0luU3R1Yihkb20pKSB7XG4gICAgICAgICAgICB3YWxrKGRvbSwgZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgaWYgKGVsLl90YWcgJiYgIWVsLl90YWcuaXNNb3VudGVkKSBlbC5fdGFnLmlzTW91bnRlZCA9ICEhZWwuX3RhZy50cmlnZ2VyKCdtb3VudCcpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHViID0gZXhwci5zdHViID0gc3R1YiB8fCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJylcbiAgICAgICAgaW5zZXJ0VG8oZG9tLnBhcmVudE5vZGUsIGRvbSwgc3R1YilcbiAgICAgICAgZG9tLmluU3R1YiA9IHRydWVcbiAgICAgIH1cbiAgICAvLyBzaG93IC8gaGlkZVxuICAgIH0gZWxzZSBpZiAoL14oc2hvd3xoaWRlKSQvLnRlc3QoYXR0ck5hbWUpKSB7XG4gICAgICBpZiAoYXR0ck5hbWUgPT0gJ2hpZGUnKSB2YWx1ZSA9ICF2YWx1ZVxuICAgICAgZG9tLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/ICcnIDogJ25vbmUnXG5cbiAgICAvLyBmaWVsZCB2YWx1ZVxuICAgIH0gZWxzZSBpZiAoYXR0ck5hbWUgPT0gJ3ZhbHVlJykge1xuICAgICAgZG9tLnZhbHVlID0gdmFsdWVcblxuICAgIC8vIDxpbWcgc3JjPVwieyBleHByIH1cIj5cbiAgICB9IGVsc2UgaWYgKGF0dHJOYW1lLnNsaWNlKDAsIDUpID09ICdyaW90LScgJiYgYXR0ck5hbWUgIT0gJ3Jpb3QtdGFnJykge1xuICAgICAgYXR0ck5hbWUgPSBhdHRyTmFtZS5zbGljZSg1KVxuICAgICAgdmFsdWUgPyBkb20uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCB2YWx1ZSkgOiByZW1BdHRyKGRvbSwgYXR0ck5hbWUpXG5cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGV4cHIuYm9vbCkge1xuICAgICAgICBkb21bYXR0ck5hbWVdID0gdmFsdWVcbiAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuXG4gICAgICAgIHZhbHVlID0gYXR0ck5hbWVcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gVF9PQkpFQ1QpIGRvbS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlKVxuXG4gICAgfVxuXG4gIH0pXG5cbn1cblxuZnVuY3Rpb24gZWFjaChlbHMsIGZuKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSAoZWxzIHx8IFtdKS5sZW5ndGgsIGVsOyBpIDwgbGVuOyBpKyspIHtcbiAgICBlbCA9IGVsc1tpXVxuICAgIC8vIHJldHVybiBmYWxzZSAtPiByZW1vdmUgY3VycmVudCBpdGVtIGR1cmluZyBsb29wXG4gICAgaWYgKGVsICE9IG51bGwgJiYgZm4oZWwsIGkpID09PSBmYWxzZSkgaS0tXG4gIH1cbiAgcmV0dXJuIGVsc1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nIHx8IGZhbHNlICAgLy8gYXZvaWQgSUUgcHJvYmxlbXNcbn1cblxuZnVuY3Rpb24gcmVtQXR0cihkb20sIG5hbWUpIHtcbiAgZG9tLnJlbW92ZUF0dHJpYnV0ZShuYW1lKVxufVxuXG5mdW5jdGlvbiBmYXN0QWJzKG5yKSB7XG4gIHJldHVybiAobnIgXiAobnIgPj4gMzEpKSAtIChuciA+PiAzMSlcbn1cblxuZnVuY3Rpb24gZ2V0VGFnKGRvbSkge1xuICB2YXIgdGFnTmFtZSA9IGRvbS50YWdOYW1lLnRvTG93ZXJDYXNlKClcbiAgcmV0dXJuIHRhZ0ltcGxbZG9tLmdldEF0dHJpYnV0ZShSSU9UX1RBRykgfHwgdGFnTmFtZV1cbn1cblxuZnVuY3Rpb24gZ2V0VGFnTmFtZShkb20pIHtcbiAgdmFyIGNoaWxkID0gZ2V0VGFnKGRvbSksXG4gICAgbmFtZWRUYWcgPSBkb20uZ2V0QXR0cmlidXRlKCduYW1lJyksXG4gICAgdGFnTmFtZSA9IG5hbWVkVGFnICYmIG5hbWVkVGFnLmluZGV4T2YoYnJhY2tldHMoMCkpIDwgMCA/IG5hbWVkVGFnIDogY2hpbGQgPyBjaGlsZC5uYW1lIDogZG9tLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuXG4gIHJldHVybiB0YWdOYW1lXG59XG5cbmZ1bmN0aW9uIGV4dGVuZChzcmMpIHtcbiAgdmFyIG9iaiwgYXJncyA9IGFyZ3VtZW50c1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG9iaiA9IGFyZ3NbaV0pKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7ICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBndWFyZC1mb3ItaW5cbiAgICAgICAgc3JjW2tleV0gPSBvYmpba2V5XVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3JjXG59XG5cbi8vIHdpdGggdGhpcyBmdW5jdGlvbiB3ZSBhdm9pZCB0aGF0IHRoZSBjdXJyZW50IFRhZyBtZXRob2RzIGdldCBvdmVycmlkZGVuXG5mdW5jdGlvbiBjbGVhblVwRGF0YShkYXRhKSB7XG4gIGlmICghKGRhdGEgaW5zdGFuY2VvZiBUYWcpKSByZXR1cm4gZGF0YVxuXG4gIHZhciBvID0ge30sXG4gICAgICBibGFja0xpc3QgPSBbJ3VwZGF0ZScsICdyb290JywgJ21vdW50JywgJ3VubW91bnQnLCAnbWl4aW4nLCAnaXNNb3VudGVkJywgJ2lzbG9vcCcsICd0YWdzJywgJ3BhcmVudCcsICdvcHRzJ11cbiAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICBpZiAoIX5ibGFja0xpc3QuaW5kZXhPZihrZXkpKVxuICAgICAgb1trZXldID0gZGF0YVtrZXldXG4gIH1cbiAgcmV0dXJuIG9cbn1cblxuZnVuY3Rpb24gbWtkb20odGVtcGxhdGUpIHtcbiAgdmFyIGNoZWNraWUgPSBpZVZlcnNpb24gJiYgaWVWZXJzaW9uIDwgMTAsXG4gICAgICBtYXRjaGVzID0gL15cXHMqPChbXFx3LV0rKS8uZXhlYyh0ZW1wbGF0ZSksXG4gICAgICB0YWdOYW1lID0gbWF0Y2hlcyA/IG1hdGNoZXNbMV0udG9Mb3dlckNhc2UoKSA6ICcnLFxuICAgICAgcm9vdFRhZyA9ICh0YWdOYW1lID09PSAndGgnIHx8IHRhZ05hbWUgPT09ICd0ZCcpID8gJ3RyJyA6XG4gICAgICAgICAgICAgICAgKHRhZ05hbWUgPT09ICd0cicgPyAndGJvZHknIDogJ2RpdicpLFxuICAgICAgZWwgPSBta0VsKHJvb3RUYWcpXG5cbiAgZWwuc3R1YiA9IHRydWVcblxuICBpZiAoY2hlY2tpZSkge1xuICAgIGlmICh0YWdOYW1lID09PSAnb3B0Z3JvdXAnKVxuICAgICAgb3B0Z3JvdXBJbm5lckhUTUwoZWwsIHRlbXBsYXRlKVxuICAgIGVsc2UgaWYgKHRhZ05hbWUgPT09ICdvcHRpb24nKVxuICAgICAgb3B0aW9uSW5uZXJIVE1MKGVsLCB0ZW1wbGF0ZSlcbiAgICBlbHNlIGlmIChyb290VGFnICE9PSAnZGl2JylcbiAgICAgIHRib2R5SW5uZXJIVE1MKGVsLCB0ZW1wbGF0ZSwgdGFnTmFtZSlcbiAgICBlbHNlXG4gICAgICBjaGVja2llID0gMFxuICB9XG4gIGlmICghY2hlY2tpZSkgZWwuaW5uZXJIVE1MID0gdGVtcGxhdGVcblxuICByZXR1cm4gZWxcbn1cblxuZnVuY3Rpb24gd2Fsayhkb20sIGZuKSB7XG4gIGlmIChkb20pIHtcbiAgICBpZiAoZm4oZG9tKSA9PT0gZmFsc2UpIHdhbGsoZG9tLm5leHRTaWJsaW5nLCBmbilcbiAgICBlbHNlIHtcbiAgICAgIGRvbSA9IGRvbS5maXJzdENoaWxkXG5cbiAgICAgIHdoaWxlIChkb20pIHtcbiAgICAgICAgd2Fsayhkb20sIGZuKVxuICAgICAgICBkb20gPSBkb20ubmV4dFNpYmxpbmdcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJblN0dWIoZG9tKSB7XG4gIHdoaWxlIChkb20pIHtcbiAgICBpZiAoZG9tLmluU3R1YikgcmV0dXJuIHRydWVcbiAgICBkb20gPSBkb20ucGFyZW50Tm9kZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBta0VsKG5hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbn1cblxuZnVuY3Rpb24gcmVwbGFjZVlpZWxkICh0bXBsLCBpbm5lckhUTUwpIHtcbiAgcmV0dXJuIHRtcGwucmVwbGFjZSgvPCh5aWVsZClcXC8/Pig8XFwvXFwxPik/L2dpbSwgaW5uZXJIVE1MIHx8ICcnKVxufVxuXG5mdW5jdGlvbiAkJChzZWxlY3RvciwgY3R4KSB7XG4gIHJldHVybiAoY3R4IHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKVxufVxuXG5mdW5jdGlvbiAkKHNlbGVjdG9yLCBjdHgpIHtcbiAgcmV0dXJuIChjdHggfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG59XG5cbmZ1bmN0aW9uIGluaGVyaXQocGFyZW50KSB7XG4gIGZ1bmN0aW9uIENoaWxkKCkge31cbiAgQ2hpbGQucHJvdG90eXBlID0gcGFyZW50XG4gIHJldHVybiBuZXcgQ2hpbGQoKVxufVxuXG5mdW5jdGlvbiBzZXROYW1lZChkb20sIHBhcmVudCwga2V5cykge1xuICBlYWNoKGRvbS5hdHRyaWJ1dGVzLCBmdW5jdGlvbihhdHRyKSB7XG4gICAgaWYgKGRvbS5fdmlzaXRlZCkgcmV0dXJuXG4gICAgaWYgKGF0dHIubmFtZSA9PT0gJ2lkJyB8fCBhdHRyLm5hbWUgPT09ICduYW1lJykge1xuICAgICAgZG9tLl92aXNpdGVkID0gdHJ1ZVxuICAgICAgdmFyIHAsIHYgPSBhdHRyLnZhbHVlXG4gICAgICBpZiAofmtleXMuaW5kZXhPZih2KSkgcmV0dXJuXG5cbiAgICAgIHAgPSBwYXJlbnRbdl1cbiAgICAgIGlmICghcClcbiAgICAgICAgcGFyZW50W3ZdID0gZG9tXG4gICAgICBlbHNlXG4gICAgICAgIGlzQXJyYXkocCkgPyBwLnB1c2goZG9tKSA6IChwYXJlbnRbdl0gPSBbcCwgZG9tXSlcbiAgICB9XG4gIH0pXG59XG4vKipcbiAqXG4gKiBIYWNrcyBuZWVkZWQgZm9yIHRoZSBvbGQgaW50ZXJuZXQgZXhwbG9yZXIgdmVyc2lvbnMgW2xvd2VyIHRoYW4gSUUxMF1cbiAqXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiB0Ym9keUlubmVySFRNTChlbCwgaHRtbCwgdGFnTmFtZSkge1xuICB2YXIgZGl2ID0gbWtFbCgnZGl2JyksXG4gICAgICBsb29wcyA9IC90ZHx0aC8udGVzdCh0YWdOYW1lKSA/IDMgOiAyLFxuICAgICAgY2hpbGRcblxuICBkaXYuaW5uZXJIVE1MID0gJzx0YWJsZT4nICsgaHRtbCArICc8L3RhYmxlPidcbiAgY2hpbGQgPSBkaXYuZmlyc3RDaGlsZFxuXG4gIHdoaWxlIChsb29wcy0tKSBjaGlsZCA9IGNoaWxkLmZpcnN0Q2hpbGRcblxuICBlbC5hcHBlbmRDaGlsZChjaGlsZClcblxufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIG9wdGlvbklubmVySFRNTChlbCwgaHRtbCkge1xuICB2YXIgb3B0ID0gbWtFbCgnb3B0aW9uJyksXG4gICAgICB2YWxSZWd4ID0gL3ZhbHVlPVtcXFwiJ10oLis/KVtcXFwiJ10vLFxuICAgICAgc2VsUmVneCA9IC9zZWxlY3RlZD1bXFxcIiddKC4rPylbXFxcIiddLyxcbiAgICAgIGVhY2hSZWd4ID0gL2VhY2g9W1xcXCInXSguKz8pW1xcXCInXS8sXG4gICAgICBpZlJlZ3ggPSAvaWY9W1xcXCInXSguKz8pW1xcXCInXS8sXG4gICAgICBpbm5lclJlZ3ggPSAvPihbXjxdKik8LyxcbiAgICAgIHZhbHVlc01hdGNoID0gaHRtbC5tYXRjaCh2YWxSZWd4KSxcbiAgICAgIHNlbGVjdGVkTWF0Y2ggPSBodG1sLm1hdGNoKHNlbFJlZ3gpLFxuICAgICAgaW5uZXJWYWx1ZSA9IGh0bWwubWF0Y2goaW5uZXJSZWd4KSxcbiAgICAgIGVhY2hNYXRjaCA9IGh0bWwubWF0Y2goZWFjaFJlZ3gpLFxuICAgICAgaWZNYXRjaCA9IGh0bWwubWF0Y2goaWZSZWd4KVxuXG4gIGlmIChpbm5lclZhbHVlKSBvcHQuaW5uZXJIVE1MID0gaW5uZXJWYWx1ZVsxXVxuICBlbHNlIG9wdC5pbm5lckhUTUwgPSBodG1sXG5cbiAgaWYgKHZhbHVlc01hdGNoKSBvcHQudmFsdWUgPSB2YWx1ZXNNYXRjaFsxXVxuICBpZiAoc2VsZWN0ZWRNYXRjaCkgb3B0LnNldEF0dHJpYnV0ZSgncmlvdC1zZWxlY3RlZCcsIHNlbGVjdGVkTWF0Y2hbMV0pXG4gIGlmIChlYWNoTWF0Y2gpIG9wdC5zZXRBdHRyaWJ1dGUoJ2VhY2gnLCBlYWNoTWF0Y2hbMV0pXG4gIGlmIChpZk1hdGNoKSBvcHQuc2V0QXR0cmlidXRlKCdpZicsIGlmTWF0Y2hbMV0pXG5cbiAgZWwuYXBwZW5kQ2hpbGQob3B0KVxufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIG9wdGdyb3VwSW5uZXJIVE1MKGVsLCBodG1sKSB7XG4gIHZhciBvcHQgPSBta0VsKCdvcHRncm91cCcpLFxuICAgICAgbGFiZWxSZWd4ID0gL2xhYmVsPVtcXFwiJ10oLis/KVtcXFwiJ10vLFxuICAgICAgZWxlbWVudFJlZ3ggPSAvXjwoW14+XSopPi8sXG4gICAgICB0YWdSZWd4ID0gL148KFteIFxcPl0qKS8sXG4gICAgICBsYWJlbE1hdGNoID0gaHRtbC5tYXRjaChsYWJlbFJlZ3gpLFxuICAgICAgZWxlbWVudE1hdGNoID0gaHRtbC5tYXRjaChlbGVtZW50UmVneCksXG4gICAgICB0YWdNYXRjaCA9IGh0bWwubWF0Y2godGFnUmVneCksXG4gICAgICBpbm5lckNvbnRlbnQgPSBodG1sXG5cbiAgaWYgKGVsZW1lbnRNYXRjaCkge1xuICAgIHZhciBvcHRpb25zID0gaHRtbC5zbGljZShlbGVtZW50TWF0Y2hbMV0ubGVuZ3RoKzIsIC10YWdNYXRjaFsxXS5sZW5ndGgtMykudHJpbSgpXG4gICAgaW5uZXJDb250ZW50ID0gb3B0aW9uc1xuICB9XG5cbiAgaWYgKGxhYmVsTWF0Y2gpIG9wdC5zZXRBdHRyaWJ1dGUoJ3Jpb3QtbGFiZWwnLCBsYWJlbE1hdGNoWzFdKVxuXG4gIGlmIChpbm5lckNvbnRlbnQpIHtcbiAgICB2YXIgaW5uZXJPcHQgPSBta0VsKCdkaXYnKVxuXG4gICAgb3B0aW9uSW5uZXJIVE1MKGlubmVyT3B0LCBpbm5lckNvbnRlbnQpXG5cbiAgICBvcHQuYXBwZW5kQ2hpbGQoaW5uZXJPcHQuZmlyc3RDaGlsZClcbiAgfVxuXG4gIGVsLmFwcGVuZENoaWxkKG9wdClcbn1cblxuLypcbiBWaXJ0dWFsIGRvbSBpcyBhbiBhcnJheSBvZiBjdXN0b20gdGFncyBvbiB0aGUgZG9jdW1lbnQuXG4gVXBkYXRlcyBhbmQgdW5tb3VudHMgcHJvcGFnYXRlIGRvd253YXJkcyBmcm9tIHBhcmVudCB0byBjaGlsZHJlbi5cbiovXG5cbnZhciB2aXJ0dWFsRG9tID0gW10sXG4gICAgdGFnSW1wbCA9IHt9LFxuICAgIHN0eWxlTm9kZVxuXG52YXIgUklPVF9UQUcgPSAncmlvdC10YWcnXG5cbmZ1bmN0aW9uIGluamVjdFN0eWxlKGNzcykge1xuXG4gIHN0eWxlTm9kZSA9IHN0eWxlTm9kZSB8fCBta0VsKCdzdHlsZScpXG5cbiAgaWYgKCFkb2N1bWVudC5oZWFkKSByZXR1cm5cblxuICBpZiAoc3R5bGVOb2RlLnN0eWxlU2hlZXQpXG4gICAgc3R5bGVOb2RlLnN0eWxlU2hlZXQuY3NzVGV4dCArPSBjc3NcbiAgZWxzZVxuICAgIHN0eWxlTm9kZS5pbm5lckhUTUwgKz0gY3NzXG5cbiAgaWYgKCFzdHlsZU5vZGUuX3JlbmRlcmVkKVxuICAgIGlmIChzdHlsZU5vZGUuc3R5bGVTaGVldCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdHlsZU5vZGUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBycyA9ICQoJ3N0eWxlW3R5cGU9cmlvdF0nKVxuICAgICAgaWYgKHJzKSB7XG4gICAgICAgIHJzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlTm9kZSwgcnMpXG4gICAgICAgIHJzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocnMpXG4gICAgICB9IGVsc2UgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZU5vZGUpXG5cbiAgICB9XG5cbiAgc3R5bGVOb2RlLl9yZW5kZXJlZCA9IHRydWVcblxufVxuXG5mdW5jdGlvbiBtb3VudFRvKHJvb3QsIHRhZ05hbWUsIG9wdHMpIHtcbiAgdmFyIHRhZyA9IHRhZ0ltcGxbdGFnTmFtZV0sXG4gICAgICAvLyBjYWNoZSB0aGUgaW5uZXIgSFRNTCB0byBmaXggIzg1NVxuICAgICAgaW5uZXJIVE1MID0gcm9vdC5faW5uZXJIVE1MID0gcm9vdC5faW5uZXJIVE1MIHx8IHJvb3QuaW5uZXJIVE1MXG5cbiAgLy8gY2xlYXIgdGhlIGlubmVyIGh0bWxcbiAgcm9vdC5pbm5lckhUTUwgPSAnJ1xuXG4gIGlmICh0YWcgJiYgcm9vdCkgdGFnID0gbmV3IFRhZyh0YWcsIHsgcm9vdDogcm9vdCwgb3B0czogb3B0cyB9LCBpbm5lckhUTUwpXG5cbiAgaWYgKHRhZyAmJiB0YWcubW91bnQpIHtcbiAgICB0YWcubW91bnQoKVxuICAgIHZpcnR1YWxEb20ucHVzaCh0YWcpXG4gICAgcmV0dXJuIHRhZy5vbigndW5tb3VudCcsIGZ1bmN0aW9uKCkge1xuICAgICAgdmlydHVhbERvbS5zcGxpY2UodmlydHVhbERvbS5pbmRleE9mKHRhZyksIDEpXG4gICAgfSlcbiAgfVxuXG59XG5cbnJpb3QudGFnID0gZnVuY3Rpb24obmFtZSwgaHRtbCwgY3NzLCBhdHRycywgZm4pIHtcbiAgaWYgKGlzRnVuY3Rpb24oYXR0cnMpKSB7XG4gICAgZm4gPSBhdHRyc1xuICAgIGlmICgvXltcXHdcXC1dK1xccz89Ly50ZXN0KGNzcykpIHtcbiAgICAgIGF0dHJzID0gY3NzXG4gICAgICBjc3MgPSAnJ1xuICAgIH0gZWxzZSBhdHRycyA9ICcnXG4gIH1cbiAgaWYgKGNzcykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGNzcykpIGZuID0gY3NzXG4gICAgZWxzZSBpbmplY3RTdHlsZShjc3MpXG4gIH1cbiAgdGFnSW1wbFtuYW1lXSA9IHsgbmFtZTogbmFtZSwgdG1wbDogaHRtbCwgYXR0cnM6IGF0dHJzLCBmbjogZm4gfVxuICByZXR1cm4gbmFtZVxufVxuXG5yaW90Lm1vdW50ID0gZnVuY3Rpb24oc2VsZWN0b3IsIHRhZ05hbWUsIG9wdHMpIHtcblxuICB2YXIgZWxzLFxuICAgICAgYWxsVGFncyxcbiAgICAgIHRhZ3MgPSBbXVxuXG4gIC8vIGhlbHBlciBmdW5jdGlvbnNcblxuICBmdW5jdGlvbiBhZGRSaW90VGFncyhhcnIpIHtcbiAgICB2YXIgbGlzdCA9ICcnXG4gICAgZWFjaChhcnIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBsaXN0ICs9ICcsICpbcmlvdC10YWc9XCInKyBlLnRyaW0oKSArICdcIl0nXG4gICAgfSlcbiAgICByZXR1cm4gbGlzdFxuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0QWxsVGFncygpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRhZ0ltcGwpXG4gICAgcmV0dXJuIGtleXMgKyBhZGRSaW90VGFncyhrZXlzKVxuICB9XG5cbiAgZnVuY3Rpb24gcHVzaFRhZ3Mocm9vdCkge1xuICAgIGlmIChyb290LnRhZ05hbWUpIHtcbiAgICAgIGlmICh0YWdOYW1lICYmICFyb290LmdldEF0dHJpYnV0ZShSSU9UX1RBRykpXG4gICAgICAgIHJvb3Quc2V0QXR0cmlidXRlKFJJT1RfVEFHLCB0YWdOYW1lKVxuXG4gICAgICB2YXIgdGFnID0gbW91bnRUbyhyb290LFxuICAgICAgICB0YWdOYW1lIHx8IHJvb3QuZ2V0QXR0cmlidXRlKFJJT1RfVEFHKSB8fCByb290LnRhZ05hbWUudG9Mb3dlckNhc2UoKSwgb3B0cylcblxuICAgICAgaWYgKHRhZykgdGFncy5wdXNoKHRhZylcbiAgICB9XG4gICAgZWxzZSBpZiAocm9vdC5sZW5ndGgpIHtcbiAgICAgIGVhY2gocm9vdCwgcHVzaFRhZ3MpICAgLy8gYXNzdW1lIG5vZGVMaXN0XG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0gbW91bnQgY29kZSAtLS0tLVxuXG4gIGlmICh0eXBlb2YgdGFnTmFtZSA9PT0gVF9PQkpFQ1QpIHtcbiAgICBvcHRzID0gdGFnTmFtZVxuICAgIHRhZ05hbWUgPSAwXG4gIH1cblxuICAvLyBjcmF3bCB0aGUgRE9NIHRvIGZpbmQgdGhlIHRhZ1xuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSBUX1NUUklORykge1xuICAgIGlmIChzZWxlY3RvciA9PT0gJyonKVxuICAgICAgLy8gc2VsZWN0IGFsbCB0aGUgdGFncyByZWdpc3RlcmVkXG4gICAgICAvLyBhbmQgYWxzbyB0aGUgdGFncyBmb3VuZCB3aXRoIHRoZSByaW90LXRhZyBhdHRyaWJ1dGUgc2V0XG4gICAgICBzZWxlY3RvciA9IGFsbFRhZ3MgPSBzZWxlY3RBbGxUYWdzKClcbiAgICBlbHNlXG4gICAgICAvLyBvciBqdXN0IHRoZSBvbmVzIG5hbWVkIGxpa2UgdGhlIHNlbGVjdG9yXG4gICAgICBzZWxlY3RvciArPSBhZGRSaW90VGFncyhzZWxlY3Rvci5zcGxpdCgnLCcpKVxuXG4gICAgZWxzID0gJCQoc2VsZWN0b3IpXG4gIH1cbiAgZWxzZVxuICAgIC8vIHByb2JhYmx5IHlvdSBoYXZlIHBhc3NlZCBhbHJlYWR5IGEgdGFnIG9yIGEgTm9kZUxpc3RcbiAgICBlbHMgPSBzZWxlY3RvclxuXG4gIC8vIHNlbGVjdCBhbGwgdGhlIHJlZ2lzdGVyZWQgYW5kIG1vdW50IHRoZW0gaW5zaWRlIHRoZWlyIHJvb3QgZWxlbWVudHNcbiAgaWYgKHRhZ05hbWUgPT09ICcqJykge1xuICAgIC8vIGdldCBhbGwgY3VzdG9tIHRhZ3NcbiAgICB0YWdOYW1lID0gYWxsVGFncyB8fCBzZWxlY3RBbGxUYWdzKClcbiAgICAvLyBpZiB0aGUgcm9vdCBlbHMgaXQncyBqdXN0IGEgc2luZ2xlIHRhZ1xuICAgIGlmIChlbHMudGFnTmFtZSlcbiAgICAgIGVscyA9ICQkKHRhZ05hbWUsIGVscylcbiAgICBlbHNlIHtcbiAgICAgIC8vIHNlbGVjdCBhbGwgdGhlIGNoaWxkcmVuIGZvciBhbGwgdGhlIGRpZmZlcmVudCByb290IGVsZW1lbnRzXG4gICAgICB2YXIgbm9kZUxpc3QgPSBbXVxuICAgICAgZWFjaChlbHMsIGZ1bmN0aW9uIChfZWwpIHtcbiAgICAgICAgbm9kZUxpc3QucHVzaCgkJCh0YWdOYW1lLCBfZWwpKVxuICAgICAgfSlcbiAgICAgIGVscyA9IG5vZGVMaXN0XG4gICAgfVxuICAgIC8vIGdldCByaWQgb2YgdGhlIHRhZ05hbWVcbiAgICB0YWdOYW1lID0gMFxuICB9XG5cbiAgaWYgKGVscy50YWdOYW1lKVxuICAgIHB1c2hUYWdzKGVscylcbiAgZWxzZVxuICAgIGVhY2goZWxzLCBwdXNoVGFncylcblxuICByZXR1cm4gdGFnc1xufVxuXG4vLyB1cGRhdGUgZXZlcnl0aGluZ1xucmlvdC51cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGVhY2godmlydHVhbERvbSwgZnVuY3Rpb24odGFnKSB7XG4gICAgdGFnLnVwZGF0ZSgpXG4gIH0pXG59XG5cbi8vIEBkZXByZWNhdGVkXG5yaW90Lm1vdW50VG8gPSByaW90Lm1vdW50XG5cblxuICAvLyBzaGFyZSBtZXRob2RzIGZvciBvdGhlciByaW90IHBhcnRzLCBlLmcuIGNvbXBpbGVyXG4gIHJpb3QudXRpbCA9IHsgYnJhY2tldHM6IGJyYWNrZXRzLCB0bXBsOiB0bXBsIH1cblxuICAvLyBzdXBwb3J0IENvbW1vbkpTLCBBTUQgJiBicm93c2VyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gVF9PQkpFQ1QpXG4gICAgbW9kdWxlLmV4cG9ydHMgPSByaW90XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiB3aW5kb3cucmlvdCA9IHJpb3QgfSlcbiAgZWxzZVxuICAgIHdpbmRvdy5yaW90ID0gcmlvdFxuXG59KSh0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkKTtcbiIsInZhciBEaXNwYXRjaGVyID0gcmVxdWlyZSgnZmx1eC1yaW90JykuRGlzcGF0Y2hlcjtcblxudmFyIEFjdGlvblR5cGVzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzL3RpbWVib3hlcl9jb25zdGFudHMuanMnKS5BY3Rpb25UeXBlcztcblxudmFyIGRpc3BhdGNoID0gZnVuY3Rpb24odHlwZSwgZGF0YSkge1xuICByZXR1cm4gRGlzcGF0Y2hlci5oYW5kbGVWaWV3QWN0aW9uKHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIGRhdGE6IGRhdGFcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2F2ZVRlbXBsYXRlOiBmdW5jdGlvbih0YXNrKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKEFjdGlvblR5cGVzLlRFTVBMQVRFX1NBVkUsIHRhc2spO1xuICB9LFxuICB1cGRhdGVUZW1wbGF0ZTogZnVuY3Rpb24odGFzaywgaW5kZXgpIHtcbiAgICB2YXIgZGF0YSA9IHt0YXNrOiB0YXNrLCBpbmRleDogaW5kZXh9O1xuICAgIHJldHVybiBkaXNwYXRjaChBY3Rpb25UeXBlcy5URU1QTEFURV9VUERBVEUsIGRhdGEpO1xuICB9LFxuICByZW1vdmVUZW1wbGF0ZTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goQWN0aW9uVHlwZXMuVEVNUExBVEVfUkVNT1ZFLCBpbmRleCk7XG4gIH0sXG4gIHNlcnZlckRhdGFSZWNlaXZlZDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goQWN0aW9uVHlwZXMuU0VSVkVSX0ZFVENIX0NPTVBMRVRFLCBkYXRhKTtcbiAgfVxufTtcbiIsInZhciByaW90ID0gcmVxdWlyZSgncmlvdCcpO1xudmFyIGZsdXhfcmlvdCA9IHJlcXVpcmUoJ2ZsdXgtcmlvdCcpXG5cbnJpb3QudGFnKCd0aW1lYm94ZXItYWJvdXQnLCAnPGgzPnsgb3B0cy50aXRsZSB9PC9oMz4gPGRpdiBjbGFzcz1cInJvd1wiPiA8ZGl2IGNsYXNzPVwiY29sLW1kLTRcIj4gPGltZyBzcmM9XCJodHRwOi8vd3d3LnBpeGVudHJhbC5jb20vcGljcy8xRHZaMGJLS1JyYkdnZXBGTWVqa3BVUDFLY3dzei5naWZcIiAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1cImNvbC1tZC04XCI+IDx1bD4gPGxpPlJheSBIYXVzbWFubjwvbGk+IDxsaT5KYXk8L2xpPiA8bGk+RGlua3M8L2xpPiA8L3VsPiA8L2Rpdj4gPC9kaXY+JywgZnVuY3Rpb24ob3B0cykge1xuXG5cbn0pO1xuIiwidmFyIHJpb3QgPSByZXF1aXJlKCdyaW90Jyk7XG52YXIgZmx1eF9yaW90ID0gcmVxdWlyZSgnZmx1eC1yaW90JylcblxucmlvdC50YWcoJ3RpbWVib3hlci1jb250YWN0JywgJzxoMz57IG9wdHMudGl0bGUgfTwvaDM+IDxhIGhyZWY9XCJodHRwOi8vd3d3LmJhYmJlbC5jb20vXCI+YmFiYmVsLmNvbTwvYT4nLCBmdW5jdGlvbihvcHRzKSB7XG5cblxufSk7XG4iLCJ2YXIgcmlvdCA9IHJlcXVpcmUoJ3Jpb3QnKTtcbnJlcXVpcmUoJy4vdGltZWJveGVyX3RlbXBsYXRlL2luZGV4LnRhZycpXG5cbnZhciBmbHV4X3Jpb3QgPSByZXF1aXJlKCdmbHV4LXJpb3QnKVxuXG5yaW90LnRhZygndGltZWJveGVyLWluZGV4JywgJzxoMz57IG9wdHMudGl0bGUgfTwvaDM+IDx0aW1lYm94ZXItdGVtcGxhdGUtaW5kZXggc3RvcmU9XCJ7IG9wdHMuc3RvcmUgfVwiPjwvdGltZWJveGVyLXRlbXBsYXRlLWluZGV4PicsIGZ1bmN0aW9uKG9wdHMpIHtcblxuXG59KTtcbiIsInZhciByaW90ID0gcmVxdWlyZSgncmlvdCcpO1xucmlvdC50YWcoJ3Byb2dyZXNzLWJhcicsICc8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NcIj4gPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItc3RyaXBlZCB7dGhpcy5wcm9ncmVzc1N0YXRlfVwiIHJvbGU9XCJwcm9ncmVzc2JhclwiIHN0eWxlPVwid2lkdGg6IHt0aGlzLnBlcmNlbnRhZ2V9JTtcIj4gPC9kaXY+IDwvZGl2PicsIGZ1bmN0aW9uKG9wdHMpIHtcblxuICB0aGlzLnNob3dEYW5nZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnByb2dyZXNzU3RhdGUgPSAncHJvZ3Jlc3MtYmFyLWRhbmdlcic7XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLnNob3dXYXJuaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wcm9ncmVzc1N0YXRlID0gJ3Byb2dyZXNzLWJhci13YXJuaW5nJztcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMuc2hvd05vcm1hbCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHJvZ3Jlc3NTdGF0ZSA9ICdwcm9ncmVzcy1iYXItc3VjY2Vzcyc7XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLm9uKCdtb3VudCcsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2hvd05vcm1hbCgpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH0pO1xuXG4gIHRoaXMub24oJ3VwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucGVyY2VudGFnZSA9IG9wdHNbJ2N1cnJlbnQtdGltZSddKjEwMC9vcHRzWyd0b3RhbC10aW1lJ107XG5cbiAgICBpZiAob3B0c1snY3VycmVudC10aW1lJ10gPCAyMCkge1xuICAgICAgdGhpcy5zaG93RGFuZ2VyKCk7XG4gICAgfSBlbHNlIGlmIChvcHRzWydjdXJyZW50LXRpbWUnXSA8IDUwKSB7XG4gICAgICB0aGlzLnNob3dXYXJuaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd05vcm1hbCgpO1xuICAgIH1cbiAgfSk7XG5cblxufSk7XG4iLCJ2YXIgcmlvdCA9IHJlcXVpcmUoJ3Jpb3QnKTtcbnZhciB0aW1lYm94ZXIgPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL3RpbWVib3hlci5qcycpO1xudmFyIGZsdXhfcmlvdCA9IHJlcXVpcmUoJ2ZsdXgtcmlvdCcpO1xudmFyIFRpbWVyID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdGltZXInKTtcbnJlcXVpcmUoJy4vcHJvZ3Jlc3MudGFnJyk7XG5yZXF1aXJlKCcuL3RpbWVyLnRhZycpO1xuXG5yaW90LnRhZygndGltZWJveGVyLW1lZXRpbmctc3RhcnQnLCAnPGhyPiA8cHJvZ3Jlc3MtYmFyIGN1cnJlbnQtdGltZT1cInt0aGlzLmN1cnJlbnRUaW1lLnRvdGFsfVwiIHRvdGFsLXRpbWU9XCJ7dGhpcy5jdXJyZW50QWdlbmRhVGltZX1cIj4gPC9wcm9ncmVzcy1iYXI+IDxkaXYgY2xhc3M9XCJyb3dcIj4gPGRpdiBjbGFzcz1cImNvbC1tZC05XCI+IDxoNCBjbGFzcz1cImFnZW5kYS1uYW1lXCI+eyB0aGlzLmN1cnJlbnRBZ2VuZGEubmFtZSB9PC9oND4gPGNvdW50LWRvd24tdGltZXIgbWludXRlcz1cInt0aGlzLmN1cnJlbnRUaW1lLm1pbnV0ZXN9XCIgc2Vjb25kcz1cInt0aGlzLmN1cnJlbnRUaW1lLnNlY29uZHN9XCI+IDwvY291bnQtZG93bi10aW1lcj4gPGRpdiBjbGFzcz1cInJvd1wiPiA8ZGl2IGNsYXNzPVwiY29sLW1kLTZcIj4gPGEgaHJlZj1cIiNcIiBvbmNsaWNrPVwieyBzdGFydE9yUGF1c2UgfVwiIGNsYXNzPVwiYnRuIGJ0bi1ibG9jayBzdGFydC1wYXVzZS1idXR0b25cIj4gPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsYXktY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPiA8c3BhbiBpZD1cImFnZW5kYUNvbnRpbnVlXCI+U3RhcnQ8L3NwYW4+IDwvYT4gPC9kaXY+IDxkaXYgY2xhc3M9XCJjb2wtbWQtNlwiPiA8YSBocmVmPVwiI1wiIG9uY2xpY2s9XCJ7IG5leHRBZ2VuZGEgfVwiIGNsYXNzPVwiYnRuIGJ0bi1ibG9jayBuZXh0LWJ1dHRvblwiIGlkPVwibmV4dEFnZW5kYUJ0blwiPiA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tb2stY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPiBOZXh0IDwvYT4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVwicm93XCI+IDxkaXYgY2xhc3M9XCJjb2wtbWQtM1wiPiA8YSBocmVmPVwiI1wiIG9uY2xpY2s9XCJ7IHByZXZpb3VzQWdlbmRhIH1cIiBjbGFzcz1cImJ0biBidG4teHMgYnRuLWRlZmF1bHRcIj4gPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLW9rLWNpcmNsZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj4gUHJldmlvdXMgPC9hPiA8YSBocmVmPVwiI1wiIG9uY2xpY2s9XCJ7IHJlZHVjZVRpbWUgfVwiIGNsYXNzPVwiYnRuIGJ0bi14cyBidG4tZGVmYXVsdFwiPi0xPC9hPiA8YSBocmVmPVwiI1wiIG9uY2xpY2s9XCJ7IGluY3JlYXNlVGltZSB9XCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1kZWZhdWx0XCI+KzE8L2E+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XCJjb2wtbWQtM1wiPiA8aDQgY2xhc3M9XCJjb3VudGVyLXRlbXBsYXRlLW5hbWVcIj4geyB0aGlzLnRlbXBsYXRlLm5hbWUgfSA8L2g0PiA8dWwgY2xhc3M9XCJsaXN0LWdyb3VwXCI+IDxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiIGVhY2g9XCJ7IGl0ZW0sIGluZGV4IGluIHRoaXMudGVtcGxhdGUuYWdlbmRhIH1cIiBpZj1cInsgIWl0ZW0uZmluaXNoZWQgfVwiID4gPGI+eyBpdGVtLm5hbWUgfTwvYj4gPHNwYW4gY2xhc3M9XCJiYWRnZVwiPnsgaXRlbS50aW1lIH08L3NwYW4+IDwvbGk+IDwvdWw+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cIm1vZGFsIGZhZGVcIiBpZD1cImFsbERvbmVcIj4gPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiPiA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPiA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+IDxoNCBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+Tm90aWNlPC9oND4gPC9kaXY+IDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+IDxwPkdyZWF0IEpvYiBmaW5pc2hpbmcgdGhlIG1lZXRpbmchITwvcD4gPC9kaXY+IDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiPkNsb3NlPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PicsIGZ1bmN0aW9uKG9wdHMpIHtcblxuICB0aGlzLmN1cnJlbnRBZ2VuZGFJbmRleCA9IDA7XG4gIHRoaXMuY3VycmVudEFnZW5kYVRpbWUgPSAxO1xuXG4gIHRoaXMuc2V0Q3VycmVudEFnZW5kYSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmKHRoaXMudGVtcGxhdGUpIHtcbiAgICAgIHRoaXMuY3VycmVudEFnZW5kYSA9IHRoaXMudGVtcGxhdGUuYWdlbmRhW3RoaXMuY3VycmVudEFnZW5kYUluZGV4XTtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRBZ2VuZGEpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QWdlbmRhVGltZSA9IHBhcnNlRmxvYXQodGhpcy5jdXJyZW50QWdlbmRhLnRpbWUpICogNjA7XG4gICAgICAgIHRoaXMudGltZXJDbG9jay5zZXRUaW1lKHRoaXMuY3VycmVudEFnZW5kYVRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCh0aGlzLmFsbERvbmUpLm1vZGFsKCk7XG4gICAgICB9XG4gICAgfVxuICB9LmJpbmQodGhpcyk7XG5cbiAgdGhpcy5nZXRUZW1wbGF0ZUZyb21TdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcHRzLnRlbXBsYXRlX3N0b3JlLmdldEFsbCgpW29wdHMudGVtcGxhdGVJZF07XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLm5leHRBZ2VuZGEgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc2V0U3RhdHVzKCk7XG4gICAgdGhpcy50ZW1wbGF0ZS5hZ2VuZGFbdGhpcy5jdXJyZW50QWdlbmRhSW5kZXhdWydmaW5pc2hlZCddID0gdHJ1ZTtcbiAgICB0aGlzLmN1cnJlbnRBZ2VuZGFJbmRleCsrO1xuICAgIHRoaXMuc2V0Q3VycmVudEFnZW5kYSgpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLnByZXZpb3VzQWdlbmRhID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNldFN0YXR1cygpO1xuICAgIHRoaXMuY3VycmVudEFnZW5kYUluZGV4LS07XG4gICAgdGhpcy50ZW1wbGF0ZS5hZ2VuZGFbdGhpcy5jdXJyZW50QWdlbmRhSW5kZXhdWydmaW5pc2hlZCddID0gZmFsc2U7XG4gICAgdGhpcy5zZXRDdXJyZW50QWdlbmRhKCk7XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLnJlZHVjZVRpbWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVtYWluaW5nVGltZSA9IHRoaXMudGltZXJDbG9jay5nZXRUaW1lKCk7XG4gICAgaWYgKHJlbWFpbmluZ1RpbWUgLSA2MCA+IDApIHtcbiAgICAgIHRoaXMudGltZXJDbG9jay5zZXRUaW1lKHJlbWFpbmluZ1RpbWUgLSA1OSk7XG4gICAgfVxuICB9LmJpbmQodGhpcyk7XG5cbiAgdGhpcy5pbmNyZWFzZVRpbWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVtYWluaW5nVGltZSA9IHRoaXMudGltZXJDbG9jay5nZXRUaW1lKCk7XG4gICAgdGhpcy5jdXJyZW50QWdlbmRhVGltZSA9IHJlbWFpbmluZ1RpbWUgKyA2MDtcbiAgICB0aGlzLnRpbWVyQ2xvY2suc2V0VGltZSh0aGlzLmN1cnJlbnRBZ2VuZGFUaW1lKTtcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMudXBkYXRlQ3VycmVudFRpbWUgPSBmdW5jdGlvbih0aW1lKSB7XG4gICAgdGhpcy5jdXJyZW50VGltZSA9IHtcbiAgICAgIG1pbnV0ZXM6IE1hdGguZmxvb3IodGltZS82MCksXG4gICAgICBzZWNvbmRzOiB0aW1lICUgNjAsXG4gICAgICB0b3RhbDogdGltZVxuICAgIH07XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLmluaXRDbG9jayA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGltZXJDbG9jayA9IG5ldyBUaW1lcih7XG4gICAgICBwdWxzZUNiOiBmdW5jdGlvbiAodGltZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUN1cnJlbnRUaW1lKHRpbWUpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgZW5kQ2I6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgdGltZTogdGhpcy5jdXJyZW50QWdlbmRhVGltZVxuICAgIH0pO1xuICB9LmJpbmQodGhpcyk7XG5cbiAgdGhpcy51cGRhdGVGcm9tU3RvcmUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmdldFRlbXBsYXRlRnJvbVN0b3JlKCk7XG4gICAgdGhpcy5zZXRDdXJyZW50QWdlbmRhKCk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMuc3RhcnRPclBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoKHRoaXMuY3VycmVudEFnZW5kYVN0YXR1cykge1xuICAgICAgY2FzZSAncGF1c2VkJzpcbiAgICAgICAgdGhpcy50aW1lckNsb2NrLnN0YXJ0KCk7XG4gICAgICAgIHRoaXMuY3VycmVudEFnZW5kYVN0YXR1cyA9ICdzdGFydGVkJztcbiAgICAgICAgJCh0aGlzLmFnZW5kYUNvbnRpbnVlKS5odG1sKCdQYXVzZScpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3N0YXJ0ZWQnOlxuICAgICAgICB0aGlzLnRpbWVyQ2xvY2suc3RvcCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRBZ2VuZGFTdGF0dXMgPSAncGF1c2VkJztcbiAgICAgICAgJCh0aGlzLmFnZW5kYUNvbnRpbnVlKS5odG1sKCdTdGFydCcpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLnJlc2V0U3RhdHVzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50aW1lckNsb2NrLnN0b3AoKTtcbiAgICB0aGlzLmN1cnJlbnRBZ2VuZGFTdGF0dXMgPSAncGF1c2VkJztcbiAgICAkKHRoaXMuYWdlbmRhQ29udGludWUpLmh0bWwoJ1N0YXJ0Jyk7XG4gIH0uYmluZCh0aGlzKTtcblxuICBmbHV4X3Jpb3Quc3RvcmVNaXhpbih0aGlzLCBvcHRzLnRlbXBsYXRlX3N0b3JlLCB0aGlzLnVwZGF0ZUZyb21TdG9yZSk7XG4gIHRoaXMub24oJ21vdW50JywgZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMuZ2V0VGVtcGxhdGVGcm9tU3RvcmUoKTtcbiAgICB0aGlzLmluaXRDbG9jaygpO1xuICAgIHRoaXMucmVzZXRTdGF0dXMoKTtcbiAgICB0aGlzLnNldEN1cnJlbnRBZ2VuZGEoKTtcbiAgICB0aGlzLnVwZGF0ZUN1cnJlbnRUaW1lKHRoaXMuY3VycmVudEFnZW5kYVRpbWUpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH0pO1xuXG4gIHRoaXMub24oJ3VubW91bnQnLCBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRpbWVyQ2xvY2suc3RvcCgpO1xuICB9KTtcblxuXG59KTtcbiIsInZhciByaW90ID0gcmVxdWlyZSgncmlvdCcpO1xucmlvdC50YWcoJ2NvdW50LWRvd24tdGltZXInLCAnPGRpdiBjbGFzcz1cInRpbWVyQ29udGFpbmVyIHt0aGlzLmNvbnRhaW5lckNsYXNzfVwiPiA8c3Bhbj57dGhpcy5taW51dGVzfTwvc3Bhbj46PHNwYW4+e3RoaXMuc2Vjb25kc308L3NwYW4+IDwvZGl2PicsIGZ1bmN0aW9uKG9wdHMpIHtcblxuICB0aGlzLnByZXR0aWZ5ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiAoZGF0YSA8IDEwKSA/ICcwJysgZGF0YSA6IGRhdGE7XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLnNob3dEYW5nZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbnRhaW5lckNsYXNzID0gJ2Rhbmdlcic7XG4gIH0uYmluZCh0aGlzKTtcbiAgdGhpcy5zaG93Tm9ybWFsID0gZnVuY3Rpb24oKSB7XG4gICB0aGlzLmNvbnRhaW5lckNsYXNzID0gJyc7XG4gIH0uYmluZCh0aGlzKTtcbiAgdGhpcy5zaG93V2FybmluZyA9IGZ1bmN0aW9uKCkge1xuICAgdGhpcy5jb250YWluZXJDbGFzcyA9ICd3YXJuaW5nJztcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMub24oJ3VwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubWludXRlcyA9IG9wdHMubWludXRlcztcbiAgICB0aGlzLnNlY29uZHMgPSB0aGlzLnByZXR0aWZ5KG9wdHMuc2Vjb25kcyk7XG4gICAgaWYgKG9wdHMubWludXRlcyA9PT0gMCkge1xuICAgICAgaWYgKG9wdHMuc2Vjb25kcyA8IDIwKSB7XG4gICAgICAgIHRoaXMuc2hvd0RhbmdlcigpO1xuICAgICAgfSBlbHNlIGlmIChvcHRzLnNlY29uZHMgPCA1MCkge1xuICAgICAgICB0aGlzLnNob3dXYXJuaW5nKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd05vcm1hbCgpO1xuICAgIH1cbiAgfSk7XG5cbn0pOyIsInZhciByaW90ID0gcmVxdWlyZSgncmlvdCcpO1xudmFyIGZsdXhfcmlvdCA9IHJlcXVpcmUoJ2ZsdXgtcmlvdCcpO1xudmFyIFRpbWVCb3hlciA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvdGltZWJveGVyLmpzJyk7XG5cbnJpb3QudGFnKCd0aW1lYm94ZXItdGVtcGxhdGUtYWRkJywgJzxoMz57IG9wdHMudGl0bGUgfTwvaDM+IDxocj4gPGZvcm0+IDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+IDxsYWJlbCBmb3I9XCJ0ZW1wbGF0ZU5hbWVcIj5FdmVudCBUZW1wbGF0ZSBOYW1lPC9sYWJlbD4gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cInRlbXBsYXRlTmFtZVwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgVGVtcGxhdGUgTmFtZVwiIG9ua2V5dXA9XCJ7IGVkaXRUaXRsZSB9XCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPiA8bGFiZWw+QWdlbmRhPC9sYWJlbD4gPHVsIGNsYXNzPVwibGlzdC1ncm91cFwiPiA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIiBlYWNoPVwieyBpdGVtIGluIGFnZW5kYUl0ZW1zIH1cIj4gPGI+eyBpdGVtLm5hbWUgfTwvYj4gZm9yIDxiPnsgaXRlbS50aW1lIH08L2I+IG1pbnV0ZXMgPC9saT4gPC91bD4gPC9kaXY+IDwvZm9ybT4gPGZvcm0gY2xhc3M9XCJmb3JtLWlubGluZVwiIG9uc3VibWl0PVwieyBhZGRBZ2VuZGEgfVwiPiA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPiA8bGFiZWwgY2xhc3M9XCJzci1vbmx5XCIgZm9yPVwiYWdlbmRhVGl0bGVcIj5JdGVtIFRpdGxlPC9sYWJlbD4gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImFnZW5kYVRpdGxlXCIgcGxhY2Vob2xkZXI9XCJFbnRlciBBZ2VuZGEgSXRlbSBUaXRsZVwiIG9ua2V5dXA9XCJ7IGVkaXRBZ2VuZGFUaXRsZSB9XCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPiA8bGFiZWwgY2xhc3M9XCJzci1vbmx5XCIgZm9yPVwiYWdlbmRhVGltZVwiPkl0ZW0gVGltZTwvbGFiZWw+IDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJhZ2VuZGFUaW1lXCIgcGxhY2Vob2xkZXI9XCJFbnRlciBBZ2VuZGEgSXRlbSBUaW1lXCIgb25rZXl1cD1cInsgZWRpdEFnZW5kYVRpbWUgfVwiPiA8L2Rpdj4gPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgX19kaXNhYmxlZD1cInsgIShhZ2VuZGFUaXRsZVZhbHVlICYmIGFnZW5kYVRpbWVWYWx1ZSkgfVwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCI+QWRkIEFnZW5kYSBJdGVtPC9idXR0b24+IDwvZm9ybT4gPGhyPiA8YSBocmVmPVwiI1wiIG9uY2xpY2s9XCJ7IHNhdmVUZW1wbGF0ZSB9XCIgY2xhc3M9XCJidG4gYnRuLXN1Y2Nlc3NcIj4gPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXMtc2lnblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj4gQ3JlYXRlIDwvYT4gPGEgaHJlZj1cIiNcIiBvbmNsaWNrPVwieyBjYW5jZWwgfVwiIGNsYXNzPVwiYnRuIGJ0bi1pbmZvXCI+IDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1iYW4tY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPiBDYW5jZWwgPC9hPicsIGZ1bmN0aW9uKG9wdHMpIHtcblxuICB0aGlzLnRpdGxlID0gJyc7XG5cbiAgdGhpcy5hZ2VuZGFJdGVtcyA9IFtdO1xuXG4gIHRoaXMuYWRkQWdlbmRhID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuYWdlbmRhVGl0bGVWYWx1ZSAmJiB0aGlzLmFnZW5kYVRpbWVWYWx1ZSkge1xuICAgICAgdGhpcy5hZ2VuZGFJdGVtcy5wdXNoKHtcbiAgICAgICAgbmFtZTogdGhpcy5hZ2VuZGFUaXRsZVZhbHVlLFxuICAgICAgICB0aW1lOiB0aGlzLmFnZW5kYVRpbWVWYWx1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLmFnZW5kYVRpdGxlVmFsdWUgPSB0aGlzLmFnZW5kYVRpbWVWYWx1ZSA9IHRoaXMuYWdlbmRhVGltZS52YWx1ZSA9IHRoaXMuYWdlbmRhVGl0bGUudmFsdWUgPSAnJztcbiAgICB9XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLmVkaXRUaXRsZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICB0aGlzLnRpdGxlID0gZS50YXJnZXQudmFsdWU7XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLmVkaXRBZ2VuZGFUaXRsZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICB0aGlzLmFnZW5kYVRpdGxlVmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMuZWRpdEFnZW5kYVRpbWUgPSBmdW5jdGlvbihlKSB7XG4gICAgdGhpcy5hZ2VuZGFUaW1lVmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMuc2F2ZVRlbXBsYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgVGltZUJveGVyLnNhdmVUZW1wbGF0ZSh7XG4gICAgICBuYW1lOiB0aGlzLnRpdGxlLFxuICAgICAgYWdlbmRhOiB0aGlzLmFnZW5kYUl0ZW1zXG4gICAgfSk7XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLnVwZGF0ZUZyb21TdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJpb3Qucm91dGUoJyMnKTtcbiAgfS5iaW5kKHRoaXMpO1xuICB0aGlzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJpb3Qucm91dGUoJyMnKTtcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIGZsdXhfcmlvdC5zdG9yZU1peGluKHRoaXMsIG9wdHMuc3RvcmUsIHRoaXMudXBkYXRlRnJvbVN0b3JlKVxuXG5cbn0pO1xuIiwidmFyIHJpb3QgPSByZXF1aXJlKCdyaW90Jyk7XG52YXIgZmx1eF9yaW90ID0gcmVxdWlyZSgnZmx1eC1yaW90Jyk7XG52YXIgVGltZUJveGVyID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy90aW1lYm94ZXIuanMnKTtcblxucmlvdC50YWcoJ3RpbWVyLWxpc3QnLCAnPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCIgPiA8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT1cInthZ2VuZGEubmFtZX1cIiBuYW1lPVwiaXRlbU5hbWVcIj4gPHNwYW4+IEZvciA8L3NwYW4+IDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPVwie2FnZW5kYS50aW1lfVwiIG5hbWU9XCJpdGVtVGltZVwiPiA8c3Bhbj4gTWludXRlcyA8L3NwYW4+IDxzcGFuIG9uY2xpY2s9XCJ7bW92ZVVwfVwiIGRhdGEtaW5kZXg9XCJ7aW5kZXh9XCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy11cFwiPiA8L3NwYW4+IDxzcGFuIG9uY2xpY2s9XCJ7bW92ZURvd259XCIgZGF0YS1pbmRleD1cIntpbmRleH1cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LWRvd25cIj4gPC9zcGFuPiA8c3BhbiBvbmNsaWNrPVwie2RlbGV0ZUl0ZW19XCIgZGF0YS1pbmRleD1cIntpbmRleH1cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZVwiPiA8L3NwYW4+IDxzcGFuIG9uY2xpY2s9XCJ7aW5zZXJ0QWJvdmV9XCIgZGF0YS1pbmRleD1cIntpbmRleH1cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBnbHlwaGljb24gZ2x5cGhpY29uLW9wZW4tZmlsZVwiPiA8L3NwYW4+IDwvbGk+JywgZnVuY3Rpb24ob3B0cykge1xuXG4gIHRoaXMubW92ZVVwID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgaW5kZXggPSBwYXJzZUludChldmVudC50YXJnZXQuZGF0YXNldC5pbmRleCk7XG4gICAgdmFyIHRtcDtcbiAgICB2YXIgYWdlbmRhcyA9IHRoaXMucGFyZW50LmFnZW5kYUl0ZW1zLmFnZW5kYTtcbiAgICBpZiAoIGluZGV4ID4gMCkge1xuICAgICAgdG1wID0gYWdlbmRhc1tpbmRleCAtIDFdO1xuICAgICAgYWdlbmRhc1tpbmRleCAtIDFdID0gYWdlbmRhc1tpbmRleF07XG4gICAgICBhZ2VuZGFzW2luZGV4XSA9IHRtcDtcbiAgICAgIFRpbWVCb3hlci51cGRhdGVUZW1wbGF0ZSh0aGlzLnBhcmVudC5hZ2VuZGFJdGVtcywgdGhpcy5wYXJlbnQub3B0cy50ZW1wbGF0ZUlkKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKTtcbiAgdGhpcy5tb3ZlRG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LmRhdGFzZXQuaW5kZXgsIDEwKTtcbiAgICB2YXIgdG1wO1xuICAgIHZhciBhZ2VuZGFzID0gdGhpcy5wYXJlbnQuYWdlbmRhSXRlbXMuYWdlbmRhO1xuXG4gICAgaWYgKCBpbmRleCA8IGFnZW5kYXMubGVuZ3RoIC0gMSkge1xuICAgICAgdG1wID0gYWdlbmRhc1tpbmRleF07XG4gICAgICBhZ2VuZGFzW2luZGV4XSA9IGFnZW5kYXNbaW5kZXggKyAxXTtcbiAgICAgIGFnZW5kYXNbaW5kZXggKyAxXSA9IHRtcDtcbiAgICAgIFRpbWVCb3hlci51cGRhdGVUZW1wbGF0ZSh0aGlzLnBhcmVudC5hZ2VuZGFJdGVtcywgdGhpcy5wYXJlbnQub3B0cy50ZW1wbGF0ZUlkKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKTtcbiAgdGhpcy5kZWxldGVJdGVtID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgaW5kZXggPSBwYXJzZUludChldmVudC50YXJnZXQuZGF0YXNldC5pbmRleCwgMTApO1xuICAgIHZhciBhZ2VuZGFzID0gdGhpcy5wYXJlbnQuYWdlbmRhSXRlbXMuYWdlbmRhO1xuICAgIGFnZW5kYXMuc3BsaWNlKGluZGV4LCAxKTsgLy8gcmVtb3ZlIHRoZSBhcnJheSBpdGVtXG4gICAgVGltZUJveGVyLnVwZGF0ZVRlbXBsYXRlKHRoaXMucGFyZW50LmFnZW5kYUl0ZW1zLCB0aGlzLnBhcmVudC5vcHRzLnRlbXBsYXRlSWQpO1xuICB9LmJpbmQodGhpcyk7XG4gIHRoaXMuaW5zZXJ0QWJvdmUgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGV2ZW50LnRhcmdldC5kYXRhc2V0LmluZGV4LCAxMCk7XG4gICAgdGhpcy5hZGROZXdSb3coaW5kZXgpO1xuICB9LmJpbmQodGhpcyk7XG5cbn0pO1xuXG5yaW90LnRhZygndGltZWJveGVyLXRlbXBsYXRlLWVkaXQnLCAnPHAgaWY9XCJ7b3B0cy5pc19lcnJvcn1cIj4gRmlsbCB1cCBhbGwgdGhlIHZhbHVlcyA8L3A+IDxoND4ge29wdHMudGl0bGV9IDwvaDQ+IDxmb3JtIG9uc3VibWl0PVwie3VwZGF0ZUFnZW5kYX1cIj4gPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj4gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cInRlbXBsYXRlTmFtZVwiIHZhbHVlPVwie2FnZW5kYUl0ZW1zLm5hbWV9XCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPiA8bGFiZWw+QWdlbmRhPC9sYWJlbD4gPHVsIGNsYXNzPVwibGlzdC1ncm91cFwiPiA8dGltZXItbGlzdCBlYWNoPVwie2FnZW5kYSwgaW5kZXggaW4gYWdlbmRhSXRlbXMuYWdlbmRhfVwiIGRhdGE9XCJhZ2VuZGFcIj48L3VsPiA8L2xpPiA8L3VsPiA8L2Rpdj4gPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIG9uY2xpY2s9XCJ7YWRkTmV3Um93fVwiPk5ldyBJdGVtPC9idXR0b24+IDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCI+VXBkYXRlPC9idXR0b24+IDwvZm9ybT4nLCBmdW5jdGlvbihvcHRzKSB7XG5cbiAgdGhpcy5hZGROZXdSb3cgPSBmdW5jdGlvbihyb3dOdW0pIHtcbiAgICB2YXIgYWdlbmRhID0ge1xuICAgICAgbmFtZTogJycsXG4gICAgICB0aW1lOiAnJ1xuICAgIH07XG4gICAgdGhpcy5hZ2VuZGFJdGVtcy5hZ2VuZGEuc3BsaWNlKHJvd051bSwgMCwgYWdlbmRhKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9LmJpbmQodGhpcyk7XG5cbiAgdGhpcy51cGRhdGVBZ2VuZGEgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGVtcGxhdGVOYW1lID0gdGhpcy50ZW1wbGF0ZU5hbWUudmFsdWU7XG5cbiAgICB2YXIgaXRlbU5hbWVzID0gJCh0aGlzLnJvb3QpLmZpbmQoJ1tuYW1lPVwiaXRlbU5hbWVcIl0nKTtcbiAgICB2YXIgaXRlbVRpbWVzID0gJCh0aGlzLnJvb3QpLmZpbmQoJ1tuYW1lPVwiaXRlbVRpbWVcIl0nKTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMCA7IGluZGV4IDwgaXRlbU5hbWVzLmxlbmd0aCA7IGluZGV4KyspIHtcbiAgICAgIGlmIChpdGVtTmFtZXNbaW5kZXhdLnZhbHVlID09ICcnIHx8IGl0ZW1UaW1lc1tpbmRleF0udmFsdWUgPT09ICcnKSB7XG4gICAgICAgIG9wdHMuaXNfZXJyb3IgPSB0cnVlO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLmFnZW5kYUl0ZW1zLmFnZW5kYVtpbmRleF0gPSB7IG5hbWUgOiBpdGVtTmFtZXNbaW5kZXhdLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lIDogaXRlbVRpbWVzW2luZGV4XS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5hZ2VuZGFJdGVtcy5uYW1lID0gdGVtcGxhdGVOYW1lO1xuICAgIFRpbWVCb3hlci51cGRhdGVUZW1wbGF0ZSh0aGlzLmFnZW5kYUl0ZW1zLCBvcHRzLnRlbXBsYXRlSWQpO1xuICB9LmJpbmQodGhpcyk7XG5cbiAgdGhpcy51cGRhdGVGcm9tU3RvcmUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmFnZW5kYUl0ZW1zID0gdGhpcy5zdG9yZS5nZXRCeUluZGV4KG9wdHMudGVtcGxhdGVJZCk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMub24oJ21vdW50JywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWdlbmRhSXRlbXMgPSB0aGlzLnN0b3JlLmdldEJ5SW5kZXgob3B0cy50ZW1wbGF0ZUlkKSB8fCB7fTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9KTtcblxuICBmbHV4X3Jpb3Quc3RvcmVNaXhpbih0aGlzLCBvcHRzLnN0b3JlLCB0aGlzLnVwZGF0ZUZyb21TdG9yZSk7XG5cblxufSk7IiwidmFyIHJpb3QgPSByZXF1aXJlKCdyaW90Jyk7XG52YXIgdGltZWJveGVyID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy90aW1lYm94ZXIuanMnKVxudmFyIGZsdXhfcmlvdCA9IHJlcXVpcmUoJ2ZsdXgtcmlvdCcpXG5cbnZhciBTZXJ2ZXJBcGlVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL1NlcnZlckFwaVV0aWxzLmpzJyk7XG5TZXJ2ZXJBcGlVdGlscy5nZXRBbGwoKTtcblxucmlvdC50YWcoJ3RpbWVib3hlci10ZW1wbGF0ZS1pbmRleCcsICc8aDM+eyBvcHRzLnRpdGxlIH08L2gzPiA8dGFibGUgY2xhc3M9XCJ0YWJsZSB0YWJsZS1ob3ZlclwiPiA8dHI+IDx0aD5UZW1wbGF0ZTwvdGg+IDx0aD5BY3Rpb25zPC90aD4gPC90cj4gPHRyIGVhY2g9XCJ7IGl0ZW0gaW4gdGhpcy5pdGVtcyB9XCI+IDx0ZD48aDQ+eyBpdGVtLm5hbWUgfTwvaDQ+PC90ZD4gPHRkPiA8YSBocmVmPVwiI1wiIG9uY2xpY2s9XCJ7IHBhcmVudC5zdGFydE1lZXRpbmcgfVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+IDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aW1lXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPiBTdGFydCBhIE1lZXRpbmcgPC9hPiA8YSBocmVmPVwiI1wiIG9uY2xpY2s9XCJ7IHBhcmVudC5lZGl0TWVldGluZyB9XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj4gPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWVkaXRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+IEVkaXQgPC9hPiA8YSBocmVmPVwiI1wiIG9uY2xpY2s9XCJ7IHBhcmVudC5yZW1vdmVNZWV0aW5nIH1cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPiA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdHJhc2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+IFJlbW92ZSA8L2E+IDwvdGQ+IDwvdHI+IDwvdGFibGU+IDxhIGhyZWY9XCIjXCIgb25jbGljaz1cInsgYWRkIH1cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPiA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcGx1cy1zaWduXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPiBBZGQgTmV3IFRlbXBsYXRlIDwvYT4nLCBmdW5jdGlvbihvcHRzKSB7XG5cbiAgdGhpcy5hZGQgPSBmdW5jdGlvbigpIHtcbiAgICByaW90LnJvdXRlKCd0ZW1wbGF0ZXMvYWRkJylcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMuZ2V0RGF0YUZyb21TdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXRlbXMgPSB0aGlzLnN0b3JlLmdldEFsbCgpXG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLnVwZGF0ZUZyb21TdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2V0RGF0YUZyb21TdG9yZSgpXG4gICAgdGhpcy51cGRhdGUoKVxuICB9LmJpbmQodGhpcyk7XG5cbiAgdGhpcy5zdGFydE1lZXRpbmcgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaXRlbXMuaW5kZXhPZihldmVudC5pdGVtLml0ZW0pO1xuICAgIHJpb3Qucm91dGUoJ21lZXRpbmcvc3RhcnQvJyArIGluZGV4KTtcbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMuZWRpdE1lZXRpbmcgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaXRlbXMuaW5kZXhPZihldmVudC5pdGVtLml0ZW0pO1xuICAgIHJpb3Qucm91dGUoJ3RlbXBsYXRlcy9lZGl0LycgKyBpbmRleCk7XG4gIH0uYmluZCh0aGlzKTtcblxuICB0aGlzLnJlbW92ZU1lZXRpbmcgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaXRlbXMuaW5kZXhPZihldmVudC5pdGVtLml0ZW0pO1xuICAgIHRpbWVib3hlci5yZW1vdmVUZW1wbGF0ZShpbmRleCk7XG4gIH0uYmluZCh0aGlzKTtcblxuICBmbHV4X3Jpb3Quc3RvcmVNaXhpbih0aGlzLCBvcHRzLnN0b3JlLCB0aGlzLnVwZGF0ZUZyb21TdG9yZSlcblxuICB0aGlzLmdldERhdGFGcm9tU3RvcmUoKVxuXG5cbn0pO1xuIiwidmFyIGtleW1pcnJvciA9IHJlcXVpcmUoJ2tleW1pcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQWN0aW9uVHlwZXM6IGtleW1pcnJvcih7XG4gICAgVEVNUExBVEVfU0FWRTogbnVsbCxcbiAgICBURU1QTEFURV9SRU1PVkU6IG51bGwsXG4gICAgVEVNUExBVEVfVVBEQVRFOiBudWxsLFxuXG4gICAgU0VSVkVSX0ZFVENIX0NPTVBMRVRFOiBudWxsXG4gIH0pXG59O1xuIiwidmFyIHJpb3QgPSByZXF1aXJlKCdyaW90L3Jpb3QnKTtcbnZhciB0aW1lYm94ZXJfdGVtcGxhdGVfc3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvdGltZWJveGVyX3RlbXBsYXRlX3N0b3JlLmpzJyk7XG5cbnJlcXVpcmUoJy4uL2NvbXBvbmVudHMvaW5kZXgudGFnJyk7XG5yZXF1aXJlKCcuLi9jb21wb25lbnRzL3RpbWVib3hlcl90ZW1wbGF0ZS9hZGQudGFnJyk7XG5yZXF1aXJlKCcuLi9jb21wb25lbnRzL3RpbWVib3hlcl90ZW1wbGF0ZS9lZGl0LnRhZycpO1xucmVxdWlyZSgnLi4vY29tcG9uZW50cy90aW1lYm94ZXJfbWVldGluZy9zdGFydC50YWcnKTtcblxuXG5yZXF1aXJlKCcuLi9jb21wb25lbnRzL2NvbnRhY3QudGFnJyk7XG5yZXF1aXJlKCcuLi9jb21wb25lbnRzL2Fib3V0LnRhZycpO1xuXG52YXIgYXBwX3RhZyA9IG51bGw7XG5cbnZhciB1bm1vdW50ID0gZnVuY3Rpb24oKSB7XG4gIGlmIChhcHBfdGFnKSB7XG4gICAgcmV0dXJuIGFwcF90YWcudW5tb3VudCgpO1xuICB9XG59O1xuXG52YXIgbW91bnQgPSBmdW5jdGlvbih0YWcsIG9wdHMpIHtcbiAgdmFyIGFwcF9jb250YWluZXI7XG4gIGFwcF9jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBhcHBfY29udGFpbmVyLmlkID0gJ2FwcC1jb250YWluZXInO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJykuYXBwZW5kQ2hpbGQoYXBwX2NvbnRhaW5lcik7XG4gIHJldHVybiByaW90Lm1vdW50KCcjYXBwLWNvbnRhaW5lcicsIHRhZywgb3B0cylbMF07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgIHVubW91bnQoKTtcbiAgICByZXR1cm4gYXBwX3RhZyA9IG1vdW50KCd0aW1lYm94ZXItaW5kZXgnLCB7XG4gICAgICB0aXRsZTogXCJUZW1wbGF0ZXNcIixcbiAgICAgIHN0b3JlOiB0aW1lYm94ZXJfdGVtcGxhdGVfc3RvcmVcbiAgICB9KTtcbiAgfSxcblxuICB0ZW1wbGF0ZV9hZGQ6IGZ1bmN0aW9uKCkge1xuICAgIHVubW91bnQoKTtcblxuICAgIHJldHVybiBhcHBfdGFnID0gbW91bnQoJ3RpbWVib3hlci10ZW1wbGF0ZS1hZGQnLCB7XG4gICAgICB0aXRsZTogXCJBZGQgVGltZWJveGVyIEV2ZW50IFRlbXBsYXRlXCIsXG4gICAgICBzdG9yZTogdGltZWJveGVyX3RlbXBsYXRlX3N0b3JlXG4gICAgfSk7XG4gIH0sXG5cbiAgdGVtcGxhdGVfZWRpdDogZnVuY3Rpb24oaWQpIHtcbiAgICB1bm1vdW50KCk7XG4gICAgcmV0dXJuIGFwcF90YWcgPSBtb3VudCgndGltZWJveGVyLXRlbXBsYXRlLWVkaXQnLCB7XG4gICAgICB0aXRsZTogXCJFZGl0IFRpbWVib3hlciBFdmVudCBUZW1wbGF0ZVwiLFxuICAgICAgdGVtcGxhdGVJZDogaWQsXG4gICAgICBzdG9yZTogdGltZWJveGVyX3RlbXBsYXRlX3N0b3JlXG4gICAgfSk7XG4gIH0sXG5cbiAgbWVldGluZ19zdGFydDogZnVuY3Rpb24oaWQpIHtcbiAgICB1bm1vdW50KCk7XG4gICAgcmV0dXJuIGFwcF90YWcgPSBtb3VudCgndGltZWJveGVyLW1lZXRpbmctc3RhcnQnLCB7XG4gICAgICB0aXRsZTogXCJTdGFydCBhIE1lZXRpbmdcIixcbiAgICAgIHRlbXBsYXRlSWQ6IGlkLFxuICAgICAgdGVtcGxhdGVfc3RvcmU6IHRpbWVib3hlcl90ZW1wbGF0ZV9zdG9yZVxuICAgIH0pO1xuICB9LFxuXG4gIGFib3V0OiBmdW5jdGlvbigpIHtcbiAgICB1bm1vdW50KCk7XG4gICAgcmV0dXJuIGFwcF90YWcgPSBtb3VudCgndGltZWJveGVyLWFib3V0Jywge1xuICAgICAgdGl0bGU6IFwiQWJvdXQgVXNcIlxuICAgIH0pO1xuICB9LFxuXG4gIGNvbnRhY3Q6IGZ1bmN0aW9uKCkge1xuICAgIHVubW91bnQoKTtcbiAgICByZXR1cm4gYXBwX3RhZyA9IG1vdW50KCd0aW1lYm94ZXItY29udGFjdCcsIHtcbiAgICAgIHRpdGxlOiBcIkNvbnRhY3QgVXNcIlxuICAgIH0pO1xuICB9XG59O1xuIiwidmFyIHJpb3QgPSByZXF1aXJlKCdyaW90L3Jpb3QnKTtcbnZhciBCYXNlUm91dGVyID0gcmVxdWlyZSgnZmx1eC1yaW90JykuQmFzZVJvdXRlcjtcbnZhciB0aW1lYm94ZXJfcHJlc2VudGVyID0gcmVxdWlyZSgnLi4vcHJlc2VudGVycy90aW1lYm94ZXJfcHJlc2VudGVyLmpzJyk7XG5cbkJhc2VSb3V0ZXIucm91dGVzKHRpbWVib3hlcl9wcmVzZW50ZXIuaW5kZXgsXG4gICd0ZW1wbGF0ZXMvYWRkJywgdGltZWJveGVyX3ByZXNlbnRlci50ZW1wbGF0ZV9hZGQsXG4gICd0ZW1wbGF0ZXMvZWRpdC86aWQnLCB0aW1lYm94ZXJfcHJlc2VudGVyLnRlbXBsYXRlX2VkaXQsXG4gICdtZWV0aW5nL3N0YXJ0LzppZCcsIHRpbWVib3hlcl9wcmVzZW50ZXIubWVldGluZ19zdGFydCxcbiAgJ2Fib3V0JywgdGltZWJveGVyX3ByZXNlbnRlci5hYm91dCxcbiAgJ2NvbnRhY3QnLCB0aW1lYm94ZXJfcHJlc2VudGVyLmNvbnRhY3Rcbik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdGFydDogQmFzZVJvdXRlci5zdGFydFxufTtcbiIsInZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG52YXIgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJ2ZsdXgtcmlvdCcpLkRpc3BhdGNoZXI7XG52YXIgQWN0aW9uVHlwZXMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMvdGltZWJveGVyX2NvbnN0YW50cy5qcycpLkFjdGlvblR5cGVzO1xudmFyIGZsdXhfcmlvdCA9IHJlcXVpcmUoJ2ZsdXgtcmlvdCcpO1xudmFyIHNlcnZlclV0aWwgPSByZXF1aXJlKCcuLi91dGlscy9zZXJ2ZXJBcGlVdGlscy5qcycpO1xuXG52YXIgX3RlbXBsYXRlcyA9IFtdO1xuXG52YXIgZ2V0VGVtcGxhdGVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX3RlbXBsYXRlcztcbn07XG52YXIgYWRkVGVtcGxhdGVzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgX3RlbXBsYXRlcy5wdXNoKGRhdGEpO1xufTtcbnZhciBzYXZlVGVtcGxhdGVzID0gZnVuY3Rpb24gKG9iaikge1xuICBfdGVtcGxhdGVzID0gb2JqO1xufTtcbnZhciByZW1vdmVUZW1wbGF0ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICBfdGVtcGxhdGVzLnNwbGljZShpbmRleCwgMSk7XG59O1xudmFyIHVwZGF0ZVRlbXBsYXRlID0gZnVuY3Rpb24gKG9iaikge1xuICBfdGVtcGxhdGVzW29iai5pbmRleF0gPSBvYmoudGFzaztcbn07XG5cblRpbWVib3hlclRlbXBsYXRlU3RvcmUgPSBhc3NpZ24obmV3IGZsdXhfcmlvdC5CYXNlU3RvcmUoKSwge1xuICBnZXRBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0VGVtcGxhdGVzKCk7XG4gIH0sXG4gIHNhdmVBbGw6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuICBnZXRCeUluZGV4OiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gX3RlbXBsYXRlc1tpbmRleF07XG4gIH0sXG4gIGRpc3BhdGNoVG9rZW46IERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICAgIHZhciBhY3Rpb24sIGRhdGEsIGluZGV4LCB0YXNrO1xuICAgIGFjdGlvbiA9IHBheWxvYWQuYWN0aW9uO1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgQWN0aW9uVHlwZXMuU0VSVkVSX0ZFVENIX0NPTVBMRVRFOlxuICAgICAgICBzYXZlVGVtcGxhdGVzKGFjdGlvbi5kYXRhKTtcbiAgICAgICAgVGltZWJveGVyVGVtcGxhdGVTdG9yZS5lbWl0Q2hhbmdlKCk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgQWN0aW9uVHlwZXMuVEVNUExBVEVfU0FWRTpcbiAgICAgICAgYWRkVGVtcGxhdGVzKGFjdGlvbi5kYXRhKTtcbiAgICAgICAgc2VydmVyVXRpbC5zYXZlVGVtcGxhdGUoYWN0aW9uLmRhdGEpO1xuICAgICAgICBUaW1lYm94ZXJUZW1wbGF0ZVN0b3JlLmVtaXRDaGFuZ2UoKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBY3Rpb25UeXBlcy5URU1QTEFURV9VUERBVEU6XG4gICAgICAgIHVwZGF0ZVRlbXBsYXRlKGFjdGlvbi5kYXRhKTtcbiAgICAgICAgc2VydmVyVXRpbC51cGRhdGVUZW1wbGF0ZShhY3Rpb24uZGF0YS50YXNrKTtcbiAgICAgICAgVGltZWJveGVyVGVtcGxhdGVTdG9yZS5lbWl0Q2hhbmdlKCk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgQWN0aW9uVHlwZXMuVEVNUExBVEVfUkVNT1ZFOlxuICAgICAgICBzZXJ2ZXJVdGlsLmRlc3Ryb3lUZW1wbGF0ZShfdGVtcGxhdGVzW2FjdGlvbi5kYXRhXSk7XG4gICAgICAgIHJlbW92ZVRlbXBsYXRlKGFjdGlvbi5kYXRhKTtcbiAgICAgICAgVGltZWJveGVyVGVtcGxhdGVTdG9yZS5lbWl0Q2hhbmdlKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0pXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUaW1lYm94ZXJUZW1wbGF0ZVN0b3JlO1xuIiwidmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2UnKS5QYXJzZTtcbnZhciBUaW1lQm94ZXIgPSByZXF1aXJlKCcuLi9hY3Rpb25zL3RpbWVib3hlci5qcycpO1xudmFyIHN0b3JhZ2UgPSByZXF1aXJlKCcuL2xvY2FsU3RvcmFnZS5qcycpO1xuXG5mdW5jdGlvbiBTZXJ2ZXJBcGlVdGlscygpIHtcbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgUGFyc2UuaW5pdGlhbGl6ZShcIlBFZFZUcEVuSHhoandYSE1qa1N0U2xBTVU3NXhxN1RLeE11dDYwQkRcIixcbiAgICAgIFwidmhieDl3VFFNd00wODIxTmd6TXMweHEyU3hITXpCYllkWk1aV2cxeFwiKTtcbiAgICB0aGlzLmJveGVyQ2xhc3MgPSBQYXJzZS5PYmplY3QuZXh0ZW5kKFwiSGFja2RheTJcIik7XG4gICAgdGhpcy5xdWVyeSA9IG5ldyBQYXJzZS5RdWVyeSh0aGlzLmJveGVyQ2xhc3MpO1xuICAgIHRoaXMuYm94ZXJPYmogPSBuZXcgdGhpcy5ib3hlckNsYXNzKCk7XG4gIH07XG4gIHRoaXMuZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYm94ZXJPYmouZmV0Y2goe1xuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICBUaW1lQm94ZXIuc2VydmVyRGF0YVJlY2VpdmVkKHJlc3VsdHMudG9KU09OKCkucmVzdWx0cyk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGFsZXJ0KFwiRXJyb3I6IFwiICsgZXJyb3IuY29kZSArIFwiIFwiICsgZXJyb3IubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIHRoaXMuc2F2ZVRlbXBsYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB0aGlzLmJveGVyT2JqLnNhdmUoZGF0YSk7XG4gIH07XG4gIHRoaXMudXBkYXRlVGVtcGxhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRoaXMucXVlcnkuZ2V0KGRhdGEub2JqZWN0SWQsIHtcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnNldCgnYWdlbmRhJywgZGF0YS5hZ2VuZGEpO1xuICAgICAgICByZXN1bHQuc2V0KCduYW1lJywgZGF0YS5uYW1lKTtcbiAgICAgICAgcmVzdWx0LnNhdmUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgdGhpcy5kZXN0cm95VGVtcGxhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRoaXMucXVlcnkuZ2V0KGRhdGEub2JqZWN0SWQsIHtcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LmRlc3Ryb3koe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZXN0cm95ZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pXG4gIH07XG4gIHRoaXMuaW5pdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2VydmVyQXBpVXRpbHMoKTtcbiIsImZ1bmN0aW9uIFN0b3JhZ2UgKCkge1xuXG4gIHRoaXMuZGF0YVN0b3JlID0gbnVsbDtcblxuICBmdW5jdGlvbiBpbml0ICgpIHtcbiAgICBpZiAoIWxvY2FsU3RvcmFnZS5zcHJpbnRUYXNrKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc3ByaW50VGFzayA9ICdbXSc7XG4gICAgfVxuICAgIHRoaXMuZGF0YVN0b3JlID0gZ2V0RnJvbUxvY2FsU3RvcmFnZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV0cmlldmUgKCkge1xuICAgIHJldHVybiBnZXRGcm9tTG9jYWxTdG9yYWdlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBzYXZlIChkYXRhKSB7XG4gICAgc2F2ZVRvTG9jYWxTdG9yYWdlKGRhdGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlIChpbmRleCkge1xuICAgIHRoaXMuZGF0YVN0b3JlW2luZGV4XSA9IHt9O1xuICAgIHNhdmVUb0xvY2FsU3RvcmFnZSh0aGlzLmRhdGFTdG9yZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzYXZlVG9Mb2NhbFN0b3JhZ2UgKGRhdGEpIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc3ByaW50VGFzayA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RnJvbUxvY2FsU3RvcmFnZSAoKSB7XG4gICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5zcHJpbnRUYXNrKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0ICgpIHtcbiAgICBkZWxldGUgbG9jYWxTdG9yYWdlLnNwcmludFRhc2s7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICB0aGlzLmluaXQgPSBpbml0O1xuICB0aGlzLnJldHJpZXZlID0gcmV0cmlldmU7XG4gIHRoaXMuc2F2ZSA9IHNhdmU7XG4gIHRoaXMucmVtb3ZlID0gcmVtb3ZlO1xuICB0aGlzLnJlc2V0ID0gcmVzZXQ7XG5cbiAgdGhpcy5nZXRGcm9tTG9jYWxTdG9yYWdlID0gZ2V0RnJvbUxvY2FsU3RvcmFnZTtcbiAgdGhpcy5zYXZlVG9Mb2NhbFN0b3JhZ2UgPSBzYXZlVG9Mb2NhbFN0b3JhZ2U7XG59XG52YXIgc3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XG5zdG9yYWdlLmluaXQoKTtcbm1vZHVsZS5leHBvcnRzID0gc3RvcmFnZTtcbiIsImZ1bmN0aW9uIFRpbWVyKG9wdHMpIHtcbiAgdmFyIHRpbWUgPSBvcHRzLnRpbWU7XG4gIHZhciBlbmRDYiA9IG9wdHMuZW5kQ2IgfHwgZnVuY3Rpb24gKCkge307XG4gIHZhciBwdWxzZUNiID0gb3B0cy5wdWxzZUNiIHx8IGZ1bmN0aW9uICgpIHt9O1xuICB2YXIgdGltZU91dElkID0gbnVsbDtcblxuICBmdW5jdGlvbiB1cGRhdGVUaW1lKCkge1xuXG4gICAgaWYgKHRpbWUgPiAwKSB7XG4gICAgICB0aW1lID0gdGltZSAtIDE7XG4gICAgICBwdWxzZUNiKHRpbWUpO1xuICAgICAgdGltZU91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmRDYigpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuc2V0VGltZSA9IGZ1bmN0aW9uIChuZXdUaW1lKSB7XG4gICAgdGltZSA9IHBhcnNlSW50KG5ld1RpbWUsIDEwKTtcbiAgICBwdWxzZUNiKHRpbWUpO1xuICB9O1xuXG4gIHRoaXMuZ2V0VGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGltZTtcbiAgfTtcblxuICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVPdXRJZCk7XG4gIH07XG5cbiAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICB1cGRhdGVUaW1lKCk7XG4gIH07XG5cbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aW1lID0gb3B0cy50aW1lO1xuICAgIGNsZWFyVGltZW91dCh0aW1lT3V0SWQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRpbWVyO1xuIl19
